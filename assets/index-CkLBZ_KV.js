var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var _a, _b, _c;
function _mergeNamespaces(n2, m2) {
  for (var i = 0; i < m2.length; i++) {
    const e2 = m2[i];
    if (typeof e2 !== "string" && !Array.isArray(e2)) {
      for (const k2 in e2) {
        if (k2 !== "default" && !(k2 in n2)) {
          const d2 = Object.getOwnPropertyDescriptor(e2, k2);
          if (d2) {
            Object.defineProperty(n2, k2, d2.get ? d2 : {
              enumerable: true,
              get: () => e2[k2]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
}
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node2 of mutation.addedNodes) {
        if (node2.tagName === "LINK" && node2.rel === "modulepreload")
          processPreload(node2);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity)
      fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy)
      fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l$2 = Symbol.for("react.element"), n$2 = Symbol.for("react.portal"), p$3 = Symbol.for("react.fragment"), q$2 = Symbol.for("react.strict_mode"), r$1 = Symbol.for("react.profiler"), t$1 = Symbol.for("react.provider"), u = Symbol.for("react.context"), v$2 = Symbol.for("react.forward_ref"), w$2 = Symbol.for("react.suspense"), x$1 = Symbol.for("react.memo"), y$1 = Symbol.for("react.lazy"), z$2 = Symbol.iterator;
function A$2(a) {
  if (null === a || "object" !== typeof a)
    return null;
  a = z$2 && a[z$2] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var B$1 = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, C$1 = Object.assign, D$1 = {};
function E$1(a, b2, e2) {
  this.props = a;
  this.context = b2;
  this.refs = D$1;
  this.updater = e2 || B$1;
}
E$1.prototype.isReactComponent = {};
E$1.prototype.setState = function(a, b2) {
  if ("object" !== typeof a && "function" !== typeof a && null != a)
    throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, a, b2, "setState");
};
E$1.prototype.forceUpdate = function(a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function F() {
}
F.prototype = E$1.prototype;
function G$1(a, b2, e2) {
  this.props = a;
  this.context = b2;
  this.refs = D$1;
  this.updater = e2 || B$1;
}
var H$1 = G$1.prototype = new F();
H$1.constructor = G$1;
C$1(H$1, E$1.prototype);
H$1.isPureReactComponent = true;
var I$1 = Array.isArray, J = Object.prototype.hasOwnProperty, K$1 = { current: null }, L$1 = { key: true, ref: true, __self: true, __source: true };
function M$1(a, b2, e2) {
  var d2, c2 = {}, k2 = null, h3 = null;
  if (null != b2)
    for (d2 in void 0 !== b2.ref && (h3 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
      J.call(b2, d2) && !L$1.hasOwnProperty(d2) && (c2[d2] = b2[d2]);
  var g2 = arguments.length - 2;
  if (1 === g2)
    c2.children = e2;
  else if (1 < g2) {
    for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
      f2[m2] = arguments[m2 + 2];
    c2.children = f2;
  }
  if (a && a.defaultProps)
    for (d2 in g2 = a.defaultProps, g2)
      void 0 === c2[d2] && (c2[d2] = g2[d2]);
  return { $$typeof: l$2, type: a, key: k2, ref: h3, props: c2, _owner: K$1.current };
}
function N$1(a, b2) {
  return { $$typeof: l$2, type: a.type, key: b2, ref: a.ref, props: a.props, _owner: a._owner };
}
function O$1(a) {
  return "object" === typeof a && null !== a && a.$$typeof === l$2;
}
function escape(a) {
  var b2 = { "=": "=0", ":": "=2" };
  return "$" + a.replace(/[=:]/g, function(a2) {
    return b2[a2];
  });
}
var P$1 = /\/+/g;
function Q$1(a, b2) {
  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b2.toString(36);
}
function R$1(a, b2, e2, d2, c2) {
  var k2 = typeof a;
  if ("undefined" === k2 || "boolean" === k2)
    a = null;
  var h3 = false;
  if (null === a)
    h3 = true;
  else
    switch (k2) {
      case "string":
      case "number":
        h3 = true;
        break;
      case "object":
        switch (a.$$typeof) {
          case l$2:
          case n$2:
            h3 = true;
        }
    }
  if (h3)
    return h3 = a, c2 = c2(h3), a = "" === d2 ? "." + Q$1(h3, 0) : d2, I$1(c2) ? (e2 = "", null != a && (e2 = a.replace(P$1, "$&/") + "/"), R$1(c2, b2, e2, "", function(a2) {
      return a2;
    })) : null != c2 && (O$1(c2) && (c2 = N$1(c2, e2 + (!c2.key || h3 && h3.key === c2.key ? "" : ("" + c2.key).replace(P$1, "$&/") + "/") + a)), b2.push(c2)), 1;
  h3 = 0;
  d2 = "" === d2 ? "." : d2 + ":";
  if (I$1(a))
    for (var g2 = 0; g2 < a.length; g2++) {
      k2 = a[g2];
      var f2 = d2 + Q$1(k2, g2);
      h3 += R$1(k2, b2, e2, f2, c2);
    }
  else if (f2 = A$2(a), "function" === typeof f2)
    for (a = f2.call(a), g2 = 0; !(k2 = a.next()).done; )
      k2 = k2.value, f2 = d2 + Q$1(k2, g2++), h3 += R$1(k2, b2, e2, f2, c2);
  else if ("object" === k2)
    throw b2 = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
  return h3;
}
function S$1(a, b2, e2) {
  if (null == a)
    return a;
  var d2 = [], c2 = 0;
  R$1(a, d2, "", "", function(a2) {
    return b2.call(e2, a2, c2++);
  });
  return d2;
}
function T$1(a) {
  if (-1 === a._status) {
    var b2 = a._result;
    b2 = b2();
    b2.then(function(b3) {
      if (0 === a._status || -1 === a._status)
        a._status = 1, a._result = b3;
    }, function(b3) {
      if (0 === a._status || -1 === a._status)
        a._status = 2, a._result = b3;
    });
    -1 === a._status && (a._status = 0, a._result = b2);
  }
  if (1 === a._status)
    return a._result.default;
  throw a._result;
}
var U$1 = { current: null }, V$1 = { transition: null }, W$1 = { ReactCurrentDispatcher: U$1, ReactCurrentBatchConfig: V$1, ReactCurrentOwner: K$1 };
react_production_min.Children = { map: S$1, forEach: function(a, b2, e2) {
  S$1(a, function() {
    b2.apply(this, arguments);
  }, e2);
}, count: function(a) {
  var b2 = 0;
  S$1(a, function() {
    b2++;
  });
  return b2;
}, toArray: function(a) {
  return S$1(a, function(a2) {
    return a2;
  }) || [];
}, only: function(a) {
  if (!O$1(a))
    throw Error("React.Children.only expected to receive a single React element child.");
  return a;
} };
react_production_min.Component = E$1;
react_production_min.Fragment = p$3;
react_production_min.Profiler = r$1;
react_production_min.PureComponent = G$1;
react_production_min.StrictMode = q$2;
react_production_min.Suspense = w$2;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
react_production_min.cloneElement = function(a, b2, e2) {
  if (null === a || void 0 === a)
    throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
  var d2 = C$1({}, a.props), c2 = a.key, k2 = a.ref, h3 = a._owner;
  if (null != b2) {
    void 0 !== b2.ref && (k2 = b2.ref, h3 = K$1.current);
    void 0 !== b2.key && (c2 = "" + b2.key);
    if (a.type && a.type.defaultProps)
      var g2 = a.type.defaultProps;
    for (f2 in b2)
      J.call(b2, f2) && !L$1.hasOwnProperty(f2) && (d2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
  }
  var f2 = arguments.length - 2;
  if (1 === f2)
    d2.children = e2;
  else if (1 < f2) {
    g2 = Array(f2);
    for (var m2 = 0; m2 < f2; m2++)
      g2[m2] = arguments[m2 + 2];
    d2.children = g2;
  }
  return { $$typeof: l$2, type: a.type, key: c2, ref: k2, props: d2, _owner: h3 };
};
react_production_min.createContext = function(a) {
  a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
  a.Provider = { $$typeof: t$1, _context: a };
  return a.Consumer = a;
};
react_production_min.createElement = M$1;
react_production_min.createFactory = function(a) {
  var b2 = M$1.bind(null, a);
  b2.type = a;
  return b2;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a) {
  return { $$typeof: v$2, render: a };
};
react_production_min.isValidElement = O$1;
react_production_min.lazy = function(a) {
  return { $$typeof: y$1, _payload: { _status: -1, _result: a }, _init: T$1 };
};
react_production_min.memo = function(a, b2) {
  return { $$typeof: x$1, type: a, compare: void 0 === b2 ? null : b2 };
};
react_production_min.startTransition = function(a) {
  var b2 = V$1.transition;
  V$1.transition = {};
  try {
    a();
  } finally {
    V$1.transition = b2;
  }
};
react_production_min.unstable_act = function() {
  throw Error("act(...) is not supported in production builds of React.");
};
react_production_min.useCallback = function(a, b2) {
  return U$1.current.useCallback(a, b2);
};
react_production_min.useContext = function(a) {
  return U$1.current.useContext(a);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useDeferredValue = function(a) {
  return U$1.current.useDeferredValue(a);
};
react_production_min.useEffect = function(a, b2) {
  return U$1.current.useEffect(a, b2);
};
react_production_min.useId = function() {
  return U$1.current.useId();
};
react_production_min.useImperativeHandle = function(a, b2, e2) {
  return U$1.current.useImperativeHandle(a, b2, e2);
};
react_production_min.useInsertionEffect = function(a, b2) {
  return U$1.current.useInsertionEffect(a, b2);
};
react_production_min.useLayoutEffect = function(a, b2) {
  return U$1.current.useLayoutEffect(a, b2);
};
react_production_min.useMemo = function(a, b2) {
  return U$1.current.useMemo(a, b2);
};
react_production_min.useReducer = function(a, b2, e2) {
  return U$1.current.useReducer(a, b2, e2);
};
react_production_min.useRef = function(a) {
  return U$1.current.useRef(a);
};
react_production_min.useState = function(a) {
  return U$1.current.useState(a);
};
react_production_min.useSyncExternalStore = function(a, b2, e2) {
  return U$1.current.useSyncExternalStore(a, b2, e2);
};
react_production_min.useTransition = function() {
  return U$1.current.useTransition();
};
react_production_min.version = "18.2.0";
{
  react.exports = react_production_min;
}
var reactExports = react.exports;
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
const React$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: React
}, [reactExports]);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f$1 = reactExports, k$1 = Symbol.for("react.element"), l$1 = Symbol.for("react.fragment"), m$2 = Object.prototype.hasOwnProperty, n$1 = f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$2 = { key: true, ref: true, __self: true, __source: true };
function q$1(c2, a, g2) {
  var b2, d2 = {}, e2 = null, h3 = null;
  void 0 !== g2 && (e2 = "" + g2);
  void 0 !== a.key && (e2 = "" + a.key);
  void 0 !== a.ref && (h3 = a.ref);
  for (b2 in a)
    m$2.call(a, b2) && !p$2.hasOwnProperty(b2) && (d2[b2] = a[b2]);
  if (c2 && c2.defaultProps)
    for (b2 in a = c2.defaultProps, a)
      void 0 === d2[b2] && (d2[b2] = a[b2]);
  return { $$typeof: k$1, type: c2, key: e2, ref: h3, props: d2, _owner: n$1.current };
}
reactJsxRuntime_production_min.Fragment = l$1;
reactJsxRuntime_production_min.jsx = q$1;
reactJsxRuntime_production_min.jsxs = q$1;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
var jsxRuntimeExports = jsxRuntime.exports;
var client = {};
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports) {
  function f2(a, b2) {
    var c2 = a.length;
    a.push(b2);
    a:
      for (; 0 < c2; ) {
        var d2 = c2 - 1 >>> 1, e2 = a[d2];
        if (0 < g2(e2, b2))
          a[d2] = b2, a[c2] = e2, c2 = d2;
        else
          break a;
      }
  }
  function h3(a) {
    return 0 === a.length ? null : a[0];
  }
  function k2(a) {
    if (0 === a.length)
      return null;
    var b2 = a[0], c2 = a.pop();
    if (c2 !== b2) {
      a[0] = c2;
      a:
        for (var d2 = 0, e2 = a.length, w2 = e2 >>> 1; d2 < w2; ) {
          var m2 = 2 * (d2 + 1) - 1, C2 = a[m2], n2 = m2 + 1, x2 = a[n2];
          if (0 > g2(C2, c2))
            n2 < e2 && 0 > g2(x2, C2) ? (a[d2] = x2, a[n2] = c2, d2 = n2) : (a[d2] = C2, a[m2] = c2, d2 = m2);
          else if (n2 < e2 && 0 > g2(x2, c2))
            a[d2] = x2, a[n2] = c2, d2 = n2;
          else
            break a;
        }
    }
    return b2;
  }
  function g2(a, b2) {
    var c2 = a.sortIndex - b2.sortIndex;
    return 0 !== c2 ? c2 : a.id - b2.id;
  }
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var l2 = performance;
    exports.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q2 = p2.now();
    exports.unstable_now = function() {
      return p2.now() - q2;
    };
  }
  var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
  "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function G2(a) {
    for (var b2 = h3(t2); null !== b2; ) {
      if (null === b2.callback)
        k2(t2);
      else if (b2.startTime <= a)
        k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
      else
        break;
      b2 = h3(t2);
    }
  }
  function H2(a) {
    B2 = false;
    G2(a);
    if (!A2)
      if (null !== h3(r2))
        A2 = true, I2(J2);
      else {
        var b2 = h3(t2);
        null !== b2 && K2(H2, b2.startTime - a);
      }
  }
  function J2(a, b2) {
    A2 = false;
    B2 && (B2 = false, E2(L2), L2 = -1);
    z2 = true;
    var c2 = y2;
    try {
      G2(b2);
      for (v2 = h3(r2); null !== v2 && (!(v2.expirationTime > b2) || a && !M2()); ) {
        var d2 = v2.callback;
        if ("function" === typeof d2) {
          v2.callback = null;
          y2 = v2.priorityLevel;
          var e2 = d2(v2.expirationTime <= b2);
          b2 = exports.unstable_now();
          "function" === typeof e2 ? v2.callback = e2 : v2 === h3(r2) && k2(r2);
          G2(b2);
        } else
          k2(r2);
        v2 = h3(r2);
      }
      if (null !== v2)
        var w2 = true;
      else {
        var m2 = h3(t2);
        null !== m2 && K2(H2, m2.startTime - b2);
        w2 = false;
      }
      return w2;
    } finally {
      v2 = null, y2 = c2, z2 = false;
    }
  }
  var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
  function M2() {
    return exports.unstable_now() - Q2 < P2 ? false : true;
  }
  function R2() {
    if (null !== O2) {
      var a = exports.unstable_now();
      Q2 = a;
      var b2 = true;
      try {
        b2 = O2(true, a);
      } finally {
        b2 ? S2() : (N2 = false, O2 = null);
      }
    } else
      N2 = false;
  }
  var S2;
  if ("function" === typeof F2)
    S2 = function() {
      F2(R2);
    };
  else if ("undefined" !== typeof MessageChannel) {
    var T2 = new MessageChannel(), U2 = T2.port2;
    T2.port1.onmessage = R2;
    S2 = function() {
      U2.postMessage(null);
    };
  } else
    S2 = function() {
      D2(R2, 0);
    };
  function I2(a) {
    O2 = a;
    N2 || (N2 = true, S2());
  }
  function K2(a, b2) {
    L2 = D2(function() {
      a(exports.unstable_now());
    }, b2);
  }
  exports.unstable_IdlePriority = 5;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_LowPriority = 4;
  exports.unstable_NormalPriority = 3;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_cancelCallback = function(a) {
    a.callback = null;
  };
  exports.unstable_continueExecution = function() {
    A2 || z2 || (A2 = true, I2(J2));
  };
  exports.unstable_forceFrameRate = function(a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a ? Math.floor(1e3 / a) : 5;
  };
  exports.unstable_getCurrentPriorityLevel = function() {
    return y2;
  };
  exports.unstable_getFirstCallbackNode = function() {
    return h3(r2);
  };
  exports.unstable_next = function(a) {
    switch (y2) {
      case 1:
      case 2:
      case 3:
        var b2 = 3;
        break;
      default:
        b2 = y2;
    }
    var c2 = y2;
    y2 = b2;
    try {
      return a();
    } finally {
      y2 = c2;
    }
  };
  exports.unstable_pauseExecution = function() {
  };
  exports.unstable_requestPaint = function() {
  };
  exports.unstable_runWithPriority = function(a, b2) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a = 3;
    }
    var c2 = y2;
    y2 = a;
    try {
      return b2();
    } finally {
      y2 = c2;
    }
  };
  exports.unstable_scheduleCallback = function(a, b2, c2) {
    var d2 = exports.unstable_now();
    "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
    switch (a) {
      case 1:
        var e2 = -1;
        break;
      case 2:
        e2 = 250;
        break;
      case 5:
        e2 = 1073741823;
        break;
      case 4:
        e2 = 1e4;
        break;
      default:
        e2 = 5e3;
    }
    e2 = c2 + e2;
    a = { id: u2++, callback: b2, priorityLevel: a, startTime: c2, expirationTime: e2, sortIndex: -1 };
    c2 > d2 ? (a.sortIndex = c2, f2(t2, a), null === h3(r2) && a === h3(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c2 - d2))) : (a.sortIndex = e2, f2(r2, a), A2 || z2 || (A2 = true, I2(J2)));
    return a;
  };
  exports.unstable_shouldYield = M2;
  exports.unstable_wrapCallback = function(a) {
    var b2 = y2;
    return function() {
      var c2 = y2;
      y2 = b2;
      try {
        return a.apply(this, arguments);
      } finally {
        y2 = c2;
      }
    };
  };
})(scheduler_production_min);
{
  scheduler.exports = scheduler_production_min;
}
var schedulerExports = scheduler.exports;
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = reactExports, ca = schedulerExports;
function p$1(a) {
  for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c2 = 1; c2 < arguments.length; c2++)
    b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
  return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var da = /* @__PURE__ */ new Set(), ea = {};
function fa(a, b2) {
  ha(a, b2);
  ha(a + "Capture", b2);
}
function ha(a, b2) {
  ea[a] = b2;
  for (a = 0; a < b2.length; a++)
    da.add(b2[a]);
}
var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
function oa(a) {
  if (ja.call(ma, a))
    return true;
  if (ja.call(la, a))
    return false;
  if (ka.test(a))
    return ma[a] = true;
  la[a] = true;
  return false;
}
function pa(a, b2, c2, d2) {
  if (null !== c2 && 0 === c2.type)
    return false;
  switch (typeof b2) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d2)
        return false;
      if (null !== c2)
        return !c2.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;
    default:
      return false;
  }
}
function qa(a, b2, c2, d2) {
  if (null === b2 || "undefined" === typeof b2 || pa(a, b2, c2, d2))
    return true;
  if (d2)
    return false;
  if (null !== c2)
    switch (c2.type) {
      case 3:
        return !b2;
      case 4:
        return false === b2;
      case 5:
        return isNaN(b2);
      case 6:
        return isNaN(b2) || 1 > b2;
    }
  return false;
}
function v$1(a, b2, c2, d2, e2, f2, g2) {
  this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
  this.attributeName = d2;
  this.attributeNamespace = e2;
  this.mustUseProperty = c2;
  this.propertyName = a;
  this.type = b2;
  this.sanitizeURL = f2;
  this.removeEmptyString = g2;
}
var z$1 = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
  z$1[a] = new v$1(a, 0, false, a, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
  var b2 = a[0];
  z$1[b2] = new v$1(b2, 1, false, a[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
  z$1[a] = new v$1(a, 2, false, a.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
  z$1[a] = new v$1(a, 2, false, a, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
  z$1[a] = new v$1(a, 3, false, a.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a) {
  z$1[a] = new v$1(a, 3, true, a, null, false, false);
});
["capture", "download"].forEach(function(a) {
  z$1[a] = new v$1(a, 4, false, a, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a) {
  z$1[a] = new v$1(a, 6, false, a, null, false, false);
});
["rowSpan", "start"].forEach(function(a) {
  z$1[a] = new v$1(a, 5, false, a.toLowerCase(), null, false, false);
});
var ra = /[\-:]([a-z])/g;
function sa(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
  var b2 = a.replace(
    ra,
    sa
  );
  z$1[b2] = new v$1(b2, 1, false, a, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
  var b2 = a.replace(ra, sa);
  z$1[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
  var b2 = a.replace(ra, sa);
  z$1[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a) {
  z$1[a] = new v$1(a, 1, false, a.toLowerCase(), null, false, false);
});
z$1.xlinkHref = new v$1("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a) {
  z$1[a] = new v$1(a, 1, false, a.toLowerCase(), null, true, true);
});
function ta(a, b2, c2, d2) {
  var e2 = z$1.hasOwnProperty(b2) ? z$1[b2] : null;
  if (null !== e2 ? 0 !== e2.type : d2 || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1])
    qa(b2, c2, e2, d2) && (c2 = null), d2 || null === e2 ? oa(b2) && (null === c2 ? a.removeAttribute(b2) : a.setAttribute(b2, "" + c2)) : e2.mustUseProperty ? a[e2.propertyName] = null === c2 ? 3 === e2.type ? false : "" : c2 : (b2 = e2.attributeName, d2 = e2.attributeNamespace, null === c2 ? a.removeAttribute(b2) : (e2 = e2.type, c2 = 3 === e2 || 4 === e2 && true === c2 ? "" : "" + c2, d2 ? a.setAttributeNS(d2, b2, c2) : a.setAttribute(b2, c2)));
}
var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
var Ia = Symbol.for("react.offscreen");
var Ja = Symbol.iterator;
function Ka(a) {
  if (null === a || "object" !== typeof a)
    return null;
  a = Ja && a[Ja] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var A$1 = Object.assign, La;
function Ma(a) {
  if (void 0 === La)
    try {
      throw Error();
    } catch (c2) {
      var b2 = c2.stack.trim().match(/\n( *(at )?)/);
      La = b2 && b2[1] || "";
    }
  return "\n" + La + a;
}
var Na = false;
function Oa(a, b2) {
  if (!a || Na)
    return "";
  Na = true;
  var c2 = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b2)
      if (b2 = function() {
        throw Error();
      }, Object.defineProperty(b2.prototype, "props", { set: function() {
        throw Error();
      } }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b2, []);
        } catch (l2) {
          var d2 = l2;
        }
        Reflect.construct(a, [], b2);
      } else {
        try {
          b2.call();
        } catch (l2) {
          d2 = l2;
        }
        a.call(b2.prototype);
      }
    else {
      try {
        throw Error();
      } catch (l2) {
        d2 = l2;
      }
      a();
    }
  } catch (l2) {
    if (l2 && d2 && "string" === typeof l2.stack) {
      for (var e2 = l2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e2.length - 1, h3 = f2.length - 1; 1 <= g2 && 0 <= h3 && e2[g2] !== f2[h3]; )
        h3--;
      for (; 1 <= g2 && 0 <= h3; g2--, h3--)
        if (e2[g2] !== f2[h3]) {
          if (1 !== g2 || 1 !== h3) {
            do
              if (g2--, h3--, 0 > h3 || e2[g2] !== f2[h3]) {
                var k2 = "\n" + e2[g2].replace(" at new ", " at ");
                a.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a.displayName));
                return k2;
              }
            while (1 <= g2 && 0 <= h3);
          }
          break;
        }
    }
  } finally {
    Na = false, Error.prepareStackTrace = c2;
  }
  return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
}
function Pa(a) {
  switch (a.tag) {
    case 5:
      return Ma(a.type);
    case 16:
      return Ma("Lazy");
    case 13:
      return Ma("Suspense");
    case 19:
      return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a = Oa(a.type, false), a;
    case 11:
      return a = Oa(a.type.render, false), a;
    case 1:
      return a = Oa(a.type, true), a;
    default:
      return "";
  }
}
function Qa(a) {
  if (null == a)
    return null;
  if ("function" === typeof a)
    return a.displayName || a.name || null;
  if ("string" === typeof a)
    return a;
  switch (a) {
    case ya:
      return "Fragment";
    case wa:
      return "Portal";
    case Aa:
      return "Profiler";
    case za:
      return "StrictMode";
    case Ea:
      return "Suspense";
    case Fa:
      return "SuspenseList";
  }
  if ("object" === typeof a)
    switch (a.$$typeof) {
      case Ca:
        return (a.displayName || "Context") + ".Consumer";
      case Ba:
        return (a._context.displayName || "Context") + ".Provider";
      case Da:
        var b2 = a.render;
        a = a.displayName;
        a || (a = b2.displayName || b2.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        return a;
      case Ga:
        return b2 = a.displayName || null, null !== b2 ? b2 : Qa(a.type) || "Memo";
      case Ha:
        b2 = a._payload;
        a = a._init;
        try {
          return Qa(a(b2));
        } catch (c2) {
        }
    }
  return null;
}
function Ra(a) {
  var b2 = a.type;
  switch (a.tag) {
    case 24:
      return "Cache";
    case 9:
      return (b2.displayName || "Context") + ".Consumer";
    case 10:
      return (b2._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return a = b2.render, a = a.displayName || a.name || "", b2.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return b2;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return Qa(b2);
    case 8:
      return b2 === za ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if ("function" === typeof b2)
        return b2.displayName || b2.name || null;
      if ("string" === typeof b2)
        return b2;
  }
  return null;
}
function Sa(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return a;
    case "object":
      return a;
    default:
      return "";
  }
}
function Ta(a) {
  var b2 = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
}
function Ua(a) {
  var b2 = Ta(a) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a.constructor.prototype, b2), d2 = "" + a[b2];
  if (!a.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
    var e2 = c2.get, f2 = c2.set;
    Object.defineProperty(a, b2, { configurable: true, get: function() {
      return e2.call(this);
    }, set: function(a2) {
      d2 = "" + a2;
      f2.call(this, a2);
    } });
    Object.defineProperty(a, b2, { enumerable: c2.enumerable });
    return { getValue: function() {
      return d2;
    }, setValue: function(a2) {
      d2 = "" + a2;
    }, stopTracking: function() {
      a._valueTracker = null;
      delete a[b2];
    } };
  }
}
function Va(a) {
  a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
  if (!a)
    return false;
  var b2 = a._valueTracker;
  if (!b2)
    return true;
  var c2 = b2.getValue();
  var d2 = "";
  a && (d2 = Ta(a) ? a.checked ? "true" : "false" : a.value);
  a = d2;
  return a !== c2 ? (b2.setValue(a), true) : false;
}
function Xa(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a)
    return null;
  try {
    return a.activeElement || a.body;
  } catch (b2) {
    return a.body;
  }
}
function Ya(a, b2) {
  var c2 = b2.checked;
  return A$1({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a._wrapperState.initialChecked });
}
function Za(a, b2) {
  var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
  c2 = Sa(null != b2.value ? b2.value : c2);
  a._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
}
function ab(a, b2) {
  b2 = b2.checked;
  null != b2 && ta(a, "checked", b2, false);
}
function bb(a, b2) {
  ab(a, b2);
  var c2 = Sa(b2.value), d2 = b2.type;
  if (null != c2)
    if ("number" === d2) {
      if (0 === c2 && "" === a.value || a.value != c2)
        a.value = "" + c2;
    } else
      a.value !== "" + c2 && (a.value = "" + c2);
  else if ("submit" === d2 || "reset" === d2) {
    a.removeAttribute("value");
    return;
  }
  b2.hasOwnProperty("value") ? cb(a, b2.type, c2) : b2.hasOwnProperty("defaultValue") && cb(a, b2.type, Sa(b2.defaultValue));
  null == b2.checked && null != b2.defaultChecked && (a.defaultChecked = !!b2.defaultChecked);
}
function db(a, b2, c2) {
  if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
    var d2 = b2.type;
    if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value))
      return;
    b2 = "" + a._wrapperState.initialValue;
    c2 || b2 === a.value || (a.value = b2);
    a.defaultValue = b2;
  }
  c2 = a.name;
  "" !== c2 && (a.name = "");
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c2 && (a.name = c2);
}
function cb(a, b2, c2) {
  if ("number" !== b2 || Xa(a.ownerDocument) !== a)
    null == c2 ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c2 && (a.defaultValue = "" + c2);
}
var eb = Array.isArray;
function fb(a, b2, c2, d2) {
  a = a.options;
  if (b2) {
    b2 = {};
    for (var e2 = 0; e2 < c2.length; e2++)
      b2["$" + c2[e2]] = true;
    for (c2 = 0; c2 < a.length; c2++)
      e2 = b2.hasOwnProperty("$" + a[c2].value), a[c2].selected !== e2 && (a[c2].selected = e2), e2 && d2 && (a[c2].defaultSelected = true);
  } else {
    c2 = "" + Sa(c2);
    b2 = null;
    for (e2 = 0; e2 < a.length; e2++) {
      if (a[e2].value === c2) {
        a[e2].selected = true;
        d2 && (a[e2].defaultSelected = true);
        return;
      }
      null !== b2 || a[e2].disabled || (b2 = a[e2]);
    }
    null !== b2 && (b2.selected = true);
  }
}
function gb(a, b2) {
  if (null != b2.dangerouslySetInnerHTML)
    throw Error(p$1(91));
  return A$1({}, b2, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
}
function hb(a, b2) {
  var c2 = b2.value;
  if (null == c2) {
    c2 = b2.children;
    b2 = b2.defaultValue;
    if (null != c2) {
      if (null != b2)
        throw Error(p$1(92));
      if (eb(c2)) {
        if (1 < c2.length)
          throw Error(p$1(93));
        c2 = c2[0];
      }
      b2 = c2;
    }
    null == b2 && (b2 = "");
    c2 = b2;
  }
  a._wrapperState = { initialValue: Sa(c2) };
}
function ib(a, b2) {
  var c2 = Sa(b2.value), d2 = Sa(b2.defaultValue);
  null != c2 && (c2 = "" + c2, c2 !== a.value && (a.value = c2), null == b2.defaultValue && a.defaultValue !== c2 && (a.defaultValue = c2));
  null != d2 && (a.defaultValue = "" + d2);
}
function jb(a) {
  var b2 = a.textContent;
  b2 === a._wrapperState.initialValue && "" !== b2 && null !== b2 && (a.value = b2);
}
function kb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function lb(a, b2) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b2) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a;
}
var mb, nb = function(a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e2) {
    MSApp.execUnsafeLocalFunction(function() {
      return a(b2, c2, d2, e2);
    });
  } : a;
}(function(a, b2) {
  if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a)
    a.innerHTML = b2;
  else {
    mb = mb || document.createElement("div");
    mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
    for (b2 = mb.firstChild; a.firstChild; )
      a.removeChild(a.firstChild);
    for (; b2.firstChild; )
      a.appendChild(b2.firstChild);
  }
});
function ob(a, b2) {
  if (b2) {
    var c2 = a.firstChild;
    if (c2 && c2 === a.lastChild && 3 === c2.nodeType) {
      c2.nodeValue = b2;
      return;
    }
  }
  a.textContent = b2;
}
var pb = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function(a) {
  qb.forEach(function(b2) {
    b2 = b2 + a.charAt(0).toUpperCase() + a.substring(1);
    pb[b2] = pb[a];
  });
});
function rb(a, b2, c2) {
  return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a) && pb[a] ? ("" + b2).trim() : b2 + "px";
}
function sb(a, b2) {
  a = a.style;
  for (var c2 in b2)
    if (b2.hasOwnProperty(c2)) {
      var d2 = 0 === c2.indexOf("--"), e2 = rb(c2, b2[c2], d2);
      "float" === c2 && (c2 = "cssFloat");
      d2 ? a.setProperty(c2, e2) : a[c2] = e2;
    }
}
var tb = A$1({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function ub(a, b2) {
  if (b2) {
    if (tb[a] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
      throw Error(p$1(137, a));
    if (null != b2.dangerouslySetInnerHTML) {
      if (null != b2.children)
        throw Error(p$1(60));
      if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML))
        throw Error(p$1(61));
    }
    if (null != b2.style && "object" !== typeof b2.style)
      throw Error(p$1(62));
  }
}
function vb(a, b2) {
  if (-1 === a.indexOf("-"))
    return "string" === typeof b2.is;
  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
var wb = null;
function xb(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}
var yb = null, zb = null, Ab = null;
function Bb(a) {
  if (a = Cb(a)) {
    if ("function" !== typeof yb)
      throw Error(p$1(280));
    var b2 = a.stateNode;
    b2 && (b2 = Db(b2), yb(a.stateNode, a.type, b2));
  }
}
function Eb(a) {
  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
}
function Fb() {
  if (zb) {
    var a = zb, b2 = Ab;
    Ab = zb = null;
    Bb(a);
    if (b2)
      for (a = 0; a < b2.length; a++)
        Bb(b2[a]);
  }
}
function Gb(a, b2) {
  return a(b2);
}
function Hb() {
}
var Ib = false;
function Jb(a, b2, c2) {
  if (Ib)
    return a(b2, c2);
  Ib = true;
  try {
    return Gb(a, b2, c2);
  } finally {
    if (Ib = false, null !== zb || null !== Ab)
      Hb(), Fb();
  }
}
function Kb(a, b2) {
  var c2 = a.stateNode;
  if (null === c2)
    return null;
  var d2 = Db(c2);
  if (null === d2)
    return null;
  c2 = d2[b2];
  a:
    switch (b2) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d2 = !d2.disabled) || (a = a.type, d2 = !("button" === a || "input" === a || "select" === a || "textarea" === a));
        a = !d2;
        break a;
      default:
        a = false;
    }
  if (a)
    return null;
  if (c2 && "function" !== typeof c2)
    throw Error(p$1(231, b2, typeof c2));
  return c2;
}
var Lb = false;
if (ia)
  try {
    var Mb = {};
    Object.defineProperty(Mb, "passive", { get: function() {
      Lb = true;
    } });
    window.addEventListener("test", Mb, Mb);
    window.removeEventListener("test", Mb, Mb);
  } catch (a) {
    Lb = false;
  }
function Nb(a, b2, c2, d2, e2, f2, g2, h3, k2) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b2.apply(c2, l2);
  } catch (m2) {
    this.onError(m2);
  }
}
var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a) {
  Ob = true;
  Pb = a;
} };
function Tb(a, b2, c2, d2, e2, f2, g2, h3, k2) {
  Ob = false;
  Pb = null;
  Nb.apply(Sb, arguments);
}
function Ub(a, b2, c2, d2, e2, f2, g2, h3, k2) {
  Tb.apply(this, arguments);
  if (Ob) {
    if (Ob) {
      var l2 = Pb;
      Ob = false;
      Pb = null;
    } else
      throw Error(p$1(198));
    Qb || (Qb = true, Rb = l2);
  }
}
function Vb(a) {
  var b2 = a, c2 = a;
  if (a.alternate)
    for (; b2.return; )
      b2 = b2.return;
  else {
    a = b2;
    do
      b2 = a, 0 !== (b2.flags & 4098) && (c2 = b2.return), a = b2.return;
    while (a);
  }
  return 3 === b2.tag ? c2 : null;
}
function Wb(a) {
  if (13 === a.tag) {
    var b2 = a.memoizedState;
    null === b2 && (a = a.alternate, null !== a && (b2 = a.memoizedState));
    if (null !== b2)
      return b2.dehydrated;
  }
  return null;
}
function Xb(a) {
  if (Vb(a) !== a)
    throw Error(p$1(188));
}
function Yb(a) {
  var b2 = a.alternate;
  if (!b2) {
    b2 = Vb(a);
    if (null === b2)
      throw Error(p$1(188));
    return b2 !== a ? null : a;
  }
  for (var c2 = a, d2 = b2; ; ) {
    var e2 = c2.return;
    if (null === e2)
      break;
    var f2 = e2.alternate;
    if (null === f2) {
      d2 = e2.return;
      if (null !== d2) {
        c2 = d2;
        continue;
      }
      break;
    }
    if (e2.child === f2.child) {
      for (f2 = e2.child; f2; ) {
        if (f2 === c2)
          return Xb(e2), a;
        if (f2 === d2)
          return Xb(e2), b2;
        f2 = f2.sibling;
      }
      throw Error(p$1(188));
    }
    if (c2.return !== d2.return)
      c2 = e2, d2 = f2;
    else {
      for (var g2 = false, h3 = e2.child; h3; ) {
        if (h3 === c2) {
          g2 = true;
          c2 = e2;
          d2 = f2;
          break;
        }
        if (h3 === d2) {
          g2 = true;
          d2 = e2;
          c2 = f2;
          break;
        }
        h3 = h3.sibling;
      }
      if (!g2) {
        for (h3 = f2.child; h3; ) {
          if (h3 === c2) {
            g2 = true;
            c2 = f2;
            d2 = e2;
            break;
          }
          if (h3 === d2) {
            g2 = true;
            d2 = f2;
            c2 = e2;
            break;
          }
          h3 = h3.sibling;
        }
        if (!g2)
          throw Error(p$1(189));
      }
    }
    if (c2.alternate !== d2)
      throw Error(p$1(190));
  }
  if (3 !== c2.tag)
    throw Error(p$1(188));
  return c2.stateNode.current === c2 ? a : b2;
}
function Zb(a) {
  a = Yb(a);
  return null !== a ? $b(a) : null;
}
function $b(a) {
  if (5 === a.tag || 6 === a.tag)
    return a;
  for (a = a.child; null !== a; ) {
    var b2 = $b(a);
    if (null !== b2)
      return b2;
    a = a.sibling;
  }
  return null;
}
var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
function mc(a) {
  if (lc && "function" === typeof lc.onCommitFiberRoot)
    try {
      lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
    } catch (b2) {
    }
}
var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
function nc(a) {
  a >>>= 0;
  return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
}
var rc = 64, sc = 4194304;
function tc(a) {
  switch (a & -a) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return a & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return a & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return a;
  }
}
function uc(a, b2) {
  var c2 = a.pendingLanes;
  if (0 === c2)
    return 0;
  var d2 = 0, e2 = a.suspendedLanes, f2 = a.pingedLanes, g2 = c2 & 268435455;
  if (0 !== g2) {
    var h3 = g2 & ~e2;
    0 !== h3 ? d2 = tc(h3) : (f2 &= g2, 0 !== f2 && (d2 = tc(f2)));
  } else
    g2 = c2 & ~e2, 0 !== g2 ? d2 = tc(g2) : 0 !== f2 && (d2 = tc(f2));
  if (0 === d2)
    return 0;
  if (0 !== b2 && b2 !== d2 && 0 === (b2 & e2) && (e2 = d2 & -d2, f2 = b2 & -b2, e2 >= f2 || 16 === e2 && 0 !== (f2 & 4194240)))
    return b2;
  0 !== (d2 & 4) && (d2 |= c2 & 16);
  b2 = a.entangledLanes;
  if (0 !== b2)
    for (a = a.entanglements, b2 &= d2; 0 < b2; )
      c2 = 31 - oc(b2), e2 = 1 << c2, d2 |= a[c2], b2 &= ~e2;
  return d2;
}
function vc(a, b2) {
  switch (a) {
    case 1:
    case 2:
    case 4:
      return b2 + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return b2 + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function wc(a, b2) {
  for (var c2 = a.suspendedLanes, d2 = a.pingedLanes, e2 = a.expirationTimes, f2 = a.pendingLanes; 0 < f2; ) {
    var g2 = 31 - oc(f2), h3 = 1 << g2, k2 = e2[g2];
    if (-1 === k2) {
      if (0 === (h3 & c2) || 0 !== (h3 & d2))
        e2[g2] = vc(h3, b2);
    } else
      k2 <= b2 && (a.expiredLanes |= h3);
    f2 &= ~h3;
  }
}
function xc(a) {
  a = a.pendingLanes & -1073741825;
  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function yc() {
  var a = rc;
  rc <<= 1;
  0 === (rc & 4194240) && (rc = 64);
  return a;
}
function zc(a) {
  for (var b2 = [], c2 = 0; 31 > c2; c2++)
    b2.push(a);
  return b2;
}
function Ac(a, b2, c2) {
  a.pendingLanes |= b2;
  536870912 !== b2 && (a.suspendedLanes = 0, a.pingedLanes = 0);
  a = a.eventTimes;
  b2 = 31 - oc(b2);
  a[b2] = c2;
}
function Bc(a, b2) {
  var c2 = a.pendingLanes & ~b2;
  a.pendingLanes = b2;
  a.suspendedLanes = 0;
  a.pingedLanes = 0;
  a.expiredLanes &= b2;
  a.mutableReadLanes &= b2;
  a.entangledLanes &= b2;
  b2 = a.entanglements;
  var d2 = a.eventTimes;
  for (a = a.expirationTimes; 0 < c2; ) {
    var e2 = 31 - oc(c2), f2 = 1 << e2;
    b2[e2] = 0;
    d2[e2] = -1;
    a[e2] = -1;
    c2 &= ~f2;
  }
}
function Cc(a, b2) {
  var c2 = a.entangledLanes |= b2;
  for (a = a.entanglements; c2; ) {
    var d2 = 31 - oc(c2), e2 = 1 << d2;
    e2 & b2 | a[d2] & b2 && (a[d2] |= b2);
    c2 &= ~e2;
  }
}
var C = 0;
function Dc(a) {
  a &= -a;
  return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
}
var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(a, b2) {
  switch (a) {
    case "focusin":
    case "focusout":
      Lc = null;
      break;
    case "dragenter":
    case "dragleave":
      Mc = null;
      break;
    case "mouseover":
    case "mouseout":
      Nc = null;
      break;
    case "pointerover":
    case "pointerout":
      Oc.delete(b2.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Pc.delete(b2.pointerId);
  }
}
function Tc(a, b2, c2, d2, e2, f2) {
  if (null === a || a.nativeEvent !== f2)
    return a = { blockedOn: b2, domEventName: c2, eventSystemFlags: d2, nativeEvent: f2, targetContainers: [e2] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a;
  a.eventSystemFlags |= d2;
  b2 = a.targetContainers;
  null !== e2 && -1 === b2.indexOf(e2) && b2.push(e2);
  return a;
}
function Uc(a, b2, c2, d2, e2) {
  switch (b2) {
    case "focusin":
      return Lc = Tc(Lc, a, b2, c2, d2, e2), true;
    case "dragenter":
      return Mc = Tc(Mc, a, b2, c2, d2, e2), true;
    case "mouseover":
      return Nc = Tc(Nc, a, b2, c2, d2, e2), true;
    case "pointerover":
      var f2 = e2.pointerId;
      Oc.set(f2, Tc(Oc.get(f2) || null, a, b2, c2, d2, e2));
      return true;
    case "gotpointercapture":
      return f2 = e2.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a, b2, c2, d2, e2)), true;
  }
  return false;
}
function Vc(a) {
  var b2 = Wc(a.target);
  if (null !== b2) {
    var c2 = Vb(b2);
    if (null !== c2) {
      if (b2 = c2.tag, 13 === b2) {
        if (b2 = Wb(c2), null !== b2) {
          a.blockedOn = b2;
          Ic(a.priority, function() {
            Gc(c2);
          });
          return;
        }
      } else if (3 === b2 && c2.stateNode.current.memoizedState.isDehydrated) {
        a.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a.blockedOn = null;
}
function Xc(a) {
  if (null !== a.blockedOn)
    return false;
  for (var b2 = a.targetContainers; 0 < b2.length; ) {
    var c2 = Yc(a.domEventName, a.eventSystemFlags, b2[0], a.nativeEvent);
    if (null === c2) {
      c2 = a.nativeEvent;
      var d2 = new c2.constructor(c2.type, c2);
      wb = d2;
      c2.target.dispatchEvent(d2);
      wb = null;
    } else
      return b2 = Cb(c2), null !== b2 && Fc(b2), a.blockedOn = c2, false;
    b2.shift();
  }
  return true;
}
function Zc(a, b2, c2) {
  Xc(a) && c2.delete(b2);
}
function $c() {
  Jc = false;
  null !== Lc && Xc(Lc) && (Lc = null);
  null !== Mc && Xc(Mc) && (Mc = null);
  null !== Nc && Xc(Nc) && (Nc = null);
  Oc.forEach(Zc);
  Pc.forEach(Zc);
}
function ad(a, b2) {
  a.blockedOn === b2 && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
}
function bd(a) {
  function b2(b3) {
    return ad(b3, a);
  }
  if (0 < Kc.length) {
    ad(Kc[0], a);
    for (var c2 = 1; c2 < Kc.length; c2++) {
      var d2 = Kc[c2];
      d2.blockedOn === a && (d2.blockedOn = null);
    }
  }
  null !== Lc && ad(Lc, a);
  null !== Mc && ad(Mc, a);
  null !== Nc && ad(Nc, a);
  Oc.forEach(b2);
  Pc.forEach(b2);
  for (c2 = 0; c2 < Qc.length; c2++)
    d2 = Qc[c2], d2.blockedOn === a && (d2.blockedOn = null);
  for (; 0 < Qc.length && (c2 = Qc[0], null === c2.blockedOn); )
    Vc(c2), null === c2.blockedOn && Qc.shift();
}
var cd = ua.ReactCurrentBatchConfig, dd = true;
function ed(a, b2, c2, d2) {
  var e2 = C, f2 = cd.transition;
  cd.transition = null;
  try {
    C = 1, fd(a, b2, c2, d2);
  } finally {
    C = e2, cd.transition = f2;
  }
}
function gd(a, b2, c2, d2) {
  var e2 = C, f2 = cd.transition;
  cd.transition = null;
  try {
    C = 4, fd(a, b2, c2, d2);
  } finally {
    C = e2, cd.transition = f2;
  }
}
function fd(a, b2, c2, d2) {
  if (dd) {
    var e2 = Yc(a, b2, c2, d2);
    if (null === e2)
      hd(a, b2, d2, id, c2), Sc(a, d2);
    else if (Uc(e2, a, b2, c2, d2))
      d2.stopPropagation();
    else if (Sc(a, d2), b2 & 4 && -1 < Rc.indexOf(a)) {
      for (; null !== e2; ) {
        var f2 = Cb(e2);
        null !== f2 && Ec(f2);
        f2 = Yc(a, b2, c2, d2);
        null === f2 && hd(a, b2, d2, id, c2);
        if (f2 === e2)
          break;
        e2 = f2;
      }
      null !== e2 && d2.stopPropagation();
    } else
      hd(a, b2, d2, null, c2);
  }
}
var id = null;
function Yc(a, b2, c2, d2) {
  id = null;
  a = xb(d2);
  a = Wc(a);
  if (null !== a)
    if (b2 = Vb(a), null === b2)
      a = null;
    else if (c2 = b2.tag, 13 === c2) {
      a = Wb(b2);
      if (null !== a)
        return a;
      a = null;
    } else if (3 === c2) {
      if (b2.stateNode.current.memoizedState.isDehydrated)
        return 3 === b2.tag ? b2.stateNode.containerInfo : null;
      a = null;
    } else
      b2 !== a && (a = null);
  id = a;
  return null;
}
function jd(a) {
  switch (a) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (ec()) {
        case fc:
          return 1;
        case gc:
          return 4;
        case hc:
        case ic:
          return 16;
        case jc:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var kd = null, ld = null, md = null;
function nd() {
  if (md)
    return md;
  var a, b2 = ld, c2 = b2.length, d2, e2 = "value" in kd ? kd.value : kd.textContent, f2 = e2.length;
  for (a = 0; a < c2 && b2[a] === e2[a]; a++)
    ;
  var g2 = c2 - a;
  for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e2[f2 - d2]; d2++)
    ;
  return md = e2.slice(a, 1 < d2 ? 1 - d2 : void 0);
}
function od(a) {
  var b2 = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b2 && (a = 13)) : a = b2;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a) {
  function b2(b3, d2, e2, f2, g2) {
    this._reactName = b3;
    this._targetInst = e2;
    this.type = d2;
    this.nativeEvent = f2;
    this.target = g2;
    this.currentTarget = null;
    for (var c2 in a)
      a.hasOwnProperty(c2) && (b3 = a[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
    this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  A$1(b2.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a2 = this.nativeEvent;
    a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a2 = this.nativeEvent;
    a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b2;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
  return a.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A$1({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A$1({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
  return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
}, movementX: function(a) {
  if ("movementX" in a)
    return a.movementX;
  a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
  return wd;
}, movementY: function(a) {
  return "movementY" in a ? a.movementY : xd;
} }), Bd = rd(Ad), Cd = A$1({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A$1({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A$1({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A$1({}, sd, { clipboardData: function(a) {
  return "clipboardData" in a ? a.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = A$1({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a) {
  var b2 = this.nativeEvent;
  return b2.getModifierState ? b2.getModifierState(a) : (a = Od[a]) ? !!b2[a] : false;
}
function zd() {
  return Pd;
}
var Qd = A$1({}, ud, { key: function(a) {
  if (a.key) {
    var b2 = Md[a.key] || a.key;
    if ("Unidentified" !== b2)
      return b2;
  }
  return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
  return "keypress" === a.type ? od(a) : 0;
}, keyCode: function(a) {
  return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
}, which: function(a) {
  return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
} }), Rd = rd(Qd), Sd = A$1({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A$1({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A$1({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A$1({}, Ad, {
  deltaX: function(a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  },
  deltaY: function(a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
ia && "documentMode" in document && (be = document.documentMode);
var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
function ge(a, b2) {
  switch (a) {
    case "keyup":
      return -1 !== $d.indexOf(b2.keyCode);
    case "keydown":
      return 229 !== b2.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}
var ie = false;
function je(a, b2) {
  switch (a) {
    case "compositionend":
      return he(b2);
    case "keypress":
      if (32 !== b2.which)
        return null;
      fe = true;
      return ee;
    case "textInput":
      return a = b2.data, a === ee && fe ? null : a;
    default:
      return null;
  }
}
function ke(a, b2) {
  if (ie)
    return "compositionend" === a || !ae && ge(a, b2) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
  switch (a) {
    case "paste":
      return null;
    case "keypress":
      if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
        if (b2.char && 1 < b2.char.length)
          return b2.char;
        if (b2.which)
          return String.fromCharCode(b2.which);
      }
      return null;
    case "compositionend":
      return de && "ko" !== b2.locale ? null : b2.data;
    default:
      return null;
  }
}
var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me(a) {
  var b2 = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b2 ? !!le[a.type] : "textarea" === b2 ? true : false;
}
function ne(a, b2, c2, d2) {
  Eb(d2);
  b2 = oe(b2, "onChange");
  0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a.push({ event: c2, listeners: b2 }));
}
var pe = null, qe = null;
function re(a) {
  se(a, 0);
}
function te(a) {
  var b2 = ue(a);
  if (Wa(b2))
    return a;
}
function ve(a, b2) {
  if ("change" === a)
    return b2;
}
var we = false;
if (ia) {
  var xe;
  if (ia) {
    var ye = "oninput" in document;
    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = "function" === typeof ze.oninput;
    }
    xe = ye;
  } else
    xe = false;
  we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a) {
  if ("value" === a.propertyName && te(qe)) {
    var b2 = [];
    ne(b2, qe, a, xb(a));
    Jb(re, b2);
  }
}
function Ce(a, b2, c2) {
  "focusin" === a ? (Ae(), pe = b2, qe = c2, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
}
function De(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a)
    return te(qe);
}
function Ee(a, b2) {
  if ("click" === a)
    return te(b2);
}
function Fe(a, b2) {
  if ("input" === a || "change" === a)
    return te(b2);
}
function Ge(a, b2) {
  return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
}
var He = "function" === typeof Object.is ? Object.is : Ge;
function Ie(a, b2) {
  if (He(a, b2))
    return true;
  if ("object" !== typeof a || null === a || "object" !== typeof b2 || null === b2)
    return false;
  var c2 = Object.keys(a), d2 = Object.keys(b2);
  if (c2.length !== d2.length)
    return false;
  for (d2 = 0; d2 < c2.length; d2++) {
    var e2 = c2[d2];
    if (!ja.call(b2, e2) || !He(a[e2], b2[e2]))
      return false;
  }
  return true;
}
function Je(a) {
  for (; a && a.firstChild; )
    a = a.firstChild;
  return a;
}
function Ke(a, b2) {
  var c2 = Je(a);
  a = 0;
  for (var d2; c2; ) {
    if (3 === c2.nodeType) {
      d2 = a + c2.textContent.length;
      if (a <= b2 && d2 >= b2)
        return { node: c2, offset: b2 - a };
      a = d2;
    }
    a: {
      for (; c2; ) {
        if (c2.nextSibling) {
          c2 = c2.nextSibling;
          break a;
        }
        c2 = c2.parentNode;
      }
      c2 = void 0;
    }
    c2 = Je(c2);
  }
}
function Le(a, b2) {
  return a && b2 ? a === b2 ? true : a && 3 === a.nodeType ? false : b2 && 3 === b2.nodeType ? Le(a, b2.parentNode) : "contains" in a ? a.contains(b2) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b2) & 16) : false : false;
}
function Me() {
  for (var a = window, b2 = Xa(); b2 instanceof a.HTMLIFrameElement; ) {
    try {
      var c2 = "string" === typeof b2.contentWindow.location.href;
    } catch (d2) {
      c2 = false;
    }
    if (c2)
      a = b2.contentWindow;
    else
      break;
    b2 = Xa(a.document);
  }
  return b2;
}
function Ne(a) {
  var b2 = a && a.nodeName && a.nodeName.toLowerCase();
  return b2 && ("input" === b2 && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b2 || "true" === a.contentEditable);
}
function Oe(a) {
  var b2 = Me(), c2 = a.focusedElem, d2 = a.selectionRange;
  if (b2 !== c2 && c2 && c2.ownerDocument && Le(c2.ownerDocument.documentElement, c2)) {
    if (null !== d2 && Ne(c2)) {
      if (b2 = d2.start, a = d2.end, void 0 === a && (a = b2), "selectionStart" in c2)
        c2.selectionStart = b2, c2.selectionEnd = Math.min(a, c2.value.length);
      else if (a = (b2 = c2.ownerDocument || document) && b2.defaultView || window, a.getSelection) {
        a = a.getSelection();
        var e2 = c2.textContent.length, f2 = Math.min(d2.start, e2);
        d2 = void 0 === d2.end ? f2 : Math.min(d2.end, e2);
        !a.extend && f2 > d2 && (e2 = d2, d2 = f2, f2 = e2);
        e2 = Ke(c2, f2);
        var g2 = Ke(
          c2,
          d2
        );
        e2 && g2 && (1 !== a.rangeCount || a.anchorNode !== e2.node || a.anchorOffset !== e2.offset || a.focusNode !== g2.node || a.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e2.node, e2.offset), a.removeAllRanges(), f2 > d2 ? (a.addRange(b2), a.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a.addRange(b2)));
      }
    }
    b2 = [];
    for (a = c2; a = a.parentNode; )
      1 === a.nodeType && b2.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
    "function" === typeof c2.focus && c2.focus();
    for (c2 = 0; c2 < b2.length; c2++)
      a = b2[c2], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
  }
}
var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
function Ue(a, b2, c2) {
  var d2 = c2.window === c2 ? c2.document : 9 === c2.nodeType ? c2 : c2.ownerDocument;
  Te || null == Qe || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Ne(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se && Ie(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a.push({ event: b2, listeners: d2 }), b2.target = Qe)));
}
function Ve(a, b2) {
  var c2 = {};
  c2[a.toLowerCase()] = b2.toLowerCase();
  c2["Webkit" + a] = "webkit" + b2;
  c2["Moz" + a] = "moz" + b2;
  return c2;
}
var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
function Ze(a) {
  if (Xe[a])
    return Xe[a];
  if (!We[a])
    return a;
  var b2 = We[a], c2;
  for (c2 in b2)
    if (b2.hasOwnProperty(c2) && c2 in Ye)
      return Xe[a] = b2[c2];
  return a;
}
var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(a, b2) {
  df.set(a, b2);
  fa(b2, [a]);
}
for (var gf = 0; gf < ef.length; gf++) {
  var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
  ff(jf, "on" + kf);
}
ff($e, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(a, b2, c2) {
  var d2 = a.type || "unknown-event";
  a.currentTarget = c2;
  Ub(d2, b2, void 0, a);
  a.currentTarget = null;
}
function se(a, b2) {
  b2 = 0 !== (b2 & 4);
  for (var c2 = 0; c2 < a.length; c2++) {
    var d2 = a[c2], e2 = d2.event;
    d2 = d2.listeners;
    a: {
      var f2 = void 0;
      if (b2)
        for (var g2 = d2.length - 1; 0 <= g2; g2--) {
          var h3 = d2[g2], k2 = h3.instance, l2 = h3.currentTarget;
          h3 = h3.listener;
          if (k2 !== f2 && e2.isPropagationStopped())
            break a;
          nf(e2, h3, l2);
          f2 = k2;
        }
      else
        for (g2 = 0; g2 < d2.length; g2++) {
          h3 = d2[g2];
          k2 = h3.instance;
          l2 = h3.currentTarget;
          h3 = h3.listener;
          if (k2 !== f2 && e2.isPropagationStopped())
            break a;
          nf(e2, h3, l2);
          f2 = k2;
        }
    }
  }
  if (Qb)
    throw a = Rb, Qb = false, Rb = null, a;
}
function D(a, b2) {
  var c2 = b2[of];
  void 0 === c2 && (c2 = b2[of] = /* @__PURE__ */ new Set());
  var d2 = a + "__bubble";
  c2.has(d2) || (pf(b2, a, 2, false), c2.add(d2));
}
function qf(a, b2, c2) {
  var d2 = 0;
  b2 && (d2 |= 4);
  pf(c2, a, d2, b2);
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(a) {
  if (!a[rf]) {
    a[rf] = true;
    da.forEach(function(b3) {
      "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a), qf(b3, true, a));
    });
    var b2 = 9 === a.nodeType ? a : a.ownerDocument;
    null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
  }
}
function pf(a, b2, c2, d2) {
  switch (jd(b2)) {
    case 1:
      var e2 = ed;
      break;
    case 4:
      e2 = gd;
      break;
    default:
      e2 = fd;
  }
  c2 = e2.bind(null, b2, c2, a);
  e2 = void 0;
  !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e2 = true);
  d2 ? void 0 !== e2 ? a.addEventListener(b2, c2, { capture: true, passive: e2 }) : a.addEventListener(b2, c2, true) : void 0 !== e2 ? a.addEventListener(b2, c2, { passive: e2 }) : a.addEventListener(b2, c2, false);
}
function hd(a, b2, c2, d2, e2) {
  var f2 = d2;
  if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2)
    a:
      for (; ; ) {
        if (null === d2)
          return;
        var g2 = d2.tag;
        if (3 === g2 || 4 === g2) {
          var h3 = d2.stateNode.containerInfo;
          if (h3 === e2 || 8 === h3.nodeType && h3.parentNode === e2)
            break;
          if (4 === g2)
            for (g2 = d2.return; null !== g2; ) {
              var k2 = g2.tag;
              if (3 === k2 || 4 === k2) {
                if (k2 = g2.stateNode.containerInfo, k2 === e2 || 8 === k2.nodeType && k2.parentNode === e2)
                  return;
              }
              g2 = g2.return;
            }
          for (; null !== h3; ) {
            g2 = Wc(h3);
            if (null === g2)
              return;
            k2 = g2.tag;
            if (5 === k2 || 6 === k2) {
              d2 = f2 = g2;
              continue a;
            }
            h3 = h3.parentNode;
          }
        }
        d2 = d2.return;
      }
  Jb(function() {
    var d3 = f2, e3 = xb(c2), g3 = [];
    a: {
      var h4 = df.get(a);
      if (void 0 !== h4) {
        var k3 = td, n2 = a;
        switch (a) {
          case "keypress":
            if (0 === od(c2))
              break a;
          case "keydown":
          case "keyup":
            k3 = Rd;
            break;
          case "focusin":
            n2 = "focus";
            k3 = Fd;
            break;
          case "focusout":
            n2 = "blur";
            k3 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k3 = Fd;
            break;
          case "click":
            if (2 === c2.button)
              break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k3 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k3 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k3 = Vd;
            break;
          case $e:
          case af:
          case bf:
            k3 = Hd;
            break;
          case cf:
            k3 = Xd;
            break;
          case "scroll":
            k3 = vd;
            break;
          case "wheel":
            k3 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k3 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k3 = Td;
        }
        var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a, x2 = t2 ? null !== h4 ? h4 + "Capture" : null : h4;
        t2 = [];
        for (var w2 = d3, u2; null !== w2; ) {
          u2 = w2;
          var F2 = u2.stateNode;
          5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
          if (J2)
            break;
          w2 = w2.return;
        }
        0 < t2.length && (h4 = new k3(h4, n2, null, c2, e3), g3.push({ event: h4, listeners: t2 }));
      }
    }
    if (0 === (b2 & 7)) {
      a: {
        h4 = "mouseover" === a || "pointerover" === a;
        k3 = "mouseout" === a || "pointerout" === a;
        if (h4 && c2 !== wb && (n2 = c2.relatedTarget || c2.fromElement) && (Wc(n2) || n2[uf]))
          break a;
        if (k3 || h4) {
          h4 = e3.window === e3 ? e3 : (h4 = e3.ownerDocument) ? h4.defaultView || h4.parentWindow : window;
          if (k3) {
            if (n2 = c2.relatedTarget || c2.toElement, k3 = d3, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag))
              n2 = null;
          } else
            k3 = null, n2 = d3;
          if (k3 !== n2) {
            t2 = Bd;
            F2 = "onMouseLeave";
            x2 = "onMouseEnter";
            w2 = "mouse";
            if ("pointerout" === a || "pointerover" === a)
              t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
            J2 = null == k3 ? h4 : ue(k3);
            u2 = null == n2 ? h4 : ue(n2);
            h4 = new t2(F2, w2 + "leave", k3, c2, e3);
            h4.target = J2;
            h4.relatedTarget = u2;
            F2 = null;
            Wc(e3) === d3 && (t2 = new t2(x2, w2 + "enter", n2, c2, e3), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
            J2 = F2;
            if (k3 && n2)
              b: {
                t2 = k3;
                x2 = n2;
                w2 = 0;
                for (u2 = t2; u2; u2 = vf(u2))
                  w2++;
                u2 = 0;
                for (F2 = x2; F2; F2 = vf(F2))
                  u2++;
                for (; 0 < w2 - u2; )
                  t2 = vf(t2), w2--;
                for (; 0 < u2 - w2; )
                  x2 = vf(x2), u2--;
                for (; w2--; ) {
                  if (t2 === x2 || null !== x2 && t2 === x2.alternate)
                    break b;
                  t2 = vf(t2);
                  x2 = vf(x2);
                }
                t2 = null;
              }
            else
              t2 = null;
            null !== k3 && wf(g3, h4, k3, t2, false);
            null !== n2 && null !== J2 && wf(g3, J2, n2, t2, true);
          }
        }
      }
      a: {
        h4 = d3 ? ue(d3) : window;
        k3 = h4.nodeName && h4.nodeName.toLowerCase();
        if ("select" === k3 || "input" === k3 && "file" === h4.type)
          var na = ve;
        else if (me(h4))
          if (we)
            na = Fe;
          else {
            na = De;
            var xa = Ce;
          }
        else
          (k3 = h4.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h4.type || "radio" === h4.type) && (na = Ee);
        if (na && (na = na(a, d3))) {
          ne(g3, na, c2, e3);
          break a;
        }
        xa && xa(a, h4, d3);
        "focusout" === a && (xa = h4._wrapperState) && xa.controlled && "number" === h4.type && cb(h4, "number", h4.value);
      }
      xa = d3 ? ue(d3) : window;
      switch (a) {
        case "focusin":
          if (me(xa) || "true" === xa.contentEditable)
            Qe = xa, Re = d3, Se = null;
          break;
        case "focusout":
          Se = Re = Qe = null;
          break;
        case "mousedown":
          Te = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = false;
          Ue(g3, c2, e3);
          break;
        case "selectionchange":
          if (Pe)
            break;
        case "keydown":
        case "keyup":
          Ue(g3, c2, e3);
      }
      var $a;
      if (ae)
        b: {
          switch (a) {
            case "compositionstart":
              var ba = "onCompositionStart";
              break b;
            case "compositionend":
              ba = "onCompositionEnd";
              break b;
            case "compositionupdate":
              ba = "onCompositionUpdate";
              break b;
          }
          ba = void 0;
        }
      else
        ie ? ge(a, c2) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c2.keyCode && (ba = "onCompositionStart");
      ba && (de && "ko" !== c2.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e3, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d3, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c2, e3), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c2), null !== $a && (ba.data = $a))));
      if ($a = ce ? je(a, c2) : ke(a, c2))
        d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e3 = new Ld("onBeforeInput", "beforeinput", null, c2, e3), g3.push({ event: e3, listeners: d3 }), e3.data = $a);
    }
    se(g3, b2);
  });
}
function tf(a, b2, c2) {
  return { instance: a, listener: b2, currentTarget: c2 };
}
function oe(a, b2) {
  for (var c2 = b2 + "Capture", d2 = []; null !== a; ) {
    var e2 = a, f2 = e2.stateNode;
    5 === e2.tag && null !== f2 && (e2 = f2, f2 = Kb(a, c2), null != f2 && d2.unshift(tf(a, f2, e2)), f2 = Kb(a, b2), null != f2 && d2.push(tf(a, f2, e2)));
    a = a.return;
  }
  return d2;
}
function vf(a) {
  if (null === a)
    return null;
  do
    a = a.return;
  while (a && 5 !== a.tag);
  return a ? a : null;
}
function wf(a, b2, c2, d2, e2) {
  for (var f2 = b2._reactName, g2 = []; null !== c2 && c2 !== d2; ) {
    var h3 = c2, k2 = h3.alternate, l2 = h3.stateNode;
    if (null !== k2 && k2 === d2)
      break;
    5 === h3.tag && null !== l2 && (h3 = l2, e2 ? (k2 = Kb(c2, f2), null != k2 && g2.unshift(tf(c2, k2, h3))) : e2 || (k2 = Kb(c2, f2), null != k2 && g2.push(tf(c2, k2, h3))));
    c2 = c2.return;
  }
  0 !== g2.length && a.push({ event: b2, listeners: g2 });
}
var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
function zf(a) {
  return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
}
function Af(a, b2, c2) {
  b2 = zf(b2);
  if (zf(a) !== b2 && c2)
    throw Error(p$1(425));
}
function Bf() {
}
var Cf = null, Df = null;
function Ef(a, b2) {
  return "textarea" === a || "noscript" === a || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
}
var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
  return Hf.resolve(null).then(a).catch(If);
} : Ff;
function If(a) {
  setTimeout(function() {
    throw a;
  });
}
function Kf(a, b2) {
  var c2 = b2, d2 = 0;
  do {
    var e2 = c2.nextSibling;
    a.removeChild(c2);
    if (e2 && 8 === e2.nodeType)
      if (c2 = e2.data, "/$" === c2) {
        if (0 === d2) {
          a.removeChild(e2);
          bd(b2);
          return;
        }
        d2--;
      } else
        "$" !== c2 && "$?" !== c2 && "$!" !== c2 || d2++;
    c2 = e2;
  } while (c2);
  bd(b2);
}
function Lf(a) {
  for (; null != a; a = a.nextSibling) {
    var b2 = a.nodeType;
    if (1 === b2 || 3 === b2)
      break;
    if (8 === b2) {
      b2 = a.data;
      if ("$" === b2 || "$!" === b2 || "$?" === b2)
        break;
      if ("/$" === b2)
        return null;
    }
  }
  return a;
}
function Mf(a) {
  a = a.previousSibling;
  for (var b2 = 0; a; ) {
    if (8 === a.nodeType) {
      var c2 = a.data;
      if ("$" === c2 || "$!" === c2 || "$?" === c2) {
        if (0 === b2)
          return a;
        b2--;
      } else
        "/$" === c2 && b2++;
    }
    a = a.previousSibling;
  }
  return null;
}
var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
function Wc(a) {
  var b2 = a[Of];
  if (b2)
    return b2;
  for (var c2 = a.parentNode; c2; ) {
    if (b2 = c2[uf] || c2[Of]) {
      c2 = b2.alternate;
      if (null !== b2.child || null !== c2 && null !== c2.child)
        for (a = Mf(a); null !== a; ) {
          if (c2 = a[Of])
            return c2;
          a = Mf(a);
        }
      return b2;
    }
    a = c2;
    c2 = a.parentNode;
  }
  return null;
}
function Cb(a) {
  a = a[Of] || a[uf];
  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}
function ue(a) {
  if (5 === a.tag || 6 === a.tag)
    return a.stateNode;
  throw Error(p$1(33));
}
function Db(a) {
  return a[Pf] || null;
}
var Sf = [], Tf = -1;
function Uf(a) {
  return { current: a };
}
function E(a) {
  0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
}
function G(a, b2) {
  Tf++;
  Sf[Tf] = a.current;
  a.current = b2;
}
var Vf = {}, H = Uf(Vf), Wf = Uf(false), Xf = Vf;
function Yf(a, b2) {
  var c2 = a.type.contextTypes;
  if (!c2)
    return Vf;
  var d2 = a.stateNode;
  if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
    return d2.__reactInternalMemoizedMaskedChildContext;
  var e2 = {}, f2;
  for (f2 in c2)
    e2[f2] = b2[f2];
  d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b2, a.__reactInternalMemoizedMaskedChildContext = e2);
  return e2;
}
function Zf(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}
function $f() {
  E(Wf);
  E(H);
}
function ag(a, b2, c2) {
  if (H.current !== Vf)
    throw Error(p$1(168));
  G(H, b2);
  G(Wf, c2);
}
function bg(a, b2, c2) {
  var d2 = a.stateNode;
  b2 = b2.childContextTypes;
  if ("function" !== typeof d2.getChildContext)
    return c2;
  d2 = d2.getChildContext();
  for (var e2 in d2)
    if (!(e2 in b2))
      throw Error(p$1(108, Ra(a) || "Unknown", e2));
  return A$1({}, c2, d2);
}
function cg(a) {
  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
  Xf = H.current;
  G(H, a);
  G(Wf, Wf.current);
  return true;
}
function dg(a, b2, c2) {
  var d2 = a.stateNode;
  if (!d2)
    throw Error(p$1(169));
  c2 ? (a = bg(a, b2, Xf), d2.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
  G(Wf, c2);
}
var eg = null, fg = false, gg = false;
function hg(a) {
  null === eg ? eg = [a] : eg.push(a);
}
function ig(a) {
  fg = true;
  hg(a);
}
function jg() {
  if (!gg && null !== eg) {
    gg = true;
    var a = 0, b2 = C;
    try {
      var c2 = eg;
      for (C = 1; a < c2.length; a++) {
        var d2 = c2[a];
        do
          d2 = d2(true);
        while (null !== d2);
      }
      eg = null;
      fg = false;
    } catch (e2) {
      throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e2;
    } finally {
      C = b2, gg = false;
    }
  }
  return null;
}
var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
function tg(a, b2) {
  kg[lg++] = ng;
  kg[lg++] = mg;
  mg = a;
  ng = b2;
}
function ug(a, b2, c2) {
  og[pg++] = rg;
  og[pg++] = sg;
  og[pg++] = qg;
  qg = a;
  var d2 = rg;
  a = sg;
  var e2 = 32 - oc(d2) - 1;
  d2 &= ~(1 << e2);
  c2 += 1;
  var f2 = 32 - oc(b2) + e2;
  if (30 < f2) {
    var g2 = e2 - e2 % 5;
    f2 = (d2 & (1 << g2) - 1).toString(32);
    d2 >>= g2;
    e2 -= g2;
    rg = 1 << 32 - oc(b2) + e2 | c2 << e2 | d2;
    sg = f2 + a;
  } else
    rg = 1 << f2 | c2 << e2 | d2, sg = a;
}
function vg(a) {
  null !== a.return && (tg(a, 1), ug(a, 1, 0));
}
function wg(a) {
  for (; a === mg; )
    mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
  for (; a === qg; )
    qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
}
var xg = null, yg = null, I = false, zg = null;
function Ag(a, b2) {
  var c2 = Bg(5, null, null, 0);
  c2.elementType = "DELETED";
  c2.stateNode = b2;
  c2.return = a;
  b2 = a.deletions;
  null === b2 ? (a.deletions = [c2], a.flags |= 16) : b2.push(c2);
}
function Cg(a, b2) {
  switch (a.tag) {
    case 5:
      var c2 = a.type;
      b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
      return null !== b2 ? (a.stateNode = b2, xg = a, yg = Lf(b2.firstChild), true) : false;
    case 6:
      return b2 = "" === a.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a.stateNode = b2, xg = a, yg = null, true) : false;
    case 13:
      return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c2 = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b2, treeContext: c2, retryLane: 1073741824 }, c2 = Bg(18, null, null, 0), c2.stateNode = b2, c2.return = a, a.child = c2, xg = a, yg = null, true) : false;
    default:
      return false;
  }
}
function Dg(a) {
  return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
}
function Eg(a) {
  if (I) {
    var b2 = yg;
    if (b2) {
      var c2 = b2;
      if (!Cg(a, b2)) {
        if (Dg(a))
          throw Error(p$1(418));
        b2 = Lf(c2.nextSibling);
        var d2 = xg;
        b2 && Cg(a, b2) ? Ag(d2, c2) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
      }
    } else {
      if (Dg(a))
        throw Error(p$1(418));
      a.flags = a.flags & -4097 | 2;
      I = false;
      xg = a;
    }
  }
}
function Fg(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; )
    a = a.return;
  xg = a;
}
function Gg(a) {
  if (a !== xg)
    return false;
  if (!I)
    return Fg(a), I = true, false;
  var b2;
  (b2 = 3 !== a.tag) && !(b2 = 5 !== a.tag) && (b2 = a.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a.type, a.memoizedProps));
  if (b2 && (b2 = yg)) {
    if (Dg(a))
      throw Hg(), Error(p$1(418));
    for (; b2; )
      Ag(a, b2), b2 = Lf(b2.nextSibling);
  }
  Fg(a);
  if (13 === a.tag) {
    a = a.memoizedState;
    a = null !== a ? a.dehydrated : null;
    if (!a)
      throw Error(p$1(317));
    a: {
      a = a.nextSibling;
      for (b2 = 0; a; ) {
        if (8 === a.nodeType) {
          var c2 = a.data;
          if ("/$" === c2) {
            if (0 === b2) {
              yg = Lf(a.nextSibling);
              break a;
            }
            b2--;
          } else
            "$" !== c2 && "$!" !== c2 && "$?" !== c2 || b2++;
        }
        a = a.nextSibling;
      }
      yg = null;
    }
  } else
    yg = xg ? Lf(a.stateNode.nextSibling) : null;
  return true;
}
function Hg() {
  for (var a = yg; a; )
    a = Lf(a.nextSibling);
}
function Ig() {
  yg = xg = null;
  I = false;
}
function Jg(a) {
  null === zg ? zg = [a] : zg.push(a);
}
var Kg = ua.ReactCurrentBatchConfig;
function Lg(a, b2) {
  if (a && a.defaultProps) {
    b2 = A$1({}, b2);
    a = a.defaultProps;
    for (var c2 in a)
      void 0 === b2[c2] && (b2[c2] = a[c2]);
    return b2;
  }
  return b2;
}
var Mg = Uf(null), Ng = null, Og = null, Pg = null;
function Qg() {
  Pg = Og = Ng = null;
}
function Rg(a) {
  var b2 = Mg.current;
  E(Mg);
  a._currentValue = b2;
}
function Sg(a, b2, c2) {
  for (; null !== a; ) {
    var d2 = a.alternate;
    (a.childLanes & b2) !== b2 ? (a.childLanes |= b2, null !== d2 && (d2.childLanes |= b2)) : null !== d2 && (d2.childLanes & b2) !== b2 && (d2.childLanes |= b2);
    if (a === c2)
      break;
    a = a.return;
  }
}
function Tg(a, b2) {
  Ng = a;
  Pg = Og = null;
  a = a.dependencies;
  null !== a && null !== a.firstContext && (0 !== (a.lanes & b2) && (Ug = true), a.firstContext = null);
}
function Vg(a) {
  var b2 = a._currentValue;
  if (Pg !== a)
    if (a = { context: a, memoizedValue: b2, next: null }, null === Og) {
      if (null === Ng)
        throw Error(p$1(308));
      Og = a;
      Ng.dependencies = { lanes: 0, firstContext: a };
    } else
      Og = Og.next = a;
  return b2;
}
var Wg = null;
function Xg(a) {
  null === Wg ? Wg = [a] : Wg.push(a);
}
function Yg(a, b2, c2, d2) {
  var e2 = b2.interleaved;
  null === e2 ? (c2.next = c2, Xg(b2)) : (c2.next = e2.next, e2.next = c2);
  b2.interleaved = c2;
  return Zg(a, d2);
}
function Zg(a, b2) {
  a.lanes |= b2;
  var c2 = a.alternate;
  null !== c2 && (c2.lanes |= b2);
  c2 = a;
  for (a = a.return; null !== a; )
    a.childLanes |= b2, c2 = a.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a, a = a.return;
  return 3 === c2.tag ? c2.stateNode : null;
}
var $g = false;
function ah(a) {
  a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
}
function bh(a, b2) {
  a = a.updateQueue;
  b2.updateQueue === a && (b2.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
}
function ch(a, b2) {
  return { eventTime: a, lane: b2, tag: 0, payload: null, callback: null, next: null };
}
function dh(a, b2, c2) {
  var d2 = a.updateQueue;
  if (null === d2)
    return null;
  d2 = d2.shared;
  if (0 !== (K & 2)) {
    var e2 = d2.pending;
    null === e2 ? b2.next = b2 : (b2.next = e2.next, e2.next = b2);
    d2.pending = b2;
    return Zg(a, c2);
  }
  e2 = d2.interleaved;
  null === e2 ? (b2.next = b2, Xg(d2)) : (b2.next = e2.next, e2.next = b2);
  d2.interleaved = b2;
  return Zg(a, c2);
}
function eh(a, b2, c2) {
  b2 = b2.updateQueue;
  if (null !== b2 && (b2 = b2.shared, 0 !== (c2 & 4194240))) {
    var d2 = b2.lanes;
    d2 &= a.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a, c2);
  }
}
function fh(a, b2) {
  var c2 = a.updateQueue, d2 = a.alternate;
  if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
    var e2 = null, f2 = null;
    c2 = c2.firstBaseUpdate;
    if (null !== c2) {
      do {
        var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
        null === f2 ? e2 = f2 = g2 : f2 = f2.next = g2;
        c2 = c2.next;
      } while (null !== c2);
      null === f2 ? e2 = f2 = b2 : f2 = f2.next = b2;
    } else
      e2 = f2 = b2;
    c2 = { baseState: d2.baseState, firstBaseUpdate: e2, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
    a.updateQueue = c2;
    return;
  }
  a = c2.lastBaseUpdate;
  null === a ? c2.firstBaseUpdate = b2 : a.next = b2;
  c2.lastBaseUpdate = b2;
}
function gh(a, b2, c2, d2) {
  var e2 = a.updateQueue;
  $g = false;
  var f2 = e2.firstBaseUpdate, g2 = e2.lastBaseUpdate, h3 = e2.shared.pending;
  if (null !== h3) {
    e2.shared.pending = null;
    var k2 = h3, l2 = k2.next;
    k2.next = null;
    null === g2 ? f2 = l2 : g2.next = l2;
    g2 = k2;
    var m2 = a.alternate;
    null !== m2 && (m2 = m2.updateQueue, h3 = m2.lastBaseUpdate, h3 !== g2 && (null === h3 ? m2.firstBaseUpdate = l2 : h3.next = l2, m2.lastBaseUpdate = k2));
  }
  if (null !== f2) {
    var q2 = e2.baseState;
    g2 = 0;
    m2 = l2 = k2 = null;
    h3 = f2;
    do {
      var r2 = h3.lane, y2 = h3.eventTime;
      if ((d2 & r2) === r2) {
        null !== m2 && (m2 = m2.next = {
          eventTime: y2,
          lane: 0,
          tag: h3.tag,
          payload: h3.payload,
          callback: h3.callback,
          next: null
        });
        a: {
          var n2 = a, t2 = h3;
          r2 = b2;
          y2 = c2;
          switch (t2.tag) {
            case 1:
              n2 = t2.payload;
              if ("function" === typeof n2) {
                q2 = n2.call(y2, q2, r2);
                break a;
              }
              q2 = n2;
              break a;
            case 3:
              n2.flags = n2.flags & -65537 | 128;
            case 0:
              n2 = t2.payload;
              r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
              if (null === r2 || void 0 === r2)
                break a;
              q2 = A$1({}, q2, r2);
              break a;
            case 2:
              $g = true;
          }
        }
        null !== h3.callback && 0 !== h3.lane && (a.flags |= 64, r2 = e2.effects, null === r2 ? e2.effects = [h3] : r2.push(h3));
      } else
        y2 = { eventTime: y2, lane: r2, tag: h3.tag, payload: h3.payload, callback: h3.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g2 |= r2;
      h3 = h3.next;
      if (null === h3)
        if (h3 = e2.shared.pending, null === h3)
          break;
        else
          r2 = h3, h3 = r2.next, r2.next = null, e2.lastBaseUpdate = r2, e2.shared.pending = null;
    } while (1);
    null === m2 && (k2 = q2);
    e2.baseState = k2;
    e2.firstBaseUpdate = l2;
    e2.lastBaseUpdate = m2;
    b2 = e2.shared.interleaved;
    if (null !== b2) {
      e2 = b2;
      do
        g2 |= e2.lane, e2 = e2.next;
      while (e2 !== b2);
    } else
      null === f2 && (e2.shared.lanes = 0);
    hh |= g2;
    a.lanes = g2;
    a.memoizedState = q2;
  }
}
function ih(a, b2, c2) {
  a = b2.effects;
  b2.effects = null;
  if (null !== a)
    for (b2 = 0; b2 < a.length; b2++) {
      var d2 = a[b2], e2 = d2.callback;
      if (null !== e2) {
        d2.callback = null;
        d2 = c2;
        if ("function" !== typeof e2)
          throw Error(p$1(191, e2));
        e2.call(d2);
      }
    }
}
var jh = new aa.Component().refs;
function kh(a, b2, c2, d2) {
  b2 = a.memoizedState;
  c2 = c2(d2, b2);
  c2 = null === c2 || void 0 === c2 ? b2 : A$1({}, b2, c2);
  a.memoizedState = c2;
  0 === a.lanes && (a.updateQueue.baseState = c2);
}
var nh = { isMounted: function(a) {
  return (a = a._reactInternals) ? Vb(a) === a : false;
}, enqueueSetState: function(a, b2, c2) {
  a = a._reactInternals;
  var d2 = L(), e2 = lh(a), f2 = ch(d2, e2);
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = dh(a, f2, e2);
  null !== b2 && (mh(b2, a, e2, d2), eh(b2, a, e2));
}, enqueueReplaceState: function(a, b2, c2) {
  a = a._reactInternals;
  var d2 = L(), e2 = lh(a), f2 = ch(d2, e2);
  f2.tag = 1;
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = dh(a, f2, e2);
  null !== b2 && (mh(b2, a, e2, d2), eh(b2, a, e2));
}, enqueueForceUpdate: function(a, b2) {
  a = a._reactInternals;
  var c2 = L(), d2 = lh(a), e2 = ch(c2, d2);
  e2.tag = 2;
  void 0 !== b2 && null !== b2 && (e2.callback = b2);
  b2 = dh(a, e2, d2);
  null !== b2 && (mh(b2, a, d2, c2), eh(b2, a, d2));
} };
function oh(a, b2, c2, d2, e2, f2, g2) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie(c2, d2) || !Ie(e2, f2) : true;
}
function ph(a, b2, c2) {
  var d2 = false, e2 = Vf;
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? f2 = Vg(f2) : (e2 = Zf(b2) ? Xf : H.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Yf(a, e2) : Vf);
  b2 = new b2(c2, f2);
  a.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
  b2.updater = nh;
  a.stateNode = b2;
  b2._reactInternals = a;
  d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e2, a.__reactInternalMemoizedMaskedChildContext = f2);
  return b2;
}
function qh(a, b2, c2, d2) {
  a = b2.state;
  "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
  "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
  b2.state !== a && nh.enqueueReplaceState(b2, b2.state, null);
}
function rh(a, b2, c2, d2) {
  var e2 = a.stateNode;
  e2.props = c2;
  e2.state = a.memoizedState;
  e2.refs = jh;
  ah(a);
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? e2.context = Vg(f2) : (f2 = Zf(b2) ? Xf : H.current, e2.context = Yf(a, f2));
  e2.state = a.memoizedState;
  f2 = b2.getDerivedStateFromProps;
  "function" === typeof f2 && (kh(a, b2, f2, c2), e2.state = a.memoizedState);
  "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e2.getSnapshotBeforeUpdate || "function" !== typeof e2.UNSAFE_componentWillMount && "function" !== typeof e2.componentWillMount || (b2 = e2.state, "function" === typeof e2.componentWillMount && e2.componentWillMount(), "function" === typeof e2.UNSAFE_componentWillMount && e2.UNSAFE_componentWillMount(), b2 !== e2.state && nh.enqueueReplaceState(e2, e2.state, null), gh(a, c2, e2, d2), e2.state = a.memoizedState);
  "function" === typeof e2.componentDidMount && (a.flags |= 4194308);
}
function sh(a, b2, c2) {
  a = c2.ref;
  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c2._owner) {
      c2 = c2._owner;
      if (c2) {
        if (1 !== c2.tag)
          throw Error(p$1(309));
        var d2 = c2.stateNode;
      }
      if (!d2)
        throw Error(p$1(147, a));
      var e2 = d2, f2 = "" + a;
      if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2)
        return b2.ref;
      b2 = function(a2) {
        var b3 = e2.refs;
        b3 === jh && (b3 = e2.refs = {});
        null === a2 ? delete b3[f2] : b3[f2] = a2;
      };
      b2._stringRef = f2;
      return b2;
    }
    if ("string" !== typeof a)
      throw Error(p$1(284));
    if (!c2._owner)
      throw Error(p$1(290, a));
  }
  return a;
}
function th(a, b2) {
  a = Object.prototype.toString.call(b2);
  throw Error(p$1(31, "[object Object]" === a ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a));
}
function uh(a) {
  var b2 = a._init;
  return b2(a._payload);
}
function vh(a) {
  function b2(b3, c3) {
    if (a) {
      var d3 = b3.deletions;
      null === d3 ? (b3.deletions = [c3], b3.flags |= 16) : d3.push(c3);
    }
  }
  function c2(c3, d3) {
    if (!a)
      return null;
    for (; null !== d3; )
      b2(c3, d3), d3 = d3.sibling;
    return null;
  }
  function d2(a2, b3) {
    for (a2 = /* @__PURE__ */ new Map(); null !== b3; )
      null !== b3.key ? a2.set(b3.key, b3) : a2.set(b3.index, b3), b3 = b3.sibling;
    return a2;
  }
  function e2(a2, b3) {
    a2 = wh(a2, b3);
    a2.index = 0;
    a2.sibling = null;
    return a2;
  }
  function f2(b3, c3, d3) {
    b3.index = d3;
    if (!a)
      return b3.flags |= 1048576, c3;
    d3 = b3.alternate;
    if (null !== d3)
      return d3 = d3.index, d3 < c3 ? (b3.flags |= 2, c3) : d3;
    b3.flags |= 2;
    return c3;
  }
  function g2(b3) {
    a && null === b3.alternate && (b3.flags |= 2);
    return b3;
  }
  function h3(a2, b3, c3, d3) {
    if (null === b3 || 6 !== b3.tag)
      return b3 = xh(c3, a2.mode, d3), b3.return = a2, b3;
    b3 = e2(b3, c3);
    b3.return = a2;
    return b3;
  }
  function k2(a2, b3, c3, d3) {
    var f3 = c3.type;
    if (f3 === ya)
      return m2(a2, b3, c3.props.children, d3, c3.key);
    if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && uh(f3) === b3.type))
      return d3 = e2(b3, c3.props), d3.ref = sh(a2, b3, c3), d3.return = a2, d3;
    d3 = yh(c3.type, c3.key, c3.props, null, a2.mode, d3);
    d3.ref = sh(a2, b3, c3);
    d3.return = a2;
    return d3;
  }
  function l2(a2, b3, c3, d3) {
    if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
      return b3 = zh(c3, a2.mode, d3), b3.return = a2, b3;
    b3 = e2(b3, c3.children || []);
    b3.return = a2;
    return b3;
  }
  function m2(a2, b3, c3, d3, f3) {
    if (null === b3 || 7 !== b3.tag)
      return b3 = Ah(c3, a2.mode, d3, f3), b3.return = a2, b3;
    b3 = e2(b3, c3);
    b3.return = a2;
    return b3;
  }
  function q2(a2, b3, c3) {
    if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3)
      return b3 = xh("" + b3, a2.mode, c3), b3.return = a2, b3;
    if ("object" === typeof b3 && null !== b3) {
      switch (b3.$$typeof) {
        case va:
          return c3 = yh(b3.type, b3.key, b3.props, null, a2.mode, c3), c3.ref = sh(a2, null, b3), c3.return = a2, c3;
        case wa:
          return b3 = zh(b3, a2.mode, c3), b3.return = a2, b3;
        case Ha:
          var d3 = b3._init;
          return q2(a2, d3(b3._payload), c3);
      }
      if (eb(b3) || Ka(b3))
        return b3 = Ah(b3, a2.mode, c3, null), b3.return = a2, b3;
      th(a2, b3);
    }
    return null;
  }
  function r2(a2, b3, c3, d3) {
    var e3 = null !== b3 ? b3.key : null;
    if ("string" === typeof c3 && "" !== c3 || "number" === typeof c3)
      return null !== e3 ? null : h3(a2, b3, "" + c3, d3);
    if ("object" === typeof c3 && null !== c3) {
      switch (c3.$$typeof) {
        case va:
          return c3.key === e3 ? k2(a2, b3, c3, d3) : null;
        case wa:
          return c3.key === e3 ? l2(a2, b3, c3, d3) : null;
        case Ha:
          return e3 = c3._init, r2(
            a2,
            b3,
            e3(c3._payload),
            d3
          );
      }
      if (eb(c3) || Ka(c3))
        return null !== e3 ? null : m2(a2, b3, c3, d3, null);
      th(a2, c3);
    }
    return null;
  }
  function y2(a2, b3, c3, d3, e3) {
    if ("string" === typeof d3 && "" !== d3 || "number" === typeof d3)
      return a2 = a2.get(c3) || null, h3(b3, a2, "" + d3, e3);
    if ("object" === typeof d3 && null !== d3) {
      switch (d3.$$typeof) {
        case va:
          return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, k2(b3, a2, d3, e3);
        case wa:
          return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a2, d3, e3);
        case Ha:
          var f3 = d3._init;
          return y2(a2, b3, c3, f3(d3._payload), e3);
      }
      if (eb(d3) || Ka(d3))
        return a2 = a2.get(c3) || null, m2(b3, a2, d3, e3, null);
      th(b3, d3);
    }
    return null;
  }
  function n2(e3, g3, h4, k3) {
    for (var l3 = null, m3 = null, u2 = g3, w2 = g3 = 0, x2 = null; null !== u2 && w2 < h4.length; w2++) {
      u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
      var n3 = r2(e3, u2, h4[w2], k3);
      if (null === n3) {
        null === u2 && (u2 = x2);
        break;
      }
      a && u2 && null === n3.alternate && b2(e3, u2);
      g3 = f2(n3, g3, w2);
      null === m3 ? l3 = n3 : m3.sibling = n3;
      m3 = n3;
      u2 = x2;
    }
    if (w2 === h4.length)
      return c2(e3, u2), I && tg(e3, w2), l3;
    if (null === u2) {
      for (; w2 < h4.length; w2++)
        u2 = q2(e3, h4[w2], k3), null !== u2 && (g3 = f2(u2, g3, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
      I && tg(e3, w2);
      return l3;
    }
    for (u2 = d2(e3, u2); w2 < h4.length; w2++)
      x2 = y2(u2, e3, w2, h4[w2], k3), null !== x2 && (a && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g3 = f2(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
    a && u2.forEach(function(a2) {
      return b2(e3, a2);
    });
    I && tg(e3, w2);
    return l3;
  }
  function t2(e3, g3, h4, k3) {
    var l3 = Ka(h4);
    if ("function" !== typeof l3)
      throw Error(p$1(150));
    h4 = l3.call(h4);
    if (null == h4)
      throw Error(p$1(151));
    for (var u2 = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n3 = h4.next(); null !== m3 && !n3.done; w2++, n3 = h4.next()) {
      m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
      var t3 = r2(e3, m3, n3.value, k3);
      if (null === t3) {
        null === m3 && (m3 = x2);
        break;
      }
      a && m3 && null === t3.alternate && b2(e3, m3);
      g3 = f2(t3, g3, w2);
      null === u2 ? l3 = t3 : u2.sibling = t3;
      u2 = t3;
      m3 = x2;
    }
    if (n3.done)
      return c2(
        e3,
        m3
      ), I && tg(e3, w2), l3;
    if (null === m3) {
      for (; !n3.done; w2++, n3 = h4.next())
        n3 = q2(e3, n3.value, k3), null !== n3 && (g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
      I && tg(e3, w2);
      return l3;
    }
    for (m3 = d2(e3, m3); !n3.done; w2++, n3 = h4.next())
      n3 = y2(m3, e3, w2, n3.value, k3), null !== n3 && (a && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
    a && m3.forEach(function(a2) {
      return b2(e3, a2);
    });
    I && tg(e3, w2);
    return l3;
  }
  function J2(a2, d3, f3, h4) {
    "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
    if ("object" === typeof f3 && null !== f3) {
      switch (f3.$$typeof) {
        case va:
          a: {
            for (var k3 = f3.key, l3 = d3; null !== l3; ) {
              if (l3.key === k3) {
                k3 = f3.type;
                if (k3 === ya) {
                  if (7 === l3.tag) {
                    c2(a2, l3.sibling);
                    d3 = e2(l3, f3.props.children);
                    d3.return = a2;
                    a2 = d3;
                    break a;
                  }
                } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && uh(k3) === l3.type) {
                  c2(a2, l3.sibling);
                  d3 = e2(l3, f3.props);
                  d3.ref = sh(a2, l3, f3);
                  d3.return = a2;
                  a2 = d3;
                  break a;
                }
                c2(a2, l3);
                break;
              } else
                b2(a2, l3);
              l3 = l3.sibling;
            }
            f3.type === ya ? (d3 = Ah(f3.props.children, a2.mode, h4, f3.key), d3.return = a2, a2 = d3) : (h4 = yh(f3.type, f3.key, f3.props, null, a2.mode, h4), h4.ref = sh(a2, d3, f3), h4.return = a2, a2 = h4);
          }
          return g2(a2);
        case wa:
          a: {
            for (l3 = f3.key; null !== d3; ) {
              if (d3.key === l3)
                if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                  c2(a2, d3.sibling);
                  d3 = e2(d3, f3.children || []);
                  d3.return = a2;
                  a2 = d3;
                  break a;
                } else {
                  c2(a2, d3);
                  break;
                }
              else
                b2(a2, d3);
              d3 = d3.sibling;
            }
            d3 = zh(f3, a2.mode, h4);
            d3.return = a2;
            a2 = d3;
          }
          return g2(a2);
        case Ha:
          return l3 = f3._init, J2(a2, d3, l3(f3._payload), h4);
      }
      if (eb(f3))
        return n2(a2, d3, f3, h4);
      if (Ka(f3))
        return t2(a2, d3, f3, h4);
      th(a2, f3);
    }
    return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a2, d3.sibling), d3 = e2(d3, f3), d3.return = a2, a2 = d3) : (c2(a2, d3), d3 = xh(f3, a2.mode, h4), d3.return = a2, a2 = d3), g2(a2)) : c2(a2, d3);
  }
  return J2;
}
var Bh = vh(true), Ch = vh(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
function Hh(a) {
  if (a === Dh)
    throw Error(p$1(174));
  return a;
}
function Ih(a, b2) {
  G(Gh, b2);
  G(Fh, a);
  G(Eh, Dh);
  a = b2.nodeType;
  switch (a) {
    case 9:
    case 11:
      b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
      break;
    default:
      a = 8 === a ? b2.parentNode : b2, b2 = a.namespaceURI || null, a = a.tagName, b2 = lb(b2, a);
  }
  E(Eh);
  G(Eh, b2);
}
function Jh() {
  E(Eh);
  E(Fh);
  E(Gh);
}
function Kh(a) {
  Hh(Gh.current);
  var b2 = Hh(Eh.current);
  var c2 = lb(b2, a.type);
  b2 !== c2 && (G(Fh, a), G(Eh, c2));
}
function Lh(a) {
  Fh.current === a && (E(Eh), E(Fh));
}
var M = Uf(0);
function Mh(a) {
  for (var b2 = a; null !== b2; ) {
    if (13 === b2.tag) {
      var c2 = b2.memoizedState;
      if (null !== c2 && (c2 = c2.dehydrated, null === c2 || "$?" === c2.data || "$!" === c2.data))
        return b2;
    } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
      if (0 !== (b2.flags & 128))
        return b2;
    } else if (null !== b2.child) {
      b2.child.return = b2;
      b2 = b2.child;
      continue;
    }
    if (b2 === a)
      break;
    for (; null === b2.sibling; ) {
      if (null === b2.return || b2.return === a)
        return null;
      b2 = b2.return;
    }
    b2.sibling.return = b2.return;
    b2 = b2.sibling;
  }
  return null;
}
var Nh = [];
function Oh() {
  for (var a = 0; a < Nh.length; a++)
    Nh[a]._workInProgressVersionPrimary = null;
  Nh.length = 0;
}
var Ph = ua.ReactCurrentDispatcher, Qh = ua.ReactCurrentBatchConfig, Rh = 0, N = null, O = null, P = null, Sh = false, Th = false, Uh = 0, Vh = 0;
function Q() {
  throw Error(p$1(321));
}
function Wh(a, b2) {
  if (null === b2)
    return false;
  for (var c2 = 0; c2 < b2.length && c2 < a.length; c2++)
    if (!He(a[c2], b2[c2]))
      return false;
  return true;
}
function Xh(a, b2, c2, d2, e2, f2) {
  Rh = f2;
  N = b2;
  b2.memoizedState = null;
  b2.updateQueue = null;
  b2.lanes = 0;
  Ph.current = null === a || null === a.memoizedState ? Yh : Zh;
  a = c2(d2, e2);
  if (Th) {
    f2 = 0;
    do {
      Th = false;
      Uh = 0;
      if (25 <= f2)
        throw Error(p$1(301));
      f2 += 1;
      P = O = null;
      b2.updateQueue = null;
      Ph.current = $h;
      a = c2(d2, e2);
    } while (Th);
  }
  Ph.current = ai;
  b2 = null !== O && null !== O.next;
  Rh = 0;
  P = O = N = null;
  Sh = false;
  if (b2)
    throw Error(p$1(300));
  return a;
}
function bi() {
  var a = 0 !== Uh;
  Uh = 0;
  return a;
}
function ci() {
  var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  null === P ? N.memoizedState = P = a : P = P.next = a;
  return P;
}
function di() {
  if (null === O) {
    var a = N.alternate;
    a = null !== a ? a.memoizedState : null;
  } else
    a = O.next;
  var b2 = null === P ? N.memoizedState : P.next;
  if (null !== b2)
    P = b2, O = a;
  else {
    if (null === a)
      throw Error(p$1(310));
    O = a;
    a = { memoizedState: O.memoizedState, baseState: O.baseState, baseQueue: O.baseQueue, queue: O.queue, next: null };
    null === P ? N.memoizedState = P = a : P = P.next = a;
  }
  return P;
}
function ei(a, b2) {
  return "function" === typeof b2 ? b2(a) : b2;
}
function fi(a) {
  var b2 = di(), c2 = b2.queue;
  if (null === c2)
    throw Error(p$1(311));
  c2.lastRenderedReducer = a;
  var d2 = O, e2 = d2.baseQueue, f2 = c2.pending;
  if (null !== f2) {
    if (null !== e2) {
      var g2 = e2.next;
      e2.next = f2.next;
      f2.next = g2;
    }
    d2.baseQueue = e2 = f2;
    c2.pending = null;
  }
  if (null !== e2) {
    f2 = e2.next;
    d2 = d2.baseState;
    var h3 = g2 = null, k2 = null, l2 = f2;
    do {
      var m2 = l2.lane;
      if ((Rh & m2) === m2)
        null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d2 = l2.hasEagerState ? l2.eagerState : a(d2, l2.action);
      else {
        var q2 = {
          lane: m2,
          action: l2.action,
          hasEagerState: l2.hasEagerState,
          eagerState: l2.eagerState,
          next: null
        };
        null === k2 ? (h3 = k2 = q2, g2 = d2) : k2 = k2.next = q2;
        N.lanes |= m2;
        hh |= m2;
      }
      l2 = l2.next;
    } while (null !== l2 && l2 !== f2);
    null === k2 ? g2 = d2 : k2.next = h3;
    He(d2, b2.memoizedState) || (Ug = true);
    b2.memoizedState = d2;
    b2.baseState = g2;
    b2.baseQueue = k2;
    c2.lastRenderedState = d2;
  }
  a = c2.interleaved;
  if (null !== a) {
    e2 = a;
    do
      f2 = e2.lane, N.lanes |= f2, hh |= f2, e2 = e2.next;
    while (e2 !== a);
  } else
    null === e2 && (c2.lanes = 0);
  return [b2.memoizedState, c2.dispatch];
}
function gi(a) {
  var b2 = di(), c2 = b2.queue;
  if (null === c2)
    throw Error(p$1(311));
  c2.lastRenderedReducer = a;
  var d2 = c2.dispatch, e2 = c2.pending, f2 = b2.memoizedState;
  if (null !== e2) {
    c2.pending = null;
    var g2 = e2 = e2.next;
    do
      f2 = a(f2, g2.action), g2 = g2.next;
    while (g2 !== e2);
    He(f2, b2.memoizedState) || (Ug = true);
    b2.memoizedState = f2;
    null === b2.baseQueue && (b2.baseState = f2);
    c2.lastRenderedState = f2;
  }
  return [f2, d2];
}
function hi() {
}
function ii(a, b2) {
  var c2 = N, d2 = di(), e2 = b2(), f2 = !He(d2.memoizedState, e2);
  f2 && (d2.memoizedState = e2, Ug = true);
  d2 = d2.queue;
  ji(ki.bind(null, c2, d2, a), [a]);
  if (d2.getSnapshot !== b2 || f2 || null !== P && P.memoizedState.tag & 1) {
    c2.flags |= 2048;
    li(9, mi.bind(null, c2, d2, e2, b2), void 0, null);
    if (null === R)
      throw Error(p$1(349));
    0 !== (Rh & 30) || ni(c2, b2, e2);
  }
  return e2;
}
function ni(a, b2, c2) {
  a.flags |= 16384;
  a = { getSnapshot: b2, value: c2 };
  b2 = N.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, N.updateQueue = b2, b2.stores = [a]) : (c2 = b2.stores, null === c2 ? b2.stores = [a] : c2.push(a));
}
function mi(a, b2, c2, d2) {
  b2.value = c2;
  b2.getSnapshot = d2;
  oi(b2) && pi(a);
}
function ki(a, b2, c2) {
  return c2(function() {
    oi(b2) && pi(a);
  });
}
function oi(a) {
  var b2 = a.getSnapshot;
  a = a.value;
  try {
    var c2 = b2();
    return !He(a, c2);
  } catch (d2) {
    return true;
  }
}
function pi(a) {
  var b2 = Zg(a, 1);
  null !== b2 && mh(b2, a, 1, -1);
}
function qi(a) {
  var b2 = ci();
  "function" === typeof a && (a = a());
  b2.memoizedState = b2.baseState = a;
  a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a };
  b2.queue = a;
  a = a.dispatch = ri.bind(null, N, a);
  return [b2.memoizedState, a];
}
function li(a, b2, c2, d2) {
  a = { tag: a, create: b2, destroy: c2, deps: d2, next: null };
  b2 = N.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, N.updateQueue = b2, b2.lastEffect = a.next = a) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a.next = a : (d2 = c2.next, c2.next = a, a.next = d2, b2.lastEffect = a));
  return a;
}
function si() {
  return di().memoizedState;
}
function ti(a, b2, c2, d2) {
  var e2 = ci();
  N.flags |= a;
  e2.memoizedState = li(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
}
function ui(a, b2, c2, d2) {
  var e2 = di();
  d2 = void 0 === d2 ? null : d2;
  var f2 = void 0;
  if (null !== O) {
    var g2 = O.memoizedState;
    f2 = g2.destroy;
    if (null !== d2 && Wh(d2, g2.deps)) {
      e2.memoizedState = li(b2, c2, f2, d2);
      return;
    }
  }
  N.flags |= a;
  e2.memoizedState = li(1 | b2, c2, f2, d2);
}
function vi(a, b2) {
  return ti(8390656, 8, a, b2);
}
function ji(a, b2) {
  return ui(2048, 8, a, b2);
}
function wi(a, b2) {
  return ui(4, 2, a, b2);
}
function xi(a, b2) {
  return ui(4, 4, a, b2);
}
function yi(a, b2) {
  if ("function" === typeof b2)
    return a = a(), b2(a), function() {
      b2(null);
    };
  if (null !== b2 && void 0 !== b2)
    return a = a(), b2.current = a, function() {
      b2.current = null;
    };
}
function zi(a, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
  return ui(4, 4, yi.bind(null, b2, a), c2);
}
function Ai() {
}
function Bi(a, b2) {
  var c2 = di();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
    return d2[0];
  c2.memoizedState = [a, b2];
  return a;
}
function Ci(a, b2) {
  var c2 = di();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
    return d2[0];
  a = a();
  c2.memoizedState = [a, b2];
  return a;
}
function Di(a, b2, c2) {
  if (0 === (Rh & 21))
    return a.baseState && (a.baseState = false, Ug = true), a.memoizedState = c2;
  He(c2, b2) || (c2 = yc(), N.lanes |= c2, hh |= c2, a.baseState = true);
  return b2;
}
function Ei(a, b2) {
  var c2 = C;
  C = 0 !== c2 && 4 > c2 ? c2 : 4;
  a(true);
  var d2 = Qh.transition;
  Qh.transition = {};
  try {
    a(false), b2();
  } finally {
    C = c2, Qh.transition = d2;
  }
}
function Fi() {
  return di().memoizedState;
}
function Gi(a, b2, c2) {
  var d2 = lh(a);
  c2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (Hi(a))
    Ii(b2, c2);
  else if (c2 = Yg(a, b2, c2, d2), null !== c2) {
    var e2 = L();
    mh(c2, a, d2, e2);
    Ji(c2, b2, d2);
  }
}
function ri(a, b2, c2) {
  var d2 = lh(a), e2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (Hi(a))
    Ii(b2, e2);
  else {
    var f2 = a.alternate;
    if (0 === a.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2))
      try {
        var g2 = b2.lastRenderedState, h3 = f2(g2, c2);
        e2.hasEagerState = true;
        e2.eagerState = h3;
        if (He(h3, g2)) {
          var k2 = b2.interleaved;
          null === k2 ? (e2.next = e2, Xg(b2)) : (e2.next = k2.next, k2.next = e2);
          b2.interleaved = e2;
          return;
        }
      } catch (l2) {
      } finally {
      }
    c2 = Yg(a, b2, e2, d2);
    null !== c2 && (e2 = L(), mh(c2, a, d2, e2), Ji(c2, b2, d2));
  }
}
function Hi(a) {
  var b2 = a.alternate;
  return a === N || null !== b2 && b2 === N;
}
function Ii(a, b2) {
  Th = Sh = true;
  var c2 = a.pending;
  null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
  a.pending = b2;
}
function Ji(a, b2, c2) {
  if (0 !== (c2 & 4194240)) {
    var d2 = b2.lanes;
    d2 &= a.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a, c2);
  }
}
var ai = { readContext: Vg, useCallback: Q, useContext: Q, useEffect: Q, useImperativeHandle: Q, useInsertionEffect: Q, useLayoutEffect: Q, useMemo: Q, useReducer: Q, useRef: Q, useState: Q, useDebugValue: Q, useDeferredValue: Q, useTransition: Q, useMutableSource: Q, useSyncExternalStore: Q, useId: Q, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a, b2) {
  ci().memoizedState = [a, void 0 === b2 ? null : b2];
  return a;
}, useContext: Vg, useEffect: vi, useImperativeHandle: function(a, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
  return ti(
    4194308,
    4,
    yi.bind(null, b2, a),
    c2
  );
}, useLayoutEffect: function(a, b2) {
  return ti(4194308, 4, a, b2);
}, useInsertionEffect: function(a, b2) {
  return ti(4, 2, a, b2);
}, useMemo: function(a, b2) {
  var c2 = ci();
  b2 = void 0 === b2 ? null : b2;
  a = a();
  c2.memoizedState = [a, b2];
  return a;
}, useReducer: function(a, b2, c2) {
  var d2 = ci();
  b2 = void 0 !== c2 ? c2(b2) : b2;
  d2.memoizedState = d2.baseState = b2;
  a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b2 };
  d2.queue = a;
  a = a.dispatch = Gi.bind(null, N, a);
  return [d2.memoizedState, a];
}, useRef: function(a) {
  var b2 = ci();
  a = { current: a };
  return b2.memoizedState = a;
}, useState: qi, useDebugValue: Ai, useDeferredValue: function(a) {
  return ci().memoizedState = a;
}, useTransition: function() {
  var a = qi(false), b2 = a[0];
  a = Ei.bind(null, a[1]);
  ci().memoizedState = a;
  return [b2, a];
}, useMutableSource: function() {
}, useSyncExternalStore: function(a, b2, c2) {
  var d2 = N, e2 = ci();
  if (I) {
    if (void 0 === c2)
      throw Error(p$1(407));
    c2 = c2();
  } else {
    c2 = b2();
    if (null === R)
      throw Error(p$1(349));
    0 !== (Rh & 30) || ni(d2, b2, c2);
  }
  e2.memoizedState = c2;
  var f2 = { value: c2, getSnapshot: b2 };
  e2.queue = f2;
  vi(ki.bind(
    null,
    d2,
    f2,
    a
  ), [a]);
  d2.flags |= 2048;
  li(9, mi.bind(null, d2, f2, c2, b2), void 0, null);
  return c2;
}, useId: function() {
  var a = ci(), b2 = R.identifierPrefix;
  if (I) {
    var c2 = sg;
    var d2 = rg;
    c2 = (d2 & ~(1 << 32 - oc(d2) - 1)).toString(32) + c2;
    b2 = ":" + b2 + "R" + c2;
    c2 = Uh++;
    0 < c2 && (b2 += "H" + c2.toString(32));
    b2 += ":";
  } else
    c2 = Vh++, b2 = ":" + b2 + "r" + c2.toString(32) + ":";
  return a.memoizedState = b2;
}, unstable_isNewReconciler: false }, Zh = {
  readContext: Vg,
  useCallback: Bi,
  useContext: Vg,
  useEffect: ji,
  useImperativeHandle: zi,
  useInsertionEffect: wi,
  useLayoutEffect: xi,
  useMemo: Ci,
  useReducer: fi,
  useRef: si,
  useState: function() {
    return fi(ei);
  },
  useDebugValue: Ai,
  useDeferredValue: function(a) {
    var b2 = di();
    return Di(b2, O.memoizedState, a);
  },
  useTransition: function() {
    var a = fi(ei)[0], b2 = di().memoizedState;
    return [a, b2];
  },
  useMutableSource: hi,
  useSyncExternalStore: ii,
  useId: Fi,
  unstable_isNewReconciler: false
}, $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
  return gi(ei);
}, useDebugValue: Ai, useDeferredValue: function(a) {
  var b2 = di();
  return null === O ? b2.memoizedState = a : Di(b2, O.memoizedState, a);
}, useTransition: function() {
  var a = gi(ei)[0], b2 = di().memoizedState;
  return [a, b2];
}, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
function Ki(a, b2) {
  try {
    var c2 = "", d2 = b2;
    do
      c2 += Pa(d2), d2 = d2.return;
    while (d2);
    var e2 = c2;
  } catch (f2) {
    e2 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a, source: b2, stack: e2, digest: null };
}
function Li(a, b2, c2) {
  return { value: a, source: null, stack: null != c2 ? c2 : null, digest: null != b2 ? b2 : null };
}
function Mi(a, b2) {
  try {
    console.error(b2.value);
  } catch (c2) {
    setTimeout(function() {
      throw c2;
    });
  }
}
var Ni = "function" === typeof WeakMap ? WeakMap : Map;
function Oi(a, b2, c2) {
  c2 = ch(-1, c2);
  c2.tag = 3;
  c2.payload = { element: null };
  var d2 = b2.value;
  c2.callback = function() {
    Pi || (Pi = true, Qi = d2);
    Mi(a, b2);
  };
  return c2;
}
function Ri(a, b2, c2) {
  c2 = ch(-1, c2);
  c2.tag = 3;
  var d2 = a.type.getDerivedStateFromError;
  if ("function" === typeof d2) {
    var e2 = b2.value;
    c2.payload = function() {
      return d2(e2);
    };
    c2.callback = function() {
      Mi(a, b2);
    };
  }
  var f2 = a.stateNode;
  null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
    Mi(a, b2);
    "function" !== typeof d2 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
    var c3 = b2.stack;
    this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
  });
  return c2;
}
function Ti(a, b2, c2) {
  var d2 = a.pingCache;
  if (null === d2) {
    d2 = a.pingCache = new Ni();
    var e2 = /* @__PURE__ */ new Set();
    d2.set(b2, e2);
  } else
    e2 = d2.get(b2), void 0 === e2 && (e2 = /* @__PURE__ */ new Set(), d2.set(b2, e2));
  e2.has(c2) || (e2.add(c2), a = Ui.bind(null, a, b2, c2), b2.then(a, a));
}
function Vi(a) {
  do {
    var b2;
    if (b2 = 13 === a.tag)
      b2 = a.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
    if (b2)
      return a;
    a = a.return;
  } while (null !== a);
  return null;
}
function Wi(a, b2, c2, d2, e2) {
  if (0 === (a.mode & 1))
    return a === b2 ? a.flags |= 65536 : (a.flags |= 128, c2.flags |= 131072, c2.flags &= -52805, 1 === c2.tag && (null === c2.alternate ? c2.tag = 17 : (b2 = ch(-1, 1), b2.tag = 2, dh(c2, b2, 1))), c2.lanes |= 1), a;
  a.flags |= 65536;
  a.lanes = e2;
  return a;
}
var Xi = ua.ReactCurrentOwner, Ug = false;
function Yi(a, b2, c2, d2) {
  b2.child = null === a ? Ch(b2, null, c2, d2) : Bh(b2, a.child, c2, d2);
}
function Zi(a, b2, c2, d2, e2) {
  c2 = c2.render;
  var f2 = b2.ref;
  Tg(b2, e2);
  d2 = Xh(a, b2, c2, d2, f2, e2);
  c2 = bi();
  if (null !== a && !Ug)
    return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e2, $i(a, b2, e2);
  I && c2 && vg(b2);
  b2.flags |= 1;
  Yi(a, b2, d2, e2);
  return b2.child;
}
function aj(a, b2, c2, d2, e2) {
  if (null === a) {
    var f2 = c2.type;
    if ("function" === typeof f2 && !bj(f2) && void 0 === f2.defaultProps && null === c2.compare && void 0 === c2.defaultProps)
      return b2.tag = 15, b2.type = f2, cj(a, b2, f2, d2, e2);
    a = yh(c2.type, null, d2, b2, b2.mode, e2);
    a.ref = b2.ref;
    a.return = b2;
    return b2.child = a;
  }
  f2 = a.child;
  if (0 === (a.lanes & e2)) {
    var g2 = f2.memoizedProps;
    c2 = c2.compare;
    c2 = null !== c2 ? c2 : Ie;
    if (c2(g2, d2) && a.ref === b2.ref)
      return $i(a, b2, e2);
  }
  b2.flags |= 1;
  a = wh(f2, d2);
  a.ref = b2.ref;
  a.return = b2;
  return b2.child = a;
}
function cj(a, b2, c2, d2, e2) {
  if (null !== a) {
    var f2 = a.memoizedProps;
    if (Ie(f2, d2) && a.ref === b2.ref)
      if (Ug = false, b2.pendingProps = d2 = f2, 0 !== (a.lanes & e2))
        0 !== (a.flags & 131072) && (Ug = true);
      else
        return b2.lanes = a.lanes, $i(a, b2, e2);
  }
  return dj(a, b2, c2, d2, e2);
}
function ej(a, b2, c2) {
  var d2 = b2.pendingProps, e2 = d2.children, f2 = null !== a ? a.memoizedState : null;
  if ("hidden" === d2.mode)
    if (0 === (b2.mode & 1))
      b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(fj, gj), gj |= c2;
    else {
      if (0 === (c2 & 1073741824))
        return a = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b2.updateQueue = null, G(fj, gj), gj |= a, null;
      b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
      d2 = null !== f2 ? f2.baseLanes : c2;
      G(fj, gj);
      gj |= d2;
    }
  else
    null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, G(fj, gj), gj |= d2;
  Yi(a, b2, e2, c2);
  return b2.child;
}
function hj(a, b2) {
  var c2 = b2.ref;
  if (null === a && null !== c2 || null !== a && a.ref !== c2)
    b2.flags |= 512, b2.flags |= 2097152;
}
function dj(a, b2, c2, d2, e2) {
  var f2 = Zf(c2) ? Xf : H.current;
  f2 = Yf(b2, f2);
  Tg(b2, e2);
  c2 = Xh(a, b2, c2, d2, f2, e2);
  d2 = bi();
  if (null !== a && !Ug)
    return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e2, $i(a, b2, e2);
  I && d2 && vg(b2);
  b2.flags |= 1;
  Yi(a, b2, c2, e2);
  return b2.child;
}
function ij(a, b2, c2, d2, e2) {
  if (Zf(c2)) {
    var f2 = true;
    cg(b2);
  } else
    f2 = false;
  Tg(b2, e2);
  if (null === b2.stateNode)
    jj(a, b2), ph(b2, c2, d2), rh(b2, c2, d2, e2), d2 = true;
  else if (null === a) {
    var g2 = b2.stateNode, h3 = b2.memoizedProps;
    g2.props = h3;
    var k2 = g2.context, l2 = c2.contextType;
    "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c2) ? Xf : H.current, l2 = Yf(b2, l2));
    var m2 = c2.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
    q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h3 !== d2 || k2 !== l2) && qh(b2, g2, d2, l2);
    $g = false;
    var r2 = b2.memoizedState;
    g2.state = r2;
    gh(b2, d2, g2, e2);
    k2 = b2.memoizedState;
    h3 !== d2 || r2 !== k2 || Wf.current || $g ? ("function" === typeof m2 && (kh(b2, c2, m2, d2), k2 = b2.memoizedState), (h3 = $g || oh(b2, c2, h3, d2, r2, k2, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h3) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d2 = false);
  } else {
    g2 = b2.stateNode;
    bh(a, b2);
    h3 = b2.memoizedProps;
    l2 = b2.type === b2.elementType ? h3 : Lg(b2.type, h3);
    g2.props = l2;
    q2 = b2.pendingProps;
    r2 = g2.context;
    k2 = c2.contextType;
    "object" === typeof k2 && null !== k2 ? k2 = Vg(k2) : (k2 = Zf(c2) ? Xf : H.current, k2 = Yf(b2, k2));
    var y2 = c2.getDerivedStateFromProps;
    (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h3 !== q2 || r2 !== k2) && qh(b2, g2, d2, k2);
    $g = false;
    r2 = b2.memoizedState;
    g2.state = r2;
    gh(b2, d2, g2, e2);
    var n2 = b2.memoizedState;
    h3 !== q2 || r2 !== n2 || Wf.current || $g ? ("function" === typeof y2 && (kh(b2, c2, y2, d2), n2 = b2.memoizedState), (l2 = $g || oh(b2, c2, l2, d2, r2, n2, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, n2, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, n2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d2, b2.memoizedState = n2), g2.props = d2, g2.state = n2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), d2 = false);
  }
  return kj(a, b2, c2, d2, f2, e2);
}
function kj(a, b2, c2, d2, e2, f2) {
  hj(a, b2);
  var g2 = 0 !== (b2.flags & 128);
  if (!d2 && !g2)
    return e2 && dg(b2, c2, false), $i(a, b2, f2);
  d2 = b2.stateNode;
  Xi.current = b2;
  var h3 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
  b2.flags |= 1;
  null !== a && g2 ? (b2.child = Bh(b2, a.child, null, f2), b2.child = Bh(b2, null, h3, f2)) : Yi(a, b2, h3, f2);
  b2.memoizedState = d2.state;
  e2 && dg(b2, c2, true);
  return b2.child;
}
function lj(a) {
  var b2 = a.stateNode;
  b2.pendingContext ? ag(a, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a, b2.context, false);
  Ih(a, b2.containerInfo);
}
function mj(a, b2, c2, d2, e2) {
  Ig();
  Jg(e2);
  b2.flags |= 256;
  Yi(a, b2, c2, d2);
  return b2.child;
}
var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
function oj(a) {
  return { baseLanes: a, cachePool: null, transitions: null };
}
function pj(a, b2, c2) {
  var d2 = b2.pendingProps, e2 = M.current, f2 = false, g2 = 0 !== (b2.flags & 128), h3;
  (h3 = g2) || (h3 = null !== a && null === a.memoizedState ? false : 0 !== (e2 & 2));
  if (h3)
    f2 = true, b2.flags &= -129;
  else if (null === a || null !== a.memoizedState)
    e2 |= 1;
  G(M, e2 & 1);
  if (null === a) {
    Eg(b2);
    a = b2.memoizedState;
    if (null !== a && (a = a.dehydrated, null !== a))
      return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
    g2 = d2.children;
    a = d2.fallback;
    return f2 ? (d2 = b2.mode, f2 = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d2 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = qj(g2, d2, 0, null), a = Ah(a, d2, c2, null), f2.return = b2, a.return = b2, f2.sibling = a, b2.child = f2, b2.child.memoizedState = oj(c2), b2.memoizedState = nj, a) : rj(b2, g2);
  }
  e2 = a.memoizedState;
  if (null !== e2 && (h3 = e2.dehydrated, null !== h3))
    return sj(a, b2, g2, d2, h3, e2, c2);
  if (f2) {
    f2 = d2.fallback;
    g2 = b2.mode;
    e2 = a.child;
    h3 = e2.sibling;
    var k2 = { mode: "hidden", children: d2.children };
    0 === (g2 & 1) && b2.child !== e2 ? (d2 = b2.child, d2.childLanes = 0, d2.pendingProps = k2, b2.deletions = null) : (d2 = wh(e2, k2), d2.subtreeFlags = e2.subtreeFlags & 14680064);
    null !== h3 ? f2 = wh(h3, f2) : (f2 = Ah(f2, g2, c2, null), f2.flags |= 2);
    f2.return = b2;
    d2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    d2 = f2;
    f2 = b2.child;
    g2 = a.child.memoizedState;
    g2 = null === g2 ? oj(c2) : { baseLanes: g2.baseLanes | c2, cachePool: null, transitions: g2.transitions };
    f2.memoizedState = g2;
    f2.childLanes = a.childLanes & ~c2;
    b2.memoizedState = nj;
    return d2;
  }
  f2 = a.child;
  a = f2.sibling;
  d2 = wh(f2, { mode: "visible", children: d2.children });
  0 === (b2.mode & 1) && (d2.lanes = c2);
  d2.return = b2;
  d2.sibling = null;
  null !== a && (c2 = b2.deletions, null === c2 ? (b2.deletions = [a], b2.flags |= 16) : c2.push(a));
  b2.child = d2;
  b2.memoizedState = null;
  return d2;
}
function rj(a, b2) {
  b2 = qj({ mode: "visible", children: b2 }, a.mode, 0, null);
  b2.return = a;
  return a.child = b2;
}
function tj(a, b2, c2, d2) {
  null !== d2 && Jg(d2);
  Bh(b2, a.child, null, c2);
  a = rj(b2, b2.pendingProps.children);
  a.flags |= 2;
  b2.memoizedState = null;
  return a;
}
function sj(a, b2, c2, d2, e2, f2, g2) {
  if (c2) {
    if (b2.flags & 256)
      return b2.flags &= -257, d2 = Li(Error(p$1(422))), tj(a, b2, g2, d2);
    if (null !== b2.memoizedState)
      return b2.child = a.child, b2.flags |= 128, null;
    f2 = d2.fallback;
    e2 = b2.mode;
    d2 = qj({ mode: "visible", children: d2.children }, e2, 0, null);
    f2 = Ah(f2, e2, g2, null);
    f2.flags |= 2;
    d2.return = b2;
    f2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    0 !== (b2.mode & 1) && Bh(b2, a.child, null, g2);
    b2.child.memoizedState = oj(g2);
    b2.memoizedState = nj;
    return f2;
  }
  if (0 === (b2.mode & 1))
    return tj(a, b2, g2, null);
  if ("$!" === e2.data) {
    d2 = e2.nextSibling && e2.nextSibling.dataset;
    if (d2)
      var h3 = d2.dgst;
    d2 = h3;
    f2 = Error(p$1(419));
    d2 = Li(f2, d2, void 0);
    return tj(a, b2, g2, d2);
  }
  h3 = 0 !== (g2 & a.childLanes);
  if (Ug || h3) {
    d2 = R;
    if (null !== d2) {
      switch (g2 & -g2) {
        case 4:
          e2 = 2;
          break;
        case 16:
          e2 = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          e2 = 32;
          break;
        case 536870912:
          e2 = 268435456;
          break;
        default:
          e2 = 0;
      }
      e2 = 0 !== (e2 & (d2.suspendedLanes | g2)) ? 0 : e2;
      0 !== e2 && e2 !== f2.retryLane && (f2.retryLane = e2, Zg(a, e2), mh(d2, a, e2, -1));
    }
    uj();
    d2 = Li(Error(p$1(421)));
    return tj(a, b2, g2, d2);
  }
  if ("$?" === e2.data)
    return b2.flags |= 128, b2.child = a.child, b2 = vj.bind(null, a), e2._reactRetry = b2, null;
  a = f2.treeContext;
  yg = Lf(e2.nextSibling);
  xg = b2;
  I = true;
  zg = null;
  null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b2);
  b2 = rj(b2, d2.children);
  b2.flags |= 4096;
  return b2;
}
function wj(a, b2, c2) {
  a.lanes |= b2;
  var d2 = a.alternate;
  null !== d2 && (d2.lanes |= b2);
  Sg(a.return, b2, c2);
}
function xj(a, b2, c2, d2, e2) {
  var f2 = a.memoizedState;
  null === f2 ? a.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e2 } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d2, f2.tail = c2, f2.tailMode = e2);
}
function yj(a, b2, c2) {
  var d2 = b2.pendingProps, e2 = d2.revealOrder, f2 = d2.tail;
  Yi(a, b2, d2.children, c2);
  d2 = M.current;
  if (0 !== (d2 & 2))
    d2 = d2 & 1 | 2, b2.flags |= 128;
  else {
    if (null !== a && 0 !== (a.flags & 128))
      a:
        for (a = b2.child; null !== a; ) {
          if (13 === a.tag)
            null !== a.memoizedState && wj(a, c2, b2);
          else if (19 === a.tag)
            wj(a, c2, b2);
          else if (null !== a.child) {
            a.child.return = a;
            a = a.child;
            continue;
          }
          if (a === b2)
            break a;
          for (; null === a.sibling; ) {
            if (null === a.return || a.return === b2)
              break a;
            a = a.return;
          }
          a.sibling.return = a.return;
          a = a.sibling;
        }
    d2 &= 1;
  }
  G(M, d2);
  if (0 === (b2.mode & 1))
    b2.memoizedState = null;
  else
    switch (e2) {
      case "forwards":
        c2 = b2.child;
        for (e2 = null; null !== c2; )
          a = c2.alternate, null !== a && null === Mh(a) && (e2 = c2), c2 = c2.sibling;
        c2 = e2;
        null === c2 ? (e2 = b2.child, b2.child = null) : (e2 = c2.sibling, c2.sibling = null);
        xj(b2, false, e2, c2, f2);
        break;
      case "backwards":
        c2 = null;
        e2 = b2.child;
        for (b2.child = null; null !== e2; ) {
          a = e2.alternate;
          if (null !== a && null === Mh(a)) {
            b2.child = e2;
            break;
          }
          a = e2.sibling;
          e2.sibling = c2;
          c2 = e2;
          e2 = a;
        }
        xj(b2, true, c2, null, f2);
        break;
      case "together":
        xj(b2, false, null, null, void 0);
        break;
      default:
        b2.memoizedState = null;
    }
  return b2.child;
}
function jj(a, b2) {
  0 === (b2.mode & 1) && null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2);
}
function $i(a, b2, c2) {
  null !== a && (b2.dependencies = a.dependencies);
  hh |= b2.lanes;
  if (0 === (c2 & b2.childLanes))
    return null;
  if (null !== a && b2.child !== a.child)
    throw Error(p$1(153));
  if (null !== b2.child) {
    a = b2.child;
    c2 = wh(a, a.pendingProps);
    b2.child = c2;
    for (c2.return = b2; null !== a.sibling; )
      a = a.sibling, c2 = c2.sibling = wh(a, a.pendingProps), c2.return = b2;
    c2.sibling = null;
  }
  return b2.child;
}
function zj(a, b2, c2) {
  switch (b2.tag) {
    case 3:
      lj(b2);
      Ig();
      break;
    case 5:
      Kh(b2);
      break;
    case 1:
      Zf(b2.type) && cg(b2);
      break;
    case 4:
      Ih(b2, b2.stateNode.containerInfo);
      break;
    case 10:
      var d2 = b2.type._context, e2 = b2.memoizedProps.value;
      G(Mg, d2._currentValue);
      d2._currentValue = e2;
      break;
    case 13:
      d2 = b2.memoizedState;
      if (null !== d2) {
        if (null !== d2.dehydrated)
          return G(M, M.current & 1), b2.flags |= 128, null;
        if (0 !== (c2 & b2.child.childLanes))
          return pj(a, b2, c2);
        G(M, M.current & 1);
        a = $i(a, b2, c2);
        return null !== a ? a.sibling : null;
      }
      G(M, M.current & 1);
      break;
    case 19:
      d2 = 0 !== (c2 & b2.childLanes);
      if (0 !== (a.flags & 128)) {
        if (d2)
          return yj(a, b2, c2);
        b2.flags |= 128;
      }
      e2 = b2.memoizedState;
      null !== e2 && (e2.rendering = null, e2.tail = null, e2.lastEffect = null);
      G(M, M.current);
      if (d2)
        break;
      else
        return null;
    case 22:
    case 23:
      return b2.lanes = 0, ej(a, b2, c2);
  }
  return $i(a, b2, c2);
}
var Aj, Bj, Cj, Dj;
Aj = function(a, b2) {
  for (var c2 = b2.child; null !== c2; ) {
    if (5 === c2.tag || 6 === c2.tag)
      a.appendChild(c2.stateNode);
    else if (4 !== c2.tag && null !== c2.child) {
      c2.child.return = c2;
      c2 = c2.child;
      continue;
    }
    if (c2 === b2)
      break;
    for (; null === c2.sibling; ) {
      if (null === c2.return || c2.return === b2)
        return;
      c2 = c2.return;
    }
    c2.sibling.return = c2.return;
    c2 = c2.sibling;
  }
};
Bj = function() {
};
Cj = function(a, b2, c2, d2) {
  var e2 = a.memoizedProps;
  if (e2 !== d2) {
    a = b2.stateNode;
    Hh(Eh.current);
    var f2 = null;
    switch (c2) {
      case "input":
        e2 = Ya(a, e2);
        d2 = Ya(a, d2);
        f2 = [];
        break;
      case "select":
        e2 = A$1({}, e2, { value: void 0 });
        d2 = A$1({}, d2, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e2 = gb(a, e2);
        d2 = gb(a, d2);
        f2 = [];
        break;
      default:
        "function" !== typeof e2.onClick && "function" === typeof d2.onClick && (a.onclick = Bf);
    }
    ub(c2, d2);
    var g2;
    c2 = null;
    for (l2 in e2)
      if (!d2.hasOwnProperty(l2) && e2.hasOwnProperty(l2) && null != e2[l2])
        if ("style" === l2) {
          var h3 = e2[l2];
          for (g2 in h3)
            h3.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
        } else
          "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d2) {
      var k2 = d2[l2];
      h3 = null != e2 ? e2[l2] : void 0;
      if (d2.hasOwnProperty(l2) && k2 !== h3 && (null != k2 || null != h3))
        if ("style" === l2)
          if (h3) {
            for (g2 in h3)
              !h3.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
            for (g2 in k2)
              k2.hasOwnProperty(g2) && h3[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
          } else
            c2 || (f2 || (f2 = []), f2.push(
              l2,
              c2
            )), c2 = k2;
        else
          "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h3 = h3 ? h3.__html : void 0, null != k2 && h3 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D("scroll", a), f2 || h3 === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
    }
    c2 && (f2 = f2 || []).push("style", c2);
    var l2 = f2;
    if (b2.updateQueue = l2)
      b2.flags |= 4;
  }
};
Dj = function(a, b2, c2, d2) {
  c2 !== d2 && (b2.flags |= 4);
};
function Ej(a, b2) {
  if (!I)
    switch (a.tailMode) {
      case "hidden":
        b2 = a.tail;
        for (var c2 = null; null !== b2; )
          null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
        null === c2 ? a.tail = null : c2.sibling = null;
        break;
      case "collapsed":
        c2 = a.tail;
        for (var d2 = null; null !== c2; )
          null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
        null === d2 ? b2 || null === a.tail ? a.tail = null : a.tail.sibling = null : d2.sibling = null;
    }
}
function S(a) {
  var b2 = null !== a.alternate && a.alternate.child === a.child, c2 = 0, d2 = 0;
  if (b2)
    for (var e2 = a.child; null !== e2; )
      c2 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags & 14680064, d2 |= e2.flags & 14680064, e2.return = a, e2 = e2.sibling;
  else
    for (e2 = a.child; null !== e2; )
      c2 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags, d2 |= e2.flags, e2.return = a, e2 = e2.sibling;
  a.subtreeFlags |= d2;
  a.childLanes = c2;
  return b2;
}
function Fj(a, b2, c2) {
  var d2 = b2.pendingProps;
  wg(b2);
  switch (b2.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return S(b2), null;
    case 1:
      return Zf(b2.type) && $f(), S(b2), null;
    case 3:
      d2 = b2.stateNode;
      Jh();
      E(Wf);
      E(H);
      Oh();
      d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
      if (null === a || null === a.child)
        Gg(b2) ? b2.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Gj(zg), zg = null));
      Bj(a, b2);
      S(b2);
      return null;
    case 5:
      Lh(b2);
      var e2 = Hh(Gh.current);
      c2 = b2.type;
      if (null !== a && null != b2.stateNode)
        Cj(a, b2, c2, d2, e2), a.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      else {
        if (!d2) {
          if (null === b2.stateNode)
            throw Error(p$1(166));
          S(b2);
          return null;
        }
        a = Hh(Eh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.type;
          var f2 = b2.memoizedProps;
          d2[Of] = b2;
          d2[Pf] = f2;
          a = 0 !== (b2.mode & 1);
          switch (c2) {
            case "dialog":
              D("cancel", d2);
              D("close", d2);
              break;
            case "iframe":
            case "object":
            case "embed":
              D("load", d2);
              break;
            case "video":
            case "audio":
              for (e2 = 0; e2 < lf.length; e2++)
                D(lf[e2], d2);
              break;
            case "source":
              D("error", d2);
              break;
            case "img":
            case "image":
            case "link":
              D(
                "error",
                d2
              );
              D("load", d2);
              break;
            case "details":
              D("toggle", d2);
              break;
            case "input":
              Za(d2, f2);
              D("invalid", d2);
              break;
            case "select":
              d2._wrapperState = { wasMultiple: !!f2.multiple };
              D("invalid", d2);
              break;
            case "textarea":
              hb(d2, f2), D("invalid", d2);
          }
          ub(c2, f2);
          e2 = null;
          for (var g2 in f2)
            if (f2.hasOwnProperty(g2)) {
              var h3 = f2[g2];
              "children" === g2 ? "string" === typeof h3 ? d2.textContent !== h3 && (true !== f2.suppressHydrationWarning && Af(d2.textContent, h3, a), e2 = ["children", h3]) : "number" === typeof h3 && d2.textContent !== "" + h3 && (true !== f2.suppressHydrationWarning && Af(
                d2.textContent,
                h3,
                a
              ), e2 = ["children", "" + h3]) : ea.hasOwnProperty(g2) && null != h3 && "onScroll" === g2 && D("scroll", d2);
            }
          switch (c2) {
            case "input":
              Va(d2);
              db(d2, f2, true);
              break;
            case "textarea":
              Va(d2);
              jb(d2);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f2.onClick && (d2.onclick = Bf);
          }
          d2 = e2;
          b2.updateQueue = d2;
          null !== d2 && (b2.flags |= 4);
        } else {
          g2 = 9 === e2.nodeType ? e2 : e2.ownerDocument;
          "http://www.w3.org/1999/xhtml" === a && (a = kb(c2));
          "http://www.w3.org/1999/xhtml" === a ? "script" === c2 ? (a = g2.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d2.is ? a = g2.createElement(c2, { is: d2.is }) : (a = g2.createElement(c2), "select" === c2 && (g2 = a, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a = g2.createElementNS(a, c2);
          a[Of] = b2;
          a[Pf] = d2;
          Aj(a, b2, false, false);
          b2.stateNode = a;
          a: {
            g2 = vb(c2, d2);
            switch (c2) {
              case "dialog":
                D("cancel", a);
                D("close", a);
                e2 = d2;
                break;
              case "iframe":
              case "object":
              case "embed":
                D("load", a);
                e2 = d2;
                break;
              case "video":
              case "audio":
                for (e2 = 0; e2 < lf.length; e2++)
                  D(lf[e2], a);
                e2 = d2;
                break;
              case "source":
                D("error", a);
                e2 = d2;
                break;
              case "img":
              case "image":
              case "link":
                D(
                  "error",
                  a
                );
                D("load", a);
                e2 = d2;
                break;
              case "details":
                D("toggle", a);
                e2 = d2;
                break;
              case "input":
                Za(a, d2);
                e2 = Ya(a, d2);
                D("invalid", a);
                break;
              case "option":
                e2 = d2;
                break;
              case "select":
                a._wrapperState = { wasMultiple: !!d2.multiple };
                e2 = A$1({}, d2, { value: void 0 });
                D("invalid", a);
                break;
              case "textarea":
                hb(a, d2);
                e2 = gb(a, d2);
                D("invalid", a);
                break;
              default:
                e2 = d2;
            }
            ub(c2, e2);
            h3 = e2;
            for (f2 in h3)
              if (h3.hasOwnProperty(f2)) {
                var k2 = h3[f2];
                "style" === f2 ? sb(a, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c2 || "" !== k2) && ob(a, k2) : "number" === typeof k2 && ob(a, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D("scroll", a) : null != k2 && ta(a, f2, k2, g2));
              }
            switch (c2) {
              case "input":
                Va(a);
                db(a, d2, false);
                break;
              case "textarea":
                Va(a);
                jb(a);
                break;
              case "option":
                null != d2.value && a.setAttribute("value", "" + Sa(d2.value));
                break;
              case "select":
                a.multiple = !!d2.multiple;
                f2 = d2.value;
                null != f2 ? fb(a, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(
                  a,
                  !!d2.multiple,
                  d2.defaultValue,
                  true
                );
                break;
              default:
                "function" === typeof e2.onClick && (a.onclick = Bf);
            }
            switch (c2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                d2 = !!d2.autoFocus;
                break a;
              case "img":
                d2 = true;
                break a;
              default:
                d2 = false;
            }
          }
          d2 && (b2.flags |= 4);
        }
        null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      }
      S(b2);
      return null;
    case 6:
      if (a && null != b2.stateNode)
        Dj(a, b2, a.memoizedProps, d2);
      else {
        if ("string" !== typeof d2 && null === b2.stateNode)
          throw Error(p$1(166));
        c2 = Hh(Gh.current);
        Hh(Eh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.memoizedProps;
          d2[Of] = b2;
          if (f2 = d2.nodeValue !== c2) {
            if (a = xg, null !== a)
              switch (a.tag) {
                case 3:
                  Af(d2.nodeValue, c2, 0 !== (a.mode & 1));
                  break;
                case 5:
                  true !== a.memoizedProps.suppressHydrationWarning && Af(d2.nodeValue, c2, 0 !== (a.mode & 1));
              }
          }
          f2 && (b2.flags |= 4);
        } else
          d2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), d2[Of] = b2, b2.stateNode = d2;
      }
      S(b2);
      return null;
    case 13:
      E(M);
      d2 = b2.memoizedState;
      if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
        if (I && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128))
          Hg(), Ig(), b2.flags |= 98560, f2 = false;
        else if (f2 = Gg(b2), null !== d2 && null !== d2.dehydrated) {
          if (null === a) {
            if (!f2)
              throw Error(p$1(318));
            f2 = b2.memoizedState;
            f2 = null !== f2 ? f2.dehydrated : null;
            if (!f2)
              throw Error(p$1(317));
            f2[Of] = b2;
          } else
            Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
          S(b2);
          f2 = false;
        } else
          null !== zg && (Gj(zg), zg = null), f2 = true;
        if (!f2)
          return b2.flags & 65536 ? b2 : null;
      }
      if (0 !== (b2.flags & 128))
        return b2.lanes = c2, b2;
      d2 = null !== d2;
      d2 !== (null !== a && null !== a.memoizedState) && d2 && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a || 0 !== (M.current & 1) ? 0 === T && (T = 3) : uj()));
      null !== b2.updateQueue && (b2.flags |= 4);
      S(b2);
      return null;
    case 4:
      return Jh(), Bj(a, b2), null === a && sf(b2.stateNode.containerInfo), S(b2), null;
    case 10:
      return Rg(b2.type._context), S(b2), null;
    case 17:
      return Zf(b2.type) && $f(), S(b2), null;
    case 19:
      E(M);
      f2 = b2.memoizedState;
      if (null === f2)
        return S(b2), null;
      d2 = 0 !== (b2.flags & 128);
      g2 = f2.rendering;
      if (null === g2)
        if (d2)
          Ej(f2, false);
        else {
          if (0 !== T || null !== a && 0 !== (a.flags & 128))
            for (a = b2.child; null !== a; ) {
              g2 = Mh(a);
              if (null !== g2) {
                b2.flags |= 128;
                Ej(f2, false);
                d2 = g2.updateQueue;
                null !== d2 && (b2.updateQueue = d2, b2.flags |= 4);
                b2.subtreeFlags = 0;
                d2 = c2;
                for (c2 = b2.child; null !== c2; )
                  f2 = c2, a = d2, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a = g2.dependencies, f2.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c2 = c2.sibling;
                G(M, M.current & 1 | 2);
                return b2.child;
              }
              a = a.sibling;
            }
          null !== f2.tail && B() > Hj && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
        }
      else {
        if (!d2)
          if (a = Mh(g2), null !== a) {
            if (b2.flags |= 128, d2 = true, c2 = a.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.flags |= 4), Ej(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I)
              return S(b2), null;
          } else
            2 * B() - f2.renderingStartTime > Hj && 1073741824 !== c2 && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
        f2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = f2.last, null !== c2 ? c2.sibling = g2 : b2.child = g2, f2.last = g2);
      }
      if (null !== f2.tail)
        return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B(), b2.sibling = null, c2 = M.current, G(M, d2 ? c2 & 1 | 2 : c2 & 1), b2;
      S(b2);
      return null;
    case 22:
    case 23:
      return Ij(), d2 = null !== b2.memoizedState, null !== a && null !== a.memoizedState !== d2 && (b2.flags |= 8192), d2 && 0 !== (b2.mode & 1) ? 0 !== (gj & 1073741824) && (S(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S(b2), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(p$1(156, b2.tag));
}
function Jj(a, b2) {
  wg(b2);
  switch (b2.tag) {
    case 1:
      return Zf(b2.type) && $f(), a = b2.flags, a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
    case 3:
      return Jh(), E(Wf), E(H), Oh(), a = b2.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b2.flags = a & -65537 | 128, b2) : null;
    case 5:
      return Lh(b2), null;
    case 13:
      E(M);
      a = b2.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        if (null === b2.alternate)
          throw Error(p$1(340));
        Ig();
      }
      a = b2.flags;
      return a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
    case 19:
      return E(M), null;
    case 4:
      return Jh(), null;
    case 10:
      return Rg(b2.type._context), null;
    case 22:
    case 23:
      return Ij(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Kj = false, U = false, Lj = "function" === typeof WeakSet ? WeakSet : Set, V = null;
function Mj(a, b2) {
  var c2 = a.ref;
  if (null !== c2)
    if ("function" === typeof c2)
      try {
        c2(null);
      } catch (d2) {
        W(a, b2, d2);
      }
    else
      c2.current = null;
}
function Nj(a, b2, c2) {
  try {
    c2();
  } catch (d2) {
    W(a, b2, d2);
  }
}
var Oj = false;
function Pj(a, b2) {
  Cf = dd;
  a = Me();
  if (Ne(a)) {
    if ("selectionStart" in a)
      var c2 = { start: a.selectionStart, end: a.selectionEnd };
    else
      a: {
        c2 = (c2 = a.ownerDocument) && c2.defaultView || window;
        var d2 = c2.getSelection && c2.getSelection();
        if (d2 && 0 !== d2.rangeCount) {
          c2 = d2.anchorNode;
          var e2 = d2.anchorOffset, f2 = d2.focusNode;
          d2 = d2.focusOffset;
          try {
            c2.nodeType, f2.nodeType;
          } catch (F2) {
            c2 = null;
            break a;
          }
          var g2 = 0, h3 = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a, r2 = null;
          b:
            for (; ; ) {
              for (var y2; ; ) {
                q2 !== c2 || 0 !== e2 && 3 !== q2.nodeType || (h3 = g2 + e2);
                q2 !== f2 || 0 !== d2 && 3 !== q2.nodeType || (k2 = g2 + d2);
                3 === q2.nodeType && (g2 += q2.nodeValue.length);
                if (null === (y2 = q2.firstChild))
                  break;
                r2 = q2;
                q2 = y2;
              }
              for (; ; ) {
                if (q2 === a)
                  break b;
                r2 === c2 && ++l2 === e2 && (h3 = g2);
                r2 === f2 && ++m2 === d2 && (k2 = g2);
                if (null !== (y2 = q2.nextSibling))
                  break;
                q2 = r2;
                r2 = q2.parentNode;
              }
              q2 = y2;
            }
          c2 = -1 === h3 || -1 === k2 ? null : { start: h3, end: k2 };
        } else
          c2 = null;
      }
    c2 = c2 || { start: 0, end: 0 };
  } else
    c2 = null;
  Df = { focusedElem: a, selectionRange: c2 };
  dd = false;
  for (V = b2; null !== V; )
    if (b2 = V, a = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a)
      a.return = b2, V = a;
    else
      for (; null !== V; ) {
        b2 = V;
        try {
          var n2 = b2.alternate;
          if (0 !== (b2.flags & 1024))
            switch (b2.tag) {
              case 0:
              case 11:
              case 15:
                break;
              case 1:
                if (null !== n2) {
                  var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Lg(b2.type, t2), J2);
                  x2.__reactInternalSnapshotBeforeUpdate = w2;
                }
                break;
              case 3:
                var u2 = b2.stateNode.containerInfo;
                1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
                break;
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(p$1(163));
            }
        } catch (F2) {
          W(b2, b2.return, F2);
        }
        a = b2.sibling;
        if (null !== a) {
          a.return = b2.return;
          V = a;
          break;
        }
        V = b2.return;
      }
  n2 = Oj;
  Oj = false;
  return n2;
}
function Qj(a, b2, c2) {
  var d2 = b2.updateQueue;
  d2 = null !== d2 ? d2.lastEffect : null;
  if (null !== d2) {
    var e2 = d2 = d2.next;
    do {
      if ((e2.tag & a) === a) {
        var f2 = e2.destroy;
        e2.destroy = void 0;
        void 0 !== f2 && Nj(b2, c2, f2);
      }
      e2 = e2.next;
    } while (e2 !== d2);
  }
}
function Rj(a, b2) {
  b2 = b2.updateQueue;
  b2 = null !== b2 ? b2.lastEffect : null;
  if (null !== b2) {
    var c2 = b2 = b2.next;
    do {
      if ((c2.tag & a) === a) {
        var d2 = c2.create;
        c2.destroy = d2();
      }
      c2 = c2.next;
    } while (c2 !== b2);
  }
}
function Sj(a) {
  var b2 = a.ref;
  if (null !== b2) {
    var c2 = a.stateNode;
    switch (a.tag) {
      case 5:
        a = c2;
        break;
      default:
        a = c2;
    }
    "function" === typeof b2 ? b2(a) : b2.current = a;
  }
}
function Tj(a) {
  var b2 = a.alternate;
  null !== b2 && (a.alternate = null, Tj(b2));
  a.child = null;
  a.deletions = null;
  a.sibling = null;
  5 === a.tag && (b2 = a.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
  a.stateNode = null;
  a.return = null;
  a.dependencies = null;
  a.memoizedProps = null;
  a.memoizedState = null;
  a.pendingProps = null;
  a.stateNode = null;
  a.updateQueue = null;
}
function Uj(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function Vj(a) {
  a:
    for (; ; ) {
      for (; null === a.sibling; ) {
        if (null === a.return || Uj(a.return))
          return null;
        a = a.return;
      }
      a.sibling.return = a.return;
      for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
        if (a.flags & 2)
          continue a;
        if (null === a.child || 4 === a.tag)
          continue a;
        else
          a.child.return = a, a = a.child;
      }
      if (!(a.flags & 2))
        return a.stateNode;
    }
}
function Wj(a, b2, c2) {
  var d2 = a.tag;
  if (5 === d2 || 6 === d2)
    a = a.stateNode, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a, b2) : c2.insertBefore(a, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a, c2)) : (b2 = c2, b2.appendChild(a)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = Bf));
  else if (4 !== d2 && (a = a.child, null !== a))
    for (Wj(a, b2, c2), a = a.sibling; null !== a; )
      Wj(a, b2, c2), a = a.sibling;
}
function Xj(a, b2, c2) {
  var d2 = a.tag;
  if (5 === d2 || 6 === d2)
    a = a.stateNode, b2 ? c2.insertBefore(a, b2) : c2.appendChild(a);
  else if (4 !== d2 && (a = a.child, null !== a))
    for (Xj(a, b2, c2), a = a.sibling; null !== a; )
      Xj(a, b2, c2), a = a.sibling;
}
var X = null, Yj = false;
function Zj(a, b2, c2) {
  for (c2 = c2.child; null !== c2; )
    ak(a, b2, c2), c2 = c2.sibling;
}
function ak(a, b2, c2) {
  if (lc && "function" === typeof lc.onCommitFiberUnmount)
    try {
      lc.onCommitFiberUnmount(kc, c2);
    } catch (h3) {
    }
  switch (c2.tag) {
    case 5:
      U || Mj(c2, b2);
    case 6:
      var d2 = X, e2 = Yj;
      X = null;
      Zj(a, b2, c2);
      X = d2;
      Yj = e2;
      null !== X && (Yj ? (a = X, c2 = c2.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c2) : a.removeChild(c2)) : X.removeChild(c2.stateNode));
      break;
    case 18:
      null !== X && (Yj ? (a = X, c2 = c2.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c2) : 1 === a.nodeType && Kf(a, c2), bd(a)) : Kf(X, c2.stateNode));
      break;
    case 4:
      d2 = X;
      e2 = Yj;
      X = c2.stateNode.containerInfo;
      Yj = true;
      Zj(a, b2, c2);
      X = d2;
      Yj = e2;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!U && (d2 = c2.updateQueue, null !== d2 && (d2 = d2.lastEffect, null !== d2))) {
        e2 = d2 = d2.next;
        do {
          var f2 = e2, g2 = f2.destroy;
          f2 = f2.tag;
          void 0 !== g2 && (0 !== (f2 & 2) ? Nj(c2, b2, g2) : 0 !== (f2 & 4) && Nj(c2, b2, g2));
          e2 = e2.next;
        } while (e2 !== d2);
      }
      Zj(a, b2, c2);
      break;
    case 1:
      if (!U && (Mj(c2, b2), d2 = c2.stateNode, "function" === typeof d2.componentWillUnmount))
        try {
          d2.props = c2.memoizedProps, d2.state = c2.memoizedState, d2.componentWillUnmount();
        } catch (h3) {
          W(c2, b2, h3);
        }
      Zj(a, b2, c2);
      break;
    case 21:
      Zj(a, b2, c2);
      break;
    case 22:
      c2.mode & 1 ? (U = (d2 = U) || null !== c2.memoizedState, Zj(a, b2, c2), U = d2) : Zj(a, b2, c2);
      break;
    default:
      Zj(a, b2, c2);
  }
}
function bk(a) {
  var b2 = a.updateQueue;
  if (null !== b2) {
    a.updateQueue = null;
    var c2 = a.stateNode;
    null === c2 && (c2 = a.stateNode = new Lj());
    b2.forEach(function(b3) {
      var d2 = ck.bind(null, a, b3);
      c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
    });
  }
}
function dk(a, b2) {
  var c2 = b2.deletions;
  if (null !== c2)
    for (var d2 = 0; d2 < c2.length; d2++) {
      var e2 = c2[d2];
      try {
        var f2 = a, g2 = b2, h3 = g2;
        a:
          for (; null !== h3; ) {
            switch (h3.tag) {
              case 5:
                X = h3.stateNode;
                Yj = false;
                break a;
              case 3:
                X = h3.stateNode.containerInfo;
                Yj = true;
                break a;
              case 4:
                X = h3.stateNode.containerInfo;
                Yj = true;
                break a;
            }
            h3 = h3.return;
          }
        if (null === X)
          throw Error(p$1(160));
        ak(f2, g2, e2);
        X = null;
        Yj = false;
        var k2 = e2.alternate;
        null !== k2 && (k2.return = null);
        e2.return = null;
      } catch (l2) {
        W(e2, b2, l2);
      }
    }
  if (b2.subtreeFlags & 12854)
    for (b2 = b2.child; null !== b2; )
      ek(b2, a), b2 = b2.sibling;
}
function ek(a, b2) {
  var c2 = a.alternate, d2 = a.flags;
  switch (a.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      dk(b2, a);
      fk(a);
      if (d2 & 4) {
        try {
          Qj(3, a, a.return), Rj(3, a);
        } catch (t2) {
          W(a, a.return, t2);
        }
        try {
          Qj(5, a, a.return);
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 1:
      dk(b2, a);
      fk(a);
      d2 & 512 && null !== c2 && Mj(c2, c2.return);
      break;
    case 5:
      dk(b2, a);
      fk(a);
      d2 & 512 && null !== c2 && Mj(c2, c2.return);
      if (a.flags & 32) {
        var e2 = a.stateNode;
        try {
          ob(e2, "");
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      if (d2 & 4 && (e2 = a.stateNode, null != e2)) {
        var f2 = a.memoizedProps, g2 = null !== c2 ? c2.memoizedProps : f2, h3 = a.type, k2 = a.updateQueue;
        a.updateQueue = null;
        if (null !== k2)
          try {
            "input" === h3 && "radio" === f2.type && null != f2.name && ab(e2, f2);
            vb(h3, g2);
            var l2 = vb(h3, f2);
            for (g2 = 0; g2 < k2.length; g2 += 2) {
              var m2 = k2[g2], q2 = k2[g2 + 1];
              "style" === m2 ? sb(e2, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e2, q2) : "children" === m2 ? ob(e2, q2) : ta(e2, m2, q2, l2);
            }
            switch (h3) {
              case "input":
                bb(e2, f2);
                break;
              case "textarea":
                ib(e2, f2);
                break;
              case "select":
                var r2 = e2._wrapperState.wasMultiple;
                e2._wrapperState.wasMultiple = !!f2.multiple;
                var y2 = f2.value;
                null != y2 ? fb(e2, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                  e2,
                  !!f2.multiple,
                  f2.defaultValue,
                  true
                ) : fb(e2, !!f2.multiple, f2.multiple ? [] : "", false));
            }
            e2[Pf] = f2;
          } catch (t2) {
            W(a, a.return, t2);
          }
      }
      break;
    case 6:
      dk(b2, a);
      fk(a);
      if (d2 & 4) {
        if (null === a.stateNode)
          throw Error(p$1(162));
        e2 = a.stateNode;
        f2 = a.memoizedProps;
        try {
          e2.nodeValue = f2;
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 3:
      dk(b2, a);
      fk(a);
      if (d2 & 4 && null !== c2 && c2.memoizedState.isDehydrated)
        try {
          bd(b2.containerInfo);
        } catch (t2) {
          W(a, a.return, t2);
        }
      break;
    case 4:
      dk(b2, a);
      fk(a);
      break;
    case 13:
      dk(b2, a);
      fk(a);
      e2 = a.child;
      e2.flags & 8192 && (f2 = null !== e2.memoizedState, e2.stateNode.isHidden = f2, !f2 || null !== e2.alternate && null !== e2.alternate.memoizedState || (gk = B()));
      d2 & 4 && bk(a);
      break;
    case 22:
      m2 = null !== c2 && null !== c2.memoizedState;
      a.mode & 1 ? (U = (l2 = U) || m2, dk(b2, a), U = l2) : dk(b2, a);
      fk(a);
      if (d2 & 8192) {
        l2 = null !== a.memoizedState;
        if ((a.stateNode.isHidden = l2) && !m2 && 0 !== (a.mode & 1))
          for (V = a, m2 = a.child; null !== m2; ) {
            for (q2 = V = m2; null !== V; ) {
              r2 = V;
              y2 = r2.child;
              switch (r2.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  Qj(4, r2, r2.return);
                  break;
                case 1:
                  Mj(r2, r2.return);
                  var n2 = r2.stateNode;
                  if ("function" === typeof n2.componentWillUnmount) {
                    d2 = r2;
                    c2 = r2.return;
                    try {
                      b2 = d2, n2.props = b2.memoizedProps, n2.state = b2.memoizedState, n2.componentWillUnmount();
                    } catch (t2) {
                      W(d2, c2, t2);
                    }
                  }
                  break;
                case 5:
                  Mj(r2, r2.return);
                  break;
                case 22:
                  if (null !== r2.memoizedState) {
                    hk(q2);
                    continue;
                  }
              }
              null !== y2 ? (y2.return = r2, V = y2) : hk(q2);
            }
            m2 = m2.sibling;
          }
        a:
          for (m2 = null, q2 = a; ; ) {
            if (5 === q2.tag) {
              if (null === m2) {
                m2 = q2;
                try {
                  e2 = q2.stateNode, l2 ? (f2 = e2.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h3 = q2.stateNode, k2 = q2.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h3.style.display = rb("display", g2));
                } catch (t2) {
                  W(a, a.return, t2);
                }
              }
            } else if (6 === q2.tag) {
              if (null === m2)
                try {
                  q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                } catch (t2) {
                  W(a, a.return, t2);
                }
            } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a) && null !== q2.child) {
              q2.child.return = q2;
              q2 = q2.child;
              continue;
            }
            if (q2 === a)
              break a;
            for (; null === q2.sibling; ) {
              if (null === q2.return || q2.return === a)
                break a;
              m2 === q2 && (m2 = null);
              q2 = q2.return;
            }
            m2 === q2 && (m2 = null);
            q2.sibling.return = q2.return;
            q2 = q2.sibling;
          }
      }
      break;
    case 19:
      dk(b2, a);
      fk(a);
      d2 & 4 && bk(a);
      break;
    case 21:
      break;
    default:
      dk(
        b2,
        a
      ), fk(a);
  }
}
function fk(a) {
  var b2 = a.flags;
  if (b2 & 2) {
    try {
      a: {
        for (var c2 = a.return; null !== c2; ) {
          if (Uj(c2)) {
            var d2 = c2;
            break a;
          }
          c2 = c2.return;
        }
        throw Error(p$1(160));
      }
      switch (d2.tag) {
        case 5:
          var e2 = d2.stateNode;
          d2.flags & 32 && (ob(e2, ""), d2.flags &= -33);
          var f2 = Vj(a);
          Xj(a, f2, e2);
          break;
        case 3:
        case 4:
          var g2 = d2.stateNode.containerInfo, h3 = Vj(a);
          Wj(a, h3, g2);
          break;
        default:
          throw Error(p$1(161));
      }
    } catch (k2) {
      W(a, a.return, k2);
    }
    a.flags &= -3;
  }
  b2 & 4096 && (a.flags &= -4097);
}
function ik(a, b2, c2) {
  V = a;
  jk(a);
}
function jk(a, b2, c2) {
  for (var d2 = 0 !== (a.mode & 1); null !== V; ) {
    var e2 = V, f2 = e2.child;
    if (22 === e2.tag && d2) {
      var g2 = null !== e2.memoizedState || Kj;
      if (!g2) {
        var h3 = e2.alternate, k2 = null !== h3 && null !== h3.memoizedState || U;
        h3 = Kj;
        var l2 = U;
        Kj = g2;
        if ((U = k2) && !l2)
          for (V = e2; null !== V; )
            g2 = V, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e2) : null !== k2 ? (k2.return = g2, V = k2) : kk(e2);
        for (; null !== f2; )
          V = f2, jk(f2), f2 = f2.sibling;
        V = e2;
        Kj = h3;
        U = l2;
      }
      lk(a);
    } else
      0 !== (e2.subtreeFlags & 8772) && null !== f2 ? (f2.return = e2, V = f2) : lk(a);
  }
}
function lk(a) {
  for (; null !== V; ) {
    var b2 = V;
    if (0 !== (b2.flags & 8772)) {
      var c2 = b2.alternate;
      try {
        if (0 !== (b2.flags & 8772))
          switch (b2.tag) {
            case 0:
            case 11:
            case 15:
              U || Rj(5, b2);
              break;
            case 1:
              var d2 = b2.stateNode;
              if (b2.flags & 4 && !U)
                if (null === c2)
                  d2.componentDidMount();
                else {
                  var e2 = b2.elementType === b2.type ? c2.memoizedProps : Lg(b2.type, c2.memoizedProps);
                  d2.componentDidUpdate(e2, c2.memoizedState, d2.__reactInternalSnapshotBeforeUpdate);
                }
              var f2 = b2.updateQueue;
              null !== f2 && ih(b2, f2, d2);
              break;
            case 3:
              var g2 = b2.updateQueue;
              if (null !== g2) {
                c2 = null;
                if (null !== b2.child)
                  switch (b2.child.tag) {
                    case 5:
                      c2 = b2.child.stateNode;
                      break;
                    case 1:
                      c2 = b2.child.stateNode;
                  }
                ih(b2, g2, c2);
              }
              break;
            case 5:
              var h3 = b2.stateNode;
              if (null === c2 && b2.flags & 4) {
                c2 = h3;
                var k2 = b2.memoizedProps;
                switch (b2.type) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    k2.autoFocus && c2.focus();
                    break;
                  case "img":
                    k2.src && (c2.src = k2.src);
                }
              }
              break;
            case 6:
              break;
            case 4:
              break;
            case 12:
              break;
            case 13:
              if (null === b2.memoizedState) {
                var l2 = b2.alternate;
                if (null !== l2) {
                  var m2 = l2.memoizedState;
                  if (null !== m2) {
                    var q2 = m2.dehydrated;
                    null !== q2 && bd(q2);
                  }
                }
              }
              break;
            case 19:
            case 17:
            case 21:
            case 22:
            case 23:
            case 25:
              break;
            default:
              throw Error(p$1(163));
          }
        U || b2.flags & 512 && Sj(b2);
      } catch (r2) {
        W(b2, b2.return, r2);
      }
    }
    if (b2 === a) {
      V = null;
      break;
    }
    c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V = c2;
      break;
    }
    V = b2.return;
  }
}
function hk(a) {
  for (; null !== V; ) {
    var b2 = V;
    if (b2 === a) {
      V = null;
      break;
    }
    var c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V = c2;
      break;
    }
    V = b2.return;
  }
}
function kk(a) {
  for (; null !== V; ) {
    var b2 = V;
    try {
      switch (b2.tag) {
        case 0:
        case 11:
        case 15:
          var c2 = b2.return;
          try {
            Rj(4, b2);
          } catch (k2) {
            W(b2, c2, k2);
          }
          break;
        case 1:
          var d2 = b2.stateNode;
          if ("function" === typeof d2.componentDidMount) {
            var e2 = b2.return;
            try {
              d2.componentDidMount();
            } catch (k2) {
              W(b2, e2, k2);
            }
          }
          var f2 = b2.return;
          try {
            Sj(b2);
          } catch (k2) {
            W(b2, f2, k2);
          }
          break;
        case 5:
          var g2 = b2.return;
          try {
            Sj(b2);
          } catch (k2) {
            W(b2, g2, k2);
          }
      }
    } catch (k2) {
      W(b2, b2.return, k2);
    }
    if (b2 === a) {
      V = null;
      break;
    }
    var h3 = b2.sibling;
    if (null !== h3) {
      h3.return = b2.return;
      V = h3;
      break;
    }
    V = b2.return;
  }
}
var mk = Math.ceil, nk = ua.ReactCurrentDispatcher, ok = ua.ReactCurrentOwner, pk = ua.ReactCurrentBatchConfig, K = 0, R = null, Y = null, Z = 0, gj = 0, fj = Uf(0), T = 0, qk = null, hh = 0, rk = 0, sk = 0, tk = null, uk = null, gk = 0, Hj = Infinity, vk = null, Pi = false, Qi = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
function L() {
  return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();
}
function lh(a) {
  if (0 === (a.mode & 1))
    return 1;
  if (0 !== (K & 2) && 0 !== Z)
    return Z & -Z;
  if (null !== Kg.transition)
    return 0 === Ck && (Ck = yc()), Ck;
  a = C;
  if (0 !== a)
    return a;
  a = window.event;
  a = void 0 === a ? 16 : jd(a.type);
  return a;
}
function mh(a, b2, c2, d2) {
  if (50 < zk)
    throw zk = 0, Ak = null, Error(p$1(185));
  Ac(a, c2, d2);
  if (0 === (K & 2) || a !== R)
    a === R && (0 === (K & 2) && (rk |= c2), 4 === T && Dk(a, Z)), Ek(a, d2), 1 === c2 && 0 === K && 0 === (b2.mode & 1) && (Hj = B() + 500, fg && jg());
}
function Ek(a, b2) {
  var c2 = a.callbackNode;
  wc(a, b2);
  var d2 = uc(a, a === R ? Z : 0);
  if (0 === d2)
    null !== c2 && bc(c2), a.callbackNode = null, a.callbackPriority = 0;
  else if (b2 = d2 & -d2, a.callbackPriority !== b2) {
    null != c2 && bc(c2);
    if (1 === b2)
      0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function() {
        0 === (K & 6) && jg();
      }), c2 = null;
    else {
      switch (Dc(d2)) {
        case 1:
          c2 = fc;
          break;
        case 4:
          c2 = gc;
          break;
        case 16:
          c2 = hc;
          break;
        case 536870912:
          c2 = jc;
          break;
        default:
          c2 = hc;
      }
      c2 = Gk(c2, Hk.bind(null, a));
    }
    a.callbackPriority = b2;
    a.callbackNode = c2;
  }
}
function Hk(a, b2) {
  Bk = -1;
  Ck = 0;
  if (0 !== (K & 6))
    throw Error(p$1(327));
  var c2 = a.callbackNode;
  if (Ik() && a.callbackNode !== c2)
    return null;
  var d2 = uc(a, a === R ? Z : 0);
  if (0 === d2)
    return null;
  if (0 !== (d2 & 30) || 0 !== (d2 & a.expiredLanes) || b2)
    b2 = Jk(a, d2);
  else {
    b2 = d2;
    var e2 = K;
    K |= 2;
    var f2 = Kk();
    if (R !== a || Z !== b2)
      vk = null, Hj = B() + 500, Lk(a, b2);
    do
      try {
        Mk();
        break;
      } catch (h3) {
        Nk(a, h3);
      }
    while (1);
    Qg();
    nk.current = f2;
    K = e2;
    null !== Y ? b2 = 0 : (R = null, Z = 0, b2 = T);
  }
  if (0 !== b2) {
    2 === b2 && (e2 = xc(a), 0 !== e2 && (d2 = e2, b2 = Ok(a, e2)));
    if (1 === b2)
      throw c2 = qk, Lk(a, 0), Dk(a, d2), Ek(a, B()), c2;
    if (6 === b2)
      Dk(a, d2);
    else {
      e2 = a.current.alternate;
      if (0 === (d2 & 30) && !Pk(e2) && (b2 = Jk(a, d2), 2 === b2 && (f2 = xc(a), 0 !== f2 && (d2 = f2, b2 = Ok(a, f2))), 1 === b2))
        throw c2 = qk, Lk(a, 0), Dk(a, d2), Ek(a, B()), c2;
      a.finishedWork = e2;
      a.finishedLanes = d2;
      switch (b2) {
        case 0:
        case 1:
          throw Error(p$1(345));
        case 2:
          Qk(a, uk, vk);
          break;
        case 3:
          Dk(a, d2);
          if ((d2 & 130023424) === d2 && (b2 = gk + 500 - B(), 10 < b2)) {
            if (0 !== uc(a, 0))
              break;
            e2 = a.suspendedLanes;
            if ((e2 & d2) !== d2) {
              L();
              a.pingedLanes |= a.suspendedLanes & e2;
              break;
            }
            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b2);
            break;
          }
          Qk(a, uk, vk);
          break;
        case 4:
          Dk(a, d2);
          if ((d2 & 4194240) === d2)
            break;
          b2 = a.eventTimes;
          for (e2 = -1; 0 < d2; ) {
            var g2 = 31 - oc(d2);
            f2 = 1 << g2;
            g2 = b2[g2];
            g2 > e2 && (e2 = g2);
            d2 &= ~f2;
          }
          d2 = e2;
          d2 = B() - d2;
          d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * mk(d2 / 1960)) - d2;
          if (10 < d2) {
            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d2);
            break;
          }
          Qk(a, uk, vk);
          break;
        case 5:
          Qk(a, uk, vk);
          break;
        default:
          throw Error(p$1(329));
      }
    }
  }
  Ek(a, B());
  return a.callbackNode === c2 ? Hk.bind(null, a) : null;
}
function Ok(a, b2) {
  var c2 = tk;
  a.current.memoizedState.isDehydrated && (Lk(a, b2).flags |= 256);
  a = Jk(a, b2);
  2 !== a && (b2 = uk, uk = c2, null !== b2 && Gj(b2));
  return a;
}
function Gj(a) {
  null === uk ? uk = a : uk.push.apply(uk, a);
}
function Pk(a) {
  for (var b2 = a; ; ) {
    if (b2.flags & 16384) {
      var c2 = b2.updateQueue;
      if (null !== c2 && (c2 = c2.stores, null !== c2))
        for (var d2 = 0; d2 < c2.length; d2++) {
          var e2 = c2[d2], f2 = e2.getSnapshot;
          e2 = e2.value;
          try {
            if (!He(f2(), e2))
              return false;
          } catch (g2) {
            return false;
          }
        }
    }
    c2 = b2.child;
    if (b2.subtreeFlags & 16384 && null !== c2)
      c2.return = b2, b2 = c2;
    else {
      if (b2 === a)
        break;
      for (; null === b2.sibling; ) {
        if (null === b2.return || b2.return === a)
          return true;
        b2 = b2.return;
      }
      b2.sibling.return = b2.return;
      b2 = b2.sibling;
    }
  }
  return true;
}
function Dk(a, b2) {
  b2 &= ~sk;
  b2 &= ~rk;
  a.suspendedLanes |= b2;
  a.pingedLanes &= ~b2;
  for (a = a.expirationTimes; 0 < b2; ) {
    var c2 = 31 - oc(b2), d2 = 1 << c2;
    a[c2] = -1;
    b2 &= ~d2;
  }
}
function Fk(a) {
  if (0 !== (K & 6))
    throw Error(p$1(327));
  Ik();
  var b2 = uc(a, 0);
  if (0 === (b2 & 1))
    return Ek(a, B()), null;
  var c2 = Jk(a, b2);
  if (0 !== a.tag && 2 === c2) {
    var d2 = xc(a);
    0 !== d2 && (b2 = d2, c2 = Ok(a, d2));
  }
  if (1 === c2)
    throw c2 = qk, Lk(a, 0), Dk(a, b2), Ek(a, B()), c2;
  if (6 === c2)
    throw Error(p$1(345));
  a.finishedWork = a.current.alternate;
  a.finishedLanes = b2;
  Qk(a, uk, vk);
  Ek(a, B());
  return null;
}
function Rk(a, b2) {
  var c2 = K;
  K |= 1;
  try {
    return a(b2);
  } finally {
    K = c2, 0 === K && (Hj = B() + 500, fg && jg());
  }
}
function Sk(a) {
  null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
  var b2 = K;
  K |= 1;
  var c2 = pk.transition, d2 = C;
  try {
    if (pk.transition = null, C = 1, a)
      return a();
  } finally {
    C = d2, pk.transition = c2, K = b2, 0 === (K & 6) && jg();
  }
}
function Ij() {
  gj = fj.current;
  E(fj);
}
function Lk(a, b2) {
  a.finishedWork = null;
  a.finishedLanes = 0;
  var c2 = a.timeoutHandle;
  -1 !== c2 && (a.timeoutHandle = -1, Gf(c2));
  if (null !== Y)
    for (c2 = Y.return; null !== c2; ) {
      var d2 = c2;
      wg(d2);
      switch (d2.tag) {
        case 1:
          d2 = d2.type.childContextTypes;
          null !== d2 && void 0 !== d2 && $f();
          break;
        case 3:
          Jh();
          E(Wf);
          E(H);
          Oh();
          break;
        case 5:
          Lh(d2);
          break;
        case 4:
          Jh();
          break;
        case 13:
          E(M);
          break;
        case 19:
          E(M);
          break;
        case 10:
          Rg(d2.type._context);
          break;
        case 22:
        case 23:
          Ij();
      }
      c2 = c2.return;
    }
  R = a;
  Y = a = wh(a.current, null);
  Z = gj = b2;
  T = 0;
  qk = null;
  sk = rk = hh = 0;
  uk = tk = null;
  if (null !== Wg) {
    for (b2 = 0; b2 < Wg.length; b2++)
      if (c2 = Wg[b2], d2 = c2.interleaved, null !== d2) {
        c2.interleaved = null;
        var e2 = d2.next, f2 = c2.pending;
        if (null !== f2) {
          var g2 = f2.next;
          f2.next = e2;
          d2.next = g2;
        }
        c2.pending = d2;
      }
    Wg = null;
  }
  return a;
}
function Nk(a, b2) {
  do {
    var c2 = Y;
    try {
      Qg();
      Ph.current = ai;
      if (Sh) {
        for (var d2 = N.memoizedState; null !== d2; ) {
          var e2 = d2.queue;
          null !== e2 && (e2.pending = null);
          d2 = d2.next;
        }
        Sh = false;
      }
      Rh = 0;
      P = O = N = null;
      Th = false;
      Uh = 0;
      ok.current = null;
      if (null === c2 || null === c2.return) {
        T = 1;
        qk = b2;
        Y = null;
        break;
      }
      a: {
        var f2 = a, g2 = c2.return, h3 = c2, k2 = b2;
        b2 = Z;
        h3.flags |= 32768;
        if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
          var l2 = k2, m2 = h3, q2 = m2.tag;
          if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
            var r2 = m2.alternate;
            r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
          }
          var y2 = Vi(g2);
          if (null !== y2) {
            y2.flags &= -257;
            Wi(y2, g2, h3, f2, b2);
            y2.mode & 1 && Ti(f2, l2, b2);
            b2 = y2;
            k2 = l2;
            var n2 = b2.updateQueue;
            if (null === n2) {
              var t2 = /* @__PURE__ */ new Set();
              t2.add(k2);
              b2.updateQueue = t2;
            } else
              n2.add(k2);
            break a;
          } else {
            if (0 === (b2 & 1)) {
              Ti(f2, l2, b2);
              uj();
              break a;
            }
            k2 = Error(p$1(426));
          }
        } else if (I && h3.mode & 1) {
          var J2 = Vi(g2);
          if (null !== J2) {
            0 === (J2.flags & 65536) && (J2.flags |= 256);
            Wi(J2, g2, h3, f2, b2);
            Jg(Ki(k2, h3));
            break a;
          }
        }
        f2 = k2 = Ki(k2, h3);
        4 !== T && (T = 2);
        null === tk ? tk = [f2] : tk.push(f2);
        f2 = g2;
        do {
          switch (f2.tag) {
            case 3:
              f2.flags |= 65536;
              b2 &= -b2;
              f2.lanes |= b2;
              var x2 = Oi(f2, k2, b2);
              fh(f2, x2);
              break a;
            case 1:
              h3 = k2;
              var w2 = f2.type, u2 = f2.stateNode;
              if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Si || !Si.has(u2)))) {
                f2.flags |= 65536;
                b2 &= -b2;
                f2.lanes |= b2;
                var F2 = Ri(f2, h3, b2);
                fh(f2, F2);
                break a;
              }
          }
          f2 = f2.return;
        } while (null !== f2);
      }
      Tk(c2);
    } catch (na) {
      b2 = na;
      Y === c2 && null !== c2 && (Y = c2 = c2.return);
      continue;
    }
    break;
  } while (1);
}
function Kk() {
  var a = nk.current;
  nk.current = ai;
  return null === a ? ai : a;
}
function uj() {
  if (0 === T || 3 === T || 2 === T)
    T = 4;
  null === R || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R, Z);
}
function Jk(a, b2) {
  var c2 = K;
  K |= 2;
  var d2 = Kk();
  if (R !== a || Z !== b2)
    vk = null, Lk(a, b2);
  do
    try {
      Uk();
      break;
    } catch (e2) {
      Nk(a, e2);
    }
  while (1);
  Qg();
  K = c2;
  nk.current = d2;
  if (null !== Y)
    throw Error(p$1(261));
  R = null;
  Z = 0;
  return T;
}
function Uk() {
  for (; null !== Y; )
    Vk(Y);
}
function Mk() {
  for (; null !== Y && !cc(); )
    Vk(Y);
}
function Vk(a) {
  var b2 = Wk(a.alternate, a, gj);
  a.memoizedProps = a.pendingProps;
  null === b2 ? Tk(a) : Y = b2;
  ok.current = null;
}
function Tk(a) {
  var b2 = a;
  do {
    var c2 = b2.alternate;
    a = b2.return;
    if (0 === (b2.flags & 32768)) {
      if (c2 = Fj(c2, b2, gj), null !== c2) {
        Y = c2;
        return;
      }
    } else {
      c2 = Jj(c2, b2);
      if (null !== c2) {
        c2.flags &= 32767;
        Y = c2;
        return;
      }
      if (null !== a)
        a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
      else {
        T = 6;
        Y = null;
        return;
      }
    }
    b2 = b2.sibling;
    if (null !== b2) {
      Y = b2;
      return;
    }
    Y = b2 = a;
  } while (null !== b2);
  0 === T && (T = 5);
}
function Qk(a, b2, c2) {
  var d2 = C, e2 = pk.transition;
  try {
    pk.transition = null, C = 1, Xk(a, b2, c2, d2);
  } finally {
    pk.transition = e2, C = d2;
  }
  return null;
}
function Xk(a, b2, c2, d2) {
  do
    Ik();
  while (null !== xk);
  if (0 !== (K & 6))
    throw Error(p$1(327));
  c2 = a.finishedWork;
  var e2 = a.finishedLanes;
  if (null === c2)
    return null;
  a.finishedWork = null;
  a.finishedLanes = 0;
  if (c2 === a.current)
    throw Error(p$1(177));
  a.callbackNode = null;
  a.callbackPriority = 0;
  var f2 = c2.lanes | c2.childLanes;
  Bc(a, f2);
  a === R && (Y = R = null, Z = 0);
  0 === (c2.subtreeFlags & 2064) && 0 === (c2.flags & 2064) || wk || (wk = true, Gk(hc, function() {
    Ik();
    return null;
  }));
  f2 = 0 !== (c2.flags & 15990);
  if (0 !== (c2.subtreeFlags & 15990) || f2) {
    f2 = pk.transition;
    pk.transition = null;
    var g2 = C;
    C = 1;
    var h3 = K;
    K |= 4;
    ok.current = null;
    Pj(a, c2);
    ek(c2, a);
    Oe(Df);
    dd = !!Cf;
    Df = Cf = null;
    a.current = c2;
    ik(c2);
    dc();
    K = h3;
    C = g2;
    pk.transition = f2;
  } else
    a.current = c2;
  wk && (wk = false, xk = a, yk = e2);
  f2 = a.pendingLanes;
  0 === f2 && (Si = null);
  mc(c2.stateNode);
  Ek(a, B());
  if (null !== b2)
    for (d2 = a.onRecoverableError, c2 = 0; c2 < b2.length; c2++)
      e2 = b2[c2], d2(e2.value, { componentStack: e2.stack, digest: e2.digest });
  if (Pi)
    throw Pi = false, a = Qi, Qi = null, a;
  0 !== (yk & 1) && 0 !== a.tag && Ik();
  f2 = a.pendingLanes;
  0 !== (f2 & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;
  jg();
  return null;
}
function Ik() {
  if (null !== xk) {
    var a = Dc(yk), b2 = pk.transition, c2 = C;
    try {
      pk.transition = null;
      C = 16 > a ? 16 : a;
      if (null === xk)
        var d2 = false;
      else {
        a = xk;
        xk = null;
        yk = 0;
        if (0 !== (K & 6))
          throw Error(p$1(331));
        var e2 = K;
        K |= 4;
        for (V = a.current; null !== V; ) {
          var f2 = V, g2 = f2.child;
          if (0 !== (V.flags & 16)) {
            var h3 = f2.deletions;
            if (null !== h3) {
              for (var k2 = 0; k2 < h3.length; k2++) {
                var l2 = h3[k2];
                for (V = l2; null !== V; ) {
                  var m2 = V;
                  switch (m2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(8, m2, f2);
                  }
                  var q2 = m2.child;
                  if (null !== q2)
                    q2.return = m2, V = q2;
                  else
                    for (; null !== V; ) {
                      m2 = V;
                      var r2 = m2.sibling, y2 = m2.return;
                      Tj(m2);
                      if (m2 === l2) {
                        V = null;
                        break;
                      }
                      if (null !== r2) {
                        r2.return = y2;
                        V = r2;
                        break;
                      }
                      V = y2;
                    }
                }
              }
              var n2 = f2.alternate;
              if (null !== n2) {
                var t2 = n2.child;
                if (null !== t2) {
                  n2.child = null;
                  do {
                    var J2 = t2.sibling;
                    t2.sibling = null;
                    t2 = J2;
                  } while (null !== t2);
                }
              }
              V = f2;
            }
          }
          if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
            g2.return = f2, V = g2;
          else
            b:
              for (; null !== V; ) {
                f2 = V;
                if (0 !== (f2.flags & 2048))
                  switch (f2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(9, f2, f2.return);
                  }
                var x2 = f2.sibling;
                if (null !== x2) {
                  x2.return = f2.return;
                  V = x2;
                  break b;
                }
                V = f2.return;
              }
        }
        var w2 = a.current;
        for (V = w2; null !== V; ) {
          g2 = V;
          var u2 = g2.child;
          if (0 !== (g2.subtreeFlags & 2064) && null !== u2)
            u2.return = g2, V = u2;
          else
            b:
              for (g2 = w2; null !== V; ) {
                h3 = V;
                if (0 !== (h3.flags & 2048))
                  try {
                    switch (h3.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Rj(9, h3);
                    }
                  } catch (na) {
                    W(h3, h3.return, na);
                  }
                if (h3 === g2) {
                  V = null;
                  break b;
                }
                var F2 = h3.sibling;
                if (null !== F2) {
                  F2.return = h3.return;
                  V = F2;
                  break b;
                }
                V = h3.return;
              }
        }
        K = e2;
        jg();
        if (lc && "function" === typeof lc.onPostCommitFiberRoot)
          try {
            lc.onPostCommitFiberRoot(kc, a);
          } catch (na) {
          }
        d2 = true;
      }
      return d2;
    } finally {
      C = c2, pk.transition = b2;
    }
  }
  return false;
}
function Yk(a, b2, c2) {
  b2 = Ki(c2, b2);
  b2 = Oi(a, b2, 1);
  a = dh(a, b2, 1);
  b2 = L();
  null !== a && (Ac(a, 1, b2), Ek(a, b2));
}
function W(a, b2, c2) {
  if (3 === a.tag)
    Yk(a, a, c2);
  else
    for (; null !== b2; ) {
      if (3 === b2.tag) {
        Yk(b2, a, c2);
        break;
      } else if (1 === b2.tag) {
        var d2 = b2.stateNode;
        if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Si || !Si.has(d2))) {
          a = Ki(c2, a);
          a = Ri(b2, a, 1);
          b2 = dh(b2, a, 1);
          a = L();
          null !== b2 && (Ac(b2, 1, a), Ek(b2, a));
          break;
        }
      }
      b2 = b2.return;
    }
}
function Ui(a, b2, c2) {
  var d2 = a.pingCache;
  null !== d2 && d2.delete(b2);
  b2 = L();
  a.pingedLanes |= a.suspendedLanes & c2;
  R === a && (Z & c2) === c2 && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a, 0) : sk |= c2);
  Ek(a, b2);
}
function Zk(a, b2) {
  0 === b2 && (0 === (a.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
  var c2 = L();
  a = Zg(a, b2);
  null !== a && (Ac(a, b2, c2), Ek(a, c2));
}
function vj(a) {
  var b2 = a.memoizedState, c2 = 0;
  null !== b2 && (c2 = b2.retryLane);
  Zk(a, c2);
}
function ck(a, b2) {
  var c2 = 0;
  switch (a.tag) {
    case 13:
      var d2 = a.stateNode;
      var e2 = a.memoizedState;
      null !== e2 && (c2 = e2.retryLane);
      break;
    case 19:
      d2 = a.stateNode;
      break;
    default:
      throw Error(p$1(314));
  }
  null !== d2 && d2.delete(b2);
  Zk(a, c2);
}
var Wk;
Wk = function(a, b2, c2) {
  if (null !== a)
    if (a.memoizedProps !== b2.pendingProps || Wf.current)
      Ug = true;
    else {
      if (0 === (a.lanes & c2) && 0 === (b2.flags & 128))
        return Ug = false, zj(a, b2, c2);
      Ug = 0 !== (a.flags & 131072) ? true : false;
    }
  else
    Ug = false, I && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
  b2.lanes = 0;
  switch (b2.tag) {
    case 2:
      var d2 = b2.type;
      jj(a, b2);
      a = b2.pendingProps;
      var e2 = Yf(b2, H.current);
      Tg(b2, c2);
      e2 = Xh(null, b2, d2, a, e2, c2);
      var f2 = bi();
      b2.flags |= 1;
      "object" === typeof e2 && null !== e2 && "function" === typeof e2.render && void 0 === e2.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d2) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e2.state && void 0 !== e2.state ? e2.state : null, ah(b2), e2.updater = nh, b2.stateNode = e2, e2._reactInternals = b2, rh(b2, d2, a, c2), b2 = kj(null, b2, d2, true, f2, c2)) : (b2.tag = 0, I && f2 && vg(b2), Yi(null, b2, e2, c2), b2 = b2.child);
      return b2;
    case 16:
      d2 = b2.elementType;
      a: {
        jj(a, b2);
        a = b2.pendingProps;
        e2 = d2._init;
        d2 = e2(d2._payload);
        b2.type = d2;
        e2 = b2.tag = $k(d2);
        a = Lg(d2, a);
        switch (e2) {
          case 0:
            b2 = dj(null, b2, d2, a, c2);
            break a;
          case 1:
            b2 = ij(null, b2, d2, a, c2);
            break a;
          case 11:
            b2 = Zi(null, b2, d2, a, c2);
            break a;
          case 14:
            b2 = aj(null, b2, d2, Lg(d2.type, a), c2);
            break a;
        }
        throw Error(p$1(
          306,
          d2,
          ""
        ));
      }
      return b2;
    case 0:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), dj(a, b2, d2, e2, c2);
    case 1:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), ij(a, b2, d2, e2, c2);
    case 3:
      a: {
        lj(b2);
        if (null === a)
          throw Error(p$1(387));
        d2 = b2.pendingProps;
        f2 = b2.memoizedState;
        e2 = f2.element;
        bh(a, b2);
        gh(b2, d2, null, c2);
        var g2 = b2.memoizedState;
        d2 = g2.element;
        if (f2.isDehydrated)
          if (f2 = { element: d2, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
            e2 = Ki(Error(p$1(423)), b2);
            b2 = mj(a, b2, d2, c2, e2);
            break a;
          } else if (d2 !== e2) {
            e2 = Ki(Error(p$1(424)), b2);
            b2 = mj(a, b2, d2, c2, e2);
            break a;
          } else
            for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I = true, zg = null, c2 = Ch(b2, null, d2, c2), b2.child = c2; c2; )
              c2.flags = c2.flags & -3 | 4096, c2 = c2.sibling;
        else {
          Ig();
          if (d2 === e2) {
            b2 = $i(a, b2, c2);
            break a;
          }
          Yi(a, b2, d2, c2);
        }
        b2 = b2.child;
      }
      return b2;
    case 5:
      return Kh(b2), null === a && Eg(b2), d2 = b2.type, e2 = b2.pendingProps, f2 = null !== a ? a.memoizedProps : null, g2 = e2.children, Ef(d2, e2) ? g2 = null : null !== f2 && Ef(d2, f2) && (b2.flags |= 32), hj(a, b2), Yi(a, b2, g2, c2), b2.child;
    case 6:
      return null === a && Eg(b2), null;
    case 13:
      return pj(a, b2, c2);
    case 4:
      return Ih(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a ? b2.child = Bh(b2, null, d2, c2) : Yi(a, b2, d2, c2), b2.child;
    case 11:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), Zi(a, b2, d2, e2, c2);
    case 7:
      return Yi(a, b2, b2.pendingProps, c2), b2.child;
    case 8:
      return Yi(a, b2, b2.pendingProps.children, c2), b2.child;
    case 12:
      return Yi(a, b2, b2.pendingProps.children, c2), b2.child;
    case 10:
      a: {
        d2 = b2.type._context;
        e2 = b2.pendingProps;
        f2 = b2.memoizedProps;
        g2 = e2.value;
        G(Mg, d2._currentValue);
        d2._currentValue = g2;
        if (null !== f2)
          if (He(f2.value, g2)) {
            if (f2.children === e2.children && !Wf.current) {
              b2 = $i(a, b2, c2);
              break a;
            }
          } else
            for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
              var h3 = f2.dependencies;
              if (null !== h3) {
                g2 = f2.child;
                for (var k2 = h3.firstContext; null !== k2; ) {
                  if (k2.context === d2) {
                    if (1 === f2.tag) {
                      k2 = ch(-1, c2 & -c2);
                      k2.tag = 2;
                      var l2 = f2.updateQueue;
                      if (null !== l2) {
                        l2 = l2.shared;
                        var m2 = l2.pending;
                        null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                        l2.pending = k2;
                      }
                    }
                    f2.lanes |= c2;
                    k2 = f2.alternate;
                    null !== k2 && (k2.lanes |= c2);
                    Sg(
                      f2.return,
                      c2,
                      b2
                    );
                    h3.lanes |= c2;
                    break;
                  }
                  k2 = k2.next;
                }
              } else if (10 === f2.tag)
                g2 = f2.type === b2.type ? null : f2.child;
              else if (18 === f2.tag) {
                g2 = f2.return;
                if (null === g2)
                  throw Error(p$1(341));
                g2.lanes |= c2;
                h3 = g2.alternate;
                null !== h3 && (h3.lanes |= c2);
                Sg(g2, c2, b2);
                g2 = f2.sibling;
              } else
                g2 = f2.child;
              if (null !== g2)
                g2.return = f2;
              else
                for (g2 = f2; null !== g2; ) {
                  if (g2 === b2) {
                    g2 = null;
                    break;
                  }
                  f2 = g2.sibling;
                  if (null !== f2) {
                    f2.return = g2.return;
                    g2 = f2;
                    break;
                  }
                  g2 = g2.return;
                }
              f2 = g2;
            }
        Yi(a, b2, e2.children, c2);
        b2 = b2.child;
      }
      return b2;
    case 9:
      return e2 = b2.type, d2 = b2.pendingProps.children, Tg(b2, c2), e2 = Vg(e2), d2 = d2(e2), b2.flags |= 1, Yi(a, b2, d2, c2), b2.child;
    case 14:
      return d2 = b2.type, e2 = Lg(d2, b2.pendingProps), e2 = Lg(d2.type, e2), aj(a, b2, d2, e2, c2);
    case 15:
      return cj(a, b2, b2.type, b2.pendingProps, c2);
    case 17:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), jj(a, b2), b2.tag = 1, Zf(d2) ? (a = true, cg(b2)) : a = false, Tg(b2, c2), ph(b2, d2, e2), rh(b2, d2, e2, c2), kj(null, b2, d2, true, a, c2);
    case 19:
      return yj(a, b2, c2);
    case 22:
      return ej(a, b2, c2);
  }
  throw Error(p$1(156, b2.tag));
};
function Gk(a, b2) {
  return ac(a, b2);
}
function al(a, b2, c2, d2) {
  this.tag = a;
  this.key = c2;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b2;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d2;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function Bg(a, b2, c2, d2) {
  return new al(a, b2, c2, d2);
}
function bj(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}
function $k(a) {
  if ("function" === typeof a)
    return bj(a) ? 1 : 0;
  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === Da)
      return 11;
    if (a === Ga)
      return 14;
  }
  return 2;
}
function wh(a, b2) {
  var c2 = a.alternate;
  null === c2 ? (c2 = Bg(a.tag, b2, a.key, a.mode), c2.elementType = a.elementType, c2.type = a.type, c2.stateNode = a.stateNode, c2.alternate = a, a.alternate = c2) : (c2.pendingProps = b2, c2.type = a.type, c2.flags = 0, c2.subtreeFlags = 0, c2.deletions = null);
  c2.flags = a.flags & 14680064;
  c2.childLanes = a.childLanes;
  c2.lanes = a.lanes;
  c2.child = a.child;
  c2.memoizedProps = a.memoizedProps;
  c2.memoizedState = a.memoizedState;
  c2.updateQueue = a.updateQueue;
  b2 = a.dependencies;
  c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
  c2.sibling = a.sibling;
  c2.index = a.index;
  c2.ref = a.ref;
  return c2;
}
function yh(a, b2, c2, d2, e2, f2) {
  var g2 = 2;
  d2 = a;
  if ("function" === typeof a)
    bj(a) && (g2 = 1);
  else if ("string" === typeof a)
    g2 = 5;
  else
    a:
      switch (a) {
        case ya:
          return Ah(c2.children, e2, f2, b2);
        case za:
          g2 = 8;
          e2 |= 8;
          break;
        case Aa:
          return a = Bg(12, c2, b2, e2 | 2), a.elementType = Aa, a.lanes = f2, a;
        case Ea:
          return a = Bg(13, c2, b2, e2), a.elementType = Ea, a.lanes = f2, a;
        case Fa:
          return a = Bg(19, c2, b2, e2), a.elementType = Fa, a.lanes = f2, a;
        case Ia:
          return qj(c2, e2, f2, b2);
        default:
          if ("object" === typeof a && null !== a)
            switch (a.$$typeof) {
              case Ba:
                g2 = 10;
                break a;
              case Ca:
                g2 = 9;
                break a;
              case Da:
                g2 = 11;
                break a;
              case Ga:
                g2 = 14;
                break a;
              case Ha:
                g2 = 16;
                d2 = null;
                break a;
            }
          throw Error(p$1(130, null == a ? a : typeof a, ""));
      }
  b2 = Bg(g2, c2, b2, e2);
  b2.elementType = a;
  b2.type = d2;
  b2.lanes = f2;
  return b2;
}
function Ah(a, b2, c2, d2) {
  a = Bg(7, a, d2, b2);
  a.lanes = c2;
  return a;
}
function qj(a, b2, c2, d2) {
  a = Bg(22, a, d2, b2);
  a.elementType = Ia;
  a.lanes = c2;
  a.stateNode = { isHidden: false };
  return a;
}
function xh(a, b2, c2) {
  a = Bg(6, a, null, b2);
  a.lanes = c2;
  return a;
}
function zh(a, b2, c2) {
  b2 = Bg(4, null !== a.children ? a.children : [], a.key, b2);
  b2.lanes = c2;
  b2.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
  return b2;
}
function bl(a, b2, c2, d2, e2) {
  this.tag = b2;
  this.containerInfo = a;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.pendingContext = this.context = null;
  this.callbackPriority = 0;
  this.eventTimes = zc(0);
  this.expirationTimes = zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = zc(0);
  this.identifierPrefix = d2;
  this.onRecoverableError = e2;
  this.mutableSourceEagerHydrationData = null;
}
function cl(a, b2, c2, d2, e2, f2, g2, h3, k2) {
  a = new bl(a, b2, c2, h3, k2);
  1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
  f2 = Bg(3, null, null, b2);
  a.current = f2;
  f2.stateNode = a;
  f2.memoizedState = { element: d2, isDehydrated: c2, cache: null, transitions: null, pendingSuspenseBoundaries: null };
  ah(f2);
  return a;
}
function dl(a, b2, c2) {
  var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return { $$typeof: wa, key: null == d2 ? null : "" + d2, children: a, containerInfo: b2, implementation: c2 };
}
function el(a) {
  if (!a)
    return Vf;
  a = a._reactInternals;
  a: {
    if (Vb(a) !== a || 1 !== a.tag)
      throw Error(p$1(170));
    var b2 = a;
    do {
      switch (b2.tag) {
        case 3:
          b2 = b2.stateNode.context;
          break a;
        case 1:
          if (Zf(b2.type)) {
            b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
            break a;
          }
      }
      b2 = b2.return;
    } while (null !== b2);
    throw Error(p$1(171));
  }
  if (1 === a.tag) {
    var c2 = a.type;
    if (Zf(c2))
      return bg(a, c2, b2);
  }
  return b2;
}
function fl(a, b2, c2, d2, e2, f2, g2, h3, k2) {
  a = cl(c2, d2, true, a, e2, f2, g2, h3, k2);
  a.context = el(null);
  c2 = a.current;
  d2 = L();
  e2 = lh(c2);
  f2 = ch(d2, e2);
  f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
  dh(c2, f2, e2);
  a.current.lanes = e2;
  Ac(a, e2, d2);
  Ek(a, d2);
  return a;
}
function gl(a, b2, c2, d2) {
  var e2 = b2.current, f2 = L(), g2 = lh(e2);
  c2 = el(c2);
  null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
  b2 = ch(f2, g2);
  b2.payload = { element: a };
  d2 = void 0 === d2 ? null : d2;
  null !== d2 && (b2.callback = d2);
  a = dh(e2, b2, g2);
  null !== a && (mh(a, e2, g2, f2), eh(a, e2, g2));
  return g2;
}
function hl(a) {
  a = a.current;
  if (!a.child)
    return null;
  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;
    default:
      return a.child.stateNode;
  }
}
function il(a, b2) {
  a = a.memoizedState;
  if (null !== a && null !== a.dehydrated) {
    var c2 = a.retryLane;
    a.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
  }
}
function jl(a, b2) {
  il(a, b2);
  (a = a.alternate) && il(a, b2);
}
function kl() {
  return null;
}
var ll = "function" === typeof reportError ? reportError : function(a) {
  console.error(a);
};
function ml(a) {
  this._internalRoot = a;
}
nl.prototype.render = ml.prototype.render = function(a) {
  var b2 = this._internalRoot;
  if (null === b2)
    throw Error(p$1(409));
  gl(a, b2, null, null);
};
nl.prototype.unmount = ml.prototype.unmount = function() {
  var a = this._internalRoot;
  if (null !== a) {
    this._internalRoot = null;
    var b2 = a.containerInfo;
    Sk(function() {
      gl(null, a, null, null);
    });
    b2[uf] = null;
  }
};
function nl(a) {
  this._internalRoot = a;
}
nl.prototype.unstable_scheduleHydration = function(a) {
  if (a) {
    var b2 = Hc();
    a = { blockedOn: null, target: a, priority: b2 };
    for (var c2 = 0; c2 < Qc.length && 0 !== b2 && b2 < Qc[c2].priority; c2++)
      ;
    Qc.splice(c2, 0, a);
    0 === c2 && Vc(a);
  }
};
function ol(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
}
function pl(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}
function ql() {
}
function rl(a, b2, c2, d2, e2) {
  if (e2) {
    if ("function" === typeof d2) {
      var f2 = d2;
      d2 = function() {
        var a2 = hl(g2);
        f2.call(a2);
      };
    }
    var g2 = fl(b2, d2, a, 0, null, false, false, "", ql);
    a._reactRootContainer = g2;
    a[uf] = g2.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    Sk();
    return g2;
  }
  for (; e2 = a.lastChild; )
    a.removeChild(e2);
  if ("function" === typeof d2) {
    var h3 = d2;
    d2 = function() {
      var a2 = hl(k2);
      h3.call(a2);
    };
  }
  var k2 = cl(a, 0, false, null, null, false, false, "", ql);
  a._reactRootContainer = k2;
  a[uf] = k2.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  Sk(function() {
    gl(b2, k2, c2, d2);
  });
  return k2;
}
function sl(a, b2, c2, d2, e2) {
  var f2 = c2._reactRootContainer;
  if (f2) {
    var g2 = f2;
    if ("function" === typeof e2) {
      var h3 = e2;
      e2 = function() {
        var a2 = hl(g2);
        h3.call(a2);
      };
    }
    gl(b2, g2, a, e2);
  } else
    g2 = rl(c2, b2, a, e2, d2);
  return hl(g2);
}
Ec = function(a) {
  switch (a.tag) {
    case 3:
      var b2 = a.stateNode;
      if (b2.current.memoizedState.isDehydrated) {
        var c2 = tc(b2.pendingLanes);
        0 !== c2 && (Cc(b2, c2 | 1), Ek(b2, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));
      }
      break;
    case 13:
      Sk(function() {
        var b3 = Zg(a, 1);
        if (null !== b3) {
          var c3 = L();
          mh(b3, a, 1, c3);
        }
      }), jl(a, 1);
  }
};
Fc = function(a) {
  if (13 === a.tag) {
    var b2 = Zg(a, 134217728);
    if (null !== b2) {
      var c2 = L();
      mh(b2, a, 134217728, c2);
    }
    jl(a, 134217728);
  }
};
Gc = function(a) {
  if (13 === a.tag) {
    var b2 = lh(a), c2 = Zg(a, b2);
    if (null !== c2) {
      var d2 = L();
      mh(c2, a, b2, d2);
    }
    jl(a, b2);
  }
};
Hc = function() {
  return C;
};
Ic = function(a, b2) {
  var c2 = C;
  try {
    return C = a, b2();
  } finally {
    C = c2;
  }
};
yb = function(a, b2, c2) {
  switch (b2) {
    case "input":
      bb(a, c2);
      b2 = c2.name;
      if ("radio" === c2.type && null != b2) {
        for (c2 = a; c2.parentNode; )
          c2 = c2.parentNode;
        c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
        for (b2 = 0; b2 < c2.length; b2++) {
          var d2 = c2[b2];
          if (d2 !== a && d2.form === a.form) {
            var e2 = Db(d2);
            if (!e2)
              throw Error(p$1(90));
            Wa(d2);
            bb(d2, e2);
          }
        }
      }
      break;
    case "textarea":
      ib(a, c2);
      break;
    case "select":
      b2 = c2.value, null != b2 && fb(a, !!c2.multiple, b2, false);
  }
};
Gb = Rk;
Hb = Sk;
var tl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
  a = Zb(a);
  return null === a ? null : a.stateNode;
}, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!wl.isDisabled && wl.supportsFiber)
    try {
      kc = wl.inject(vl), lc = wl;
    } catch (a) {
    }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
reactDom_production_min.createPortal = function(a, b2) {
  var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!ol(b2))
    throw Error(p$1(200));
  return dl(a, b2, null, c2);
};
reactDom_production_min.createRoot = function(a, b2) {
  if (!ol(a))
    throw Error(p$1(299));
  var c2 = false, d2 = "", e2 = ll;
  null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c2 = true), void 0 !== b2.identifierPrefix && (d2 = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e2 = b2.onRecoverableError));
  b2 = cl(a, 1, false, null, null, c2, false, d2, e2);
  a[uf] = b2.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  return new ml(b2);
};
reactDom_production_min.findDOMNode = function(a) {
  if (null == a)
    return null;
  if (1 === a.nodeType)
    return a;
  var b2 = a._reactInternals;
  if (void 0 === b2) {
    if ("function" === typeof a.render)
      throw Error(p$1(188));
    a = Object.keys(a).join(",");
    throw Error(p$1(268, a));
  }
  a = Zb(b2);
  a = null === a ? null : a.stateNode;
  return a;
};
reactDom_production_min.flushSync = function(a) {
  return Sk(a);
};
reactDom_production_min.hydrate = function(a, b2, c2) {
  if (!pl(b2))
    throw Error(p$1(200));
  return sl(null, a, b2, true, c2);
};
reactDom_production_min.hydrateRoot = function(a, b2, c2) {
  if (!ol(a))
    throw Error(p$1(405));
  var d2 = null != c2 && c2.hydratedSources || null, e2 = false, f2 = "", g2 = ll;
  null !== c2 && void 0 !== c2 && (true === c2.unstable_strictMode && (e2 = true), void 0 !== c2.identifierPrefix && (f2 = c2.identifierPrefix), void 0 !== c2.onRecoverableError && (g2 = c2.onRecoverableError));
  b2 = fl(b2, null, a, 1, null != c2 ? c2 : null, e2, false, f2, g2);
  a[uf] = b2.current;
  sf(a);
  if (d2)
    for (a = 0; a < d2.length; a++)
      c2 = d2[a], e2 = c2._getVersion, e2 = e2(c2._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c2, e2] : b2.mutableSourceEagerHydrationData.push(
        c2,
        e2
      );
  return new nl(b2);
};
reactDom_production_min.render = function(a, b2, c2) {
  if (!pl(b2))
    throw Error(p$1(200));
  return sl(null, a, b2, false, c2);
};
reactDom_production_min.unmountComponentAtNode = function(a) {
  if (!pl(a))
    throw Error(p$1(40));
  return a._reactRootContainer ? (Sk(function() {
    sl(null, null, a, false, function() {
      a._reactRootContainer = null;
      a[uf] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Rk;
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b2, c2, d2) {
  if (!pl(c2))
    throw Error(p$1(200));
  if (null == a || void 0 === a._reactInternals)
    throw Error(p$1(38));
  return sl(a, b2, c2, false, d2);
};
reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  reactDom.exports = reactDom_production_min;
}
var reactDomExports = reactDom.exports;
const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
var m$1 = reactDomExports;
{
  client.createRoot = m$1.createRoot;
  client.hydrateRoot = m$1.hydrateRoot;
}
/**
 * @remix-run/router v1.15.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$y() {
  _extends$y = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$y.apply(this, arguments);
}
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
const PopStateEventType = "popstate";
function createHashHistory(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash: hash2 = ""
    } = parsePath(window2.location.hash.substr(1));
    if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
      pathname = "/" + pathname;
    }
    return createLocation(
      "",
      {
        pathname,
        search,
        hash: hash2
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to2) {
    let base = window2.document.querySelector("base");
    let href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href;
      let hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to2 === "string" ? to2 : createPath(to2));
  }
  function validateHashLocation(location, to2) {
    warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to2) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options2);
}
function invariant(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined")
      console.warn(message);
    try {
      throw new Error(message);
    } catch (e2) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location, index2) {
  return {
    usr: location.state,
    key: location.key,
    idx: index2
  };
}
function createLocation(current, to2, state2, key) {
  if (state2 === void 0) {
    state2 = null;
  }
  let location = _extends$y({
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to2 === "string" ? parsePath(to2) : to2, {
    state: state2,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to2 && to2.key || key || createKey()
  });
  return location;
}
function createPath(_ref3) {
  let {
    pathname = "/",
    search = "",
    hash: hash2 = ""
  } = _ref3;
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash2 && hash2 !== "#")
    pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options2;
  let globalHistory = window2.history;
  let action2 = Action.Pop;
  let listener = null;
  let index2 = getIndex();
  if (index2 == null) {
    index2 = 0;
    globalHistory.replaceState(_extends$y({}, globalHistory.state, {
      idx: index2
    }), "");
  }
  function getIndex() {
    let state2 = globalHistory.state || {
      idx: null
    };
    return state2.idx;
  }
  function handlePop() {
    action2 = Action.Pop;
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index2;
    index2 = nextIndex;
    if (listener) {
      listener({
        action: action2,
        location: history.location,
        delta
      });
    }
  }
  function push(to2, state2) {
    action2 = Action.Push;
    let location = createLocation(history.location, to2, state2);
    if (validateLocation)
      validateLocation(location, to2);
    index2 = getIndex() + 1;
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError") {
        throw error;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({
        action: action2,
        location: history.location,
        delta: 1
      });
    }
  }
  function replace2(to2, state2) {
    action2 = Action.Replace;
    let location = createLocation(history.location, to2, state2);
    if (validateLocation)
      validateLocation(location, to2);
    index2 = getIndex();
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({
        action: action2,
        location: history.location,
        delta: 0
      });
    }
  }
  function createURL(to2) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to2 === "string" ? to2 : createPath(to2);
    href = href.replace(/ $/, "%20");
    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history = {
    get action() {
      return action2;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to2) {
      return createHref(window2, to2);
    },
    createURL,
    encodeLocation(to2) {
      let url = createURL(to2);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace: replace2,
    go(n2) {
      return globalHistory.go(n2);
    }
  };
  return history;
}
var ResultType;
(function(ResultType2) {
  ResultType2["data"] = "data";
  ResultType2["deferred"] = "deferred";
  ResultType2["redirect"] = "redirect";
  ResultType2["error"] = "error";
})(ResultType || (ResultType = {}));
function matchRoutes(routes, locationArg, basename) {
  if (basename === void 0) {
    basename = "/";
  }
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(branches[i], decoded);
  }
  return matches;
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index2, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index2,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index2) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index2);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index2, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0)
    return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a, b2) => a.score !== b2.score ? b2.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b2.routesMeta.map((meta) => meta.childrenIndex)));
}
const paramRe = /^:[\w-]+$/;
const dynamicSegmentValue = 3;
const indexRouteValue = 2;
const emptySegmentValue = 1;
const staticSegmentValue = 10;
const splatPenalty = -2;
const isSplat = (s) => s === "*";
function computeScore(path, index2) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index2) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a, b2) {
  let siblings = a.length === b2.length && a.slice(0, -1).every((n2, i) => n2 === b2[i]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b2[b2.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i];
    let end = i === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match2 = matchPath({
      path: meta.relativePath,
      caseSensitive: meta.caseSensitive,
      end
    }, remainingPathname);
    if (!match2)
      return null;
    Object.assign(matchedParams, match2.params);
    let route = meta.route;
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match2.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
      route
    });
    if (match2.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = {
      path: pattern,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
  let match2 = pathname.match(matcher);
  if (!match2)
    return null;
  let matchedPathname = match2[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match2.slice(1);
  let params = compiledParams.reduce((memo, _ref3, index2) => {
    let {
      paramName,
      isOptional
    } = _ref3;
    if (paramName === "*") {
      let splatValue = captureGroups[index2] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    const value = captureGroups[index2];
    if (isOptional && !value) {
      memo[paramName] = void 0;
    } else {
      memo[paramName] = (value || "").replace(/%2F/g, "/");
    }
    return memo;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let params = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
    params.push({
      paramName,
      isOptional: isOptional != null
    });
    return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
  });
  if (path.endsWith("*")) {
    params.push({
      paramName: "*"
    });
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else
    ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v2) => decodeURIComponent(v2).replace(/\//g, "%2F")).join("/");
  } catch (error) {
    warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
    return value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
const normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
const validMutationMethodsArr = ["post", "put", "patch", "delete"];
new Set(validMutationMethodsArr);
const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
new Set(validRequestMethodsArr);
/**
 * React Router v6.22.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$x() {
  _extends$x = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$x.apply(this, arguments);
}
const DataRouterContext = /* @__PURE__ */ reactExports.createContext(null);
const DataRouterStateContext = /* @__PURE__ */ reactExports.createContext(null);
const NavigationContext = /* @__PURE__ */ reactExports.createContext(null);
const LocationContext = /* @__PURE__ */ reactExports.createContext(null);
const RouteContext = /* @__PURE__ */ reactExports.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
const RouteErrorContext = /* @__PURE__ */ reactExports.createContext(null);
function useInRouterContext() {
  return reactExports.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? invariant(false) : void 0;
  return reactExports.useContext(LocationContext).location;
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  !useInRouterContext() ? invariant(false) : void 0;
  let {
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches: parentMatches
  } = reactExports.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  routeMatch && routeMatch.route;
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false) : void 0;
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, {
    pathname: remainingPathname
  });
  let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
    params: Object.assign({}, parentParams, match2.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
    ]),
    pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
    ])
  })), parentMatches, dataRouterState, future);
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
      value: {
        location: _extends$x({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
const defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
class RenderErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  static getDerivedStateFromProps(props, state2) {
    if (state2.location !== props.location || state2.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error !== void 0 ? props.error : state2.error,
      location: state2.location,
      revalidation: props.revalidation || state2.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error("React Router caught the following error during render", error, errorInfo);
  }
  render() {
    return this.state.error !== void 0 ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
      value: this.props.routeContext
    }, /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
}
function RenderedRoute(_ref3) {
  let {
    routeContext,
    match: match2,
    children
  } = _ref3;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
  }
  return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState, future) {
  var _dataRouterState2;
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (dataRouterState === void 0) {
    dataRouterState = null;
  }
  if (future === void 0) {
    future = null;
  }
  if (matches == null) {
    var _dataRouterState;
    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]));
    !(errorIndex >= 0) ? invariant(false) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState && future && future.v7_partialHydration) {
    for (let i = 0; i < renderedMatches.length; i++) {
      let match2 = renderedMatches[i];
      if (match2.route.HydrateFallback || match2.route.hydrateFallbackElement) {
        fallbackIndex = i;
      }
      if (match2.route.id) {
        let {
          loaderData,
          errors: errors2
        } = dataRouterState;
        let needsToRunLoader = match2.route.loader && loaderData[match2.route.id] === void 0 && (!errors2 || errors2[match2.route.id] === void 0);
        if (match2.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight((outlet, match2, index2) => {
    let error;
    let shouldRenderHydrateFallback = false;
    let errorElement = null;
    let hydrateFallbackElement = null;
    if (dataRouterState) {
      error = errors && match2.route.id ? errors[match2.route.id] : void 0;
      errorElement = match2.route.errorElement || defaultErrorElement;
      if (renderFallback) {
        if (fallbackIndex < 0 && index2 === 0) {
          warningOnce("route-fallback", false);
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = null;
        } else if (fallbackIndex === index2) {
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = match2.route.hydrateFallbackElement || null;
        }
      }
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
    let getChildren = () => {
      let children;
      if (error) {
        children = errorElement;
      } else if (shouldRenderHydrateFallback) {
        children = hydrateFallbackElement;
      } else if (match2.route.Component) {
        children = /* @__PURE__ */ reactExports.createElement(match2.route.Component, null);
      } else if (match2.route.element) {
        children = match2.route.element;
      } else {
        children = outlet;
      }
      return /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
        match: match2,
        routeContext: {
          outlet,
          matches: matches2,
          isDataRoute: dataRouterState != null
        },
        children
      });
    };
    return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index2 === 0) ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error,
      children: getChildren(),
      routeContext: {
        outlet: null,
        matches: matches2,
        isDataRoute: true
      }
    }) : getChildren();
  }, null);
}
var DataRouterStateHook$1 = /* @__PURE__ */ function(DataRouterStateHook2) {
  DataRouterStateHook2["UseBlocker"] = "useBlocker";
  DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
  DataRouterStateHook2["UseActionData"] = "useActionData";
  DataRouterStateHook2["UseRouteError"] = "useRouteError";
  DataRouterStateHook2["UseNavigation"] = "useNavigation";
  DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
  DataRouterStateHook2["UseMatches"] = "useMatches";
  DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
  DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
  DataRouterStateHook2["UseRouteId"] = "useRouteId";
  return DataRouterStateHook2;
}(DataRouterStateHook$1 || {});
function useDataRouterState(hookName) {
  let state2 = reactExports.useContext(DataRouterStateContext);
  !state2 ? invariant(false) : void 0;
  return state2;
}
function useRouteContext(hookName) {
  let route = reactExports.useContext(RouteContext);
  !route ? invariant(false) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext();
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? invariant(false) : void 0;
  return thisRoute.route.id;
}
function useRouteError() {
  var _state$errors;
  let error = reactExports.useContext(RouteErrorContext);
  let state2 = useDataRouterState(DataRouterStateHook$1.UseRouteError);
  let routeId = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
  if (error !== void 0) {
    return error;
  }
  return (_state$errors = state2.errors) == null ? void 0 : _state$errors[routeId];
}
const alreadyWarned = {};
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned[key]) {
    alreadyWarned[key] = true;
  }
}
function Route(_props) {
  invariant(false);
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false,
    future
  } = _ref5;
  !!useInRouterContext() ? invariant(false) : void 0;
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = reactExports.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp,
    future: _extends$x({
      v7_relativeSplatPath: false
    }, future)
  }), [basename, future, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash: hash2 = "",
    state: state2 = null,
    key = "default"
  } = locationProp;
  let locationContext = reactExports.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash: hash2,
        state: state2,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash2, state2, key, navigationType]);
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
    children,
    value: locationContext
  }));
}
function Routes(_ref6) {
  let {
    children,
    location
  } = _ref6;
  return useRoutes(createRoutesFromChildren(children), location);
}
new Promise(() => {
});
function createRoutesFromChildren(children, parentPath) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  let routes = [];
  reactExports.Children.forEach(children, (element, index2) => {
    if (!/* @__PURE__ */ reactExports.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index2];
    if (element.type === reactExports.Fragment) {
      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
      return;
    }
    !(element.type === Route) ? invariant(false) : void 0;
    !(!element.props.index || !element.props.children) ? invariant(false) : void 0;
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(element.props.children, treePath);
    }
    routes.push(route);
  });
  return routes;
}
/**
 * React Router DOM v6.22.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
const REACT_ROUTER_VERSION = "6";
try {
  window.__reactRouterVersion = REACT_ROUTER_VERSION;
} catch (e2) {
}
const START_TRANSITION = "startTransition";
const startTransitionImpl = React$1[START_TRANSITION];
function HashRouter(_ref5) {
  let {
    basename,
    children,
    future,
    window: window2
  } = _ref5;
  let historyRef = reactExports.useRef();
  if (historyRef.current == null) {
    historyRef.current = createHashHistory({
      window: window2,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state2, setStateImpl] = reactExports.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = reactExports.useCallback((newState) => {
    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    children,
    location: state2.location,
    navigationType: state2.action,
    navigator: history,
    future
  });
}
var DataRouterHook;
(function(DataRouterHook2) {
  DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
  DataRouterHook2["UseSubmit"] = "useSubmit";
  DataRouterHook2["UseSubmitFetcher"] = "useSubmitFetcher";
  DataRouterHook2["UseFetcher"] = "useFetcher";
  DataRouterHook2["useViewTransitionState"] = "useViewTransitionState";
})(DataRouterHook || (DataRouterHook = {}));
var DataRouterStateHook;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseFetcher"] = "useFetcher";
  DataRouterStateHook2["UseFetchers"] = "useFetchers";
  DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
})(DataRouterStateHook || (DataRouterStateHook = {}));
var define_process_env_default = {};
function _arrayWithHoles$b(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$b(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r22) {
      o = true, n2 = r22;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _arrayLikeToArray$2$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray$2$1(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$2$1(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$2$1(o, minLen);
}
function _nonIterableRest$b() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$b(arr, i) {
  return _arrayWithHoles$b(arr) || _iterableToArrayLimit$b(arr, i) || _unsupportedIterableToArray$2$1(arr, i) || _nonIterableRest$b();
}
function _typeof$f(o) {
  "@babel/helpers - typeof";
  return _typeof$f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$f(o);
}
function classNames$1() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (args) {
    var classes2 = [];
    for (var i = 0; i < args.length; i++) {
      var className = args[i];
      if (!className)
        continue;
      var type = _typeof$f(className);
      if (type === "string" || type === "number") {
        classes2.push(className);
      } else if (type === "object") {
        var _classes = Array.isArray(className) ? className : Object.entries(className).map(function(_ref3) {
          var _ref22 = _slicedToArray$b(_ref3, 2), key = _ref22[0], value = _ref22[1];
          return !!value ? key : null;
        });
        classes2 = _classes.length ? classes2.concat(_classes.filter(function(c2) {
          return !!c2;
        })) : classes2;
      }
    }
    return classes2.join(" ").trim();
  }
  return void 0;
}
function _arrayWithoutHoles$6(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$2$1(arr);
}
function _iterableToArray$6(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _nonIterableSpread$6() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray$6(arr) {
  return _arrayWithoutHoles$6(arr) || _iterableToArray$6(arr) || _unsupportedIterableToArray$2$1(arr) || _nonIterableSpread$6();
}
function _classCallCheck$4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _toPrimitive$e(input2, hint) {
  if (_typeof$f(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$f(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$e(arg) {
  var key = _toPrimitive$e(arg, "string");
  return _typeof$f(key) === "symbol" ? key : String(key);
}
function _defineProperties$4(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey$e(descriptor.key), descriptor);
  }
}
function _createClass$4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$4(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty$f(obj, key, value) {
  key = _toPropertyKey$e(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _createForOfIteratorHelper$1$1(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1$3(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F2 = function F22() {
      };
      return { s: F2, n: function n2() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it = it.call(o);
  }, n: function n2() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it["return"] != null)
        it["return"]();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$1$3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1$3(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$1$3(o, minLen);
}
function _arrayLikeToArray$1$3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var DomHandler = /* @__PURE__ */ function() {
  function DomHandler2() {
    _classCallCheck$4(this, DomHandler2);
  }
  _createClass$4(DomHandler2, null, [{
    key: "innerWidth",
    value: function innerWidth(el2) {
      if (el2) {
        var width = el2.offsetWidth;
        var style = getComputedStyle(el2);
        width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
      }
      return 0;
    }
  }, {
    key: "width",
    value: function width(el2) {
      if (el2) {
        var width2 = el2.offsetWidth;
        var style = getComputedStyle(el2);
        width2 -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width2;
      }
      return 0;
    }
  }, {
    key: "getBrowserLanguage",
    value: function getBrowserLanguage() {
      return navigator.userLanguage || navigator.languages && navigator.languages.length && navigator.languages[0] || navigator.language || navigator.browserLanguage || navigator.systemLanguage || "en";
    }
  }, {
    key: "getWindowScrollTop",
    value: function getWindowScrollTop() {
      var doc = document.documentElement;
      return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
    }
  }, {
    key: "getWindowScrollLeft",
    value: function getWindowScrollLeft() {
      var doc = document.documentElement;
      return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    }
  }, {
    key: "getOuterWidth",
    value: function getOuterWidth(el2, margin) {
      if (el2) {
        var width = el2.getBoundingClientRect().width || el2.offsetWidth;
        if (margin) {
          var style = getComputedStyle(el2);
          width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);
        }
        return width;
      }
      return 0;
    }
  }, {
    key: "getOuterHeight",
    value: function getOuterHeight(el2, margin) {
      if (el2) {
        var height = el2.getBoundingClientRect().height || el2.offsetHeight;
        if (margin) {
          var style = getComputedStyle(el2);
          height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);
        }
        return height;
      }
      return 0;
    }
  }, {
    key: "getClientHeight",
    value: function getClientHeight(el2, margin) {
      if (el2) {
        var height = el2.clientHeight;
        if (margin) {
          var style = getComputedStyle(el2);
          height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);
        }
        return height;
      }
      return 0;
    }
  }, {
    key: "getClientWidth",
    value: function getClientWidth(el2, margin) {
      if (el2) {
        var width = el2.clientWidth;
        if (margin) {
          var style = getComputedStyle(el2);
          width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);
        }
        return width;
      }
      return 0;
    }
  }, {
    key: "getViewport",
    value: function getViewport() {
      var win = window, d2 = document, e2 = d2.documentElement, g2 = d2.getElementsByTagName("body")[0], w2 = win.innerWidth || e2.clientWidth || g2.clientWidth, h3 = win.innerHeight || e2.clientHeight || g2.clientHeight;
      return {
        width: w2,
        height: h3
      };
    }
  }, {
    key: "getOffset",
    value: function getOffset(el2) {
      if (el2) {
        var rect = el2.getBoundingClientRect();
        return {
          top: rect.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0),
          left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0)
        };
      }
      return {
        top: "auto",
        left: "auto"
      };
    }
  }, {
    key: "index",
    value: function index2(element) {
      if (element) {
        var children = element.parentNode.childNodes;
        var num = 0;
        for (var i = 0; i < children.length; i++) {
          if (children[i] === element)
            return num;
          if (children[i].nodeType === 1)
            num++;
        }
      }
      return -1;
    }
  }, {
    key: "addMultipleClasses",
    value: function addMultipleClasses(element, className) {
      if (element && className) {
        if (element.classList) {
          var styles2 = className.split(" ");
          for (var i = 0; i < styles2.length; i++) {
            element.classList.add(styles2[i]);
          }
        } else {
          var _styles = className.split(" ");
          for (var _i = 0; _i < _styles.length; _i++) {
            element.className += " " + _styles[_i];
          }
        }
      }
    }
  }, {
    key: "removeMultipleClasses",
    value: function removeMultipleClasses(element, className) {
      if (element && className) {
        if (element.classList) {
          var styles2 = className.split(" ");
          for (var i = 0; i < styles2.length; i++) {
            element.classList.remove(styles2[i]);
          }
        } else {
          var _styles2 = className.split(" ");
          for (var _i2 = 0; _i2 < _styles2.length; _i2++) {
            element.className = element.className.replace(new RegExp("(^|\\b)" + _styles2[_i2].split(" ").join("|") + "(\\b|$)", "gi"), " ");
          }
        }
      }
    }
  }, {
    key: "addClass",
    value: function addClass2(element, className) {
      if (element && className) {
        if (element.classList)
          element.classList.add(className);
        else
          element.className += " " + className;
      }
    }
  }, {
    key: "removeClass",
    value: function removeClass3(element, className) {
      if (element && className) {
        if (element.classList)
          element.classList.remove(className);
        else
          element.className = element.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
      }
    }
  }, {
    key: "hasClass",
    value: function hasClass2(element, className) {
      if (element) {
        if (element.classList)
          return element.classList.contains(className);
        else
          return new RegExp("(^| )" + className + "( |$)", "gi").test(element.className);
      }
      return false;
    }
  }, {
    key: "addStyles",
    value: function addStyles(element) {
      var styles2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (element) {
        Object.entries(styles2).forEach(function(_ref3) {
          var _ref22 = _slicedToArray$b(_ref3, 2), key = _ref22[0], value = _ref22[1];
          return element.style[key] = value;
        });
      }
    }
  }, {
    key: "find",
    value: function find(element, selector) {
      return element ? Array.from(element.querySelectorAll(selector)) : [];
    }
  }, {
    key: "findSingle",
    value: function findSingle(element, selector) {
      if (element) {
        return element.querySelector(selector);
      }
      return null;
    }
  }, {
    key: "setAttributes",
    value: function setAttributes(element) {
      var _this = this;
      var attributes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (element) {
        var computedStyles = function computedStyles2(rule, value) {
          var _element$$attrs, _element$$attrs2;
          var styles2 = element !== null && element !== void 0 && (_element$$attrs = element.$attrs) !== null && _element$$attrs !== void 0 && _element$$attrs[rule] ? [element === null || element === void 0 || (_element$$attrs2 = element.$attrs) === null || _element$$attrs2 === void 0 ? void 0 : _element$$attrs2[rule]] : [];
          return [value].flat().reduce(function(cv, v2) {
            if (v2 !== null && v2 !== void 0) {
              var type = _typeof$f(v2);
              if (type === "string" || type === "number") {
                cv.push(v2);
              } else if (type === "object") {
                var _cv = Array.isArray(v2) ? computedStyles2(rule, v2) : Object.entries(v2).map(function(_ref3) {
                  var _ref4 = _slicedToArray$b(_ref3, 2), _k = _ref4[0], _v = _ref4[1];
                  return rule === "style" && (!!_v || _v === 0) ? "".concat(_k.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase(), ":").concat(_v) : !!_v ? _k : void 0;
                });
                cv = _cv.length ? cv.concat(_cv.filter(function(c2) {
                  return !!c2;
                })) : cv;
              }
            }
            return cv;
          }, styles2);
        };
        Object.entries(attributes).forEach(function(_ref5) {
          var _ref6 = _slicedToArray$b(_ref5, 2), key = _ref6[0], value = _ref6[1];
          if (value !== void 0 && value !== null) {
            var matchedEvent = key.match(/^on(.+)/);
            if (matchedEvent) {
              element.addEventListener(matchedEvent[1].toLowerCase(), value);
            } else if (key === "p-bind") {
              _this.setAttributes(element, value);
            } else {
              value = key === "class" ? _toConsumableArray$6(new Set(computedStyles("class", value))).join(" ").trim() : key === "style" ? computedStyles("style", value).join(";").trim() : value;
              (element.$attrs = element.$attrs || {}) && (element.$attrs[key] = value);
              element.setAttribute(key, value);
            }
          }
        });
      }
    }
  }, {
    key: "getAttribute",
    value: function getAttribute(element, name) {
      if (element) {
        var value = element.getAttribute(name);
        if (!isNaN(value)) {
          return +value;
        }
        if (value === "true" || value === "false") {
          return value === "true";
        }
        return value;
      }
      return void 0;
    }
  }, {
    key: "isAttributeEquals",
    value: function isAttributeEquals(element, name, value) {
      return element ? this.getAttribute(element, name) === value : false;
    }
  }, {
    key: "isAttributeNotEquals",
    value: function isAttributeNotEquals(element, name, value) {
      return !this.isAttributeEquals(element, name, value);
    }
  }, {
    key: "getHeight",
    value: function getHeight(el2) {
      if (el2) {
        var height = el2.offsetHeight;
        var style = getComputedStyle(el2);
        height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
        return height;
      }
      return 0;
    }
  }, {
    key: "getWidth",
    value: function getWidth(el2) {
      if (el2) {
        var width = el2.offsetWidth;
        var style = getComputedStyle(el2);
        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);
        return width;
      }
      return 0;
    }
  }, {
    key: "alignOverlay",
    value: function alignOverlay(overlay, target, appendTo) {
      var calculateMinWidth = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      if (overlay && target) {
        if (appendTo === "self") {
          this.relativePosition(overlay, target);
        } else {
          calculateMinWidth && (overlay.style.minWidth = DomHandler2.getOuterWidth(target) + "px");
          this.absolutePosition(overlay, target);
        }
      }
    }
  }, {
    key: "absolutePosition",
    value: function absolutePosition(element, target) {
      var align = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "left";
      if (element && target) {
        var elementDimensions = element.offsetParent ? {
          width: element.offsetWidth,
          height: element.offsetHeight
        } : this.getHiddenElementDimensions(element);
        var elementOuterHeight = elementDimensions.height;
        var elementOuterWidth = elementDimensions.width;
        var targetOuterHeight = target.offsetHeight;
        var targetOuterWidth = target.offsetWidth;
        var targetOffset = target.getBoundingClientRect();
        var windowScrollTop = this.getWindowScrollTop();
        var windowScrollLeft = this.getWindowScrollLeft();
        var viewport = this.getViewport();
        var top, left;
        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
          top = targetOffset.top + windowScrollTop - elementOuterHeight;
          if (top < 0) {
            top = windowScrollTop;
          }
          element.style.transformOrigin = "bottom";
        } else {
          top = targetOuterHeight + targetOffset.top + windowScrollTop;
          element.style.transformOrigin = "top";
        }
        var targetOffsetPx = targetOffset.left;
        var alignOffset = align === "left" ? 0 : elementOuterWidth - targetOuterWidth;
        if (targetOffsetPx + targetOuterWidth + elementOuterWidth > viewport.width)
          left = Math.max(0, targetOffsetPx + windowScrollLeft + targetOuterWidth - elementOuterWidth);
        else
          left = targetOffsetPx - alignOffset + windowScrollLeft;
        element.style.top = top + "px";
        element.style.left = left + "px";
      }
    }
  }, {
    key: "relativePosition",
    value: function relativePosition(element, target) {
      if (element && target) {
        var elementDimensions = element.offsetParent ? {
          width: element.offsetWidth,
          height: element.offsetHeight
        } : this.getHiddenElementDimensions(element);
        var targetHeight = target.offsetHeight;
        var targetOffset = target.getBoundingClientRect();
        var viewport = this.getViewport();
        var top, left;
        if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {
          top = -1 * elementDimensions.height;
          if (targetOffset.top + top < 0) {
            top = -1 * targetOffset.top;
          }
          element.style.transformOrigin = "bottom";
        } else {
          top = targetHeight;
          element.style.transformOrigin = "top";
        }
        if (elementDimensions.width > viewport.width) {
          left = targetOffset.left * -1;
        } else if (targetOffset.left + elementDimensions.width > viewport.width) {
          left = (targetOffset.left + elementDimensions.width - viewport.width) * -1;
        } else {
          left = 0;
        }
        element.style.top = top + "px";
        element.style.left = left + "px";
      }
    }
  }, {
    key: "flipfitCollision",
    value: function flipfitCollision(element, target) {
      var _this2 = this;
      var my = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "left top";
      var at = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "left bottom";
      var callback2 = arguments.length > 4 ? arguments[4] : void 0;
      if (element && target) {
        var targetOffset = target.getBoundingClientRect();
        var viewport = this.getViewport();
        var myArr = my.split(" ");
        var atArr = at.split(" ");
        var getPositionValue = function getPositionValue2(arr, isOffset) {
          return isOffset ? +arr.substring(arr.search(/(\+|-)/g)) || 0 : arr.substring(0, arr.search(/(\+|-)/g)) || arr;
        };
        var position2 = {
          my: {
            x: getPositionValue(myArr[0]),
            y: getPositionValue(myArr[1] || myArr[0]),
            offsetX: getPositionValue(myArr[0], true),
            offsetY: getPositionValue(myArr[1] || myArr[0], true)
          },
          at: {
            x: getPositionValue(atArr[0]),
            y: getPositionValue(atArr[1] || atArr[0]),
            offsetX: getPositionValue(atArr[0], true),
            offsetY: getPositionValue(atArr[1] || atArr[0], true)
          }
        };
        var myOffset = {
          left: function left() {
            var totalOffset = position2.my.offsetX + position2.at.offsetX;
            return totalOffset + targetOffset.left + (position2.my.x === "left" ? 0 : -1 * (position2.my.x === "center" ? _this2.getOuterWidth(element) / 2 : _this2.getOuterWidth(element)));
          },
          top: function top() {
            var totalOffset = position2.my.offsetY + position2.at.offsetY;
            return totalOffset + targetOffset.top + (position2.my.y === "top" ? 0 : -1 * (position2.my.y === "center" ? _this2.getOuterHeight(element) / 2 : _this2.getOuterHeight(element)));
          }
        };
        var alignWithAt = {
          count: {
            x: 0,
            y: 0
          },
          left: function left() {
            var left2 = myOffset.left();
            var scrollLeft = DomHandler2.getWindowScrollLeft();
            element.style.left = left2 + scrollLeft + "px";
            if (this.count.x === 2) {
              element.style.left = scrollLeft + "px";
              this.count.x = 0;
            } else if (left2 < 0) {
              this.count.x++;
              position2.my.x = "left";
              position2.at.x = "right";
              position2.my.offsetX *= -1;
              position2.at.offsetX *= -1;
              this.right();
            }
          },
          right: function right() {
            var left = myOffset.left() + DomHandler2.getOuterWidth(target);
            var scrollLeft = DomHandler2.getWindowScrollLeft();
            element.style.left = left + scrollLeft + "px";
            if (this.count.x === 2) {
              element.style.left = viewport.width - DomHandler2.getOuterWidth(element) + scrollLeft + "px";
              this.count.x = 0;
            } else if (left + DomHandler2.getOuterWidth(element) > viewport.width) {
              this.count.x++;
              position2.my.x = "right";
              position2.at.x = "left";
              position2.my.offsetX *= -1;
              position2.at.offsetX *= -1;
              this.left();
            }
          },
          top: function top() {
            var top2 = myOffset.top();
            var scrollTop = DomHandler2.getWindowScrollTop();
            element.style.top = top2 + scrollTop + "px";
            if (this.count.y === 2) {
              element.style.left = scrollTop + "px";
              this.count.y = 0;
            } else if (top2 < 0) {
              this.count.y++;
              position2.my.y = "top";
              position2.at.y = "bottom";
              position2.my.offsetY *= -1;
              position2.at.offsetY *= -1;
              this.bottom();
            }
          },
          bottom: function bottom() {
            var top = myOffset.top() + DomHandler2.getOuterHeight(target);
            var scrollTop = DomHandler2.getWindowScrollTop();
            element.style.top = top + scrollTop + "px";
            if (this.count.y === 2) {
              element.style.left = viewport.height - DomHandler2.getOuterHeight(element) + scrollTop + "px";
              this.count.y = 0;
            } else if (top + DomHandler2.getOuterHeight(target) > viewport.height) {
              this.count.y++;
              position2.my.y = "bottom";
              position2.at.y = "top";
              position2.my.offsetY *= -1;
              position2.at.offsetY *= -1;
              this.top();
            }
          },
          center: function center(axis) {
            if (axis === "y") {
              var top = myOffset.top() + DomHandler2.getOuterHeight(target) / 2;
              element.style.top = top + DomHandler2.getWindowScrollTop() + "px";
              if (top < 0) {
                this.bottom();
              } else if (top + DomHandler2.getOuterHeight(target) > viewport.height) {
                this.top();
              }
            } else {
              var left = myOffset.left() + DomHandler2.getOuterWidth(target) / 2;
              element.style.left = left + DomHandler2.getWindowScrollLeft() + "px";
              if (left < 0) {
                this.left();
              } else if (left + DomHandler2.getOuterWidth(element) > viewport.width) {
                this.right();
              }
            }
          }
        };
        alignWithAt[position2.at.x]("x");
        alignWithAt[position2.at.y]("y");
        if (this.isFunction(callback2)) {
          callback2(position2);
        }
      }
    }
  }, {
    key: "findCollisionPosition",
    value: function findCollisionPosition(position2) {
      if (position2) {
        var isAxisY = position2 === "top" || position2 === "bottom";
        var myXPosition = position2 === "left" ? "right" : "left";
        var myYPosition = position2 === "top" ? "bottom" : "top";
        if (isAxisY) {
          return {
            axis: "y",
            my: "center ".concat(myYPosition),
            at: "center ".concat(position2)
          };
        }
        return {
          axis: "x",
          my: "".concat(myXPosition, " center"),
          at: "".concat(position2, " center")
        };
      }
    }
  }, {
    key: "getParents",
    value: function getParents(element) {
      var parents = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      return element["parentNode"] === null ? parents : this.getParents(element.parentNode, parents.concat([element.parentNode]));
    }
  }, {
    key: "getScrollableParents",
    value: function getScrollableParents(element) {
      var hideOverlaysOnDocumentScrolling = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var scrollableParents = [];
      if (element) {
        var parents = this.getParents(element);
        var overflowRegex = /(auto|scroll)/;
        var overflowCheck = function overflowCheck2(node2) {
          var styleDeclaration = node2 ? getComputedStyle(node2) : null;
          return styleDeclaration && (overflowRegex.test(styleDeclaration.getPropertyValue("overflow")) || overflowRegex.test(styleDeclaration.getPropertyValue("overflowX")) || overflowRegex.test(styleDeclaration.getPropertyValue("overflowY")));
        };
        var addScrollableParent = function addScrollableParent2(node2) {
          if (hideOverlaysOnDocumentScrolling) {
            scrollableParents.push(node2.nodeName === "BODY" || node2.nodeName === "HTML" || node2.nodeType === 9 ? window : node2);
          } else {
            scrollableParents.push(node2);
          }
        };
        var _iterator = _createForOfIteratorHelper$1$1(parents), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var parent = _step.value;
            var scrollSelectors = parent.nodeType === 1 && parent.dataset["scrollselectors"];
            if (scrollSelectors) {
              var selectors = scrollSelectors.split(",");
              var _iterator2 = _createForOfIteratorHelper$1$1(selectors), _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                  var selector = _step2.value;
                  var el2 = this.findSingle(parent, selector);
                  if (el2 && overflowCheck(el2)) {
                    addScrollableParent(el2);
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            }
            if (parent.nodeType === 1 && overflowCheck(parent)) {
              addScrollableParent(parent);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      if (!scrollableParents.some(function(node2) {
        return node2 === document.body || node2 === window;
      })) {
        scrollableParents.push(window);
      }
      return scrollableParents;
    }
  }, {
    key: "getHiddenElementOuterHeight",
    value: function getHiddenElementOuterHeight(element) {
      if (element) {
        element.style.visibility = "hidden";
        element.style.display = "block";
        var elementHeight = element.offsetHeight;
        element.style.display = "none";
        element.style.visibility = "visible";
        return elementHeight;
      }
      return 0;
    }
  }, {
    key: "getHiddenElementOuterWidth",
    value: function getHiddenElementOuterWidth(element) {
      if (element) {
        element.style.visibility = "hidden";
        element.style.display = "block";
        var elementWidth = element.offsetWidth;
        element.style.display = "none";
        element.style.visibility = "visible";
        return elementWidth;
      }
      return 0;
    }
  }, {
    key: "getHiddenElementDimensions",
    value: function getHiddenElementDimensions(element) {
      var dimensions = {};
      if (element) {
        element.style.visibility = "hidden";
        element.style.display = "block";
        dimensions.width = element.offsetWidth;
        dimensions.height = element.offsetHeight;
        element.style.display = "none";
        element.style.visibility = "visible";
      }
      return dimensions;
    }
  }, {
    key: "fadeIn",
    value: function fadeIn(element, duration) {
      if (element) {
        element.style.opacity = 0;
        var last = +/* @__PURE__ */ new Date();
        var opacity = 0;
        var tick = function tick2() {
          opacity = +element.style.opacity + ((/* @__PURE__ */ new Date()).getTime() - last) / duration;
          element.style.opacity = opacity;
          last = +/* @__PURE__ */ new Date();
          if (+opacity < 1) {
            window.requestAnimationFrame && requestAnimationFrame(tick2) || setTimeout(tick2, 16);
          }
        };
        tick();
      }
    }
  }, {
    key: "fadeOut",
    value: function fadeOut(element, duration) {
      if (element) {
        var opacity = 1, interval = 50, gap = interval / duration;
        var fading = setInterval(function() {
          opacity -= gap;
          if (opacity <= 0) {
            opacity = 0;
            clearInterval(fading);
          }
          element.style.opacity = opacity;
        }, interval);
      }
    }
  }, {
    key: "getUserAgent",
    value: function getUserAgent() {
      return navigator.userAgent;
    }
  }, {
    key: "isIOS",
    value: function isIOS2() {
      return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window["MSStream"];
    }
  }, {
    key: "isAndroid",
    value: function isAndroid() {
      return /(android)/i.test(navigator.userAgent);
    }
  }, {
    key: "isChrome",
    value: function isChrome() {
      return /(chrome)/i.test(navigator.userAgent);
    }
  }, {
    key: "isClient",
    value: function isClient() {
      return !!(typeof window !== "undefined" && window.document && window.document.createElement);
    }
  }, {
    key: "isTouchDevice",
    value: function isTouchDevice2() {
      return "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
    }
  }, {
    key: "isFunction",
    value: function isFunction2(obj) {
      return !!(obj && obj.constructor && obj.call && obj.apply);
    }
  }, {
    key: "appendChild",
    value: function appendChild(element, target) {
      if (this.isElement(target))
        target.appendChild(element);
      else if (target.el && target.el.nativeElement)
        target.el.nativeElement.appendChild(element);
      else
        throw new Error("Cannot append " + target + " to " + element);
    }
  }, {
    key: "removeChild",
    value: function removeChild(element, target) {
      if (this.isElement(target))
        target.removeChild(element);
      else if (target.el && target.el.nativeElement)
        target.el.nativeElement.removeChild(element);
      else
        throw new Error("Cannot remove " + element + " from " + target);
    }
  }, {
    key: "isElement",
    value: function isElement2(obj) {
      return (typeof HTMLElement === "undefined" ? "undefined" : _typeof$f(HTMLElement)) === "object" ? obj instanceof HTMLElement : obj && _typeof$f(obj) === "object" && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === "string";
    }
  }, {
    key: "scrollInView",
    value: function scrollInView(container, item2) {
      var borderTopValue = getComputedStyle(container).getPropertyValue("borderTopWidth");
      var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
      var paddingTopValue = getComputedStyle(container).getPropertyValue("paddingTop");
      var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
      var containerRect = container.getBoundingClientRect();
      var itemRect = item2.getBoundingClientRect();
      var offset = itemRect.top + document.body.scrollTop - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
      var scroll = container.scrollTop;
      var elementHeight = container.clientHeight;
      var itemHeight = this.getOuterHeight(item2);
      if (offset < 0) {
        container.scrollTop = scroll + offset;
      } else if (offset + itemHeight > elementHeight) {
        container.scrollTop = scroll + offset - elementHeight + itemHeight;
      }
    }
  }, {
    key: "clearSelection",
    value: function clearSelection() {
      if (window.getSelection) {
        if (window.getSelection().empty) {
          window.getSelection().empty();
        } else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {
          window.getSelection().removeAllRanges();
        }
      } else if (document["selection"] && document["selection"].empty) {
        try {
          document["selection"].empty();
        } catch (error) {
        }
      }
    }
  }, {
    key: "calculateScrollbarWidth",
    value: function calculateScrollbarWidth(el2) {
      if (el2) {
        var style = getComputedStyle(el2);
        return el2.offsetWidth - el2.clientWidth - parseFloat(style.borderLeftWidth) - parseFloat(style.borderRightWidth);
      } else {
        if (this.calculatedScrollbarWidth != null)
          return this.calculatedScrollbarWidth;
        var scrollDiv = document.createElement("div");
        scrollDiv.className = "p-scrollbar-measure";
        document.body.appendChild(scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        this.calculatedScrollbarWidth = scrollbarWidth;
        return scrollbarWidth;
      }
    }
  }, {
    key: "calculateBodyScrollbarWidth",
    value: function calculateBodyScrollbarWidth() {
      return window.innerWidth - document.documentElement.offsetWidth;
    }
  }, {
    key: "getBrowser",
    value: function getBrowser() {
      if (!this.browser) {
        var matched = this.resolveUserAgent();
        this.browser = {};
        if (matched.browser) {
          this.browser[matched.browser] = true;
          this.browser["version"] = matched.version;
        }
        if (this.browser["chrome"]) {
          this.browser["webkit"] = true;
        } else if (this.browser["webkit"]) {
          this.browser["safari"] = true;
        }
      }
      return this.browser;
    }
  }, {
    key: "resolveUserAgent",
    value: function resolveUserAgent() {
      var ua2 = navigator.userAgent.toLowerCase();
      var match2 = /(chrome)[ ]([\w.]+)/.exec(ua2) || /(webkit)[ ]([\w.]+)/.exec(ua2) || /(opera)(?:.*version|)[ ]([\w.]+)/.exec(ua2) || /(msie) ([\w.]+)/.exec(ua2) || ua2.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua2) || [];
      return {
        browser: match2[1] || "",
        version: match2[2] || "0"
      };
    }
  }, {
    key: "blockBodyScroll",
    value: function blockBodyScroll() {
      var className = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "p-overflow-hidden";
      var hasScrollbarWidth = !!document.body.style.getPropertyValue("--scrollbar-width");
      !hasScrollbarWidth && document.body.style.setProperty("--scrollbar-width", this.calculateBodyScrollbarWidth() + "px");
      this.addClass(document.body, className);
    }
  }, {
    key: "unblockBodyScroll",
    value: function unblockBodyScroll() {
      var className = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "p-overflow-hidden";
      document.body.style.removeProperty("--scrollbar-width");
      this.removeClass(document.body, className);
    }
  }, {
    key: "isVisible",
    value: function isVisible(element) {
      return element && (element.clientHeight !== 0 || element.getClientRects().length !== 0 || getComputedStyle(element).display !== "none");
    }
  }, {
    key: "isExist",
    value: function isExist(element) {
      return !!(element !== null && typeof element !== "undefined" && element.nodeName && element.parentNode);
    }
  }, {
    key: "getFocusableElements",
    value: function getFocusableElements(element) {
      var selector = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var focusableElements = DomHandler2.find(element, 'button:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])'.concat(selector, ',\n                [href][clientHeight][clientWidth]:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])').concat(selector, ',\n                input:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])').concat(selector, ',\n                select:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])').concat(selector, ',\n                textarea:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])').concat(selector, ',\n                [tabIndex]:not([tabIndex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])').concat(selector, ',\n                [contenteditable]:not([tabIndex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])').concat(selector));
      var visibleFocusableElements = [];
      var _iterator3 = _createForOfIteratorHelper$1$1(focusableElements), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var focusableElement = _step3.value;
          if (getComputedStyle(focusableElement).display !== "none" && getComputedStyle(focusableElement).visibility !== "hidden")
            visibleFocusableElements.push(focusableElement);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return visibleFocusableElements;
    }
  }, {
    key: "getFirstFocusableElement",
    value: function getFirstFocusableElement(element, selector) {
      var focusableElements = DomHandler2.getFocusableElements(element, selector);
      return focusableElements.length > 0 ? focusableElements[0] : null;
    }
  }, {
    key: "getLastFocusableElement",
    value: function getLastFocusableElement(element, selector) {
      var focusableElements = DomHandler2.getFocusableElements(element, selector);
      return focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : null;
    }
    /**
     * Focus an input element if it does not already have focus.
     *
     * @param {HTMLElement} el a HTML element
     * @param {boolean} scrollTo flag to control whether to scroll to the element, false by default
     */
  }, {
    key: "focus",
    value: function focus(el2, scrollTo2) {
      var preventScroll = scrollTo2 === void 0 ? true : !scrollTo2;
      el2 && document.activeElement !== el2 && el2.focus({
        preventScroll
      });
    }
    /**
     * Focus the first focusable element if it does not already have focus.
     *
     * @param {HTMLElement} el a HTML element
     * @param {boolean} scrollTo flag to control whether to scroll to the element, false by default
     * @return {HTMLElement | undefined} the first focusable HTML element found
     */
  }, {
    key: "focusFirstElement",
    value: function focusFirstElement(el2, scrollTo2) {
      if (!el2)
        return;
      var firstFocusableElement = DomHandler2.getFirstFocusableElement(el2);
      firstFocusableElement && DomHandler2.focus(firstFocusableElement, scrollTo2);
      return firstFocusableElement;
    }
  }, {
    key: "getCursorOffset",
    value: function getCursorOffset(el2, prevText, nextText, currentText) {
      if (el2) {
        var style = getComputedStyle(el2);
        var ghostDiv = document.createElement("div");
        ghostDiv.style.position = "absolute";
        ghostDiv.style.top = "0px";
        ghostDiv.style.left = "0px";
        ghostDiv.style.visibility = "hidden";
        ghostDiv.style.pointerEvents = "none";
        ghostDiv.style.overflow = style.overflow;
        ghostDiv.style.width = style.width;
        ghostDiv.style.height = style.height;
        ghostDiv.style.padding = style.padding;
        ghostDiv.style.border = style.border;
        ghostDiv.style.overflowWrap = style.overflowWrap;
        ghostDiv.style.whiteSpace = style.whiteSpace;
        ghostDiv.style.lineHeight = style.lineHeight;
        ghostDiv.innerHTML = prevText.replace(/\r\n|\r|\n/g, "<br />");
        var ghostSpan = document.createElement("span");
        ghostSpan.textContent = currentText;
        ghostDiv.appendChild(ghostSpan);
        var text = document.createTextNode(nextText);
        ghostDiv.appendChild(text);
        document.body.appendChild(ghostDiv);
        var offsetLeft = ghostSpan.offsetLeft, offsetTop = ghostSpan.offsetTop, clientHeight = ghostSpan.clientHeight;
        document.body.removeChild(ghostDiv);
        return {
          left: Math.abs(offsetLeft - el2.scrollLeft),
          top: Math.abs(offsetTop - el2.scrollTop) + clientHeight
        };
      }
      return {
        top: "auto",
        left: "auto"
      };
    }
  }, {
    key: "invokeElementMethod",
    value: function invokeElementMethod(element, methodName, args) {
      element[methodName].apply(element, args);
    }
  }, {
    key: "isClickable",
    value: function isClickable(element) {
      var targetNode = element.nodeName;
      var parentNode = element.parentElement && element.parentElement.nodeName;
      return targetNode === "INPUT" || targetNode === "TEXTAREA" || targetNode === "BUTTON" || targetNode === "A" || parentNode === "INPUT" || parentNode === "TEXTAREA" || parentNode === "BUTTON" || parentNode === "A" || this.hasClass(element, "p-button") || this.hasClass(element.parentElement, "p-button") || this.hasClass(element.parentElement, "p-checkbox") || this.hasClass(element.parentElement, "p-radiobutton");
    }
  }, {
    key: "applyStyle",
    value: function applyStyle(element, style) {
      if (typeof style === "string") {
        element.style.cssText = this.style;
      } else {
        for (var prop in this.style) {
          element.style[prop] = style[prop];
        }
      }
    }
  }, {
    key: "exportCSV",
    value: function exportCSV(csv, filename) {
      var blob = new Blob([csv], {
        type: "application/csv;charset=utf-8;"
      });
      if (window.navigator.msSaveOrOpenBlob) {
        navigator.msSaveOrOpenBlob(blob, filename + ".csv");
      } else {
        var isDownloaded = DomHandler2.saveAs({
          name: filename + ".csv",
          src: URL.createObjectURL(blob)
        });
        if (!isDownloaded) {
          csv = "data:text/csv;charset=utf-8," + csv;
          window.open(encodeURI(csv));
        }
      }
    }
  }, {
    key: "saveAs",
    value: function saveAs(file) {
      if (file) {
        var link = document.createElement("a");
        if (link.download !== void 0) {
          var name = file.name, src = file.src;
          link.setAttribute("href", src);
          link.setAttribute("download", name);
          link.style.display = "none";
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          return true;
        }
      }
      return false;
    }
  }, {
    key: "createInlineStyle",
    value: function createInlineStyle(nonce, styleContainer) {
      var styleElement = document.createElement("style");
      DomHandler2.addNonce(styleElement, nonce);
      if (!styleContainer) {
        styleContainer = document.head;
      }
      styleContainer.appendChild(styleElement);
      return styleElement;
    }
  }, {
    key: "removeInlineStyle",
    value: function removeInlineStyle(styleElement) {
      if (this.isExist(styleElement)) {
        try {
          styleElement.parentNode.removeChild(styleElement);
        } catch (error) {
        }
        styleElement = null;
      }
      return styleElement;
    }
  }, {
    key: "addNonce",
    value: function addNonce(styleElement, nonce) {
      try {
        if (!nonce) {
          nonce = define_process_env_default.REACT_APP_CSS_NONCE;
        }
      } catch (error) {
      }
      nonce && styleElement.setAttribute("nonce", nonce);
    }
  }, {
    key: "getTargetElement",
    value: function getTargetElement(target) {
      if (!target)
        return null;
      if (target === "document") {
        return document;
      } else if (target === "window") {
        return window;
      } else if (_typeof$f(target) === "object" && target.hasOwnProperty("current")) {
        return this.isExist(target.current) ? target.current : null;
      } else {
        var isFunction2 = function isFunction22(obj) {
          return !!(obj && obj.constructor && obj.call && obj.apply);
        };
        var element = isFunction2(target) ? target() : target;
        return element && element.nodeType === 9 || this.isExist(element) ? element : null;
      }
    }
    /**
     * Get the attribute names for an element and sorts them alpha for comparison
     */
  }, {
    key: "getAttributeNames",
    value: function getAttributeNames(node2) {
      var index2, rv, attrs;
      rv = [];
      attrs = node2.attributes;
      for (index2 = 0; index2 < attrs.length; ++index2) {
        rv.push(attrs[index2].nodeName);
      }
      rv.sort();
      return rv;
    }
    /**
     * Compare two elements for equality.  Even will compare if the style element
     * is out of order for example:
     *
     * elem1 = style="color: red; font-size: 28px"
     * elem2 = style="font-size: 28px; color: red"
     */
  }, {
    key: "isEqualElement",
    value: function isEqualElement(elm1, elm2) {
      var attrs1, attrs2, name, node1, node2;
      attrs1 = DomHandler2.getAttributeNames(elm1);
      attrs2 = DomHandler2.getAttributeNames(elm2);
      if (attrs1.join(",") !== attrs2.join(",")) {
        return false;
      }
      for (var index2 = 0; index2 < attrs1.length; ++index2) {
        name = attrs1[index2];
        if (name === "style") {
          var astyle = elm1.style;
          var bstyle = elm2.style;
          var rexDigitsOnly = /^\d+$/;
          for (var _i3 = 0, _Object$keys = Object.keys(astyle); _i3 < _Object$keys.length; _i3++) {
            var key = _Object$keys[_i3];
            if (!rexDigitsOnly.test(key) && astyle[key] !== bstyle[key]) {
              return false;
            }
          }
        } else {
          if (elm1.getAttribute(name) !== elm2.getAttribute(name)) {
            return false;
          }
        }
      }
      for (node1 = elm1.firstChild, node2 = elm2.firstChild; node1 && node2; node1 = node1.nextSibling, node2 = node2.nextSibling) {
        if (node1.nodeType !== node2.nodeType) {
          return false;
        }
        if (node1.nodeType === 1) {
          if (!DomHandler2.isEqualElement(node1, node2)) {
            return false;
          }
        } else if (node1.nodeValue !== node2.nodeValue) {
          return false;
        }
      }
      if (node1 || node2) {
        return false;
      }
      return true;
    }
  }]);
  return DomHandler2;
}();
_defineProperty$f(DomHandler, "DATA_PROPS", ["data-"]);
_defineProperty$f(DomHandler, "ARIA_PROPS", ["aria", "focus-target"]);
function EventBus() {
  var allHandlers = /* @__PURE__ */ new Map();
  return {
    on: function on(type, handler2) {
      var handlers = allHandlers.get(type);
      if (!handlers)
        handlers = [handler2];
      else
        handlers.push(handler2);
      allHandlers.set(type, handlers);
    },
    off: function off(type, handler2) {
      var handlers = allHandlers.get(type);
      handlers && handlers.splice(handlers.indexOf(handler2) >>> 0, 1);
    },
    emit: function emit(type, evt) {
      var handlers = allHandlers.get(type);
      handlers && handlers.slice().forEach(function(handler2) {
        return handler2(evt);
      });
    }
  };
}
function _extends$w() {
  _extends$w = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$w.apply(this, arguments);
}
function _createForOfIteratorHelper$3(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$e(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F2 = function F22() {
      };
      return { s: F2, n: function n2() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it = it.call(o);
  }, n: function n2() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it["return"] != null)
        it["return"]();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$e(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$e(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$e(o, minLen);
}
function _arrayLikeToArray$e(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var ObjectUtils = /* @__PURE__ */ function() {
  function ObjectUtils2() {
    _classCallCheck$4(this, ObjectUtils2);
  }
  _createClass$4(ObjectUtils2, null, [{
    key: "equals",
    value: function equals2(obj1, obj2, field) {
      if (field && obj1 && _typeof$f(obj1) === "object" && obj2 && _typeof$f(obj2) === "object") {
        return this.deepEquals(this.resolveFieldData(obj1, field), this.resolveFieldData(obj2, field));
      }
      return this.deepEquals(obj1, obj2);
    }
    /**
     * Compares two JSON objects for deep equality recursively comparing both objects.
     * @param {*} a the first JSON object
     * @param {*} b the second JSON object
     * @returns true if equals, false it not
     */
  }, {
    key: "deepEquals",
    value: function deepEquals(a, b2) {
      if (a === b2)
        return true;
      if (a && b2 && _typeof$f(a) == "object" && _typeof$f(b2) == "object") {
        var arrA = Array.isArray(a), arrB = Array.isArray(b2), i, length2, key;
        if (arrA && arrB) {
          length2 = a.length;
          if (length2 !== b2.length)
            return false;
          for (i = length2; i-- !== 0; )
            if (!this.deepEquals(a[i], b2[i]))
              return false;
          return true;
        }
        if (arrA !== arrB)
          return false;
        var dateA = a instanceof Date, dateB = b2 instanceof Date;
        if (dateA !== dateB)
          return false;
        if (dateA && dateB)
          return a.getTime() === b2.getTime();
        var regexpA = a instanceof RegExp, regexpB = b2 instanceof RegExp;
        if (regexpA !== regexpB)
          return false;
        if (regexpA && regexpB)
          return a.toString() === b2.toString();
        var keys = Object.keys(a);
        length2 = keys.length;
        if (length2 !== Object.keys(b2).length)
          return false;
        for (i = length2; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b2, keys[i]))
            return false;
        for (i = length2; i-- !== 0; ) {
          key = keys[i];
          if (!this.deepEquals(a[key], b2[key]))
            return false;
        }
        return true;
      }
      return a !== a && b2 !== b2;
    }
  }, {
    key: "resolveFieldData",
    value: function resolveFieldData(data, field) {
      if (!data || !field) {
        return null;
      }
      try {
        var value = data[field];
        if (this.isNotEmpty(value))
          return value;
      } catch (_unused) {
      }
      if (Object.keys(data).length) {
        if (this.isFunction(field)) {
          return field(data);
        } else if (this.isNotEmpty(data[field])) {
          return data[field];
        } else if (field.indexOf(".") === -1) {
          return data[field];
        } else {
          var fields = field.split(".");
          var _value = data;
          for (var i = 0, len = fields.length; i < len; ++i) {
            if (_value == null) {
              return null;
            }
            _value = _value[fields[i]];
          }
          return _value;
        }
      }
      return null;
    }
  }, {
    key: "findDiffKeys",
    value: function findDiffKeys(obj1, obj2) {
      if (!obj1 || !obj2) {
        return {};
      }
      return Object.keys(obj1).filter(function(key) {
        return !obj2.hasOwnProperty(key);
      }).reduce(function(result, current) {
        result[current] = obj1[current];
        return result;
      }, {});
    }
    /**
     * Removes keys from a JSON object that start with a string such as "data" to get all "data-id" type properties.
     *
     * @param {any} obj the JSON object to reduce
     * @param {string[]} startsWiths the string(s) to check if the property starts with this key
     * @returns the JSON object containing only the key/values that match the startsWith string
     */
  }, {
    key: "reduceKeys",
    value: function reduceKeys(obj, startsWiths) {
      var result = {};
      if (!obj || !startsWiths || startsWiths.length === 0) {
        return result;
      }
      Object.keys(obj).filter(function(key) {
        return startsWiths.some(function(value) {
          return key.startsWith(value);
        });
      }).forEach(function(key) {
        result[key] = obj[key];
        delete obj[key];
      });
      return result;
    }
  }, {
    key: "reorderArray",
    value: function reorderArray(value, from2, to2) {
      if (value && from2 !== to2) {
        if (to2 >= value.length) {
          to2 %= value.length;
          from2 %= value.length;
        }
        value.splice(to2, 0, value.splice(from2, 1)[0]);
      }
    }
  }, {
    key: "findIndexInList",
    value: function findIndexInList(value, list2, dataKey) {
      var _this = this;
      if (list2) {
        return dataKey ? list2.findIndex(function(item2) {
          return _this.equals(item2, value, dataKey);
        }) : list2.findIndex(function(item2) {
          return item2 === value;
        });
      }
      return -1;
    }
  }, {
    key: "getJSXElement",
    value: function getJSXElement(obj) {
      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }
      return this.isFunction(obj) ? obj.apply(void 0, params) : obj;
    }
  }, {
    key: "getItemValue",
    value: function getItemValue(obj) {
      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        params[_key2 - 1] = arguments[_key2];
      }
      return this.isFunction(obj) ? obj.apply(void 0, params) : obj;
    }
  }, {
    key: "getProp",
    value: function getProp(props) {
      var prop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var defaultProps2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var value = props ? props[prop] : void 0;
      return value === void 0 ? defaultProps2[prop] : value;
    }
  }, {
    key: "getPropCaseInsensitive",
    value: function getPropCaseInsensitive(props, prop) {
      var defaultProps2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var fkey = this.toFlatCase(prop);
      for (var key in props) {
        if (props.hasOwnProperty(key) && this.toFlatCase(key) === fkey) {
          return props[key];
        }
      }
      for (var _key3 in defaultProps2) {
        if (defaultProps2.hasOwnProperty(_key3) && this.toFlatCase(_key3) === fkey) {
          return defaultProps2[_key3];
        }
      }
      return void 0;
    }
  }, {
    key: "getMergedProps",
    value: function getMergedProps(props, defaultProps2) {
      return Object.assign({}, defaultProps2, props);
    }
  }, {
    key: "getDiffProps",
    value: function getDiffProps(props, defaultProps2) {
      return this.findDiffKeys(props, defaultProps2);
    }
  }, {
    key: "getPropValue",
    value: function getPropValue(obj) {
      for (var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key4 = 1; _key4 < _len3; _key4++) {
        params[_key4 - 1] = arguments[_key4];
      }
      return this.isFunction(obj) ? obj.apply(void 0, params) : obj;
    }
  }, {
    key: "getComponentProp",
    value: function getComponentProp(component) {
      var prop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var defaultProps2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return this.isNotEmpty(component) ? this.getProp(component.props, prop, defaultProps2) : void 0;
    }
  }, {
    key: "getComponentProps",
    value: function getComponentProps(component, defaultProps2) {
      return this.isNotEmpty(component) ? this.getMergedProps(component.props, defaultProps2) : void 0;
    }
  }, {
    key: "getComponentDiffProps",
    value: function getComponentDiffProps(component, defaultProps2) {
      return this.isNotEmpty(component) ? this.getDiffProps(component.props, defaultProps2) : void 0;
    }
  }, {
    key: "isValidChild",
    value: function isValidChild(child, type, validTypes) {
      if (child) {
        var _child$type;
        var childType = this.getComponentProp(child, "__TYPE") || (child.type ? child.type.displayName : void 0);
        if (!childType && child !== null && child !== void 0 && (_child$type = child.type) !== null && _child$type !== void 0 && (_child$type = _child$type._payload) !== null && _child$type !== void 0 && _child$type.value) {
          childType = child.type._payload.value.find(function(v2) {
            return v2 === type;
          });
        }
        var isValid = childType === type;
        try {
          var messageTypes;
          if (false)
            ;
        } catch (error) {
        }
        return isValid;
      }
      return false;
    }
  }, {
    key: "getRefElement",
    value: function getRefElement(ref) {
      if (ref) {
        return _typeof$f(ref) === "object" && ref.hasOwnProperty("current") ? ref.current : ref;
      }
      return null;
    }
  }, {
    key: "combinedRefs",
    value: function combinedRefs(innerRef, forwardRef) {
      if (innerRef && forwardRef) {
        if (typeof forwardRef === "function") {
          forwardRef(innerRef.current);
        } else {
          forwardRef.current = innerRef.current;
        }
      }
    }
  }, {
    key: "removeAccents",
    value: function removeAccents(str) {
      if (str && str.search(/[\xC0-\xFF]/g) > -1) {
        str = str.replace(/[\xC0-\xC5]/g, "A").replace(/[\xC6]/g, "AE").replace(/[\xC7]/g, "C").replace(/[\xC8-\xCB]/g, "E").replace(/[\xCC-\xCF]/g, "I").replace(/[\xD0]/g, "D").replace(/[\xD1]/g, "N").replace(/[\xD2-\xD6\xD8]/g, "O").replace(/[\xD9-\xDC]/g, "U").replace(/[\xDD]/g, "Y").replace(/[\xDE]/g, "P").replace(/[\xE0-\xE5]/g, "a").replace(/[\xE6]/g, "ae").replace(/[\xE7]/g, "c").replace(/[\xE8-\xEB]/g, "e").replace(/[\xEC-\xEF]/g, "i").replace(/[\xF1]/g, "n").replace(/[\xF2-\xF6\xF8]/g, "o").replace(/[\xF9-\xFC]/g, "u").replace(/[\xFE]/g, "p").replace(/[\xFD\xFF]/g, "y");
      }
      return str;
    }
  }, {
    key: "toFlatCase",
    value: function toFlatCase(str) {
      return this.isNotEmpty(str) && this.isString(str) ? str.replace(/(-|_)/g, "").toLowerCase() : str;
    }
  }, {
    key: "toCapitalCase",
    value: function toCapitalCase(str) {
      return this.isNotEmpty(str) && this.isString(str) ? str[0].toUpperCase() + str.slice(1) : str;
    }
  }, {
    key: "trim",
    value: function trim2(value) {
      return this.isNotEmpty(value) && this.isString(value) ? value.trim() : value;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty(value) {
      return value === null || value === void 0 || value === "" || Array.isArray(value) && value.length === 0 || !(value instanceof Date) && _typeof$f(value) === "object" && Object.keys(value).length === 0;
    }
  }, {
    key: "isNotEmpty",
    value: function isNotEmpty(value) {
      return !this.isEmpty(value);
    }
  }, {
    key: "isFunction",
    value: function isFunction2(value) {
      return !!(value && value.constructor && value.call && value.apply);
    }
  }, {
    key: "isObject",
    value: function isObject2(value) {
      return value !== null && value instanceof Object && value.constructor === Object;
    }
  }, {
    key: "isDate",
    value: function isDate(value) {
      return value !== null && value instanceof Date && value.constructor === Date;
    }
  }, {
    key: "isArray",
    value: function isArray2(value) {
      return value !== null && Array.isArray(value);
    }
  }, {
    key: "isString",
    value: function isString(value) {
      return value !== null && typeof value === "string";
    }
  }, {
    key: "isPrintableCharacter",
    value: function isPrintableCharacter() {
      var _char = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      return this.isNotEmpty(_char) && _char.length === 1 && _char.match(/\S| /);
    }
  }, {
    key: "isLetter",
    value: function isLetter(_char2) {
      return /^[a-zA-Z\u00C0-\u017F]$/.test(_char2);
    }
    /**
     * Firefox-v103 does not currently support the "findLast" method. It is stated that this method will be supported with Firefox-v104.
     * https://caniuse.com/mdn-javascript_builtins_array_findlast
     */
  }, {
    key: "findLast",
    value: function findLast(arr, callback2) {
      var item2;
      if (this.isNotEmpty(arr)) {
        try {
          item2 = arr.findLast(callback2);
        } catch (_unused2) {
          item2 = _toConsumableArray$6(arr).reverse().find(callback2);
        }
      }
      return item2;
    }
    /**
     * Firefox-v103 does not currently support the "findLastIndex" method. It is stated that this method will be supported with Firefox-v104.
     * https://caniuse.com/mdn-javascript_builtins_array_findlastindex
     */
  }, {
    key: "findLastIndex",
    value: function findLastIndex(arr, callback2) {
      var index2 = -1;
      if (this.isNotEmpty(arr)) {
        try {
          index2 = arr.findLastIndex(callback2);
        } catch (_unused3) {
          index2 = arr.lastIndexOf(_toConsumableArray$6(arr).reverse().find(callback2));
        }
      }
      return index2;
    }
  }, {
    key: "sort",
    value: function sort(value1, value2) {
      var order = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var comparator = arguments.length > 3 ? arguments[3] : void 0;
      var nullSortOrder = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1;
      var result = this.compare(value1, value2, comparator, order);
      var finalSortOrder = order;
      if (this.isEmpty(value1) || this.isEmpty(value2)) {
        finalSortOrder = nullSortOrder === 1 ? order : nullSortOrder;
      }
      return finalSortOrder * result;
    }
  }, {
    key: "compare",
    value: function compare(value1, value2, comparator) {
      var order = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
      var result = -1;
      var emptyValue1 = this.isEmpty(value1);
      var emptyValue2 = this.isEmpty(value2);
      if (emptyValue1 && emptyValue2)
        result = 0;
      else if (emptyValue1)
        result = order;
      else if (emptyValue2)
        result = -order;
      else if (typeof value1 === "string" && typeof value2 === "string")
        result = comparator(value1, value2);
      else
        result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;
      return result;
    }
  }, {
    key: "localeComparator",
    value: function localeComparator(locale) {
      return new Intl.Collator(locale, {
        numeric: true
      }).compare;
    }
  }, {
    key: "findChildrenByKey",
    value: function findChildrenByKey(data, key) {
      var _iterator = _createForOfIteratorHelper$3(data), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var item2 = _step.value;
          if (item2.key === key) {
            return item2.children || [];
          } else if (item2.children) {
            var result = this.findChildrenByKey(item2.children, key);
            if (result.length > 0) {
              return result;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return [];
    }
    /**
     * This function takes mutates and object with a new value given
     * a specific field. This will handle deeply nested fields that
     * need to be modified or created.
     *
     * e.g:
     * data = {
     *  nested: {
     *      foo: "bar"
     *  }
     * }
     *
     * field = "nested.foo"
     * value = "baz"
     *
     * The function will mutate data to be
     * e.g:
     * data = {
     *  nested: {
     *      foo: "baz"
     *  }
     * }
     *
     * @param {object} data the object to be modified
     * @param {string} field the field in the object to replace
     * @param {any} value the value to have replaced in the field
     */
  }, {
    key: "mutateFieldData",
    value: function mutateFieldData(data, field, value) {
      if (_typeof$f(data) !== "object" || typeof field !== "string") {
        return;
      }
      var fields = field.split(".");
      var obj = data;
      for (var i = 0, len = fields.length; i < len; ++i) {
        if (i + 1 - len === 0) {
          obj[fields[i]] = value;
          break;
        }
        if (!obj[fields[i]]) {
          obj[fields[i]] = {};
        }
        obj = obj[fields[i]];
      }
    }
  }]);
  return ObjectUtils2;
}();
function ownKeys$2$3(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r22) {
      return Object.getOwnPropertyDescriptor(e2, r22).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$2$3(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$2$3(Object(t2), true).forEach(function(r22) {
      _defineProperty$f(e2, r22, t2[r22]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$2$3(Object(t2)).forEach(function(r22) {
      Object.defineProperty(e2, r22, Object.getOwnPropertyDescriptor(t2, r22));
    });
  }
  return e2;
}
var IconUtils = /* @__PURE__ */ function() {
  function IconUtils2() {
    _classCallCheck$4(this, IconUtils2);
  }
  _createClass$4(IconUtils2, null, [{
    key: "getJSXIcon",
    value: function getJSXIcon(icon2) {
      var iconProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var content = null;
      if (icon2 !== null) {
        var iconType = _typeof$f(icon2);
        var className = classNames$1(iconProps.className, iconType === "string" && icon2);
        content = /* @__PURE__ */ reactExports.createElement("span", _extends$w({}, iconProps, {
          className
        }));
        if (iconType !== "string") {
          var defaultContentOptions = _objectSpread$2$3({
            iconProps,
            element: content
          }, options2);
          return ObjectUtils.getJSXElement(icon2, defaultContentOptions);
        }
      }
      return content;
    }
  }]);
  return IconUtils2;
}();
function ownKeys$p(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r22) {
      return Object.getOwnPropertyDescriptor(e2, r22).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$o(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$p(Object(t2), true).forEach(function(r22) {
      _defineProperty$f(e2, r22, t2[r22]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$p(Object(t2)).forEach(function(r22) {
      Object.defineProperty(e2, r22, Object.getOwnPropertyDescriptor(t2, r22));
    });
  }
  return e2;
}
function _mergeProps(props) {
  var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (props) {
    var classNameMergeFunction = options2.classNameMergeFunction;
    var isFn = function isFn2(o) {
      return !!(o && o.constructor && o.call && o.apply);
    };
    return props.reduce(function(merged, ps) {
      var _loop = function _loop2() {
        var value = ps[key];
        if (key === "style") {
          merged["style"] = _objectSpread$o(_objectSpread$o({}, merged["style"]), ps["style"]);
        } else if (key === "className") {
          var newClassname = "";
          if (classNameMergeFunction && classNameMergeFunction instanceof Function) {
            newClassname = classNameMergeFunction(merged["className"], ps["className"]);
          } else {
            newClassname = [merged["className"], ps["className"]].join(" ").trim();
          }
          var isEmpty = newClassname === null || newClassname === void 0 || newClassname === "";
          merged["className"] = isEmpty ? void 0 : newClassname;
        } else if (isFn(value)) {
          var fn = merged[key];
          merged[key] = fn ? function() {
            fn.apply(void 0, arguments);
            value.apply(void 0, arguments);
          } : value;
        } else {
          merged[key] = value;
        }
      };
      for (var key in ps) {
        _loop();
      }
      return merged;
    }, {});
  }
  return void 0;
}
function mergeProps() {
  for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {
    props[_key] = arguments[_key];
  }
  if (props) {
    var isFn = function isFn2(o) {
      return !!(o && o.constructor && o.call && o.apply);
    };
    return props.reduce(function(merged, ps) {
      var _loop2 = function _loop22() {
        var value = ps[key];
        if (key === "style") {
          merged["style"] = _objectSpread$o(_objectSpread$o({}, merged["style"]), ps["style"]);
        } else if (key === "className") {
          merged["className"] = [merged["className"], ps["className"]].join(" ").trim();
        } else if (isFn(value)) {
          var fn = merged[key];
          merged[key] = fn ? function() {
            fn.apply(void 0, arguments);
            value.apply(void 0, arguments);
          } : value;
        } else {
          merged[key] = value;
        }
      };
      for (var key in ps) {
        _loop2();
      }
      return merged;
    }, {});
  }
  return void 0;
}
var lastId = 0;
function UniqueComponentId() {
  var prefix2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "pr_id_";
  lastId++;
  return "".concat(prefix2).concat(lastId);
}
function handler() {
  var zIndexes = [];
  var generateZIndex = function generateZIndex2(key, autoZIndex) {
    var baseZIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 999;
    var lastZIndex = getLastZIndex(key, autoZIndex, baseZIndex);
    var newZIndex = lastZIndex.value + (lastZIndex.key === key ? 0 : baseZIndex) + 1;
    zIndexes.push({
      key,
      value: newZIndex
    });
    return newZIndex;
  };
  var revertZIndex = function revertZIndex2(zIndex) {
    zIndexes = zIndexes.filter(function(obj) {
      return obj.value !== zIndex;
    });
  };
  var getCurrentZIndex = function getCurrentZIndex2(key, autoZIndex) {
    return getLastZIndex(key, autoZIndex).value;
  };
  var getLastZIndex = function getLastZIndex2(key, autoZIndex) {
    var baseZIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    return _toConsumableArray$6(zIndexes).reverse().find(function(obj) {
      return autoZIndex ? true : obj.key === key;
    }) || {
      key,
      value: baseZIndex
    };
  };
  var getZIndex = function getZIndex2(el2) {
    return el2 ? parseInt(el2.style.zIndex, 10) || 0 : 0;
  };
  return {
    get: getZIndex,
    set: function set2(key, el2, autoZIndex, baseZIndex) {
      if (el2) {
        el2.style.zIndex = String(generateZIndex(key, autoZIndex, baseZIndex));
      }
    },
    clear: function clear(el2) {
      if (el2) {
        revertZIndex(ZIndexUtils.get(el2));
        el2.style.zIndex = "";
      }
    },
    getCurrent: function getCurrent(key, autoZIndex) {
      return getCurrentZIndex(key, autoZIndex);
    }
  };
}
var ZIndexUtils = handler();
var FilterMatchMode$2 = Object.freeze({
  STARTS_WITH: "startsWith",
  CONTAINS: "contains",
  NOT_CONTAINS: "notContains",
  ENDS_WITH: "endsWith",
  EQUALS: "equals",
  NOT_EQUALS: "notEquals",
  IN: "in",
  LESS_THAN: "lt",
  LESS_THAN_OR_EQUAL_TO: "lte",
  GREATER_THAN: "gt",
  GREATER_THAN_OR_EQUAL_TO: "gte",
  BETWEEN: "between",
  DATE_IS: "dateIs",
  DATE_IS_NOT: "dateIsNot",
  DATE_BEFORE: "dateBefore",
  DATE_AFTER: "dateAfter",
  CUSTOM: "custom"
});
var FilterOperator = Object.freeze({
  AND: "and",
  OR: "or"
});
function _createForOfIteratorHelper$2(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1$2(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F2 = function F3() {
      };
      return { s: F2, n: function n2() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it = it.call(o);
  }, n: function n2() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it["return"] != null)
        it["return"]();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$1$2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1$2(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$1$2(o, minLen);
}
function _arrayLikeToArray$1$2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var FilterService = {
  filter: function filter(value, fields, filterValue, filterMatchMode, filterLocale) {
    var filteredItems = [];
    if (!value) {
      return filteredItems;
    }
    var _iterator = _createForOfIteratorHelper$2(value), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var item2 = _step.value;
        if (typeof item2 === "string") {
          if (this.filters[filterMatchMode](item2, filterValue, filterLocale)) {
            filteredItems.push(item2);
            continue;
          }
        } else {
          var _iterator2 = _createForOfIteratorHelper$2(fields), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var field = _step2.value;
              var fieldValue = ObjectUtils.resolveFieldData(item2, field);
              if (this.filters[filterMatchMode](fieldValue, filterValue, filterLocale)) {
                filteredItems.push(item2);
                break;
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return filteredItems;
  },
  filters: {
    startsWith: function startsWith(value, filter2, filterLocale) {
      if (filter2 === void 0 || filter2 === null || filter2.trim() === "") {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      var filterValue = ObjectUtils.removeAccents(filter2.toString()).toLocaleLowerCase(filterLocale);
      var stringValue = ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
      return stringValue.slice(0, filterValue.length) === filterValue;
    },
    contains: function contains(value, filter2, filterLocale) {
      if (filter2 === void 0 || filter2 === null || typeof filter2 === "string" && filter2.trim() === "") {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      var filterValue = ObjectUtils.removeAccents(filter2.toString()).toLocaleLowerCase(filterLocale);
      var stringValue = ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
      return stringValue.indexOf(filterValue) !== -1;
    },
    notContains: function notContains(value, filter2, filterLocale) {
      if (filter2 === void 0 || filter2 === null || typeof filter2 === "string" && filter2.trim() === "") {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      var filterValue = ObjectUtils.removeAccents(filter2.toString()).toLocaleLowerCase(filterLocale);
      var stringValue = ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
      return stringValue.indexOf(filterValue) === -1;
    },
    endsWith: function endsWith(value, filter2, filterLocale) {
      if (filter2 === void 0 || filter2 === null || filter2.trim() === "") {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      var filterValue = ObjectUtils.removeAccents(filter2.toString()).toLocaleLowerCase(filterLocale);
      var stringValue = ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
      return stringValue.indexOf(filterValue, stringValue.length - filterValue.length) !== -1;
    },
    equals: function equals(value, filter2, filterLocale) {
      if (filter2 === void 0 || filter2 === null || typeof filter2 === "string" && filter2.trim() === "") {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      if (value.getTime && filter2.getTime)
        return value.getTime() === filter2.getTime();
      else
        return ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale) === ObjectUtils.removeAccents(filter2.toString()).toLocaleLowerCase(filterLocale);
    },
    notEquals: function notEquals(value, filter2, filterLocale) {
      if (filter2 === void 0 || filter2 === null || typeof filter2 === "string" && filter2.trim() === "") {
        return true;
      }
      if (value === void 0 || value === null) {
        return true;
      }
      if (value.getTime && filter2.getTime)
        return value.getTime() !== filter2.getTime();
      else
        return ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale) !== ObjectUtils.removeAccents(filter2.toString()).toLocaleLowerCase(filterLocale);
    },
    "in": function _in(value, filter2) {
      if (filter2 === void 0 || filter2 === null || filter2.length === 0) {
        return true;
      }
      for (var i = 0; i < filter2.length; i++) {
        if (ObjectUtils.equals(value, filter2[i])) {
          return true;
        }
      }
      return false;
    },
    between: function between(value, filter2) {
      if (filter2 == null || filter2[0] == null || filter2[1] == null) {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      if (value.getTime)
        return filter2[0].getTime() <= value.getTime() && value.getTime() <= filter2[1].getTime();
      else
        return filter2[0] <= value && value <= filter2[1];
    },
    lt: function lt(value, filter2) {
      if (filter2 === void 0 || filter2 === null) {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      if (value.getTime && filter2.getTime)
        return value.getTime() < filter2.getTime();
      else
        return value < filter2;
    },
    lte: function lte(value, filter2) {
      if (filter2 === void 0 || filter2 === null) {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      if (value.getTime && filter2.getTime)
        return value.getTime() <= filter2.getTime();
      else
        return value <= filter2;
    },
    gt: function gt(value, filter2) {
      if (filter2 === void 0 || filter2 === null) {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      if (value.getTime && filter2.getTime)
        return value.getTime() > filter2.getTime();
      else
        return value > filter2;
    },
    gte: function gte(value, filter2) {
      if (filter2 === void 0 || filter2 === null) {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      if (value.getTime && filter2.getTime)
        return value.getTime() >= filter2.getTime();
      else
        return value >= filter2;
    },
    dateIs: function dateIs(value, filter2) {
      if (filter2 === void 0 || filter2 === null) {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      return value.toDateString() === filter2.toDateString();
    },
    dateIsNot: function dateIsNot(value, filter2) {
      if (filter2 === void 0 || filter2 === null) {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      return value.toDateString() !== filter2.toDateString();
    },
    dateBefore: function dateBefore(value, filter2) {
      if (filter2 === void 0 || filter2 === null) {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      return value.getTime() < filter2.getTime();
    },
    dateAfter: function dateAfter(value, filter2) {
      if (filter2 === void 0 || filter2 === null) {
        return true;
      }
      if (value === void 0 || value === null) {
        return false;
      }
      return value.getTime() > filter2.getTime();
    }
  },
  register: function register(rule, fn) {
    this.filters[rule] = fn;
  }
};
function _typeof$e(o) {
  "@babel/helpers - typeof";
  return _typeof$e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$e(o);
}
function _toPrimitive$d(input2, hint) {
  if (_typeof$e(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$e(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$d(arg) {
  var key = _toPrimitive$d(arg, "string");
  return _typeof$e(key) === "symbol" ? key : String(key);
}
function _defineProperty$e(obj, key, value) {
  key = _toPropertyKey$d(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _defineProperties$3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey$d(descriptor.key), descriptor);
  }
}
function _createClass$3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _classCallCheck$3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var PrimeReact$1$1 = /* @__PURE__ */ _createClass$3(function PrimeReact() {
  _classCallCheck$3(this, PrimeReact);
});
_defineProperty$e(PrimeReact$1$1, "ripple", false);
_defineProperty$e(PrimeReact$1$1, "inputStyle", "outlined");
_defineProperty$e(PrimeReact$1$1, "locale", "en");
_defineProperty$e(PrimeReact$1$1, "appendTo", null);
_defineProperty$e(PrimeReact$1$1, "cssTransition", true);
_defineProperty$e(PrimeReact$1$1, "autoZIndex", true);
_defineProperty$e(PrimeReact$1$1, "hideOverlaysOnDocumentScrolling", false);
_defineProperty$e(PrimeReact$1$1, "nonce", null);
_defineProperty$e(PrimeReact$1$1, "nullSortOrder", 1);
_defineProperty$e(PrimeReact$1$1, "zIndex", {
  modal: 1100,
  overlay: 1e3,
  menu: 1e3,
  tooltip: 1100,
  toast: 1200
});
_defineProperty$e(PrimeReact$1$1, "pt", void 0);
_defineProperty$e(PrimeReact$1$1, "filterMatchModeOptions", {
  text: [FilterMatchMode$2.STARTS_WITH, FilterMatchMode$2.CONTAINS, FilterMatchMode$2.NOT_CONTAINS, FilterMatchMode$2.ENDS_WITH, FilterMatchMode$2.EQUALS, FilterMatchMode$2.NOT_EQUALS],
  numeric: [FilterMatchMode$2.EQUALS, FilterMatchMode$2.NOT_EQUALS, FilterMatchMode$2.LESS_THAN, FilterMatchMode$2.LESS_THAN_OR_EQUAL_TO, FilterMatchMode$2.GREATER_THAN, FilterMatchMode$2.GREATER_THAN_OR_EQUAL_TO],
  date: [FilterMatchMode$2.DATE_IS, FilterMatchMode$2.DATE_IS_NOT, FilterMatchMode$2.DATE_BEFORE, FilterMatchMode$2.DATE_AFTER]
});
_defineProperty$e(PrimeReact$1$1, "changeTheme", function(currentTheme, newTheme, linkElementId, callback2) {
  var _linkElement$parentNo;
  var linkElement = document.getElementById(linkElementId);
  var cloneLinkElement = linkElement.cloneNode(true);
  var newThemeUrl = linkElement.getAttribute("href").replace(currentTheme, newTheme);
  cloneLinkElement.setAttribute("id", linkElementId + "-clone");
  cloneLinkElement.setAttribute("href", newThemeUrl);
  cloneLinkElement.addEventListener("load", function() {
    linkElement.remove();
    cloneLinkElement.setAttribute("id", linkElementId);
    if (callback2) {
      callback2();
    }
  });
  (_linkElement$parentNo = linkElement.parentNode) === null || _linkElement$parentNo === void 0 || _linkElement$parentNo.insertBefore(cloneLinkElement, linkElement.nextSibling);
});
var locales$2 = {
  en: {
    startsWith: "Starts with",
    contains: "Contains",
    notContains: "Not contains",
    endsWith: "Ends with",
    equals: "Equals",
    notEquals: "Not equals",
    noFilter: "No Filter",
    filter: "Filter",
    lt: "Less than",
    lte: "Less than or equal to",
    gt: "Greater than",
    gte: "Greater than or equal to",
    dateIs: "Date is",
    dateIsNot: "Date is not",
    dateBefore: "Date is before",
    dateAfter: "Date is after",
    custom: "Custom",
    clear: "Clear",
    close: "Close",
    apply: "Apply",
    matchAll: "Match All",
    matchAny: "Match Any",
    addRule: "Add Rule",
    removeRule: "Remove Rule",
    accept: "Yes",
    reject: "No",
    choose: "Choose",
    upload: "Upload",
    cancel: "Cancel",
    completed: "Completed",
    pending: "Pending",
    fileSizeTypes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
    dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    chooseYear: "Choose Year",
    chooseMonth: "Choose Month",
    chooseDate: "Choose Date",
    prevDecade: "Previous Decade",
    nextDecade: "Next Decade",
    prevYear: "Previous Year",
    nextYear: "Next Year",
    prevMonth: "Previous Month",
    nextMonth: "Next Month",
    prevHour: "Previous Hour",
    nextHour: "Next Hour",
    prevMinute: "Previous Minute",
    nextMinute: "Next Minute",
    prevSecond: "Previous Second",
    nextSecond: "Next Second",
    prevMilliSecond: "Previous Second",
    nextMilliSecond: "Next Second",
    am: "am",
    pm: "pm",
    today: "Today",
    now: "Now",
    weekHeader: "Wk",
    firstDayOfWeek: 0,
    showMonthAfterYear: false,
    dateFormat: "mm/dd/yy",
    weak: "Weak",
    medium: "Medium",
    strong: "Strong",
    passwordPrompt: "Enter a password",
    emptyFilterMessage: "No available options",
    emptyMessage: "No results found",
    aria: {
      trueLabel: "True",
      falseLabel: "False",
      nullLabel: "Not Selected",
      star: "1 star",
      stars: "{star} stars",
      selectAll: "All items selected",
      unselectAll: "All items unselected",
      close: "Close",
      previous: "Previous",
      next: "Next",
      navigation: "Navigation",
      scrollTop: "Scroll Top",
      moveTop: "Move Top",
      moveUp: "Move Up",
      moveDown: "Move Down",
      moveBottom: "Move Bottom",
      moveToTarget: "Move to Target",
      moveToSource: "Move to Source",
      moveAllToTarget: "Move All to Target",
      moveAllToSource: "Move All to Source",
      pageLabel: "Page {page}",
      firstPageLabel: "First Page",
      lastPageLabel: "Last Page",
      nextPageLabel: "Next Page",
      previousPageLabel: "Previous Page",
      rowsPerPageLabel: "Rows per page",
      jumpToPageDropdownLabel: "Jump to Page Dropdown",
      jumpToPageInputLabel: "Jump to Page Input",
      selectRow: "Row Selected",
      unselectRow: "Row Unselected",
      expandRow: "Row Expanded",
      collapseRow: "Row Collapsed",
      showFilterMenu: "Show Filter Menu",
      hideFilterMenu: "Hide Filter Menu",
      filterOperator: "Filter Operator",
      filterConstraint: "Filter Constraint",
      editRow: "Row Edit",
      saveEdit: "Save Edit",
      cancelEdit: "Cancel Edit",
      listView: "List View",
      gridView: "Grid View",
      slide: "Slide",
      slideNumber: "{slideNumber}",
      zoomImage: "Zoom Image",
      zoomIn: "Zoom In",
      zoomOut: "Zoom Out",
      rotateRight: "Rotate Right",
      rotateLeft: "Rotate Left",
      selectLabel: "Select",
      unselectLabel: "Unselect",
      expandLabel: "Expand",
      collapseLabel: "Collapse"
    }
  }
};
function localeOption(key, locale) {
  var _locale = locale || PrimeReact$1$1.locale;
  try {
    return localeOptions$2(_locale)[key];
  } catch (error) {
    throw new Error("The ".concat(key, " option is not found in the current locale('").concat(_locale, "')."));
  }
}
function ariaLabel$2(ariaKey, options2) {
  var _locale = PrimeReact$1$1.locale;
  try {
    var _ariaLabel = localeOptions$2(_locale)["aria"][ariaKey];
    if (_ariaLabel) {
      for (var key in options2) {
        if (options2.hasOwnProperty(key)) {
          _ariaLabel = _ariaLabel.replace("{".concat(key, "}"), options2[key]);
        }
      }
    }
    return _ariaLabel;
  } catch (error) {
    throw new Error("The ".concat(ariaKey, " option is not found in the current locale('").concat(_locale, "')."));
  }
}
function localeOptions$2(locale) {
  var _locale = locale || PrimeReact$1$1.locale;
  return locales$2[_locale];
}
var PrimeReactContext = /* @__PURE__ */ React.createContext();
var PrimeReact$2 = PrimeReact$1$1;
function _arrayWithHoles$a(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$a(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _arrayLikeToArray$d(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray$d(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$d(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$d(o, minLen);
}
function _nonIterableRest$a() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$a(arr, i) {
  return _arrayWithHoles$a(arr) || _iterableToArrayLimit$a(arr, i) || _unsupportedIterableToArray$d(arr, i) || _nonIterableRest$a();
}
var usePrevious = function usePrevious2(newValue) {
  var ref = reactExports.useRef(void 0);
  reactExports.useEffect(function() {
    ref.current = newValue;
  });
  return ref.current;
};
var useUnmountEffect = function useUnmountEffect2(fn) {
  return reactExports.useEffect(function() {
    return fn;
  }, []);
};
var useEventListener = function useEventListener2(_ref3) {
  var _ref$target = _ref3.target, target = _ref$target === void 0 ? "document" : _ref$target, type = _ref3.type, listener = _ref3.listener, options2 = _ref3.options, _ref$when = _ref3.when, when = _ref$when === void 0 ? true : _ref$when;
  var targetRef = reactExports.useRef(null);
  var listenerRef = reactExports.useRef(null);
  var prevListener = usePrevious(listener);
  var prevOptions = usePrevious(options2);
  var bind = function bind2() {
    var bindOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (ObjectUtils.isNotEmpty(bindOptions.target)) {
      unbind();
      (bindOptions.when || when) && (targetRef.current = DomHandler.getTargetElement(bindOptions.target));
    }
    if (!listenerRef.current && targetRef.current) {
      listenerRef.current = function(event) {
        return listener && listener(event);
      };
      targetRef.current.addEventListener(type, listenerRef.current, options2);
    }
  };
  var unbind = function unbind2() {
    if (listenerRef.current) {
      targetRef.current.removeEventListener(type, listenerRef.current, options2);
      listenerRef.current = null;
    }
  };
  reactExports.useEffect(function() {
    if (when) {
      targetRef.current = DomHandler.getTargetElement(target);
    } else {
      unbind();
      targetRef.current = null;
    }
  }, [target, when]);
  reactExports.useEffect(function() {
    if (listenerRef.current && ("" + prevListener !== "" + listener || prevOptions !== options2)) {
      unbind();
      when && bind();
    }
  }, [listener, options2, when]);
  useUnmountEffect(function() {
    unbind();
  });
  return [bind, unbind];
};
function _typeof$d(o) {
  "@babel/helpers - typeof";
  return _typeof$d = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$d(o);
}
function _toPrimitive$c(input2, hint) {
  if (_typeof$d(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$d(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$c(arg) {
  var key = _toPrimitive$c(arg, "string");
  return _typeof$d(key) === "symbol" ? key : String(key);
}
function _defineProperty$d(obj, key, value) {
  key = _toPropertyKey$c(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys$2$2(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$2$2(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$2$2(Object(t2), true).forEach(function(r3) {
      _defineProperty$d(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$2$2(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var useMergeProps = function useMergeProps2() {
  var context = reactExports.useContext(PrimeReactContext);
  return function() {
    var _context$ptOptions;
    var options2 = _objectSpread$2$2({}, (context === null || context === void 0 || (_context$ptOptions = context.ptOptions) === null || _context$ptOptions === void 0 ? void 0 : _context$ptOptions.classNameMergeFunction) && {
      classNameMergeFunction: context.classNameMergeFunction
    });
    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {
      props[_key] = arguments[_key];
    }
    return _mergeProps(props, options2);
  };
};
var useMountEffect = function useMountEffect2(fn) {
  var mounted = reactExports.useRef(false);
  return reactExports.useEffect(function() {
    if (!mounted.current) {
      mounted.current = true;
      return fn && fn();
    }
  }, []);
};
var useOverlayScrollListener = function useOverlayScrollListener2(_ref3) {
  var target = _ref3.target, listener = _ref3.listener, options2 = _ref3.options, _ref$when = _ref3.when, when = _ref$when === void 0 ? true : _ref$when;
  var targetRef = reactExports.useRef(null);
  var listenerRef = reactExports.useRef(null);
  var scrollableParents = reactExports.useRef([]);
  var prevOptions = usePrevious(options2);
  var context = reactExports.useContext(PrimeReactContext);
  var bind = function bind2() {
    var bindOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (ObjectUtils.isNotEmpty(bindOptions.target)) {
      unbind();
      (bindOptions.when || when) && (targetRef.current = DomHandler.getTargetElement(bindOptions.target));
    }
    if (!listenerRef.current && targetRef.current) {
      var hideOnScroll = context ? context.hideOverlaysOnDocumentScrolling : PrimeReact$2.hideOverlaysOnDocumentScrolling;
      var nodes = scrollableParents.current = DomHandler.getScrollableParents(targetRef.current, hideOnScroll);
      listenerRef.current = function(event) {
        return listener && listener(event);
      };
      nodes.forEach(function(node2) {
        return node2.addEventListener("scroll", listenerRef.current, options2);
      });
    }
  };
  var unbind = function unbind2() {
    if (listenerRef.current) {
      var nodes = scrollableParents.current;
      nodes.forEach(function(node2) {
        return node2.removeEventListener("scroll", listenerRef.current, options2);
      });
      listenerRef.current = null;
    }
  };
  reactExports.useEffect(function() {
    if (when) {
      targetRef.current = DomHandler.getTargetElement(target);
    } else {
      unbind();
      targetRef.current = null;
    }
  }, [target, when]);
  reactExports.useEffect(function() {
    if (listenerRef.current && (listenerRef.current !== listener || prevOptions !== options2)) {
      unbind();
      when && bind();
    }
  }, [listener, options2]);
  useUnmountEffect(function() {
    unbind();
  });
  return [bind, unbind];
};
var useResizeListener = function useResizeListener2(_ref3) {
  var listener = _ref3.listener, _ref$when = _ref3.when, when = _ref$when === void 0 ? true : _ref$when;
  return useEventListener({
    target: "window",
    type: "resize",
    listener,
    when
  });
};
var useOverlayListener = function useOverlayListener2(_ref3) {
  var target = _ref3.target, overlay = _ref3.overlay, _listener = _ref3.listener, _ref$when = _ref3.when, when = _ref$when === void 0 ? true : _ref$when;
  var targetRef = reactExports.useRef(null);
  var overlayRef = reactExports.useRef(null);
  var _useEventListener = useEventListener({
    target: "window",
    type: "click",
    listener: function listener(event) {
      _listener && _listener(event, {
        type: "outside",
        valid: event.which !== 3 && isOutsideClicked(event)
      });
    }
  }), _useEventListener2 = _slicedToArray$a(_useEventListener, 2), bindDocumentClickListener = _useEventListener2[0], unbindDocumentClickListener = _useEventListener2[1];
  var _useResizeListener = useResizeListener({
    target: "window",
    listener: function listener(event) {
      _listener && _listener(event, {
        type: "resize",
        valid: !DomHandler.isTouchDevice()
      });
    }
  }), _useResizeListener2 = _slicedToArray$a(_useResizeListener, 2), bindWindowResizeListener = _useResizeListener2[0], unbindWindowResizeListener = _useResizeListener2[1];
  var _useEventListener3 = useEventListener({
    target: "window",
    type: "orientationchange",
    listener: function listener(event) {
      _listener && _listener(event, {
        type: "orientationchange",
        valid: true
      });
    }
  }), _useEventListener4 = _slicedToArray$a(_useEventListener3, 2), bindWindowOrientationChangeListener = _useEventListener4[0], unbindWindowOrientationChangeListener = _useEventListener4[1];
  var _useOverlayScrollList = useOverlayScrollListener({
    target,
    listener: function listener(event) {
      _listener && _listener(event, {
        type: "scroll",
        valid: true
      });
    }
  }), _useOverlayScrollList2 = _slicedToArray$a(_useOverlayScrollList, 2), bindOverlayScrollListener = _useOverlayScrollList2[0], unbindOverlayScrollListener = _useOverlayScrollList2[1];
  var isOutsideClicked = function isOutsideClicked2(event) {
    return targetRef.current && !(targetRef.current.isSameNode(event.target) || targetRef.current.contains(event.target) || overlayRef.current && overlayRef.current.contains(event.target));
  };
  var bind = function bind2() {
    bindDocumentClickListener();
    bindWindowResizeListener();
    bindWindowOrientationChangeListener();
    bindOverlayScrollListener();
  };
  var unbind = function unbind2() {
    unbindDocumentClickListener();
    unbindWindowResizeListener();
    unbindWindowOrientationChangeListener();
    unbindOverlayScrollListener();
  };
  reactExports.useEffect(function() {
    if (when) {
      targetRef.current = DomHandler.getTargetElement(target);
      overlayRef.current = DomHandler.getTargetElement(overlay);
    } else {
      unbind();
      targetRef.current = overlayRef.current = null;
    }
  }, [target, overlay, when]);
  reactExports.useEffect(function() {
    unbind();
  }, [when]);
  useUnmountEffect(function() {
    unbind();
  });
  return [bind, unbind];
};
var _id = 0;
var useStyle = function useStyle2(css4) {
  var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var _useState = reactExports.useState(false), _useState2 = _slicedToArray$a(_useState, 2), isLoaded = _useState2[0], setIsLoaded = _useState2[1];
  var styleRef = reactExports.useRef(null);
  var context = reactExports.useContext(PrimeReactContext);
  var defaultDocument = DomHandler.isClient() ? window.document : void 0;
  var _options$document = options2.document, document2 = _options$document === void 0 ? defaultDocument : _options$document, _options$manual = options2.manual, manual = _options$manual === void 0 ? false : _options$manual, _options$name = options2.name, name = _options$name === void 0 ? "style_".concat(++_id) : _options$name, _options$id = options2.id, id2 = _options$id === void 0 ? void 0 : _options$id, _options$media = options2.media, media = _options$media === void 0 ? void 0 : _options$media;
  var update = function update2(newCSS) {
    isLoaded && css4 !== newCSS && (styleRef.current.textContent = newCSS);
  };
  var load = function load2() {
    if (!document2 || isLoaded)
      return;
    var styleContainer = (context === null || context === void 0 ? void 0 : context.styleContainer) || document2.head;
    styleRef.current = styleContainer.querySelector('style[data-primereact-style-id="'.concat(name, '"]')) || document2.getElementById(id2) || document2.createElement("style");
    if (!styleRef.current.isConnected) {
      styleRef.current.type = "text/css";
      id2 && (styleRef.current.id = id2);
      media && (styleRef.current.media = media);
      DomHandler.addNonce(styleRef.current, context && context.nonce || PrimeReact$2.nonce);
      styleContainer.appendChild(styleRef.current);
      name && styleRef.current.setAttribute("data-primereact-style-id", name);
    }
    styleRef.current.textContent = css4;
    setIsLoaded(true);
  };
  var unload = function unload2() {
    if (!document2 || !styleRef.current)
      return;
    DomHandler.removeInlineStyle(styleRef.current);
    setIsLoaded(false);
  };
  reactExports.useEffect(function() {
    if (!manual)
      load();
  }, [manual]);
  return {
    id: id2,
    name,
    update,
    unload,
    load,
    isLoaded
  };
};
var useUpdateEffect = function useUpdateEffect2(fn, deps) {
  var mounted = reactExports.useRef(false);
  return reactExports.useEffect(function() {
    if (!mounted.current) {
      mounted.current = true;
      return;
    }
    return fn && fn();
  }, deps);
};
function _arrayLikeToArray$c(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles$5(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$c(arr);
}
function _iterableToArray$5(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray$c(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$c(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$c(o, minLen);
}
function _nonIterableSpread$5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray$5(arr) {
  return _arrayWithoutHoles$5(arr) || _iterableToArray$5(arr) || _unsupportedIterableToArray$c(arr) || _nonIterableSpread$5();
}
function _typeof$c(o) {
  "@babel/helpers - typeof";
  return _typeof$c = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$c(o);
}
function _toPrimitive$b(input2, hint) {
  if (_typeof$c(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$c(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$b(arg) {
  var key = _toPrimitive$b(arg, "string");
  return _typeof$c(key) === "symbol" ? key : String(key);
}
function _defineProperty$c(obj, key, value) {
  key = _toPropertyKey$b(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys$o(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$n(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$o(Object(t2), true).forEach(function(r3) {
      _defineProperty$c(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$o(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var baseStyle = "\n.p-hidden-accessible {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n}\n\n.p-hidden-accessible input,\n.p-hidden-accessible select {\n    transform: scale(0);\n}\n\n.p-overflow-hidden {\n    overflow: hidden;\n    padding-right: var(--scrollbar-width);\n}\n";
var buttonStyles = "\n.p-button {\n    margin: 0;\n    display: inline-flex;\n    cursor: pointer;\n    user-select: none;\n    align-items: center;\n    vertical-align: bottom;\n    text-align: center;\n    overflow: hidden;\n    position: relative;\n}\n\n.p-button-label {\n    flex: 1 1 auto;\n}\n\n.p-button-icon-right {\n    order: 1;\n}\n\n.p-button:disabled {\n    cursor: default;\n}\n\n.p-button-icon-only {\n    justify-content: center;\n}\n\n.p-button-icon-only .p-button-label {\n    visibility: hidden;\n    width: 0;\n    flex: 0 0 auto;\n}\n\n.p-button-vertical {\n    flex-direction: column;\n}\n\n.p-button-icon-bottom {\n    order: 2;\n}\n\n.p-buttonset .p-button {\n    margin: 0;\n}\n\n.p-buttonset .p-button:not(:last-child) {\n    border-right: 0 none;\n}\n\n.p-buttonset .p-button:not(:first-of-type):not(:last-of-type) {\n    border-radius: 0;\n}\n\n.p-buttonset .p-button:first-of-type {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n.p-buttonset .p-button:last-of-type {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n}\n\n.p-buttonset .p-button:focus {\n    position: relative;\n    z-index: 1;\n}\n";
var checkboxStyles = "\n.p-checkbox {\n    display: inline-flex;\n    cursor: pointer;\n    user-select: none;\n    vertical-align: bottom;\n    position: relative;\n}\n\n.p-checkbox.p-checkbox-disabled {\n    cursor: auto;\n}\n\n.p-checkbox-box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n";
var inputTextStyles = "\n.p-inputtext {\n    margin: 0;\n}\n\n.p-fluid .p-inputtext {\n    width: 100%;\n}\n\n/* InputGroup */\n.p-inputgroup {\n    display: flex;\n    align-items: stretch;\n    width: 100%;\n}\n\n.p-inputgroup-addon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.p-inputgroup .p-float-label {\n    display: flex;\n    align-items: stretch;\n    width: 100%;\n}\n\n.p-inputgroup .p-inputtext,\n.p-fluid .p-inputgroup .p-inputtext,\n.p-inputgroup .p-inputwrapper,\n.p-fluid .p-inputgroup .p-input {\n    flex: 1 1 auto;\n    width: 1%;\n}\n\n/* Floating Label */\n.p-float-label {\n    display: block;\n    position: relative;\n}\n\n.p-float-label label {\n    position: absolute;\n    pointer-events: none;\n    top: 50%;\n    margin-top: -0.5rem;\n    transition-property: all;\n    transition-timing-function: ease;\n    line-height: 1;\n}\n\n.p-float-label textarea ~ label,\n.p-float-label .p-mention ~ label {\n    top: 1rem;\n}\n\n.p-float-label input:focus ~ label,\n.p-float-label input:-webkit-autofill ~ label,\n.p-float-label input.p-filled ~ label,\n.p-float-label textarea:focus ~ label,\n.p-float-label textarea.p-filled ~ label,\n.p-float-label .p-inputwrapper-focus ~ label,\n.p-float-label .p-inputwrapper-filled ~ label,\n.p-float-label .p-tooltip-target-wrapper ~ label {\n    top: -0.75rem;\n    font-size: 12px;\n}\n\n.p-float-label .p-placeholder,\n.p-float-label input::placeholder,\n.p-float-label .p-inputtext::placeholder {\n    opacity: 0;\n    transition-property: all;\n    transition-timing-function: ease;\n}\n\n.p-float-label .p-focus .p-placeholder,\n.p-float-label input:focus::placeholder,\n.p-float-label .p-inputtext:focus::placeholder {\n    opacity: 1;\n    transition-property: all;\n    transition-timing-function: ease;\n}\n\n.p-input-icon-left,\n.p-input-icon-right {\n    position: relative;\n    display: inline-block;\n}\n\n.p-input-icon-left > i,\n.p-input-icon-right > i,\n.p-input-icon-left > svg,\n.p-input-icon-right > svg,\n.p-input-icon-left > .p-input-prefix,\n.p-input-icon-right > .p-input-suffix {\n    position: absolute;\n    top: 50%;\n    margin-top: -0.5rem;\n}\n\n.p-fluid .p-input-icon-left,\n.p-fluid .p-input-icon-right {\n    display: block;\n    width: 100%;\n}\n";
var radioButtonStyles = "\n.p-radiobutton {\n    display: inline-flex;\n    cursor: pointer;\n    user-select: none;\n    vertical-align: bottom;\n}\n\n.p-radiobutton-box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.p-radiobutton-icon {\n    -webkit-backface-visibility: hidden;\n    backface-visibility: hidden;\n    transform: translateZ(0) scale(.1);\n    border-radius: 50%;\n    visibility: hidden;\n}\n\n.p-radiobutton-box.p-highlight .p-radiobutton-icon {\n    transform: translateZ(0) scale(1.0, 1.0);\n    visibility: visible;\n}\n\n";
var iconStyles = "\n.p-icon {\n    display: inline-block;\n}\n\n.p-icon-spin {\n    -webkit-animation: p-icon-spin 2s infinite linear;\n    animation: p-icon-spin 2s infinite linear;\n}\n\nsvg.p-icon {\n    pointer-events: auto;\n}\n\nsvg.p-icon g,\n.p-disabled svg.p-icon {\n    pointer-events: none;\n}\n\n@-webkit-keyframes p-icon-spin {\n    0% {\n        -webkit-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(359deg);\n        transform: rotate(359deg);\n    }\n}\n\n@keyframes p-icon-spin {\n    0% {\n        -webkit-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(359deg);\n        transform: rotate(359deg);\n    }\n}\n";
var commonStyle = "\n@layer primereact {\n    .p-component, .p-component * {\n        box-sizing: border-box;\n    }\n\n    .p-hidden {\n        display: none;\n    }\n\n    .p-hidden-space {\n        visibility: hidden;\n    }\n\n    .p-reset {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        outline: 0;\n        text-decoration: none;\n        font-size: 100%;\n        list-style: none;\n    }\n\n    .p-disabled, .p-disabled * {\n        cursor: default;\n        pointer-events: none;\n        user-select: none;\n    }\n\n    .p-component-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n\n    .p-unselectable-text {\n        user-select: none;\n    }\n\n    .p-scrollbar-measure {\n        width: 100px;\n        height: 100px;\n        overflow: scroll;\n        position: absolute;\n        top: -9999px;\n    }\n\n    @-webkit-keyframes p-fadein {\n      0%   { opacity: 0; }\n      100% { opacity: 1; }\n    }\n    @keyframes p-fadein {\n      0%   { opacity: 0; }\n      100% { opacity: 1; }\n    }\n\n    .p-link {\n        text-align: left;\n        background-color: transparent;\n        margin: 0;\n        padding: 0;\n        border: none;\n        cursor: pointer;\n        user-select: none;\n    }\n\n    .p-link:disabled {\n        cursor: default;\n    }\n\n    /* Non react overlay animations */\n    .p-connected-overlay {\n        opacity: 0;\n        transform: scaleY(0.8);\n        transition: transform .12s cubic-bezier(0, 0, 0.2, 1), opacity .12s cubic-bezier(0, 0, 0.2, 1);\n    }\n\n    .p-connected-overlay-visible {\n        opacity: 1;\n        transform: scaleY(1);\n    }\n\n    .p-connected-overlay-hidden {\n        opacity: 0;\n        transform: scaleY(1);\n        transition: opacity .1s linear;\n    }\n\n    /* React based overlay animations */\n    .p-connected-overlay-enter {\n        opacity: 0;\n        transform: scaleY(0.8);\n    }\n\n    .p-connected-overlay-enter-active {\n        opacity: 1;\n        transform: scaleY(1);\n        transition: transform .12s cubic-bezier(0, 0, 0.2, 1), opacity .12s cubic-bezier(0, 0, 0.2, 1);\n    }\n\n    .p-connected-overlay-enter-done {\n        transform: none;\n    }\n\n    .p-connected-overlay-exit {\n        opacity: 1;\n    }\n\n    .p-connected-overlay-exit-active {\n        opacity: 0;\n        transition: opacity .1s linear;\n    }\n\n    /* Toggleable Content */\n    .p-toggleable-content-enter {\n        max-height: 0;\n    }\n\n    .p-toggleable-content-enter-active {\n        overflow: hidden;\n        max-height: 1000px;\n        transition: max-height 1s ease-in-out;\n    }\n\n    .p-toggleable-content-enter-done {\n        transform: none;\n    }\n\n    .p-toggleable-content-exit {\n        max-height: 1000px;\n    }\n\n    .p-toggleable-content-exit-active {\n        overflow: hidden;\n        max-height: 0;\n        transition: max-height 0.45s cubic-bezier(0, 1, 0, 1);\n    }\n\n    .p-sr-only {\n        border: 0;\n        clip: rect(1px, 1px, 1px, 1px);\n        clip-path: inset(50%);\n        height: 1px;\n        margin: -1px;\n        overflow: hidden;\n        padding: 0;\n        position: absolute;\n        width: 1px;\n        word-wrap: normal;\n    }\n\n    /* @todo Refactor */\n    .p-menu .p-menuitem-link {\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        text-decoration: none;\n        overflow: hidden;\n        position: relative;\n    }\n\n    ".concat(buttonStyles, "\n    ").concat(checkboxStyles, "\n    ").concat(inputTextStyles, "\n    ").concat(radioButtonStyles, "\n    ").concat(iconStyles, "\n}\n");
var ComponentBase = {
  cProps: void 0,
  cParams: void 0,
  cName: void 0,
  defaultProps: {
    pt: void 0,
    ptOptions: void 0,
    unstyled: false
  },
  context: {},
  globalCSS: void 0,
  classes: {},
  styles: "",
  extend: function extend() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var css4 = props.css;
    var defaultProps2 = _objectSpread$n(_objectSpread$n({}, props.defaultProps), ComponentBase.defaultProps);
    var inlineStyles2 = {};
    var getProps6 = function getProps7(props2) {
      var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      ComponentBase.context = context;
      ComponentBase.cProps = props2;
      return ObjectUtils.getMergedProps(props2, defaultProps2);
    };
    var getOtherProps6 = function getOtherProps7(props2) {
      return ObjectUtils.getDiffProps(props2, defaultProps2);
    };
    var getPTValue = function getPTValue2() {
      var _ComponentBase$contex;
      var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var key = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var searchInDefaultPT = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      if (obj.hasOwnProperty("pt") && obj.pt !== void 0) {
        obj = obj.pt;
      }
      var originalkey = key;
      var isNestedParam = /./g.test(originalkey) && !!params[originalkey.split(".")[0]];
      var fkey = isNestedParam ? ObjectUtils.toFlatCase(originalkey.split(".")[1]) : ObjectUtils.toFlatCase(originalkey);
      var hostName = params.hostName && ObjectUtils.toFlatCase(params.hostName);
      var componentName = hostName || params.props && params.props.__TYPE && ObjectUtils.toFlatCase(params.props.__TYPE) || "";
      var isTransition = fkey === "transition";
      var datasetPrefix = "data-pc-";
      var getHostInstance = function getHostInstance2(params2) {
        return params2 !== null && params2 !== void 0 && params2.props ? params2.hostName ? params2.props.__TYPE === params2.hostName ? params2.props : getHostInstance2(params2.parent) : params2.parent : void 0;
      };
      var getPropValue = function getPropValue2(name) {
        var _params$props, _getHostInstance;
        return ((_params$props = params.props) === null || _params$props === void 0 ? void 0 : _params$props[name]) || ((_getHostInstance = getHostInstance(params)) === null || _getHostInstance === void 0 ? void 0 : _getHostInstance[name]);
      };
      ComponentBase.cParams = params;
      ComponentBase.cName = componentName;
      var _ref3 = getPropValue("ptOptions") || ComponentBase.context.ptOptions || {}, _ref$mergeSections = _ref3.mergeSections, mergeSections = _ref$mergeSections === void 0 ? true : _ref$mergeSections, _ref$mergeProps = _ref3.mergeProps, useMergeProps3 = _ref$mergeProps === void 0 ? false : _ref$mergeProps;
      var getPTClassValue = function getPTClassValue2() {
        var value = getOptionValue.apply(void 0, arguments);
        if (Array.isArray(value))
          return {
            className: classNames$1.apply(void 0, _toConsumableArray$5(value))
          };
        if (ObjectUtils.isString(value))
          return {
            className: value
          };
        if (value !== null && value !== void 0 && value.hasOwnProperty("className") && Array.isArray(value.className)) {
          return {
            className: classNames$1.apply(void 0, _toConsumableArray$5(value.className))
          };
        }
        return value;
      };
      var globalPT = searchInDefaultPT ? isNestedParam ? _useGlobalPT(getPTClassValue, originalkey, params) : _useDefaultPT(getPTClassValue, originalkey, params) : void 0;
      var self = isNestedParam ? void 0 : _usePT(_getPT(obj, componentName), getPTClassValue, originalkey, params);
      var datasetProps = !isTransition && _objectSpread$n(_objectSpread$n({}, fkey === "root" && _defineProperty$c({}, "".concat(datasetPrefix, "name"), params.props && params.props.__parentMetadata ? ObjectUtils.toFlatCase(params.props.__TYPE) : componentName)), {}, _defineProperty$c({}, "".concat(datasetPrefix, "section"), fkey));
      return mergeSections || !mergeSections && self ? useMergeProps3 ? _mergeProps([globalPT, self, Object.keys(datasetProps).length ? datasetProps : {}], {
        classNameMergeFunction: (_ComponentBase$contex = ComponentBase.context.ptOptions) === null || _ComponentBase$contex === void 0 ? void 0 : _ComponentBase$contex.classNameMergeFunction
      }) : _objectSpread$n(_objectSpread$n(_objectSpread$n({}, globalPT), self), Object.keys(datasetProps).length ? datasetProps : {}) : _objectSpread$n(_objectSpread$n({}, self), Object.keys(datasetProps).length ? datasetProps : {});
    };
    var setMetaData = function setMetaData2() {
      var metadata = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var props2 = metadata.props, state2 = metadata.state;
      var ptm = function ptm2() {
        var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
        var params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return getPTValue((props2 || {}).pt, key, _objectSpread$n(_objectSpread$n({}, metadata), params));
      };
      var ptmo = function ptmo2() {
        var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var key = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return getPTValue(obj, key, params, false);
      };
      var isUnstyled = function isUnstyled2() {
        return ComponentBase.context.unstyled || PrimeReact$2.unstyled || props2.unstyled;
      };
      var cx = function cx2() {
        var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
        var params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return !isUnstyled() ? getOptionValue(css4 && css4.classes, key, _objectSpread$n({
          props: props2,
          state: state2
        }, params)) : void 0;
      };
      var sx = function sx2() {
        var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
        var params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var when = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
        if (when) {
          var _ComponentBase$contex2;
          var self = getOptionValue(css4 && css4.inlineStyles, key, _objectSpread$n({
            props: props2,
            state: state2
          }, params));
          var base = getOptionValue(inlineStyles2, key, _objectSpread$n({
            props: props2,
            state: state2
          }, params));
          return _mergeProps([base, self], {
            classNameMergeFunction: (_ComponentBase$contex2 = ComponentBase.context.ptOptions) === null || _ComponentBase$contex2 === void 0 ? void 0 : _ComponentBase$contex2.classNameMergeFunction
          });
        }
        return void 0;
      };
      return {
        ptm,
        ptmo,
        sx,
        cx,
        isUnstyled
      };
    };
    return _objectSpread$n(_objectSpread$n({
      getProps: getProps6,
      getOtherProps: getOtherProps6,
      setMetaData
    }, props), {}, {
      defaultProps: defaultProps2
    });
  }
};
var getOptionValue = function getOptionValue2(obj) {
  var key = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var fKeys = String(ObjectUtils.toFlatCase(key)).split(".");
  var fKey = fKeys.shift();
  var matchedPTOption = ObjectUtils.isNotEmpty(obj) ? Object.keys(obj).find(function(k2) {
    return ObjectUtils.toFlatCase(k2) === fKey;
  }) : "";
  return fKey ? ObjectUtils.isObject(obj) ? getOptionValue2(ObjectUtils.getItemValue(obj[matchedPTOption], params), fKeys.join("."), params) : void 0 : ObjectUtils.getItemValue(obj, params);
};
var _getPT = function _getPT2(pt) {
  var key = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var callback2 = arguments.length > 2 ? arguments[2] : void 0;
  var _usept = pt === null || pt === void 0 ? void 0 : pt["_usept"];
  var getValue = function getValue2(value) {
    var _ref3;
    var checkSameKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var _value = callback2 ? callback2(value) : value;
    var _key = ObjectUtils.toFlatCase(key);
    return (_ref3 = checkSameKey ? _key !== ComponentBase.cName ? _value === null || _value === void 0 ? void 0 : _value[_key] : void 0 : _value === null || _value === void 0 ? void 0 : _value[_key]) !== null && _ref3 !== void 0 ? _ref3 : _value;
  };
  return ObjectUtils.isNotEmpty(_usept) ? {
    _usept,
    originalValue: getValue(pt.originalValue),
    value: getValue(pt.value)
  } : getValue(pt, true);
};
var _usePT = function _usePT2(pt, callback2, key, params) {
  var fn = function fn2(value2) {
    return callback2(value2, key, params);
  };
  if (pt !== null && pt !== void 0 && pt.hasOwnProperty("_usept")) {
    var _ref4 = pt["_usept"] || ComponentBase.context.ptOptions || {}, _ref4$mergeSections = _ref4.mergeSections, mergeSections = _ref4$mergeSections === void 0 ? true : _ref4$mergeSections, _ref4$mergeProps = _ref4.mergeProps, useMergeProps3 = _ref4$mergeProps === void 0 ? false : _ref4$mergeProps, classNameMergeFunction = _ref4.classNameMergeFunction;
    var originalValue = fn(pt.originalValue);
    var value = fn(pt.value);
    if (originalValue === void 0 && value === void 0)
      return void 0;
    else if (ObjectUtils.isString(value))
      return value;
    else if (ObjectUtils.isString(originalValue))
      return originalValue;
    return mergeSections || !mergeSections && value ? useMergeProps3 ? _mergeProps([originalValue, value], {
      classNameMergeFunction
    }) : _objectSpread$n(_objectSpread$n({}, originalValue), value) : value;
  }
  return fn(pt);
};
var getGlobalPT = function getGlobalPT2() {
  return _getPT(ComponentBase.context.pt || PrimeReact$2.pt, void 0, function(value) {
    return ObjectUtils.getItemValue(value, ComponentBase.cParams);
  });
};
var getDefaultPT = function getDefaultPT2() {
  return _getPT(ComponentBase.context.pt || PrimeReact$2.pt, void 0, function(value) {
    return getOptionValue(value, ComponentBase.cName, ComponentBase.cParams) || ObjectUtils.getItemValue(value, ComponentBase.cParams);
  });
};
var _useGlobalPT = function _useGlobalPT2(callback2, key, params) {
  return _usePT(getGlobalPT(), callback2, key, params);
};
var _useDefaultPT = function _useDefaultPT2(callback2, key, params) {
  return _usePT(getDefaultPT(), callback2, key, params);
};
var useHandleStyle = function useHandleStyle2(styles2) {
  var config2 = arguments.length > 2 ? arguments[2] : void 0;
  var name = config2.name, _config$styled = config2.styled, styled = _config$styled === void 0 ? false : _config$styled, _config$hostName = config2.hostName, hostName = _config$hostName === void 0 ? "" : _config$hostName;
  var globalCSS = _useGlobalPT(getOptionValue, "global.css", ComponentBase.cParams);
  var componentName = ObjectUtils.toFlatCase(name);
  var _useStyle = useStyle(baseStyle, {
    name: "base",
    manual: true
  }), loadBaseStyle = _useStyle.load;
  var _useStyle2 = useStyle(commonStyle, {
    name: "common",
    manual: true
  }), loadCommonStyle = _useStyle2.load;
  var _useStyle3 = useStyle(globalCSS, {
    name: "global",
    manual: true
  }), loadGlobalStyle = _useStyle3.load;
  var _useStyle4 = useStyle(styles2, {
    name,
    manual: true
  }), load = _useStyle4.load;
  var hook = function hook2(hookName) {
    if (!hostName) {
      var selfHook = _usePT(_getPT((ComponentBase.cProps || {}).pt, componentName), getOptionValue, "hooks.".concat(hookName));
      var defaultHook = _useDefaultPT(getOptionValue, "hooks.".concat(hookName));
      selfHook === null || selfHook === void 0 || selfHook();
      defaultHook === null || defaultHook === void 0 || defaultHook();
    }
  };
  hook("useMountEffect");
  useMountEffect(function() {
    loadBaseStyle();
    loadGlobalStyle();
    loadCommonStyle();
    if (!styled)
      load();
  });
  useUpdateEffect(function() {
    hook("useUpdateEffect");
  });
  useUnmountEffect(function() {
    hook("useUnmountEffect");
  });
};
var IconBase = {
  defaultProps: {
    __TYPE: "IconBase",
    className: null,
    label: null,
    spin: false
  },
  getProps: function getProps(props) {
    return ObjectUtils.getMergedProps(props, IconBase.defaultProps);
  },
  getOtherProps: function getOtherProps(props) {
    return ObjectUtils.getDiffProps(props, IconBase.defaultProps);
  },
  getPTI: function getPTI(props) {
    var isLabelEmpty = ObjectUtils.isEmpty(props.label);
    var otherProps = IconBase.getOtherProps(props);
    var ptiProps = {
      className: classNames$1("p-icon", {
        "p-icon-spin": props.spin
      }, props.className),
      role: !isLabelEmpty ? "img" : void 0,
      "aria-label": !isLabelEmpty ? props.label : void 0,
      "aria-hidden": isLabelEmpty
    };
    return ObjectUtils.getMergedProps(otherProps, ptiProps);
  }
};
function _extends$v() {
  _extends$v = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$v.apply(this, arguments);
}
var BarsIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$v({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M13.3226 3.6129H0.677419C0.497757 3.6129 0.325452 3.54152 0.198411 3.41448C0.0713707 3.28744 0 3.11514 0 2.93548C0 2.75581 0.0713707 2.58351 0.198411 2.45647C0.325452 2.32943 0.497757 2.25806 0.677419 2.25806H13.3226C13.5022 2.25806 13.6745 2.32943 13.8016 2.45647C13.9286 2.58351 14 2.75581 14 2.93548C14 3.11514 13.9286 3.28744 13.8016 3.41448C13.6745 3.54152 13.5022 3.6129 13.3226 3.6129ZM13.3226 7.67741H0.677419C0.497757 7.67741 0.325452 7.60604 0.198411 7.479C0.0713707 7.35196 0 7.17965 0 6.99999C0 6.82033 0.0713707 6.64802 0.198411 6.52098C0.325452 6.39394 0.497757 6.32257 0.677419 6.32257H13.3226C13.5022 6.32257 13.6745 6.39394 13.8016 6.52098C13.9286 6.64802 14 6.82033 14 6.99999C14 7.17965 13.9286 7.35196 13.8016 7.479C13.6745 7.60604 13.5022 7.67741 13.3226 7.67741ZM0.677419 11.7419H13.3226C13.5022 11.7419 13.6745 11.6706 13.8016 11.5435C13.9286 11.4165 14 11.2442 14 11.0645C14 10.8848 13.9286 10.7125 13.8016 10.5855C13.6745 10.4585 13.5022 10.3871 13.3226 10.3871H0.677419C0.497757 10.3871 0.325452 10.4585 0.198411 10.5855C0.0713707 10.7125 0 10.8848 0 11.0645C0 11.2442 0.0713707 11.4165 0.198411 11.5435C0.325452 11.6706 0.497757 11.7419 0.677419 11.7419Z",
    fill: "currentColor"
  }));
}));
BarsIcon.displayName = "BarsIcon";
function _extends$u() {
  _extends$u = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$u.apply(this, arguments);
}
var AngleDownIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$u({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M3.58659 4.5007C3.68513 4.50023 3.78277 4.51945 3.87379 4.55723C3.9648 4.59501 4.04735 4.65058 4.11659 4.7207L7.11659 7.7207L10.1166 4.7207C10.2619 4.65055 10.4259 4.62911 10.5843 4.65956C10.7427 4.69002 10.8871 4.77074 10.996 4.88976C11.1049 5.00877 11.1726 5.15973 11.1889 5.32022C11.2052 5.48072 11.1693 5.6422 11.0866 5.7807L7.58659 9.2807C7.44597 9.42115 7.25534 9.50004 7.05659 9.50004C6.85784 9.50004 6.66722 9.42115 6.52659 9.2807L3.02659 5.7807C2.88614 5.64007 2.80725 5.44945 2.80725 5.2507C2.80725 5.05195 2.88614 4.86132 3.02659 4.7207C3.09932 4.64685 3.18675 4.58911 3.28322 4.55121C3.37969 4.51331 3.48305 4.4961 3.58659 4.5007Z",
    fill: "currentColor"
  }));
}));
AngleDownIcon.displayName = "AngleDownIcon";
function _extends$t() {
  _extends$t = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$t.apply(this, arguments);
}
var AngleRightIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$t({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M5.25 11.1728C5.14929 11.1694 5.05033 11.1455 4.9592 11.1025C4.86806 11.0595 4.78666 10.9984 4.72 10.9228C4.57955 10.7822 4.50066 10.5916 4.50066 10.3928C4.50066 10.1941 4.57955 10.0035 4.72 9.86283L7.72 6.86283L4.72 3.86283C4.66067 3.71882 4.64765 3.55991 4.68275 3.40816C4.71785 3.25642 4.79932 3.11936 4.91585 3.01602C5.03238 2.91268 5.17819 2.84819 5.33305 2.83149C5.4879 2.81479 5.64411 2.84671 5.78 2.92283L9.28 6.42283C9.42045 6.56346 9.49934 6.75408 9.49934 6.95283C9.49934 7.15158 9.42045 7.34221 9.28 7.48283L5.78 10.9228C5.71333 10.9984 5.63193 11.0595 5.5408 11.1025C5.44966 11.1455 5.35071 11.1694 5.25 11.1728Z",
    fill: "currentColor"
  }));
}));
AngleRightIcon.displayName = "AngleRightIcon";
function _extends$s() {
  _extends$s = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$s.apply(this, arguments);
}
function _typeof$b(o) {
  "@babel/helpers - typeof";
  return _typeof$b = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$b(o);
}
function _toPrimitive$a(input2, hint) {
  if (_typeof$b(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$b(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$a(arg) {
  var key = _toPrimitive$a(arg, "string");
  return _typeof$b(key) === "symbol" ? key : String(key);
}
function _defineProperty$b(obj, key, value) {
  key = _toPropertyKey$a(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles$9(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$9(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _arrayLikeToArray$b(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray$b(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$b(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$b(o, minLen);
}
function _nonIterableRest$9() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$9(arr, i) {
  return _arrayWithHoles$9(arr) || _iterableToArrayLimit$9(arr, i) || _unsupportedIterableToArray$b(arr, i) || _nonIterableRest$9();
}
var styles$9 = "\n@layer primereact {\n    .p-ripple {\n        overflow: hidden;\n        position: relative;\n    }\n    \n    .p-ink {\n        display: block;\n        position: absolute;\n        background: rgba(255, 255, 255, 0.5);\n        border-radius: 100%;\n        transform: scale(0);\n    }\n    \n    .p-ink-active {\n        animation: ripple 0.4s linear;\n    }\n    \n    .p-ripple-disabled .p-ink {\n        display: none;\n    }\n}\n\n@keyframes ripple {\n    100% {\n        opacity: 0;\n        transform: scale(2.5);\n    }\n}\n\n";
var classes$9 = {
  root: "p-ink"
};
var RippleBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Ripple",
    children: void 0
  },
  css: {
    styles: styles$9,
    classes: classes$9
  },
  getProps: function getProps2(props) {
    return ObjectUtils.getMergedProps(props, RippleBase.defaultProps);
  },
  getOtherProps: function getOtherProps2(props) {
    return ObjectUtils.getDiffProps(props, RippleBase.defaultProps);
  }
});
function ownKeys$n(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$m(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$n(Object(t2), true).forEach(function(r3) {
      _defineProperty$b(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$n(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var Ripple = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var _React$useState = reactExports.useState(false), _React$useState2 = _slicedToArray$9(_React$useState, 2), isMounted = _React$useState2[0], setMounted = _React$useState2[1];
  var inkRef = reactExports.useRef(null);
  var targetRef = reactExports.useRef(null);
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = RippleBase.getProps(inProps, context);
  var isRippleActive = context && context.ripple || PrimeReact$2.ripple;
  var metaData = {
    props
  };
  useStyle(RippleBase.css.styles, {
    name: "ripple",
    manual: !isRippleActive
  });
  var _RippleBase$setMetaDa = RippleBase.setMetaData(_objectSpread$m({}, metaData)), ptm = _RippleBase$setMetaDa.ptm, cx = _RippleBase$setMetaDa.cx;
  var getTarget = function getTarget2() {
    return inkRef.current && inkRef.current.parentElement;
  };
  var bindEvents = function bindEvents2() {
    if (targetRef.current) {
      targetRef.current.addEventListener("pointerdown", onPointerDown);
    }
  };
  var unbindEvents = function unbindEvents2() {
    if (targetRef.current) {
      targetRef.current.removeEventListener("pointerdown", onPointerDown);
    }
  };
  var onPointerDown = function onPointerDown2(event) {
    var offset = DomHandler.getOffset(targetRef.current);
    var offsetX = event.pageX - offset.left + document.body.scrollTop - DomHandler.getWidth(inkRef.current) / 2;
    var offsetY = event.pageY - offset.top + document.body.scrollLeft - DomHandler.getHeight(inkRef.current) / 2;
    activateRipple(offsetX, offsetY);
  };
  var activateRipple = function activateRipple2(offsetX, offsetY) {
    if (!inkRef.current || getComputedStyle(inkRef.current, null).display === "none") {
      return;
    }
    DomHandler.removeClass(inkRef.current, "p-ink-active");
    setDimensions();
    inkRef.current.style.top = offsetY + "px";
    inkRef.current.style.left = offsetX + "px";
    DomHandler.addClass(inkRef.current, "p-ink-active");
  };
  var onAnimationEnd = function onAnimationEnd2(event) {
    DomHandler.removeClass(event.currentTarget, "p-ink-active");
  };
  var setDimensions = function setDimensions2() {
    if (inkRef.current && !DomHandler.getHeight(inkRef.current) && !DomHandler.getWidth(inkRef.current)) {
      var d2 = Math.max(DomHandler.getOuterWidth(targetRef.current), DomHandler.getOuterHeight(targetRef.current));
      inkRef.current.style.height = d2 + "px";
      inkRef.current.style.width = d2 + "px";
    }
  };
  reactExports.useImperativeHandle(ref, function() {
    return {
      props,
      getInk: function getInk() {
        return inkRef.current;
      },
      getTarget: function getTarget2() {
        return targetRef.current;
      }
    };
  });
  useMountEffect(function() {
    setMounted(true);
  });
  useUpdateEffect(function() {
    if (isMounted && inkRef.current) {
      targetRef.current = getTarget();
      setDimensions();
      bindEvents();
    }
  }, [isMounted]);
  useUpdateEffect(function() {
    if (inkRef.current && !targetRef.current) {
      targetRef.current = getTarget();
      setDimensions();
      bindEvents();
    }
  });
  useUnmountEffect(function() {
    if (inkRef.current) {
      targetRef.current = null;
      unbindEvents();
    }
  });
  if (!isRippleActive)
    return null;
  var rootProps = mergeProps2({
    "aria-hidden": true,
    className: classNames$1(cx("root"))
  }, RippleBase.getOtherProps(props), ptm("root"));
  return /* @__PURE__ */ reactExports.createElement("span", _extends$s({
    role: "presentation",
    ref: inkRef
  }, rootProps, {
    onAnimationEnd
  }));
}));
Ripple.displayName = "Ripple";
function _typeof$a(o) {
  "@babel/helpers - typeof";
  return _typeof$a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$a(o);
}
function _toPrimitive$9(input2, hint) {
  if (_typeof$a(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$a(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$9(arg) {
  var key = _toPrimitive$9(arg, "string");
  return _typeof$a(key) === "symbol" ? key : String(key);
}
function _defineProperty$a(obj, key, value) {
  key = _toPropertyKey$9(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles$8(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$8(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _arrayLikeToArray$a(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray$a(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$a(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$a(o, minLen);
}
function _nonIterableRest$8() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$8(arr, i) {
  return _arrayWithHoles$8(arr) || _iterableToArrayLimit$8(arr, i) || _unsupportedIterableToArray$a(arr, i) || _nonIterableRest$8();
}
var classes$8 = {
  start: "p-menubar-start",
  end: "p-menubar-end",
  button: "p-menubar-button",
  root: function root(_ref3) {
    var mobileActiveState = _ref3.mobileActiveState;
    return classNames$1("p-menubar p-component", {
      "p-menubar-mobile-active": mobileActiveState
    });
  },
  separator: "p-menuitem-separator",
  icon: "p-menuitem-icon",
  label: "p-menuitem-text",
  submenuIcon: "p-submenu-icon",
  menuitem: function menuitem(_ref22) {
    var active = _ref22.active, focused = _ref22.focused, disabled = _ref22.disabled;
    return classNames$1("p-menuitem", {
      "p-menuitem-active p-highlight": active,
      "p-focus": focused,
      "p-disabled": disabled
    });
  },
  menu: "p-menubar-root-list",
  content: "p-menuitem-content",
  submenu: "p-submenu-list",
  action: function action(_ref3) {
    var disabled = _ref3.disabled;
    return classNames$1("p-menuitem-link", {
      "p-disabled": disabled
    });
  }
};
var styles$8 = "\n@layer primereact {\n    .p-menubar {\n        display: flex;\n        align-items: center;\n    }\n\n    .p-menubar ul {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n    }\n\n    .p-menubar .p-menuitem-link {\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        text-decoration: none;\n        overflow: hidden;\n        position: relative;\n    }\n\n    .p-menubar .p-menuitem-text {\n        line-height: 1;\n    }\n\n    .p-menubar .p-menuitem {\n        position: relative;\n    }\n\n    .p-menubar-root-list {\n        display: flex;\n        align-items: center;\n        flex-wrap: wrap;\n    }\n\n    .p-menubar-root-list > li ul {\n        display: none;\n        z-index: 1;\n    }\n\n    .p-menubar-root-list > .p-menuitem-active > .p-submenu-list {\n        display: block;\n    }\n\n    .p-menubar .p-submenu-list {\n        display: none;\n        position: absolute;\n        z-index: 1;\n    }\n\n    .p-menubar .p-submenu-list > .p-menuitem-active > .p-submenu-list {\n        display: block;\n        left: 100%;\n        top: 0;\n    }\n\n    .p-menubar .p-submenu-list .p-menuitem .p-menuitem-content .p-menuitem-link .p-submenu-icon {\n        margin-left: auto;\n    }\n\n    .p-menubar .p-menubar-end {\n        margin-left: auto;\n        align-self: center;\n    }\n\n    .p-menubar-button {\n        display: none;\n        cursor: pointer;\n        align-items: center;\n        justify-content: center;\n        text-decoration: none;\n    }\n}\n";
var MenubarBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Menubar",
    id: null,
    model: null,
    style: null,
    className: null,
    start: null,
    ariaLabel: null,
    ariaLabelledBy: null,
    onFocus: null,
    onBlur: null,
    submenuIcon: null,
    menuIcon: null,
    end: null,
    children: void 0
  },
  css: {
    classes: classes$8,
    styles: styles$8
  }
});
function ownKeys$1$4(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$1$4(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$1$4(Object(t2), true).forEach(function(r3) {
      _defineProperty$a(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1$4(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var MenubarSub = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
  var mergeProps2 = useMergeProps();
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(processedItem, key, index2) {
    return ptm(key, {
      props,
      hostName: props.hostName,
      context: {
        item: processedItem,
        index: index2,
        active: isItemActive(processedItem),
        focused: isItemFocused(processedItem),
        disabled: isItemDisabled(processedItem),
        level: props.level
      }
    });
  };
  var onItemMouseEnter = function onItemMouseEnter2(event, item2) {
    if (isItemDisabled(item2) || props.mobileActive) {
      event.preventDefault();
      return;
    }
    props.onItemMouseEnter && props.onItemMouseEnter({
      originalEvent: event,
      processedItem: item2
    });
  };
  var onItemClick = function onItemClick2(event, processedItem) {
    var item2 = processedItem.item;
    if (isItemDisabled(processedItem)) {
      event.preventDefault();
      return;
    }
    if (item2.command) {
      item2.command({
        originalEvent: event,
        item: item2
      });
    }
    onLeafClick({
      originalEvent: event,
      processedItem,
      isFocus: true
    });
    if (!item2.url) {
      event.preventDefault();
      event.stopPropagation();
    }
  };
  var onLeafClick = function onLeafClick2(event) {
    props.onLeafClick && props.onLeafClick(event);
  };
  var getItemId = function getItemId2(processedItem) {
    var _processedItem$item;
    return (_processedItem$item = processedItem.item) === null || _processedItem$item === void 0 ? void 0 : _processedItem$item.id;
  };
  var getItemDataId = function getItemDataId2(processedItem) {
    return "".concat(props.id, "_").concat(processedItem.key);
  };
  var getItemProp = function getItemProp2(processedItem, name, params) {
    return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name], params) : void 0;
  };
  var isItemActive = function isItemActive2(processedItem) {
    return props.activeItemPath.some(function(path) {
      return path.key === processedItem.key;
    });
  };
  var isItemVisible = function isItemVisible2(processedItem) {
    return getItemProp(processedItem, "visible") !== false;
  };
  var isItemDisabled = function isItemDisabled2(processedItem) {
    return getItemProp(processedItem, "disabled");
  };
  var isItemFocused = function isItemFocused2(processedItem) {
    return props.focusedItemId === getItemDataId(processedItem);
  };
  var isItemGroup = function isItemGroup2(processedItem) {
    return ObjectUtils.isNotEmpty(processedItem.items);
  };
  var getAriaSetSize = function getAriaSetSize2() {
    return props.model.filter(function(processedItem) {
      return isItemVisible(processedItem) && !getItemProp(processedItem, "separator");
    }).length;
  };
  var getAriaPosInset = function getAriaPosInset2(index2) {
    return index2 - props.model.slice(0, index2).filter(function(processedItem) {
      return isItemVisible(processedItem) && getItemProp(processedItem, "separator");
    }).length + 1;
  };
  var createSeparator = function createSeparator2(index2) {
    var key = props.id + "_separator_" + index2;
    var separatorProps = mergeProps2({
      key,
      "data-id": key,
      className: cx("separator"),
      role: "separator"
    }, ptm("separator", {
      hostName: props.hostName
    }));
    return /* @__PURE__ */ reactExports.createElement("li", separatorProps);
  };
  var createSubmenu = function createSubmenu2(processedItem) {
    var items = processedItem && processedItem.items;
    if (items) {
      return /* @__PURE__ */ reactExports.createElement(MenubarSub, {
        id: props.id,
        hostName: props.hostName,
        menuProps: props.menuProps,
        level: props.level + 1,
        model: items,
        activeItemPath: props.activeItemPath,
        focusedItemId: props.focusedItemId,
        onLeafClick,
        onItemMouseEnter: props.onItemMouseEnter,
        submenuIcon: props.submenuIcon,
        ptm,
        style: {
          display: isItemActive(processedItem) ? "block" : "none"
        },
        cx
      });
    }
    return null;
  };
  var createMenuitem = function createMenuitem2(processedItem, index2) {
    var item2 = processedItem.item;
    if (!isItemVisible(processedItem)) {
      return null;
    }
    var id2 = getItemId(processedItem);
    var dataId = getItemDataId(processedItem);
    var active = isItemActive(processedItem);
    var focused = isItemFocused(processedItem);
    var disabled = isItemDisabled(processedItem) || false;
    var group = isItemGroup(processedItem);
    var linkClassName = classNames$1("p-menuitem-link", {
      "p-disabled": disabled
    });
    var iconClassName = classNames$1("p-menuitem-icon", getItemProp(processedItem, "icon"));
    var iconProps = mergeProps2({
      className: cx("icon")
    }, getPTOptions(processedItem, "icon", index2));
    var icon2 = IconUtils.getJSXIcon(item2.icon, _objectSpread$1$4({}, iconProps), {
      props: props.menuProps
    });
    var labelProps = mergeProps2({
      className: cx("label")
    }, getPTOptions(processedItem, "label", index2));
    var label = item2.label && /* @__PURE__ */ reactExports.createElement("span", labelProps, item2.label);
    var items = getItemProp(processedItem, "items");
    var submenuIconClassName = "p-submenu-icon";
    var submenuIconProps = mergeProps2({
      className: cx("submenuIcon")
    }, getPTOptions(processedItem, "submenuIcon", index2));
    var submenuIcon = items && IconUtils.getJSXIcon(!props.root ? props.submenuIcon || /* @__PURE__ */ reactExports.createElement(AngleRightIcon, submenuIconProps) : props.submenuIcon || /* @__PURE__ */ reactExports.createElement(AngleDownIcon, submenuIconProps), _objectSpread$1$4({}, submenuIconProps), {
      props: _objectSpread$1$4({
        menuProps: props.menuProps
      }, props)
    });
    var submenu2 = createSubmenu(processedItem);
    var actionProps = mergeProps2({
      href: item2.url || "#",
      tabIndex: "-1",
      "aria-hidden": "true",
      className: cx("action", {
        disabled
      }),
      onFocus: function onFocus2(event) {
        return event.stopPropagation();
      },
      target: getItemProp(processedItem, "target"),
      "aria-haspopup": items != null
    }, getPTOptions(processedItem, "action", index2));
    var content = /* @__PURE__ */ reactExports.createElement("a", actionProps, icon2, label, submenuIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null));
    if (item2.template) {
      var defaultContentOptions = {
        className: linkClassName,
        labelClassName: "p-menuitem-text",
        iconClassName,
        submenuIconClassName,
        element: content,
        props
      };
      content = ObjectUtils.getJSXElement(item2.template, item2, defaultContentOptions);
    }
    var contentProps = mergeProps2({
      onClick: function onClick(event) {
        return onItemClick(event, processedItem);
      },
      onMouseEnter: function onMouseEnter(event) {
        return onItemMouseEnter(event, processedItem);
      },
      className: cx("content")
    }, getPTOptions(processedItem, "content", index2));
    var itemClassName = getItemProp(processedItem, "className");
    var menuitemProps = mergeProps2(_defineProperty$a({
      id: id2,
      key: id2,
      "data-id": dataId,
      role: "menuitem",
      "aria-label": item2.label,
      "aria-disabled": disabled,
      "aria-expanded": group ? active : void 0,
      "aria-haspopup": group && !item2.url ? "menu" : void 0,
      "aria-level": props.level + 1,
      "aria-setsize": getAriaSetSize(),
      "aria-posinset": getAriaPosInset(index2),
      "data-p-highlight": active,
      "data-p-focused": focused,
      "data-p-disabled": disabled,
      className: classNames$1(itemClassName, cx("menuitem", {
        active,
        focused,
        disabled
      }))
    }, "data-p-disabled", disabled || false), getPTOptions(processedItem, "menuitem", index2));
    return /* @__PURE__ */ reactExports.createElement("li", menuitemProps, /* @__PURE__ */ reactExports.createElement("div", contentProps, content), submenu2);
  };
  var createItem = function createItem2(processedItem, index2) {
    return getItemProp(processedItem, "separator") ? createSeparator(index2) : createMenuitem(processedItem, index2);
  };
  var createMenu = function createMenu2() {
    return props.model ? props.model.map(createItem) : null;
  };
  var role = props.root ? "menubar" : "menu";
  var ptKey = props.root ? "menu" : "submenu";
  var tabIndex = props.root ? "0" : null;
  var submenu = createMenu();
  var menuProps = mergeProps2({
    ref,
    className: cx(ptKey),
    level: props.level,
    onFocus: props.onFocus,
    onBlur: props.onBlur,
    onKeyDown: props.onKeyDown,
    "data-id": props.id,
    tabIndex,
    "aria-activedescendant": props.ariaActivedescendant,
    style: props.style,
    role
  }, ptm(ptKey));
  return /* @__PURE__ */ reactExports.createElement("ul", menuProps, submenu);
}));
MenubarSub.displayName = "MenubarSub";
function ownKeys$m(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$l(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$m(Object(t2), true).forEach(function(r3) {
      _defineProperty$a(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$m(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var Menubar = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = MenubarBase.getProps(inProps, context);
  var _React$useState = reactExports.useState(props.id), _React$useState2 = _slicedToArray$8(_React$useState, 2), idState = _React$useState2[0], setIdState = _React$useState2[1];
  var _React$useState3 = reactExports.useState(false), _React$useState4 = _slicedToArray$8(_React$useState3, 2), mobileActiveState = _React$useState4[0], setMobileActiveState = _React$useState4[1];
  var _React$useState5 = reactExports.useState(false), _React$useState6 = _slicedToArray$8(_React$useState5, 2), focused = _React$useState6[0], setFocused = _React$useState6[1];
  var _React$useState7 = reactExports.useState({
    index: -1,
    level: 0,
    parentKey: ""
  }), _React$useState8 = _slicedToArray$8(_React$useState7, 2), focusedItemInfo = _React$useState8[0], setFocusedItemInfo = _React$useState8[1];
  var _React$useState9 = reactExports.useState(null), _React$useState10 = _slicedToArray$8(_React$useState9, 2), focusedItemId = _React$useState10[0], setFocusedItemId = _React$useState10[1];
  var _React$useState11 = reactExports.useState([]), _React$useState12 = _slicedToArray$8(_React$useState11, 2), activeItemPath = _React$useState12[0], setActiveItemPath = _React$useState12[1];
  var _React$useState13 = reactExports.useState([]), _React$useState14 = _slicedToArray$8(_React$useState13, 2), visibleItems = _React$useState14[0], setVisibleItems = _React$useState14[1];
  var _React$useState15 = reactExports.useState([]), _React$useState16 = _slicedToArray$8(_React$useState15, 2), processedItems = _React$useState16[0], setProcessedItems = _React$useState16[1];
  var _React$useState17 = reactExports.useState(false), _React$useState18 = _slicedToArray$8(_React$useState17, 2), focusTrigger = _React$useState18[0], setFocusTrigger = _React$useState18[1];
  var _React$useState19 = reactExports.useState(false), _React$useState20 = _slicedToArray$8(_React$useState19, 2), dirty = _React$useState20[0], setDirty = _React$useState20[1];
  var elementRef = reactExports.useRef(null);
  var rootMenuRef = reactExports.useRef(null);
  var menuButtonRef = reactExports.useRef(null);
  var searchValue = reactExports.useRef("");
  var searchTimeout = reactExports.useRef(null);
  var reverseTrigger = reactExports.useRef(false);
  var _MenubarBase$setMetaD = MenubarBase.setMetaData({
    props,
    state: {
      id: idState,
      mobileActive: mobileActiveState
    }
  }), ptm = _MenubarBase$setMetaD.ptm, cx = _MenubarBase$setMetaD.cx, isUnstyled = _MenubarBase$setMetaD.isUnstyled;
  useHandleStyle(MenubarBase.css.styles, isUnstyled, {
    name: "menubar"
  });
  var _useEventListener = useEventListener({
    type: "click",
    listener: function listener(event) {
      if (isOutsideClicked(event)) {
        var isOutsideContainer = elementRef.current && !elementRef.current.contains(event.target);
        if (isOutsideContainer) {
          hide();
        }
      }
    }
  }), _useEventListener2 = _slicedToArray$8(_useEventListener, 2), bindOutsideClickListener = _useEventListener2[0], unbindOutsideClickListener = _useEventListener2[1];
  var _useResizeListener = useResizeListener({
    listener: function listener(event) {
      if (!DomHandler.isTouchDevice()) {
        hide(event);
      }
    }
  }), _useResizeListener2 = _slicedToArray$8(_useResizeListener, 2), bindResizeListener = _useResizeListener2[0], unbindResizeListener = _useResizeListener2[1];
  var toggle = function toggle2(event) {
    if (mobileActiveState) {
      setMobileActiveState(false);
      hide();
    } else {
      setMobileActiveState(true);
      setTimeout(function() {
        show();
      }, 1);
    }
    event.preventDefault();
  };
  var show = function show2() {
    setFocusedItemInfo({
      index: findFirstFocusedItemIndex(),
      level: 0,
      parentKey: ""
    });
    DomHandler.focus(rootMenuRef.current);
  };
  var hide = function hide2(isFocus) {
    if (mobileActiveState) {
      setMobileActiveState(false);
      setTimeout(function() {
        DomHandler.focus(menuButtonRef.current);
      }, 0);
    }
    setActiveItemPath([]);
    setFocusedItemInfo({
      index: -1,
      level: 0,
      parentKey: ""
    });
    isFocus && DomHandler.focus(rootMenuRef.current);
    setDirty(false);
  };
  var menuButtonKeydown = function menuButtonKeydown2(event) {
    (event.code === "Enter" || event.code === "Space") && toggle(event);
  };
  var isOutsideClicked = function isOutsideClicked2(event) {
    return rootMenuRef.current !== event.target && !rootMenuRef.current.contains(event.target) && menuButtonRef.current !== event.target && !menuButtonRef.current.contains(event.target);
  };
  var getItemProp = function getItemProp2(item2, name) {
    return item2 ? ObjectUtils.getItemValue(item2[name]) : void 0;
  };
  var getItemLabel = function getItemLabel2(item2) {
    return getItemProp(item2, "label");
  };
  var isItemDisabled = function isItemDisabled2(item2) {
    return getItemProp(item2, "disabled");
  };
  var isItemSeparator = function isItemSeparator2(item2) {
    return getItemProp(item2, "separator");
  };
  var getProccessedItemLabel = function getProccessedItemLabel2(processedItem) {
    return processedItem ? getItemLabel(processedItem.item) : void 0;
  };
  var isProccessedItemGroup = function isProccessedItemGroup2(processedItem) {
    return processedItem && ObjectUtils.isNotEmpty(processedItem.items);
  };
  var onFocus2 = function onFocus3(event) {
    setFocused(true);
    setFocusedItemInfo(focusedItemInfo.index !== -1 ? focusedItemInfo : {
      index: findFirstFocusedItemIndex(),
      level: 0,
      parentKey: ""
    });
    props.onFocus && props.onFocus(event);
  };
  var onBlur = function onBlur2(event) {
    setFocused(false);
    setFocusedItemInfo({
      index: -1,
      level: 0,
      parentKey: ""
    });
    searchValue.current = "";
    setDirty(false);
    props.onBlur && props.onBlur(event);
  };
  var onKeyDown = function onKeyDown2(event) {
    var metaKey = event.metaKey || event.ctrlKey;
    var code = event.code;
    switch (code) {
      case "ArrowDown":
        onArrowDownKey(event);
        break;
      case "ArrowUp":
        onArrowUpKey(event);
        break;
      case "ArrowLeft":
        onArrowLeftKey(event);
        break;
      case "ArrowRight":
        onArrowRightKey(event);
        break;
      case "Home":
        onHomeKey(event);
        break;
      case "End":
        onEndKey(event);
        break;
      case "Space":
        onSpaceKey(event);
        break;
      case "Enter":
        onEnterKey(event);
        break;
      case "Escape":
        onEscapeKey();
        break;
      case "Tab":
        onTabKey(event);
        break;
      case "PageDown":
      case "PageUp":
      case "Backspace":
      case "ShiftLeft":
      case "ShiftRight":
        break;
      default:
        if (!metaKey && ObjectUtils.isPrintableCharacter(event.key)) {
          searchItems(event, event.key);
        }
        break;
    }
  };
  var onItemChange = function onItemChange2(event) {
    var processedItem = event.processedItem, isFocus = event.isFocus;
    if (ObjectUtils.isEmpty(processedItem))
      return;
    var index2 = processedItem.index, key = processedItem.key, level = processedItem.level, parentKey = processedItem.parentKey, items = processedItem.items;
    var grouped = ObjectUtils.isNotEmpty(items);
    var _activeItemPath = activeItemPath.filter(function(p2) {
      return p2.parentKey !== parentKey && p2.parentKey !== key;
    });
    grouped && _activeItemPath.push(processedItem);
    setFocusedItemInfo({
      index: index2,
      level,
      parentKey
    });
    setActiveItemPath(_activeItemPath);
    grouped && setDirty(true);
    isFocus && DomHandler.focus(rootMenuRef.current);
  };
  var onItemClick = function onItemClick2(event) {
    var originalEvent = event.originalEvent, processedItem = event.processedItem;
    var grouped = isProccessedItemGroup(processedItem);
    var root9 = ObjectUtils.isEmpty(processedItem.parent);
    var selected = isSelected(processedItem);
    if (selected) {
      var index2 = processedItem.index, key = processedItem.key, level = processedItem.level, parentKey = processedItem.parentKey;
      setActiveItemPath(activeItemPath.filter(function(p2) {
        return key !== p2.key && key.startsWith(p2.key);
      }));
      setFocusedItemInfo({
        index: index2,
        level,
        parentKey
      });
      if (!grouped) {
        setDirty(!root9);
      }
      setTimeout(function() {
        DomHandler.focus(rootMenuRef.current);
        if (grouped) {
          setDirty(true);
        }
      }, 0);
    } else {
      if (grouped) {
        DomHandler.focus(rootMenuRef.current);
        onItemChange({
          originalEvent,
          processedItem
        });
      } else {
        var rootProcessedItem = root9 ? processedItem : activeItemPath.find(function(p2) {
          return p2.parentKey === "";
        });
        var rootProcessedItemIndex = rootProcessedItem ? rootProcessedItem.index : -1;
        hide(originalEvent);
        setFocusedItemInfo({
          index: rootProcessedItemIndex,
          parentKey: rootProcessedItem ? rootProcessedItem.parentKey : ""
        });
        setMobileActiveState(false);
      }
    }
  };
  var onItemMouseEnter = function onItemMouseEnter2(event) {
    if (!mobileActiveState && dirty) {
      onItemChange(event);
    }
  };
  var onArrowDownKey = function onArrowDownKey2(event) {
    var processedItem = visibleItems[focusedItemInfo.index];
    var root9 = processedItem ? ObjectUtils.isEmpty(processedItem.parent) : null;
    if (root9) {
      var grouped = isProccessedItemGroup(processedItem);
      if (grouped) {
        onItemChange({
          originalEvent: event,
          processedItem
        });
        setFocusedItemInfo({
          index: -1,
          parentKey: processedItem.key
        });
        setTimeout(function() {
          return setFocusTrigger(true);
        }, 0);
      }
    } else {
      var itemIndex = focusedItemInfo.index !== -1 ? findNextItemIndex(focusedItemInfo.index) : findFirstFocusedItemIndex();
      changeFocusedItemIndex(itemIndex);
    }
    event.preventDefault();
  };
  var onArrowUpKey = function onArrowUpKey2(event) {
    var processedItem = visibleItems[focusedItemInfo.index];
    var root9 = ObjectUtils.isEmpty(processedItem.parent);
    if (root9) {
      var grouped = isProccessedItemGroup(processedItem);
      if (grouped) {
        onItemChange({
          originalEvent: event,
          processedItem
        });
        setFocusedItemInfo({
          index: -1,
          parentKey: processedItem.key
        });
        reverseTrigger.current = true;
        setTimeout(function() {
          return setFocusTrigger(true);
        }, 0);
      }
    } else {
      var parentItem = activeItemPath.find(function(p2) {
        return p2.key === processedItem.parentKey;
      });
      if (focusedItemInfo.index === 0 && parentItem && parentItem.parentKey === "") {
        setFocusedItemInfo({
          index: -1,
          parentKey: parentItem ? parentItem.parentKey : ""
        });
        searchValue.current = "";
        onArrowLeftKey(event);
      } else {
        var itemIndex = focusedItemInfo.index !== -1 ? findPrevItemIndex(focusedItemInfo.index) : findLastFocusedItemIndex();
        changeFocusedItemIndex(itemIndex);
      }
    }
    event.preventDefault();
  };
  var onArrowLeftKey = function onArrowLeftKey2(event) {
    var processedItem = visibleItems[focusedItemInfo.index];
    var parentItem = processedItem ? activeItemPath.find(function(p2) {
      return p2.key === processedItem.parentKey;
    }) : null;
    if (parentItem) {
      onItemChange({
        originalEvent: event,
        processedItem: parentItem
      });
      setActiveItemPath(activeItemPath.filter(function(p2) {
        return p2.key !== parentItem.key;
      }));
    } else {
      var itemIndex = focusedItemInfo.index !== -1 ? findPrevItemIndex(focusedItemInfo.index) : findLastFocusedItemIndex();
      changeFocusedItemIndex(itemIndex);
    }
    event.preventDefault();
  };
  var onArrowRightKey = function onArrowRightKey2(event) {
    var processedItem = visibleItems[focusedItemInfo.index];
    var parentItem = processedItem ? activeItemPath.find(function(p2) {
      return p2.key === processedItem.parentKey;
    }) : null;
    if (parentItem) {
      var grouped = isProccessedItemGroup(processedItem);
      if (grouped) {
        onItemChange({
          originalEvent: event,
          processedItem
        });
        setFocusedItemInfo({
          index: -1,
          parentKey: processedItem.key
        });
        setTimeout(function() {
          return setFocusTrigger(true);
        }, 0);
      }
    } else {
      var itemIndex = focusedItemInfo.index !== -1 ? findNextItemIndex(focusedItemInfo.index) : findFirstFocusedItemIndex();
      changeFocusedItemIndex(itemIndex);
    }
    event.preventDefault();
  };
  var onHomeKey = function onHomeKey2(event) {
    changeFocusedItemIndex(findFirstItemIndex());
    event.preventDefault();
  };
  var onEndKey = function onEndKey2(event) {
    changeFocusedItemIndex(findLastItemIndex());
    event.preventDefault();
  };
  var onEnterKey = function onEnterKey2(event) {
    if (focusedItemInfo.index !== -1) {
      var element = DomHandler.findSingle(rootMenuRef.current, 'li[data-id="'.concat("".concat(focusedItemId), '"]'));
      var anchorElement = element && DomHandler.findSingle(element, 'a[data-pc-section="action"]');
      anchorElement ? anchorElement.click() : element && element.click();
    }
    event.preventDefault();
  };
  var onSpaceKey = function onSpaceKey2(event) {
    onEnterKey(event);
  };
  var onEscapeKey = function onEscapeKey2(event) {
    hide(true);
    setFocusedItemInfo({
      focusedItemInfo,
      index: findFirstFocusedItemIndex()
    });
  };
  var onTabKey = function onTabKey2(event) {
    if (focusedItemInfo.index !== -1) {
      var processedItem = visibleItems[focusedItemInfo.index];
      var grouped = isProccessedItemGroup(processedItem);
      !grouped && onItemChange({
        originalEvent: event,
        processedItem
      });
    }
    hide();
  };
  var isItemMatched = function isItemMatched2(processedItem) {
    return isValidItem(processedItem) && getProccessedItemLabel(processedItem).toLocaleLowerCase().startsWith(searchValue.current.toLocaleLowerCase());
  };
  var isValidItem = function isValidItem2(processedItem) {
    return !!processedItem && !isItemDisabled(processedItem.item) && !isItemSeparator(processedItem.item);
  };
  var isValidSelectedItem = function isValidSelectedItem2(processedItem) {
    return isValidItem(processedItem) && isSelected(processedItem);
  };
  var isSelected = function isSelected2(processedItem) {
    return activeItemPath.some(function(p2) {
      return p2.key === processedItem.key;
    });
  };
  var findFirstItemIndex = function findFirstItemIndex2() {
    return visibleItems.findIndex(function(processedItem) {
      return isValidItem(processedItem);
    });
  };
  var findLastItemIndex = function findLastItemIndex2() {
    return ObjectUtils.findLastIndex(visibleItems, function(processedItem) {
      return isValidItem(processedItem);
    });
  };
  var findNextItemIndex = function findNextItemIndex2(index2) {
    var matchedItemIndex = index2 < visibleItems.length - 1 ? visibleItems.slice(index2 + 1).findIndex(function(processedItem) {
      return isValidItem(processedItem);
    }) : -1;
    return matchedItemIndex > -1 ? matchedItemIndex + index2 + 1 : index2;
  };
  var findPrevItemIndex = function findPrevItemIndex2(index2) {
    var matchedItemIndex = index2 > 0 ? ObjectUtils.findLastIndex(visibleItems.slice(0, index2), function(processedItem) {
      return isValidItem(processedItem);
    }) : -1;
    return matchedItemIndex > -1 ? matchedItemIndex : index2;
  };
  var findSelectedItemIndex = function findSelectedItemIndex2() {
    return visibleItems.findIndex(function(processedItem) {
      return isValidSelectedItem(processedItem);
    });
  };
  var findFirstFocusedItemIndex = function findFirstFocusedItemIndex2() {
    var selectedIndex = findSelectedItemIndex();
    return selectedIndex < 0 ? findFirstItemIndex() : selectedIndex;
  };
  var findLastFocusedItemIndex = function findLastFocusedItemIndex2() {
    var selectedIndex = findSelectedItemIndex();
    return selectedIndex < 0 ? findLastItemIndex() : selectedIndex;
  };
  var searchItems = function searchItems2(event, _char) {
    searchValue.current = (searchValue.current || "") + _char;
    var itemIndex = -1;
    var matched = false;
    if (focusedItemInfo.index !== -1) {
      itemIndex = visibleItems.slice(focusedItemInfo.index).findIndex(function(processedItem) {
        return isItemMatched(processedItem);
      });
      itemIndex = itemIndex === -1 ? visibleItems.slice(0, focusedItemInfo.index).findIndex(function(processedItem) {
        return isItemMatched(processedItem);
      }) : itemIndex + focusedItemInfo.index;
    } else {
      itemIndex = visibleItems.findIndex(function(processedItem) {
        return isItemMatched(processedItem);
      });
    }
    if (itemIndex !== -1) {
      matched = true;
    }
    if (itemIndex === -1 && focusedItemInfo.index === -1) {
      itemIndex = findFirstFocusedItemIndex();
    }
    if (itemIndex !== -1) {
      changeFocusedItemIndex(itemIndex);
    }
    if (searchTimeout.current) {
      clearTimeout(searchTimeout.current);
    }
    searchTimeout.current = setTimeout(function() {
      searchValue.current = "";
      searchTimeout.current = null;
    }, 500);
    return matched;
  };
  var changeFocusedItemIndex = function changeFocusedItemIndex2(index2) {
    if (focusedItemInfo.index !== index2) {
      setFocusedItemInfo(_objectSpread$l(_objectSpread$l({}, focusedItemInfo), {}, {
        index: index2
      }));
      scrollInView();
    }
  };
  var scrollInView = function scrollInView2() {
    var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : -1;
    var id2 = index2 !== -1 ? "".concat(idState, "_").concat(index2) : focusedItemId;
    var element = DomHandler.findSingle(rootMenuRef.current, 'li[data-id="'.concat(id2, '"]'));
    if (element) {
      element.scrollIntoView && element.scrollIntoView({
        block: "nearest",
        inline: "start"
      });
    }
  };
  var createProcessedItems = reactExports.useCallback(function(items) {
    var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var parent = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var parentKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
    var _processedItems = [];
    items && items.forEach(function(item2, index2) {
      var key = (parentKey !== "" ? parentKey + "_" : "") + index2;
      var newItem = {
        item: item2,
        index: index2,
        level,
        key,
        parent,
        parentKey
      };
      newItem["items"] = createProcessedItems(item2.items, level + 1, newItem, key);
      _processedItems.push(newItem);
    });
    return _processedItems;
  }, []);
  useMountEffect(function() {
    if (!idState) {
      setIdState(UniqueComponentId());
    }
  });
  useUpdateEffect(function() {
    if (mobileActiveState) {
      bindOutsideClickListener();
      bindResizeListener();
      ZIndexUtils.set("menu", rootMenuRef.current, context && context.autoZIndex || PrimeReact$2.autoZIndex, context && context.zIndex["menu"] || PrimeReact$2.zIndex["menu"]);
    } else {
      unbindResizeListener();
      unbindOutsideClickListener();
      ZIndexUtils.clear(rootMenuRef.current);
    }
  }, [mobileActiveState]);
  reactExports.useEffect(function() {
    var itemsToProcess = props.model || [];
    var processed = createProcessedItems(itemsToProcess, 0, null, "");
    setProcessedItems(processed);
  }, [props.model, createProcessedItems]);
  useUpdateEffect(function() {
    var processedItem = activeItemPath.find(function(p2) {
      return p2.key === focusedItemInfo.parentKey;
    });
    var _processedItems = processedItem ? processedItem.items : processedItems;
    setVisibleItems(_processedItems);
  }, [activeItemPath, focusedItemInfo, processedItems]);
  useUpdateEffect(function() {
    if (ObjectUtils.isNotEmpty(activeItemPath)) {
      bindOutsideClickListener();
      bindResizeListener();
    } else {
      unbindOutsideClickListener();
      unbindResizeListener();
    }
  }, [activeItemPath]);
  useUpdateEffect(function() {
    if (focusTrigger) {
      var itemIndex = focusedItemInfo.index !== -1 ? findNextItemIndex(focusedItemInfo.index) : reverseTrigger.current ? findLastItemIndex() : findFirstFocusedItemIndex();
      changeFocusedItemIndex(itemIndex);
      reverseTrigger.current = false;
      setFocusTrigger(false);
    }
  }, [focusTrigger]);
  useUpdateEffect(function() {
    setFocusedItemId(focusedItemInfo.index !== -1 ? "".concat(idState).concat(ObjectUtils.isNotEmpty(focusedItemInfo.parentKey) ? "_" + focusedItemInfo.parentKey : "", "_").concat(focusedItemInfo.index) : null);
  }, [focusedItemInfo]);
  useUnmountEffect(function() {
    ZIndexUtils.clear(rootMenuRef.current);
  });
  reactExports.useImperativeHandle(ref, function() {
    return {
      props,
      toggle,
      getElement: function getElement() {
        return elementRef.current;
      },
      getRootMenu: function getRootMenu() {
        return rootMenuRef.current;
      },
      getMenuButton: function getMenuButton() {
        return menuButtonRef.current;
      }
    };
  });
  var createStartContent = function createStartContent2() {
    if (props.start) {
      var _start = ObjectUtils.getJSXElement(props.start, props);
      var startProps = mergeProps2({
        className: cx("start")
      }, ptm("start"));
      return /* @__PURE__ */ reactExports.createElement("div", startProps, _start);
    }
    return null;
  };
  var createEndContent = function createEndContent2() {
    if (props.end) {
      var _end = ObjectUtils.getJSXElement(props.end, props);
      var endProps = mergeProps2({
        className: cx("end")
      }, ptm("end"));
      return /* @__PURE__ */ reactExports.createElement("div", endProps, _end);
    }
    return null;
  };
  var createMenuButton = function createMenuButton2() {
    if (props.model && props.model.length < 1) {
      return null;
    }
    var buttonProps = mergeProps2(_defineProperty$a(_defineProperty$a(_defineProperty$a(_defineProperty$a({
      ref: menuButtonRef,
      href: "#",
      tabIndex: "0",
      "aria-haspopup": mobileActiveState && props.model && props.model.lentgh > 0 ? true : false,
      "aria-expanded": mobileActiveState,
      "aria-label": ariaLabel$2("navigation"),
      "aria-controls": idState,
      role: "button"
    }, "tabIndex", 0), "className", cx("button")), "onKeyDown", function onKeyDown2(e2) {
      return menuButtonKeydown(e2);
    }), "onClick", function onClick(e2) {
      return toggle(e2);
    }), ptm("button"));
    var popupIconProps = mergeProps2(ptm("popupIcon"));
    var icon2 = props.menuIcon || /* @__PURE__ */ reactExports.createElement(BarsIcon, popupIconProps);
    var menuIcon = IconUtils.getJSXIcon(icon2, _objectSpread$l({}, popupIconProps), {
      props
    });
    var button = /* @__PURE__ */ reactExports.createElement("a", buttonProps, menuIcon);
    return button;
  };
  var start = createStartContent();
  var end = createEndContent();
  var menuButton = createMenuButton();
  var submenu = /* @__PURE__ */ reactExports.createElement(MenubarSub, {
    hostName: "Menubar",
    ariaActivedescendant: focused ? focusedItemId : void 0,
    level: 0,
    id: idState,
    ref: rootMenuRef,
    menuProps: props,
    model: processedItems,
    onLeafClick: onItemClick,
    onItemMouseEnter,
    onFocus: onFocus2,
    onBlur,
    onKeyDown,
    root: true,
    activeItemPath,
    focusedItemId: focused ? focusedItemId : void 0,
    submenuIcon: props.submenuIcon,
    ptm,
    cx
  });
  var rootProps = mergeProps2({
    id: props.id,
    ref: elementRef,
    className: classNames$1(props.className, cx("root", {
      mobileActiveState
    })),
    style: props.style
  }, MenubarBase.getOtherProps(props), ptm("root"));
  return /* @__PURE__ */ reactExports.createElement("div", rootProps, start, menuButton, submenu, end);
}));
Menubar.displayName = "Menubar";
const Navbar = () => {
  const navBarItems = [
    {
      label: "Home",
      icon: "pi pi-fw pi-home",
      url: "#/"
    },
    {
      label: "FAQ",
      icon: "pi pi-fw pi-question",
      url: "#/faq"
    }
  ];
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "navbar", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Menubar, { model: navBarItems }) });
};
const FAQ = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { style: { textAlign: "left" }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { children: "Frequently Asked Questions" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: "Why did you make this?" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
      "I wanted a way to visualize the differences of historical tax code over time and the impact on different taxable income levels. This is challenging due to inflation, does $2000 in 1970 mean anything? No, you need to convert from current dollars to 1970 dollars, evaluate based on 1970 tax code, and then convert back to current dollars. This tool does that for you.",
      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
      "This comes up frequently when debating traditional vs Roth for retirement contributions."
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: "Is this guaranteed to be correct?" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
      "No, this is a best effort attempt to model historical tax code. It's possible I've made mistakes, please",
      /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "https://github.com/AldenPeterson/historical-tax-bracket-visualization/issues/new", children: " open an issue" }),
      " if you find mistakes."
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: "Why can't you specify more than 2 personal exemptions?" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Treatment of dependents has changed somewhat significantly over time. If you have children, there are many different tax situations which would have applied over the years. For simplicity sake, those are not modeled." }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: "Why is the data only from 1950 onwards?" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Before 1950, the tax code was quite different and greatly influenced by WWII and the Great Depression. I may add this in the future however I do not believe it has a lot of value." }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: "Why are state taxes not included?" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
      "The interaction between state/federal taxes has also changed meaningfully over time. For example, in recent years SALT cap changes and impact the usefulness of including state taxes - the goal is not to reproduce FreeTaxUSA for every year.",
      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
      "Additionally, assembling  tax data for a meaningful number of states sounds extremely unpleasant. "
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: "Do you plan to expand this?" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "I'd like to make this more useful for FIRE/retirement savings. I expect this could be useful for projecting future cashflow and tax burden in retirement based on exiting traditional assets, expected returns, and expected future cash flow (ie social security, pensions, etc)." })
  ] });
};
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */
function round$1(v2) {
  return v2 + 0.5 | 0;
}
const lim = (v2, l2, h3) => Math.max(Math.min(v2, h3), l2);
function p2b(v2) {
  return lim(round$1(v2 * 2.55), 0, 255);
}
function n2b(v2) {
  return lim(round$1(v2 * 255), 0, 255);
}
function b2n(v2) {
  return lim(round$1(v2 / 2.55) / 100, 0, 1);
}
function n2p(v2) {
  return lim(round$1(v2 * 100), 0, 100);
}
const map$1 = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
const hex = [..."0123456789ABCDEF"];
const h1 = (b2) => hex[b2 & 15];
const h2 = (b2) => hex[(b2 & 240) >> 4] + hex[b2 & 15];
const eq = (b2) => (b2 & 240) >> 4 === (b2 & 15);
const isShort = (v2) => eq(v2.r) && eq(v2.g) && eq(v2.b) && eq(v2.a);
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === "#") {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map$1[str[1]] * 17,
        g: 255 & map$1[str[2]] * 17,
        b: 255 & map$1[str[3]] * 17,
        a: len === 5 ? map$1[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map$1[str[1]] << 4 | map$1[str[2]],
        g: map$1[str[3]] << 4 | map$1[str[4]],
        b: map$1[str[5]] << 4 | map$1[str[6]],
        a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
      };
    }
  }
  return ret;
}
const alpha = (a, f2) => a < 255 ? f2(a) : "";
function hexString(v2) {
  var f2 = isShort(v2) ? h1 : h2;
  return v2 ? "#" + f2(v2.r) + f2(v2.g) + f2(v2.b) + alpha(v2.a, f2) : void 0;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h3, s, l2) {
  const a = s * Math.min(l2, 1 - l2);
  const f2 = (n2, k2 = (n2 + h3 / 30) % 12) => l2 - a * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
  return [f2(0), f2(8), f2(4)];
}
function hsv2rgbn(h3, s, v2) {
  const f2 = (n2, k2 = (n2 + h3 / 60) % 6) => v2 - v2 * s * Math.max(Math.min(k2, 4 - k2, 1), 0);
  return [f2(5), f2(3), f2(1)];
}
function hwb2rgbn(h3, w2, b2) {
  const rgb = hsl2rgbn(h3, 1, 0.5);
  let i;
  if (w2 + b2 > 1) {
    i = 1 / (w2 + b2);
    w2 *= i;
    b2 *= i;
  }
  for (i = 0; i < 3; i++) {
    rgb[i] *= 1 - w2 - b2;
    rgb[i] += w2;
  }
  return rgb;
}
function hueValue(r2, g2, b2, d2, max2) {
  if (r2 === max2) {
    return (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
  }
  if (g2 === max2) {
    return (b2 - r2) / d2 + 2;
  }
  return (r2 - g2) / d2 + 4;
}
function rgb2hsl(v2) {
  const range = 255;
  const r2 = v2.r / range;
  const g2 = v2.g / range;
  const b2 = v2.b / range;
  const max2 = Math.max(r2, g2, b2);
  const min2 = Math.min(r2, g2, b2);
  const l2 = (max2 + min2) / 2;
  let h3, s, d2;
  if (max2 !== min2) {
    d2 = max2 - min2;
    s = l2 > 0.5 ? d2 / (2 - max2 - min2) : d2 / (max2 + min2);
    h3 = hueValue(r2, g2, b2, d2, max2);
    h3 = h3 * 60 + 0.5;
  }
  return [h3 | 0, s || 0, l2];
}
function calln(f2, a, b2, c2) {
  return (Array.isArray(a) ? f2(a[0], a[1], a[2]) : f2(a, b2, c2)).map(n2b);
}
function hsl2rgb(h3, s, l2) {
  return calln(hsl2rgbn, h3, s, l2);
}
function hwb2rgb(h3, w2, b2) {
  return calln(hwb2rgbn, h3, w2, b2);
}
function hsv2rgb(h3, s, v2) {
  return calln(hsv2rgbn, h3, s, v2);
}
function hue(h3) {
  return (h3 % 360 + 360) % 360;
}
function hueParse(str) {
  const m2 = HUE_RE.exec(str);
  let a = 255;
  let v2;
  if (!m2) {
    return;
  }
  if (m2[5] !== v2) {
    a = m2[6] ? p2b(+m2[5]) : n2b(+m2[5]);
  }
  const h3 = hue(+m2[2]);
  const p1 = +m2[3] / 100;
  const p2 = +m2[4] / 100;
  if (m2[1] === "hwb") {
    v2 = hwb2rgb(h3, p1, p2);
  } else if (m2[1] === "hsv") {
    v2 = hsv2rgb(h3, p1, p2);
  } else {
    v2 = hsl2rgb(h3, p1, p2);
  }
  return {
    r: v2[0],
    g: v2[1],
    b: v2[2],
    a
  };
}
function rotate(v2, deg) {
  var h3 = rgb2hsl(v2);
  h3[0] = hue(h3[0] + deg);
  h3 = hsl2rgb(h3);
  v2.r = h3[0];
  v2.g = h3[1];
  v2.b = h3[2];
}
function hslString(v2) {
  if (!v2) {
    return;
  }
  const a = rgb2hsl(v2);
  const h3 = a[0];
  const s = n2p(a[1]);
  const l2 = n2p(a[2]);
  return v2.a < 255 ? `hsla(${h3}, ${s}%, ${l2}%, ${b2n(v2.a)})` : `hsl(${h3}, ${s}%, ${l2}%)`;
}
const map = {
  x: "dark",
  Z: "light",
  Y: "re",
  X: "blu",
  W: "gr",
  V: "medium",
  U: "slate",
  A: "ee",
  T: "ol",
  S: "or",
  B: "ra",
  C: "lateg",
  D: "ights",
  R: "in",
  Q: "turquois",
  E: "hi",
  P: "ro",
  O: "al",
  N: "le",
  M: "de",
  L: "yello",
  F: "en",
  K: "ch",
  G: "arks",
  H: "ea",
  I: "ightg",
  J: "wh"
};
const names$1 = {
  OiceXe: "f0f8ff",
  antiquewEte: "faebd7",
  aqua: "ffff",
  aquamarRe: "7fffd4",
  azuY: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "0",
  blanKedOmond: "ffebcd",
  Xe: "ff",
  XeviTet: "8a2be2",
  bPwn: "a52a2a",
  burlywood: "deb887",
  caMtXe: "5f9ea0",
  KartYuse: "7fff00",
  KocTate: "d2691e",
  cSO: "ff7f50",
  cSnflowerXe: "6495ed",
  cSnsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "ffff",
  xXe: "8b",
  xcyan: "8b8b",
  xgTMnPd: "b8860b",
  xWay: "a9a9a9",
  xgYF: "6400",
  xgYy: "a9a9a9",
  xkhaki: "bdb76b",
  xmagFta: "8b008b",
  xTivegYF: "556b2f",
  xSange: "ff8c00",
  xScEd: "9932cc",
  xYd: "8b0000",
  xsOmon: "e9967a",
  xsHgYF: "8fbc8f",
  xUXe: "483d8b",
  xUWay: "2f4f4f",
  xUgYy: "2f4f4f",
  xQe: "ced1",
  xviTet: "9400d3",
  dAppRk: "ff1493",
  dApskyXe: "bfff",
  dimWay: "696969",
  dimgYy: "696969",
  dodgerXe: "1e90ff",
  fiYbrick: "b22222",
  flSOwEte: "fffaf0",
  foYstWAn: "228b22",
  fuKsia: "ff00ff",
  gaRsbSo: "dcdcdc",
  ghostwEte: "f8f8ff",
  gTd: "ffd700",
  gTMnPd: "daa520",
  Way: "808080",
  gYF: "8000",
  gYFLw: "adff2f",
  gYy: "808080",
  honeyMw: "f0fff0",
  hotpRk: "ff69b4",
  RdianYd: "cd5c5c",
  Rdigo: "4b0082",
  ivSy: "fffff0",
  khaki: "f0e68c",
  lavFMr: "e6e6fa",
  lavFMrXsh: "fff0f5",
  lawngYF: "7cfc00",
  NmoncEffon: "fffacd",
  ZXe: "add8e6",
  ZcSO: "f08080",
  Zcyan: "e0ffff",
  ZgTMnPdLw: "fafad2",
  ZWay: "d3d3d3",
  ZgYF: "90ee90",
  ZgYy: "d3d3d3",
  ZpRk: "ffb6c1",
  ZsOmon: "ffa07a",
  ZsHgYF: "20b2aa",
  ZskyXe: "87cefa",
  ZUWay: "778899",
  ZUgYy: "778899",
  ZstAlXe: "b0c4de",
  ZLw: "ffffe0",
  lime: "ff00",
  limegYF: "32cd32",
  lRF: "faf0e6",
  magFta: "ff00ff",
  maPon: "800000",
  VaquamarRe: "66cdaa",
  VXe: "cd",
  VScEd: "ba55d3",
  VpurpN: "9370db",
  VsHgYF: "3cb371",
  VUXe: "7b68ee",
  VsprRggYF: "fa9a",
  VQe: "48d1cc",
  VviTetYd: "c71585",
  midnightXe: "191970",
  mRtcYam: "f5fffa",
  mistyPse: "ffe4e1",
  moccasR: "ffe4b5",
  navajowEte: "ffdead",
  navy: "80",
  Tdlace: "fdf5e6",
  Tive: "808000",
  TivedBb: "6b8e23",
  Sange: "ffa500",
  SangeYd: "ff4500",
  ScEd: "da70d6",
  pOegTMnPd: "eee8aa",
  pOegYF: "98fb98",
  pOeQe: "afeeee",
  pOeviTetYd: "db7093",
  papayawEp: "ffefd5",
  pHKpuff: "ffdab9",
  peru: "cd853f",
  pRk: "ffc0cb",
  plum: "dda0dd",
  powMrXe: "b0e0e6",
  purpN: "800080",
  YbeccapurpN: "663399",
  Yd: "ff0000",
  Psybrown: "bc8f8f",
  PyOXe: "4169e1",
  saddNbPwn: "8b4513",
  sOmon: "fa8072",
  sandybPwn: "f4a460",
  sHgYF: "2e8b57",
  sHshell: "fff5ee",
  siFna: "a0522d",
  silver: "c0c0c0",
  skyXe: "87ceeb",
  UXe: "6a5acd",
  UWay: "708090",
  UgYy: "708090",
  snow: "fffafa",
  sprRggYF: "ff7f",
  stAlXe: "4682b4",
  tan: "d2b48c",
  teO: "8080",
  tEstN: "d8bfd8",
  tomato: "ff6347",
  Qe: "40e0d0",
  viTet: "ee82ee",
  JHt: "f5deb3",
  wEte: "ffffff",
  wEtesmoke: "f5f5f5",
  Lw: "ffff00",
  LwgYF: "9acd32"
};
function unpack() {
  const unpacked = {};
  const keys = Object.keys(names$1);
  const tkeys = Object.keys(map);
  let i, j, k2, ok2, nk2;
  for (i = 0; i < keys.length; i++) {
    ok2 = nk2 = keys[i];
    for (j = 0; j < tkeys.length; j++) {
      k2 = tkeys[j];
      nk2 = nk2.replace(k2, map[k2]);
    }
    k2 = parseInt(names$1[ok2], 16);
    unpacked[nk2] = [k2 >> 16 & 255, k2 >> 8 & 255, k2 & 255];
  }
  return unpacked;
}
let names;
function nameParse(str) {
  if (!names) {
    names = unpack();
    names.transparent = [0, 0, 0, 0];
  }
  const a = names[str.toLowerCase()];
  return a && {
    r: a[0],
    g: a[1],
    b: a[2],
    a: a.length === 4 ? a[3] : 255
  };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
  const m2 = RGB_RE.exec(str);
  let a = 255;
  let r2, g2, b2;
  if (!m2) {
    return;
  }
  if (m2[7] !== r2) {
    const v2 = +m2[7];
    a = m2[8] ? p2b(v2) : lim(v2 * 255, 0, 255);
  }
  r2 = +m2[1];
  g2 = +m2[3];
  b2 = +m2[5];
  r2 = 255 & (m2[2] ? p2b(r2) : lim(r2, 0, 255));
  g2 = 255 & (m2[4] ? p2b(g2) : lim(g2, 0, 255));
  b2 = 255 & (m2[6] ? p2b(b2) : lim(b2, 0, 255));
  return {
    r: r2,
    g: g2,
    b: b2,
    a
  };
}
function rgbString(v2) {
  return v2 && (v2.a < 255 ? `rgba(${v2.r}, ${v2.g}, ${v2.b}, ${b2n(v2.a)})` : `rgb(${v2.r}, ${v2.g}, ${v2.b})`);
}
const to = (v2) => v2 <= 31308e-7 ? v2 * 12.92 : Math.pow(v2, 1 / 2.4) * 1.055 - 0.055;
const from$1 = (v2) => v2 <= 0.04045 ? v2 / 12.92 : Math.pow((v2 + 0.055) / 1.055, 2.4);
function interpolate$1(rgb1, rgb2, t2) {
  const r2 = from$1(b2n(rgb1.r));
  const g2 = from$1(b2n(rgb1.g));
  const b2 = from$1(b2n(rgb1.b));
  return {
    r: n2b(to(r2 + t2 * (from$1(b2n(rgb2.r)) - r2))),
    g: n2b(to(g2 + t2 * (from$1(b2n(rgb2.g)) - g2))),
    b: n2b(to(b2 + t2 * (from$1(b2n(rgb2.b)) - b2))),
    a: rgb1.a + t2 * (rgb2.a - rgb1.a)
  };
}
function modHSL(v2, i, ratio) {
  if (v2) {
    let tmp = rgb2hsl(v2);
    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v2.r = tmp[0];
    v2.g = tmp[1];
    v2.b = tmp[2];
  }
}
function clone$1(v2, proto) {
  return v2 ? Object.assign(proto || {}, v2) : v2;
}
function fromObject(input2) {
  var v2 = { r: 0, g: 0, b: 0, a: 255 };
  if (Array.isArray(input2)) {
    if (input2.length >= 3) {
      v2 = { r: input2[0], g: input2[1], b: input2[2], a: 255 };
      if (input2.length > 3) {
        v2.a = n2b(input2[3]);
      }
    }
  } else {
    v2 = clone$1(input2, { r: 0, g: 0, b: 0, a: 1 });
    v2.a = n2b(v2.a);
  }
  return v2;
}
function functionParse(str) {
  if (str.charAt(0) === "r") {
    return rgbParse(str);
  }
  return hueParse(str);
}
class Color {
  constructor(input2) {
    if (input2 instanceof Color) {
      return input2;
    }
    const type = typeof input2;
    let v2;
    if (type === "object") {
      v2 = fromObject(input2);
    } else if (type === "string") {
      v2 = hexParse(input2) || nameParse(input2) || functionParse(input2);
    }
    this._rgb = v2;
    this._valid = !!v2;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var v2 = clone$1(this._rgb);
    if (v2) {
      v2.a = b2n(v2.a);
    }
    return v2;
  }
  set rgb(obj) {
    this._rgb = fromObject(obj);
  }
  rgbString() {
    return this._valid ? rgbString(this._rgb) : void 0;
  }
  hexString() {
    return this._valid ? hexString(this._rgb) : void 0;
  }
  hslString() {
    return this._valid ? hslString(this._rgb) : void 0;
  }
  mix(color2, weight) {
    if (color2) {
      const c1 = this.rgb;
      const c2 = color2.rgb;
      let w2;
      const p2 = weight === w2 ? 0.5 : weight;
      const w3 = 2 * p2 - 1;
      const a = c1.a - c2.a;
      const w1 = ((w3 * a === -1 ? w3 : (w3 + a) / (1 + w3 * a)) + 1) / 2;
      w2 = 1 - w1;
      c1.r = 255 & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 255 & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 255 & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p2 * c1.a + (1 - p2) * c2.a;
      this.rgb = c1;
    }
    return this;
  }
  interpolate(color2, t2) {
    if (color2) {
      this._rgb = interpolate$1(this._rgb, color2._rgb, t2);
    }
    return this;
  }
  clone() {
    return new Color(this.rgb);
  }
  alpha(a) {
    this._rgb.a = n2b(a);
    return this;
  }
  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }
  greyscale() {
    const rgb = this._rgb;
    const val = round$1(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }
  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }
  negate() {
    const v2 = this._rgb;
    v2.r = 255 - v2.r;
    v2.g = 255 - v2.g;
    v2.b = 255 - v2.b;
    return this;
  }
  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }
  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }
  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }
  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }
  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }
}
/*!
 * Chart.js v4.4.2
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */
function noop$2() {
}
const uid = /* @__PURE__ */ (() => {
  let id2 = 0;
  return () => id2++;
})();
function isNullOrUndef(value) {
  return value === null || typeof value === "undefined";
}
function isArray$1(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  const type = Object.prototype.toString.call(value);
  if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") {
    return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
function isNumberFinite(value) {
  return (typeof value === "number" || value instanceof Number) && isFinite(+value);
}
function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
  return typeof value === "undefined" ? defaultValue : value;
}
const toDimension = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === "function") {
    return fn.apply(thisArg, args);
  }
}
function each(loopable, fn, thisArg, reverse) {
  let i, len, keys;
  if (isArray$1(loopable)) {
    len = loopable.length;
    if (reverse) {
      for (i = len - 1; i >= 0; i--) {
        fn.call(thisArg, loopable[i], i);
      }
    } else {
      for (i = 0; i < len; i++) {
        fn.call(thisArg, loopable[i], i);
      }
    }
  } else if (isObject(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i = 0; i < len; i++) {
      fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
  }
}
function _elementsEqual(a0, a1) {
  let i, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i = 0, ilen = a0.length; i < ilen; ++i) {
    v0 = a0[i];
    v1 = a1[i];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone(source) {
  if (isArray$1(source)) {
    return source.map(clone);
  }
  if (isObject(source)) {
    const target = /* @__PURE__ */ Object.create(null);
    const keys = Object.keys(source);
    const klen = keys.length;
    let k2 = 0;
    for (; k2 < klen; ++k2) {
      target[keys[k2]] = clone(source[keys[k2]]);
    }
    return target;
  }
  return source;
}
function isValidKey(key) {
  return [
    "__proto__",
    "prototype",
    "constructor"
  ].indexOf(key) === -1;
}
function _merger(key, target, source, options2) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options2);
  } else {
    target[key] = clone(sval);
  }
}
function merge(target, source, options2) {
  const sources = isArray$1(source) ? source : [
    source
  ];
  const ilen = sources.length;
  if (!isObject(target)) {
    return target;
  }
  options2 = options2 || {};
  const merger = options2.merger || _merger;
  let current;
  for (let i = 0; i < ilen; ++i) {
    current = sources[i];
    if (!isObject(current)) {
      continue;
    }
    const keys = Object.keys(current);
    for (let k2 = 0, klen = keys.length; k2 < klen; ++k2) {
      merger(keys[k2], target, current, options2);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {
    merger: _mergerIf
  });
}
function _mergerIf(key, target, source) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone(sval);
  }
}
const keyResolvers = {
  // Chart.helpers.core resolveObjectKey should resolve empty key to root object
  "": (v2) => v2,
  // default resolvers
  x: (o) => o.x,
  y: (o) => o.y
};
function _splitKey(key) {
  const parts = key.split(".");
  const keys = [];
  let tmp = "";
  for (const part of parts) {
    tmp += part;
    if (tmp.endsWith("\\")) {
      tmp = tmp.slice(0, -1) + ".";
    } else {
      keys.push(tmp);
      tmp = "";
    }
  }
  return keys;
}
function _getKeyResolver(key) {
  const keys = _splitKey(key);
  return (obj) => {
    for (const k2 of keys) {
      if (k2 === "") {
        break;
      }
      obj = obj && obj[k2];
    }
    return obj;
  };
}
function resolveObjectKey(obj, key) {
  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
  return resolver(obj);
}
function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value) => typeof value !== "undefined";
const isFunction = (value) => typeof value === "function";
const setsEqual = (a, b2) => {
  if (a.size !== b2.size) {
    return false;
  }
  for (const item2 of a) {
    if (!b2.has(item2)) {
      return false;
    }
  }
  return true;
};
function _isClickEvent(e2) {
  return e2.type === "mouseup" || e2.type === "click" || e2.type === "contextmenu";
}
const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function almostEquals(x2, y2, epsilon) {
  return Math.abs(x2 - y2) < epsilon;
}
function niceNum(range) {
  const roundedRange = Math.round(range);
  range = almostEquals(range, roundedRange, range / 1e3) ? roundedRange : range;
  const niceRange = Math.pow(10, Math.floor(log10(range)));
  const fraction = range / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}
function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i;
  for (i = 1; i < sqrt; i++) {
    if (value % i === 0) {
      result.push(i);
      result.push(value / i);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort((a, b2) => a - b2).pop();
  return result;
}
function isNumber$1(n2) {
  return !isNaN(parseFloat(n2)) && isFinite(n2);
}
function almostWhole(x2, epsilon) {
  const rounded = Math.round(x2);
  return rounded - epsilon <= x2 && rounded + epsilon >= x2;
}
function _setMinAndMaxByKey(array, target, property) {
  let i, ilen, value;
  for (i = 0, ilen = array.length; i < ilen; i++) {
    value = array[i][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
function toRadians(degrees) {
  return degrees * (PI / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI);
}
function _decimalPlaces(x2) {
  if (!isNumberFinite(x2)) {
    return;
  }
  let e2 = 1;
  let p2 = 0;
  while (Math.round(x2 * e2) / e2 !== x2) {
    e2 *= 10;
    p2++;
  }
  return p2;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < -0.5 * PI) {
    angle += TAU;
  }
  return {
    angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a, b2) {
  return (a - b2 + PITAU) % TAU - PI;
}
function _normalizeAngle(a) {
  return (a % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a = _normalizeAngle(angle);
  const s = _normalizeAngle(start);
  const e2 = _normalizeAngle(end);
  const angleToStart = _normalizeAngle(s - a);
  const angleToEnd = _normalizeAngle(e2 - a);
  const startToAngle = _normalizeAngle(a - s);
  const endToAngle = _normalizeAngle(a - e2);
  return a === s || a === e2 || sameAngleIsFullCircle && s === e2 || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function _limitValue(value, min2, max2) {
  return Math.max(min2, Math.min(max2, value));
}
function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}
function _isBetween(value, start, end, epsilon = 1e-6) {
  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table2, value, cmp) {
  cmp = cmp || ((index2) => table2[index2] < value);
  let hi2 = table2.length - 1;
  let lo = 0;
  let mid;
  while (hi2 - lo > 1) {
    mid = lo + hi2 >> 1;
    if (cmp(mid)) {
      lo = mid;
    } else {
      hi2 = mid;
    }
  }
  return {
    lo,
    hi: hi2
  };
}
const _lookupByKey = (table2, key, value, last) => _lookup(table2, value, last ? (index2) => {
  const ti2 = table2[index2][key];
  return ti2 < value || ti2 === value && table2[index2 + 1][key] === value;
} : (index2) => table2[index2][key] < value);
const _rlookupByKey = (table2, key, value) => _lookup(table2, value, (index2) => table2[index2][key] >= value);
function _filterBetween(values, min2, max2) {
  let start = 0;
  let end = values.length;
  while (start < end && values[start] < min2) {
    start++;
  }
  while (end > start && values[end - 1] > max2) {
    end--;
  }
  return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
  "push",
  "pop",
  "shift",
  "splice",
  "unshift"
];
function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array, "_chartjs", {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [
        listener
      ]
    }
  });
  arrayEvents.forEach((key) => {
    const method = "_onData" + _capitalize(key);
    const base = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,
      value(...args) {
        const res = base.apply(this, args);
        array._chartjs.listeners.forEach((object) => {
          if (typeof object[method] === "function") {
            object[method](...args);
          }
        });
        return res;
      }
    });
  });
}
function unlistenArrayEvents(array, listener) {
  const stub = array._chartjs;
  if (!stub) {
    return;
  }
  const listeners = stub.listeners;
  const index2 = listeners.indexOf(listener);
  if (index2 !== -1) {
    listeners.splice(index2, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach((key) => {
    delete array[key];
  });
  delete array._chartjs;
}
function _arrayUnique(items) {
  const set2 = new Set(items);
  if (set2.size === items.length) {
    return items;
  }
  return Array.from(set2);
}
const requestAnimFrame = function() {
  if (typeof window === "undefined") {
    return function(callback2) {
      return callback2();
    };
  }
  return window.requestAnimationFrame;
}();
function throttled(fn, thisArg) {
  let argsToUse = [];
  let ticking = false;
  return function(...args) {
    argsToUse = args;
    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, argsToUse);
      });
    }
  };
}
function debounce(fn, delay) {
  let timeout;
  return function(...args) {
    if (delay) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay, args);
    } else {
      fn.apply(this, args);
    }
    return delay;
  };
}
const _toLeftRightCenter = (align) => align === "start" ? "left" : align === "end" ? "right" : "center";
const _alignStartEnd = (align, start, end) => align === "start" ? start : align === "end" ? end : (start + end) / 2;
const _textX = (align, left, right, rtl) => {
  const check = rtl ? "left" : "right";
  return align === check ? right : align === "center" ? (left + right) / 2 : left;
};
function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
  const pointCount = points.length;
  let start = 0;
  let count = pointCount;
  if (meta._sorted) {
    const { iScale, _parsed } = meta;
    const axis = iScale.axis;
    const { min: min2, max: max2, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) {
      start = _limitValue(Math.min(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, axis, min2).lo,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min2)).lo
      ), 0, pointCount - 1);
    }
    if (maxDefined) {
      count = _limitValue(Math.max(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, iScale.axis, max2, true).hi + 1,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max2), true).hi + 1
      ), start, pointCount) - start;
    } else {
      count = pointCount - start;
    }
  }
  return {
    start,
    count
  };
}
function _scaleRangesChanged(meta) {
  const { xScale, yScale, _scaleRanges } = meta;
  const newRanges = {
    xmin: xScale.min,
    xmax: xScale.max,
    ymin: yScale.min,
    ymax: yScale.max
  };
  if (!_scaleRanges) {
    meta._scaleRanges = newRanges;
    return true;
  }
  const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
  Object.assign(_scaleRanges, newRanges);
  return changed;
}
const atEdge = (t2) => t2 === 0 || t2 === 1;
const elasticIn = (t2, s, p2) => -(Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 - s) * TAU / p2));
const elasticOut = (t2, s, p2) => Math.pow(2, -10 * t2) * Math.sin((t2 - s) * TAU / p2) + 1;
const effects = {
  linear: (t2) => t2,
  easeInQuad: (t2) => t2 * t2,
  easeOutQuad: (t2) => -t2 * (t2 - 2),
  easeInOutQuad: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 : -0.5 * (--t2 * (t2 - 2) - 1),
  easeInCubic: (t2) => t2 * t2 * t2,
  easeOutCubic: (t2) => (t2 -= 1) * t2 * t2 + 1,
  easeInOutCubic: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 + 2),
  easeInQuart: (t2) => t2 * t2 * t2 * t2,
  easeOutQuart: (t2) => -((t2 -= 1) * t2 * t2 * t2 - 1),
  easeInOutQuart: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 : -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2),
  easeInQuint: (t2) => t2 * t2 * t2 * t2 * t2,
  easeOutQuint: (t2) => (t2 -= 1) * t2 * t2 * t2 * t2 + 1,
  easeInOutQuint: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2),
  easeInSine: (t2) => -Math.cos(t2 * HALF_PI) + 1,
  easeOutSine: (t2) => Math.sin(t2 * HALF_PI),
  easeInOutSine: (t2) => -0.5 * (Math.cos(PI * t2) - 1),
  easeInExpo: (t2) => t2 === 0 ? 0 : Math.pow(2, 10 * (t2 - 1)),
  easeOutExpo: (t2) => t2 === 1 ? 1 : -Math.pow(2, -10 * t2) + 1,
  easeInOutExpo: (t2) => atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * Math.pow(2, 10 * (t2 * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t2 * 2 - 1)) + 2),
  easeInCirc: (t2) => t2 >= 1 ? t2 : -(Math.sqrt(1 - t2 * t2) - 1),
  easeOutCirc: (t2) => Math.sqrt(1 - (t2 -= 1) * t2),
  easeInOutCirc: (t2) => (t2 /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t2 * t2) - 1) : 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1),
  easeInElastic: (t2) => atEdge(t2) ? t2 : elasticIn(t2, 0.075, 0.3),
  easeOutElastic: (t2) => atEdge(t2) ? t2 : elasticOut(t2, 0.075, 0.3),
  easeInOutElastic(t2) {
    const s = 0.1125;
    const p2 = 0.45;
    return atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * elasticIn(t2 * 2, s, p2) : 0.5 + 0.5 * elasticOut(t2 * 2 - 1, s, p2);
  },
  easeInBack(t2) {
    const s = 1.70158;
    return t2 * t2 * ((s + 1) * t2 - s);
  },
  easeOutBack(t2) {
    const s = 1.70158;
    return (t2 -= 1) * t2 * ((s + 1) * t2 + s) + 1;
  },
  easeInOutBack(t2) {
    let s = 1.70158;
    if ((t2 /= 0.5) < 1) {
      return 0.5 * (t2 * t2 * (((s *= 1.525) + 1) * t2 - s));
    }
    return 0.5 * ((t2 -= 2) * t2 * (((s *= 1.525) + 1) * t2 + s) + 2);
  },
  easeInBounce: (t2) => 1 - effects.easeOutBounce(1 - t2),
  easeOutBounce(t2) {
    const m2 = 7.5625;
    const d2 = 2.75;
    if (t2 < 1 / d2) {
      return m2 * t2 * t2;
    }
    if (t2 < 2 / d2) {
      return m2 * (t2 -= 1.5 / d2) * t2 + 0.75;
    }
    if (t2 < 2.5 / d2) {
      return m2 * (t2 -= 2.25 / d2) * t2 + 0.9375;
    }
    return m2 * (t2 -= 2.625 / d2) * t2 + 0.984375;
  },
  easeInOutBounce: (t2) => t2 < 0.5 ? effects.easeInBounce(t2 * 2) * 0.5 : effects.easeOutBounce(t2 * 2 - 1) * 0.5 + 0.5
};
function isPatternOrGradient(value) {
  if (value && typeof value === "object") {
    const type = value.toString();
    return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
  }
  return false;
}
function color(value) {
  return isPatternOrGradient(value) ? value : new Color(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
}
const numbers = [
  "x",
  "y",
  "borderWidth",
  "radius",
  "tension"
];
const colors$1 = [
  "color",
  "borderColor",
  "backgroundColor"
];
function applyAnimationsDefaults(defaults2) {
  defaults2.set("animation", {
    delay: void 0,
    duration: 1e3,
    easing: "easeOutQuart",
    fn: void 0,
    from: void 0,
    loop: void 0,
    to: void 0,
    type: void 0
  });
  defaults2.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name) => name !== "onProgress" && name !== "onComplete" && name !== "fn"
  });
  defaults2.set("animations", {
    colors: {
      type: "color",
      properties: colors$1
    },
    numbers: {
      type: "number",
      properties: numbers
    }
  });
  defaults2.describe("animations", {
    _fallback: "animation"
  });
  defaults2.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (v2) => v2 | 0
        }
      }
    }
  });
}
function applyLayoutsDefaults(defaults2) {
  defaults2.set("layout", {
    autoPadding: true,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
}
const intlCache = /* @__PURE__ */ new Map();
function getNumberFormat(locale, options2) {
  options2 = options2 || {};
  const cacheKey = locale + JSON.stringify(options2);
  let formatter = intlCache.get(cacheKey);
  if (!formatter) {
    formatter = new Intl.NumberFormat(locale, options2);
    intlCache.set(cacheKey, formatter);
  }
  return formatter;
}
function formatNumber(num, locale, options2) {
  return getNumberFormat(locale, options2).format(num);
}
const formatters = {
  values(value) {
    return isArray$1(value) ? value : "" + value;
  },
  numeric(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const locale = this.chart.options.locale;
    let notation;
    let delta = tickValue;
    if (ticks.length > 1) {
      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
      if (maxTick < 1e-4 || maxTick > 1e15) {
        notation = "scientific";
      }
      delta = calculateDelta(tickValue, ticks);
    }
    const logDelta = log10(Math.abs(delta));
    const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
    const options2 = {
      notation,
      minimumFractionDigits: numDecimal,
      maximumFractionDigits: numDecimal
    };
    Object.assign(options2, this.options.ticks.format);
    return formatNumber(tickValue, locale, options2);
  },
  logarithmic(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const remain = ticks[index2].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
    if ([
      1,
      2,
      3,
      5,
      10,
      15
    ].includes(remain) || index2 > 0.8 * ticks.length) {
      return formatters.numeric.call(this, tickValue, index2, ticks);
    }
    return "";
  }
};
function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }
  return delta;
}
var Ticks = {
  formatters
};
function applyScaleDefaults(defaults2) {
  defaults2.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    clip: true,
    grace: 0,
    grid: {
      display: true,
      lineWidth: 1,
      drawOnChartArea: true,
      drawTicks: true,
      tickLength: 8,
      tickWidth: (_ctx, options2) => options2.lineWidth,
      tickColor: (_ctx, options2) => options2.color,
      offset: false
    },
    border: {
      display: true,
      dash: [],
      dashOffset: 0,
      width: 1
    },
    title: {
      display: false,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: false,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: true,
      autoSkip: true,
      autoSkipPadding: 3,
      labelOffset: 0,
      callback: Ticks.formatters.values,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: false,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  });
  defaults2.route("scale.ticks", "color", "", "color");
  defaults2.route("scale.grid", "color", "", "borderColor");
  defaults2.route("scale.border", "color", "", "borderColor");
  defaults2.route("scale.title", "color", "", "color");
  defaults2.describe("scale", {
    _fallback: false,
    _scriptable: (name) => !name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser",
    _indexable: (name) => name !== "borderDash" && name !== "tickBorderDash" && name !== "dash"
  });
  defaults2.describe("scales", {
    _fallback: "scale"
  });
  defaults2.describe("scale.ticks", {
    _scriptable: (name) => name !== "backdropPadding" && name !== "callback",
    _indexable: (name) => name !== "backdropPadding"
  });
}
const overrides = /* @__PURE__ */ Object.create(null);
const descriptors = /* @__PURE__ */ Object.create(null);
function getScope$1(node2, key) {
  if (!key) {
    return node2;
  }
  const keys = key.split(".");
  for (let i = 0, n2 = keys.length; i < n2; ++i) {
    const k2 = keys[i];
    node2 = node2[k2] || (node2[k2] = /* @__PURE__ */ Object.create(null));
  }
  return node2;
}
function set(root9, scope, values) {
  if (typeof scope === "string") {
    return merge(getScope$1(root9, scope), values);
  }
  return merge(getScope$1(root9, ""), scope);
}
class Defaults {
  constructor(_descriptors2, _appliers) {
    this.animation = void 0;
    this.backgroundColor = "rgba(0,0,0,0.1)";
    this.borderColor = "rgba(0,0,0,0.1)";
    this.color = "#666";
    this.datasets = {};
    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
    this.elements = {};
    this.events = [
      "mousemove",
      "mouseout",
      "click",
      "touchstart",
      "touchmove"
    ];
    this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: "normal",
      lineHeight: 1.2,
      weight: null
    };
    this.hover = {};
    this.hoverBackgroundColor = (ctx, options2) => getHoverColor(options2.backgroundColor);
    this.hoverBorderColor = (ctx, options2) => getHoverColor(options2.borderColor);
    this.hoverColor = (ctx, options2) => getHoverColor(options2.color);
    this.indexAxis = "x";
    this.interaction = {
      mode: "nearest",
      intersect: true,
      includeInvisible: false
    };
    this.maintainAspectRatio = true;
    this.onHover = null;
    this.onClick = null;
    this.parsing = true;
    this.plugins = {};
    this.responsive = true;
    this.scale = void 0;
    this.scales = {};
    this.showLine = true;
    this.drawActiveElementsOnTop = true;
    this.describe(_descriptors2);
    this.apply(_appliers);
  }
  set(scope, values) {
    return set(this, scope, values);
  }
  get(scope) {
    return getScope$1(this, scope);
  }
  describe(scope, values) {
    return set(descriptors, scope, values);
  }
  override(scope, values) {
    return set(overrides, scope, values);
  }
  route(scope, name, targetScope, targetName) {
    const scopeObject = getScope$1(this, scope);
    const targetScopeObject = getScope$1(this, targetScope);
    const privateName = "_" + name;
    Object.defineProperties(scopeObject, {
      [privateName]: {
        value: scopeObject[name],
        writable: true
      },
      [name]: {
        enumerable: true,
        get() {
          const local = this[privateName];
          const target = targetScopeObject[targetName];
          if (isObject(local)) {
            return Object.assign({}, target, local);
          }
          return valueOrDefault(local, target);
        },
        set(value) {
          this[privateName] = value;
        }
      }
    });
  }
  apply(appliers) {
    appliers.forEach((apply) => apply(this));
  }
}
var defaults = /* @__PURE__ */ new Defaults({
  _scriptable: (name) => !name.startsWith("on"),
  _indexable: (name) => name !== "events",
  hover: {
    _fallback: "interaction"
  },
  interaction: {
    _scriptable: false,
    _indexable: false
  }
}, [
  applyAnimationsDefaults,
  applyLayoutsDefaults,
  applyScaleDefaults
]);
function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
function _measureText(ctx, data, gc2, longest, string) {
  let textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc2.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  let data = cache.data = cache.data || {};
  let gc2 = cache.garbageCollect = cache.garbageCollect || [];
  if (cache.font !== font) {
    data = cache.data = {};
    gc2 = cache.garbageCollect = [];
    cache.font = font;
  }
  ctx.save();
  ctx.font = font;
  let longest = 0;
  const ilen = arrayOfThings.length;
  let i, j, jlen, thing, nestedThing;
  for (i = 0; i < ilen; i++) {
    thing = arrayOfThings[i];
    if (thing !== void 0 && thing !== null && !isArray$1(thing)) {
      longest = _measureText(ctx, data, gc2, longest, thing);
    } else if (isArray$1(thing)) {
      for (j = 0, jlen = thing.length; j < jlen; j++) {
        nestedThing = thing[j];
        if (nestedThing !== void 0 && nestedThing !== null && !isArray$1(nestedThing)) {
          longest = _measureText(ctx, data, gc2, longest, nestedThing);
        }
      }
    }
  }
  ctx.restore();
  const gcLen = gc2.length / 2;
  if (gcLen > arrayOfThings.length) {
    for (i = 0; i < gcLen; i++) {
      delete data[gc2[i]];
    }
    gc2.splice(0, gcLen);
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
  ctx = ctx || canvas.getContext("2d");
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}
function drawPoint(ctx, options2, x2, y2) {
  drawPointLegend(ctx, options2, x2, y2, null);
}
function drawPointLegend(ctx, options2, x2, y2, w2) {
  let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
  const style = options2.pointStyle;
  const rotation = options2.rotation;
  const radius = options2.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;
  if (style && typeof style === "object") {
    type = style.toString();
    if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
      ctx.save();
      ctx.translate(x2, y2);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
    default:
      if (w2) {
        ctx.ellipse(x2, y2, w2 / 2, radius, 0, 0, TAU);
      } else {
        ctx.arc(x2, y2, radius, 0, TAU);
      }
      ctx.closePath();
      break;
    case "triangle":
      width = w2 ? w2 / 2 : radius;
      ctx.moveTo(x2 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      ctx.closePath();
      break;
    case "rectRounded":
      cornerRadius = radius * 0.516;
      size = radius - cornerRadius;
      xOffset = Math.cos(rad + QUARTER_PI) * size;
      xOffsetW = Math.cos(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size);
      yOffset = Math.sin(rad + QUARTER_PI) * size;
      yOffsetW = Math.sin(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size);
      ctx.arc(x2 - xOffsetW, y2 - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
      ctx.arc(x2 + yOffsetW, y2 - xOffset, cornerRadius, rad - HALF_PI, rad);
      ctx.arc(x2 + xOffsetW, y2 + yOffset, cornerRadius, rad, rad + HALF_PI);
      ctx.arc(x2 - yOffsetW, y2 + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
      ctx.closePath();
      break;
    case "rect":
      if (!rotation) {
        size = Math.SQRT1_2 * radius;
        width = w2 ? w2 / 2 : size;
        ctx.rect(x2 - width, y2 - size, 2 * width, 2 * size);
        break;
      }
      rad += QUARTER_PI;
    case "rectRot":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      ctx.closePath();
      break;
    case "crossRot":
      rad += QUARTER_PI;
    case "cross":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      break;
    case "star":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      rad += QUARTER_PI;
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      break;
    case "line":
      xOffset = w2 ? w2 / 2 : Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x2 - xOffset, y2 - yOffset);
      ctx.lineTo(x2 + xOffset, y2 + yOffset);
      break;
    case "dash":
      ctx.moveTo(x2, y2);
      ctx.lineTo(x2 + Math.cos(rad) * (w2 ? w2 / 2 : radius), y2 + Math.sin(rad) * radius);
      break;
    case false:
      ctx.closePath();
      break;
  }
  ctx.fill();
  if (options2.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip, mode) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  if (mode === "middle") {
    const midpoint = (previous.x + target.x) / 2;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode === "after" !== !!flip) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }
  ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }
  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }
  if (opts.color) {
    ctx.fillStyle = opts.color;
  }
  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }
  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}
function decorateText(ctx, x2, y2, line2, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics = ctx.measureText(line2);
    const left = x2 - metrics.actualBoundingBoxLeft;
    const right = x2 + metrics.actualBoundingBoxRight;
    const top = y2 - metrics.actualBoundingBoxAscent;
    const bottom = y2 + metrics.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}
function drawBackdrop(ctx, opts) {
  const oldColor = ctx.fillStyle;
  ctx.fillStyle = opts.color;
  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
  ctx.fillStyle = oldColor;
}
function renderText(ctx, text, x2, y2, font, opts = {}) {
  const lines = isArray$1(text) ? text : [
    text
  ];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
  let i, line2;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);
  for (i = 0; i < lines.length; ++i) {
    line2 = lines[i];
    if (opts.backdrop) {
      drawBackdrop(ctx, opts.backdrop);
    }
    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }
      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }
      ctx.strokeText(line2, x2, y2, opts.maxWidth);
    }
    ctx.fillText(line2, x2, y2, opts.maxWidth);
    decorateText(ctx, x2, y2, line2, opts);
    y2 += Number(font.lineHeight);
  }
  ctx.restore();
}
function addRoundedRectPath(ctx, rect) {
  const { x: x2, y: y2, w: w2, h: h3, radius } = rect;
  ctx.arc(x2 + radius.topLeft, y2 + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
  ctx.lineTo(x2, y2 + h3 - radius.bottomLeft);
  ctx.arc(x2 + radius.bottomLeft, y2 + h3 - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x2 + w2 - radius.bottomRight, y2 + h3);
  ctx.arc(x2 + w2 - radius.bottomRight, y2 + h3 - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x2 + w2, y2 + radius.topRight);
  ctx.arc(x2 + w2 - radius.topRight, y2 + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x2 + radius.topLeft, y2);
}
const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
function toLineHeight(value, size) {
  const matches = ("" + value).match(LINE_HEIGHT);
  if (!matches || matches[1] === "normal") {
    return size * 1.2;
  }
  value = +matches[2];
  switch (matches[3]) {
    case "px":
      return value;
    case "%":
      value /= 100;
      break;
  }
  return size * value;
}
const numberOrZero = (v2) => +v2 || 0;
function _readValueToProps(value, props) {
  const ret = {};
  const objProps = isObject(props);
  const keys = objProps ? Object.keys(props) : props;
  const read = isObject(value) ? objProps ? (prop) => valueOrDefault(value[prop], value[props[prop]]) : (prop) => value[prop] : () => value;
  for (const prop of keys) {
    ret[prop] = numberOrZero(read(prop));
  }
  return ret;
}
function toTRBL(value) {
  return _readValueToProps(value, {
    top: "y",
    right: "x",
    bottom: "y",
    left: "x"
  });
}
function toTRBLCorners(value) {
  return _readValueToProps(value, [
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight"
  ]);
}
function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}
function toFont(options2, fallback) {
  options2 = options2 || {};
  fallback = fallback || defaults.font;
  let size = valueOrDefault(options2.size, fallback.size);
  if (typeof size === "string") {
    size = parseInt(size, 10);
  }
  let style = valueOrDefault(options2.style, fallback.style);
  if (style && !("" + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = void 0;
  }
  const font = {
    family: valueOrDefault(options2.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options2.lineHeight, fallback.lineHeight), size),
    size,
    style,
    weight: valueOrDefault(options2.weight, fallback.weight),
    string: ""
  };
  font.string = toFontString(font);
  return font;
}
function resolve(inputs, context, index2, info) {
  let cacheable = true;
  let i, ilen, value;
  for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    value = inputs[i];
    if (value === void 0) {
      continue;
    }
    if (context !== void 0 && typeof value === "function") {
      value = value(context);
      cacheable = false;
    }
    if (index2 !== void 0 && isArray$1(value)) {
      value = value[index2 % value.length];
      cacheable = false;
    }
    if (value !== void 0) {
      if (info && !cacheable) {
        info.cacheable = false;
      }
      return value;
    }
  }
}
function _addGrace(minmax, grace, beginAtZero) {
  const { min: min2, max: max2 } = minmax;
  const change = toDimension(grace, (max2 - min2) / 2);
  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;
  return {
    min: keepZero(min2, -Math.abs(change)),
    max: keepZero(max2, change)
  };
}
function createContext(parentContext, context) {
  return Object.assign(Object.create(parentContext), context);
}
function _createResolver(scopes, prefixes = [
  ""
], rootScopes, fallback, getTarget = () => scopes[0]) {
  const finalRootScopes = rootScopes || scopes;
  if (typeof fallback === "undefined") {
    fallback = _resolve("_fallback", scopes);
  }
  const cache = {
    [Symbol.toStringTag]: "Object",
    _cacheable: true,
    _scopes: scopes,
    _rootScopes: finalRootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: (scope) => _createResolver([
      scope,
      ...scopes
    ], prefixes, finalRootScopes, fallback)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes[0][prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop) {
      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes, target));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes[0]);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      target[prop] = storage[prop] = value;
      delete target._keys;
      return true;
    }
  });
}
function _attachContext(proxy, context, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context,
    _subProxy: subProxy,
    _stack: /* @__PURE__ */ new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop, receiver) {
      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
        enumerable: true,
        configurable: true
      } : void 0 : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return Reflect.has(proxy, prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys() {
      return Reflect.ownKeys(proxy);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }
  });
}
function _descriptors(proxy, defaults2 = {
  scriptable: true,
  indexable: true
}) {
  const { _scriptable = defaults2.scriptable, _indexable = defaults2.indexable, _allKeys = defaults2.allKeys } = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
  };
}
const readKey = (prefix2, name) => prefix2 ? prefix2 + _capitalize(name) : name;
const needsSubResolver = (prop, value) => isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve2) {
  if (Object.prototype.hasOwnProperty.call(target, prop)) {
    return target[prop];
  }
  const value = resolve2();
  target[prop] = value;
  return value;
}
function _resolveWithContext(target, prop, receiver) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  let value = _proxy[prop];
  if (isFunction(value) && descriptors2.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }
  if (isArray$1(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors2.isIndexable);
  }
  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors2);
  }
  return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
  const { _proxy, _context, _subProxy, _stack } = target;
  if (_stack.has(prop)) {
    throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
  }
  _stack.add(prop);
  let value = getValue(_context, _subProxy || receiver);
  _stack.delete(prop);
  if (needsSubResolver(prop, value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }
  return value;
}
function _resolveArray(prop, value, target, isIndexable) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  if (typeof _context.index !== "undefined" && isIndexable(prop)) {
    return value[_context.index % value.length];
  } else if (isObject(value[0])) {
    const arr = value;
    const scopes = _proxy._scopes.filter((s) => s !== arr);
    value = [];
    for (const item2 of arr) {
      const resolver = createSubResolver(scopes, _proxy, prop, item2);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
    }
  }
  return value;
}
function resolveFallback(fallback, prop, value) {
  return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent) => key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : void 0;
function addScopes(set2, parentScopes, key, parentFallback, value) {
  for (const parent of parentScopes) {
    const scope = getScope(key, parent);
    if (scope) {
      set2.add(scope);
      const fallback = resolveFallback(scope._fallback, key, value);
      if (typeof fallback !== "undefined" && fallback !== key && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && typeof parentFallback !== "undefined" && key !== parentFallback) {
      return null;
    }
  }
  return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [
    ...parentScopes,
    ...rootScopes
  ];
  const set2 = /* @__PURE__ */ new Set();
  set2.add(value);
  let key = addScopesFromKey(set2, allScopes, prop, fallback || prop, value);
  if (key === null) {
    return false;
  }
  if (typeof fallback !== "undefined" && fallback !== prop) {
    key = addScopesFromKey(set2, allScopes, fallback, key, value);
    if (key === null) {
      return false;
    }
  }
  return _createResolver(Array.from(set2), [
    ""
  ], rootScopes, fallback, () => subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set2, allScopes, key, fallback, item2) {
  while (key) {
    key = addScopes(set2, allScopes, key, fallback, item2);
  }
  return key;
}
function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();
  if (!(prop in parent)) {
    parent[prop] = {};
  }
  const target = parent[prop];
  if (isArray$1(target) && isObject(value)) {
    return value;
  }
  return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
  let value;
  for (const prefix2 of prefixes) {
    value = _resolve(readKey(prefix2, prop), scopes);
    if (typeof value !== "undefined") {
      return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
    }
  }
}
function _resolve(key, scopes) {
  for (const scope of scopes) {
    if (!scope) {
      continue;
    }
    const value = scope[key];
    if (typeof value !== "undefined") {
      return value;
    }
  }
}
function getKeysFromAllScopes(target) {
  let keys = target._keys;
  if (!keys) {
    keys = target._keys = resolveKeysFromAllScopes(target._scopes);
  }
  return keys;
}
function resolveKeysFromAllScopes(scopes) {
  const set2 = /* @__PURE__ */ new Set();
  for (const scope of scopes) {
    for (const key of Object.keys(scope).filter((k2) => !k2.startsWith("_"))) {
      set2.add(key);
    }
  }
  return Array.from(set2);
}
const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i) => i < points.length && !points[i].skip && points[i];
const getValueAxis = (indexAxis) => indexAxis === "x" ? "y" : "x";
function splineCurve(firstPoint, middlePoint, afterPoint, t2) {
  const previous = firstPoint.skip ? middlePoint : firstPoint;
  const current = middlePoint;
  const next2 = afterPoint.skip ? middlePoint : afterPoint;
  const d01 = distanceBetweenPoints(current, previous);
  const d12 = distanceBetweenPoints(next2, current);
  let s01 = d01 / (d01 + d12);
  let s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  const fa2 = t2 * s01;
  const fb2 = t2 * s12;
  return {
    previous: {
      x: current.x - fa2 * (next2.x - previous.x),
      y: current.y - fa2 * (next2.y - previous.y)
    },
    next: {
      x: current.x + fb2 * (next2.x - previous.x),
      y: current.y + fb2 * (next2.y - previous.y)
    }
  };
}
function monotoneAdjust(points, deltaK, mK) {
  const pointsLen = points.length;
  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i = 0; i < pointsLen - 1; ++i) {
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent || !pointAfter) {
      continue;
    }
    if (almostEquals(deltaK[i], 0, EPSILON)) {
      mK[i] = mK[i + 1] = 0;
      continue;
    }
    alphaK = mK[i] / deltaK[i];
    betaK = mK[i + 1] / deltaK[i];
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
      continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    mK[i] = alphaK * tauK * deltaK[i];
    mK[i + 1] = betaK * tauK * deltaK[i];
  }
}
function monotoneCompute(points, mK, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  let delta, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent) {
      continue;
    }
    const iPixel = pointCurrent[indexAxis];
    const vPixel = pointCurrent[valueAxis];
    if (pointBefore) {
      delta = (iPixel - pointBefore[indexAxis]) / 3;
      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
    }
    if (pointAfter) {
      delta = (pointAfter[indexAxis] - iPixel) / 3;
      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
    }
  }
}
function splineCurveMonotone(points, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  const deltaK = Array(pointsLen).fill(0);
  const mK = Array(pointsLen);
  let i, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent) {
      continue;
    }
    if (pointAfter) {
      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
    }
    mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
  }
  monotoneAdjust(points, deltaK, mK);
  monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min2, max2) {
  return Math.max(Math.min(pt, max2), min2);
}
function capBezierPoints(points, area) {
  let i, ilen, point, inArea, inAreaPrev;
  let inAreaNext = _isPointInArea(points[0], area);
  for (i = 0, ilen = points.length; i < ilen; ++i) {
    inAreaPrev = inArea;
    inArea = inAreaNext;
    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
    if (!inArea) {
      continue;
    }
    point = points[i];
    if (inAreaPrev) {
      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
    }
    if (inAreaNext) {
      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
    }
  }
}
function _updateBezierControlPoints(points, options2, area, loop, indexAxis) {
  let i, ilen, point, controlPoints;
  if (options2.spanGaps) {
    points = points.filter((pt) => !pt.skip);
  }
  if (options2.cubicInterpolationMode === "monotone") {
    splineCurveMonotone(points, indexAxis);
  } else {
    let prev2 = loop ? points[points.length - 1] : points[0];
    for (i = 0, ilen = points.length; i < ilen; ++i) {
      point = points[i];
      controlPoints = splineCurve(prev2, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options2.tension);
      point.cp1x = controlPoints.previous.x;
      point.cp1y = controlPoints.previous.y;
      point.cp2x = controlPoints.next.x;
      point.cp2y = controlPoints.next.y;
      prev2 = point;
    }
  }
  if (options2.capBezierPoints) {
    capBezierPoints(points, area);
  }
}
function _isDomSupported() {
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function _getParentNode(domNode) {
  let parent = domNode.parentNode;
  if (parent && parent.toString() === "[object ShadowRoot]") {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node2, parentProperty) {
  let valueInPixels;
  if (typeof styleValue === "string") {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf("%") !== -1) {
      valueInPixels = valueInPixels / 100 * node2.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
const getComputedStyle$2 = (element) => element.ownerDocument.defaultView.getComputedStyle(element, null);
function getStyle(el2, property) {
  return getComputedStyle$2(el2).getPropertyValue(property);
}
const positions = [
  "top",
  "right",
  "bottom",
  "left"
];
function getPositionedStyle(styles2, style, suffix) {
  const result = {};
  suffix = suffix ? "-" + suffix : "";
  for (let i = 0; i < 4; i++) {
    const pos = positions[i];
    result[pos] = parseFloat(styles2[style + "-" + pos + suffix]) || 0;
  }
  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}
const useOffsetPos = (x2, y2, target) => (x2 > 0 || y2 > 0) && (!target || !target.shadowRoot);
function getCanvasPosition(e2, canvas) {
  const touches = e2.touches;
  const source = touches && touches.length ? touches[0] : e2;
  const { offsetX, offsetY } = source;
  let box = false;
  let x2, y2;
  if (useOffsetPos(offsetX, offsetY, e2.target)) {
    x2 = offsetX;
    y2 = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x2 = source.clientX - rect.left;
    y2 = source.clientY - rect.top;
    box = true;
  }
  return {
    x: x2,
    y: y2,
    box
  };
}
function getRelativePosition(event, chart) {
  if ("native" in event) {
    return event;
  }
  const { canvas, currentDevicePixelRatio } = chart;
  const style = getComputedStyle$2(canvas);
  const borderBox = style.boxSizing === "border-box";
  const paddings = getPositionedStyle(style, "padding");
  const borders = getPositionedStyle(style, "border", "width");
  const { x: x2, y: y2, box } = getCanvasPosition(event, canvas);
  const xOffset = paddings.left + (box && borders.left);
  const yOffset = paddings.top + (box && borders.top);
  let { width, height } = chart;
  if (borderBox) {
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  return {
    x: Math.round((x2 - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y2 - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}
function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;
  if (width === void 0 || height === void 0) {
    const container = _getParentNode(canvas);
    if (!container) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container.getBoundingClientRect();
      const containerStyle2 = getComputedStyle$2(container);
      const containerBorder = getPositionedStyle(containerStyle2, "border", "width");
      const containerPadding = getPositionedStyle(containerStyle2, "padding");
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle2.maxWidth, container, "clientWidth");
      maxHeight = parseMaxStyle(containerStyle2.maxHeight, container, "clientHeight");
    }
  }
  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}
const round1 = (v2) => Math.round(v2 * 10) / 10;
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
  const style = getComputedStyle$2(canvas);
  const margins = getPositionedStyle(style, "margin");
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let { width, height } = containerSize;
  if (style.boxSizing === "content-box") {
    const borders = getPositionedStyle(style, "border", "width");
    const paddings = getPositionedStyle(style, "padding");
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
  if (width && !height) {
    height = round1(width / 2);
  }
  const maintainHeight = bbWidth !== void 0 || bbHeight !== void 0;
  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
    height = containerSize.height;
    width = round1(Math.floor(height * aspectRatio));
  }
  return {
    width,
    height
  };
}
function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = Math.floor(chart.height);
  chart.width = Math.floor(chart.width);
  const canvas = chart.canvas;
  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }
  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }
  return false;
}
const supportsEventListenerOptions = function() {
  let passiveSupported = false;
  try {
    const options2 = {
      get passive() {
        passiveSupported = true;
        return false;
      }
    };
    if (_isDomSupported()) {
      window.addEventListener("test", null, options2);
      window.removeEventListener("test", null, options2);
    }
  } catch (e2) {
  }
  return passiveSupported;
}();
function readUsedSize(element, property) {
  const value = getStyle(element, property);
  const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : void 0;
}
function _pointInLine(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: p1.y + t2 * (p2.y - p1.y)
  };
}
function _steppedInterpolation(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: mode === "middle" ? t2 < 0.5 ? p1.y : p2.y : mode === "after" ? t2 < 1 ? p1.y : p2.y : t2 > 0 ? p2.y : p1.y
  };
}
function _bezierInterpolation(p1, p2, t2, mode) {
  const cp1 = {
    x: p1.cp2x,
    y: p1.cp2y
  };
  const cp2 = {
    x: p2.cp1x,
    y: p2.cp1y
  };
  const a = _pointInLine(p1, cp1, t2);
  const b2 = _pointInLine(cp1, cp2, t2);
  const c2 = _pointInLine(cp2, p2, t2);
  const d2 = _pointInLine(a, b2, t2);
  const e2 = _pointInLine(b2, c2, t2);
  return _pointInLine(d2, e2, t2);
}
const getRightToLeftAdapter = function(rectX, width) {
  return {
    x(x2) {
      return rectX + rectX + width - x2;
    },
    setWidth(w2) {
      width = w2;
    },
    textAlign(align) {
      if (align === "center") {
        return align;
      }
      return align === "right" ? "left" : "right";
    },
    xPlus(x2, value) {
      return x2 - value;
    },
    leftForLtr(x2, itemWidth) {
      return x2 - itemWidth;
    }
  };
};
const getLeftToRightAdapter = function() {
  return {
    x(x2) {
      return x2;
    },
    setWidth(w2) {
    },
    textAlign(align) {
      return align;
    },
    xPlus(x2, value) {
      return x2 + value;
    },
    leftForLtr(x2, _itemWidth) {
      return x2;
    }
  };
};
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
  let style, original;
  if (direction === "ltr" || direction === "rtl") {
    style = ctx.canvas.style;
    original = [
      style.getPropertyValue("direction"),
      style.getPropertyPriority("direction")
    ];
    style.setProperty("direction", direction, "important");
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== void 0) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty("direction", original[0], original[1]);
  }
}
function propertyFn(property) {
  if (property === "angle") {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle
    };
  }
  return {
    between: _isBetween,
    compare: (a, b2) => a - b2,
    normalize: (x2) => x2
  };
}
function normalizeSegment({ start, end, count, loop, style }) {
  return {
    start: start % count,
    end: end % count,
    loop: loop && (end - start + 1) % count === 0,
    style
  };
}
function getSegment(segment, points, bounds) {
  const { property, start: startBound, end: endBound } = bounds;
  const { between: between2, normalize } = propertyFn(property);
  const count = points.length;
  let { start, end, loop } = segment;
  let i, ilen;
  if (loop) {
    start += count;
    end += count;
    for (i = 0, ilen = count; i < ilen; ++i) {
      if (!between2(normalize(points[start % count][property]), startBound, endBound)) {
        break;
      }
      start--;
      end--;
    }
    start %= count;
    end %= count;
  }
  if (end < start) {
    end += count;
  }
  return {
    start,
    end,
    loop,
    style: segment.style
  };
}
function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [
      segment
    ];
  }
  const { property, start: startBound, end: endBound } = bounds;
  const count = points.length;
  const { compare, between: between2, normalize } = propertyFn(property);
  const { start, end, loop, style } = getSegment(segment, points, bounds);
  const result = [];
  let inside = false;
  let subStart = null;
  let value, point, prevValue;
  const startIsBefore = () => between2(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
  const endIsBefore = () => compare(endBound, value) === 0 || between2(endBound, prevValue, value);
  const shouldStart = () => inside || startIsBefore();
  const shouldStop = () => !inside || endIsBefore();
  for (let i = start, prev2 = start; i <= end; ++i) {
    point = points[i % count];
    if (point.skip) {
      continue;
    }
    value = normalize(point[property]);
    if (value === prevValue) {
      continue;
    }
    inside = between2(value, startBound, endBound);
    if (subStart === null && shouldStart()) {
      subStart = compare(value, startBound) === 0 ? i : prev2;
    }
    if (subStart !== null && shouldStop()) {
      result.push(normalizeSegment({
        start: subStart,
        end: i,
        loop,
        count,
        style
      }));
      subStart = null;
    }
    prev2 = i;
    prevValue = value;
  }
  if (subStart !== null) {
    result.push(normalizeSegment({
      start: subStart,
      end,
      loop,
      count,
      style
    }));
  }
  return result;
}
function _boundSegments(line2, bounds) {
  const result = [];
  const segments = line2.segments;
  for (let i = 0; i < segments.length; i++) {
    const sub = _boundSegment(segments[i], line2.points, bounds);
    if (sub.length) {
      result.push(...sub);
    }
  }
  return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
  let start = 0;
  let end = count - 1;
  if (loop && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }
  while (start < count && points[start].skip) {
    start++;
  }
  start %= count;
  if (loop) {
    end += start;
  }
  while (end > start && points[end % count].skip) {
    end--;
  }
  end %= count;
  return {
    start,
    end
  };
}
function solidSegments(points, start, max2, loop) {
  const count = points.length;
  const result = [];
  let last = start;
  let prev2 = points[start];
  let end;
  for (end = start + 1; end <= max2; ++end) {
    const cur = points[end % count];
    if (cur.skip || cur.stop) {
      if (!prev2.skip) {
        loop = false;
        result.push({
          start: start % count,
          end: (end - 1) % count,
          loop
        });
        start = last = cur.stop ? end : null;
      }
    } else {
      last = end;
      if (prev2.skip) {
        start = end;
      }
    }
    prev2 = cur;
  }
  if (last !== null) {
    result.push({
      start: start % count,
      end: last % count,
      loop
    });
  }
  return result;
}
function _computeSegments(line2, segmentOptions) {
  const points = line2.points;
  const spanGaps = line2.options.spanGaps;
  const count = points.length;
  if (!count) {
    return [];
  }
  const loop = !!line2._loop;
  const { start, end } = findStartAndEnd(points, count, loop, spanGaps);
  if (spanGaps === true) {
    return splitByStyles(line2, [
      {
        start,
        end,
        loop
      }
    ], points, segmentOptions);
  }
  const max2 = end < start ? end + count : end;
  const completeLoop = !!line2._fullLoop && start === 0 && end === count - 1;
  return splitByStyles(line2, solidSegments(points, start, max2, completeLoop), points, segmentOptions);
}
function splitByStyles(line2, segments, points, segmentOptions) {
  if (!segmentOptions || !segmentOptions.setContext || !points) {
    return segments;
  }
  return doSplitByStyles(line2, segments, points, segmentOptions);
}
function doSplitByStyles(line2, segments, points, segmentOptions) {
  const chartContext = line2._chart.getContext();
  const baseStyle2 = readStyle(line2.options);
  const { _datasetIndex: datasetIndex, options: { spanGaps } } = line2;
  const count = points.length;
  const result = [];
  let prevStyle = baseStyle2;
  let start = segments[0].start;
  let i = start;
  function addStyle(s, e2, l2, st) {
    const dir = spanGaps ? -1 : 1;
    if (s === e2) {
      return;
    }
    s += count;
    while (points[s % count].skip) {
      s -= dir;
    }
    while (points[e2 % count].skip) {
      e2 += dir;
    }
    if (s % count !== e2 % count) {
      result.push({
        start: s % count,
        end: e2 % count,
        loop: l2,
        style: st
      });
      prevStyle = st;
      start = e2 % count;
    }
  }
  for (const segment of segments) {
    start = spanGaps ? start : segment.start;
    let prev2 = points[start % count];
    let style;
    for (i = start + 1; i <= segment.end; i++) {
      const pt = points[i % count];
      style = readStyle(segmentOptions.setContext(createContext(chartContext, {
        type: "segment",
        p0: prev2,
        p1: pt,
        p0DataIndex: (i - 1) % count,
        p1DataIndex: i % count,
        datasetIndex
      })));
      if (styleChanged(style, prevStyle)) {
        addStyle(start, i - 1, segment.loop, prevStyle);
      }
      prev2 = pt;
      prevStyle = style;
    }
    if (start < i - 1) {
      addStyle(start, i - 1, segment.loop, prevStyle);
    }
  }
  return result;
}
function readStyle(options2) {
  return {
    backgroundColor: options2.backgroundColor,
    borderCapStyle: options2.borderCapStyle,
    borderDash: options2.borderDash,
    borderDashOffset: options2.borderDashOffset,
    borderJoinStyle: options2.borderJoinStyle,
    borderWidth: options2.borderWidth,
    borderColor: options2.borderColor
  };
}
function styleChanged(style, prevStyle) {
  if (!prevStyle) {
    return false;
  }
  const cache = [];
  const replacer = function(key, value) {
    if (!isPatternOrGradient(value)) {
      return value;
    }
    if (!cache.includes(value)) {
      cache.push(value);
    }
    return cache.indexOf(value);
  };
  return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}
/*!
 * Chart.js v4.4.2
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */
class Animator {
  constructor() {
    this._request = null;
    this._charts = /* @__PURE__ */ new Map();
    this._running = false;
    this._lastDate = void 0;
  }
  _notify(chart, anims, date, type) {
    const callbacks = anims.listeners[type];
    const numSteps = anims.duration;
    callbacks.forEach((fn) => fn({
      chart,
      initial: anims.initial,
      numSteps,
      currentStep: Math.min(date - anims.start, numSteps)
    }));
  }
  _refresh() {
    if (this._request) {
      return;
    }
    this._running = true;
    this._request = requestAnimFrame.call(window, () => {
      this._update();
      this._request = null;
      if (this._running) {
        this._refresh();
      }
    });
  }
  _update(date = Date.now()) {
    let remaining = 0;
    this._charts.forEach((anims, chart) => {
      if (!anims.running || !anims.items.length) {
        return;
      }
      const items = anims.items;
      let i = items.length - 1;
      let draw2 = false;
      let item2;
      for (; i >= 0; --i) {
        item2 = items[i];
        if (item2._active) {
          if (item2._total > anims.duration) {
            anims.duration = item2._total;
          }
          item2.tick(date);
          draw2 = true;
        } else {
          items[i] = items[items.length - 1];
          items.pop();
        }
      }
      if (draw2) {
        chart.draw();
        this._notify(chart, anims, date, "progress");
      }
      if (!items.length) {
        anims.running = false;
        this._notify(chart, anims, date, "complete");
        anims.initial = false;
      }
      remaining += items.length;
    });
    this._lastDate = date;
    if (remaining === 0) {
      this._running = false;
    }
  }
  _getAnims(chart) {
    const charts = this._charts;
    let anims = charts.get(chart);
    if (!anims) {
      anims = {
        running: false,
        initial: true,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      };
      charts.set(chart, anims);
    }
    return anims;
  }
  listen(chart, event, cb2) {
    this._getAnims(chart).listeners[event].push(cb2);
  }
  add(chart, items) {
    if (!items || !items.length) {
      return;
    }
    this._getAnims(chart).items.push(...items);
  }
  has(chart) {
    return this._getAnims(chart).items.length > 0;
  }
  start(chart) {
    const anims = this._charts.get(chart);
    if (!anims) {
      return;
    }
    anims.running = true;
    anims.start = Date.now();
    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
    this._refresh();
  }
  running(chart) {
    if (!this._running) {
      return false;
    }
    const anims = this._charts.get(chart);
    if (!anims || !anims.running || !anims.items.length) {
      return false;
    }
    return true;
  }
  stop(chart) {
    const anims = this._charts.get(chart);
    if (!anims || !anims.items.length) {
      return;
    }
    const items = anims.items;
    let i = items.length - 1;
    for (; i >= 0; --i) {
      items[i].cancel();
    }
    anims.items = [];
    this._notify(chart, anims, Date.now(), "complete");
  }
  remove(chart) {
    return this._charts.delete(chart);
  }
}
var animator = /* @__PURE__ */ new Animator();
const transparent = "transparent";
const interpolators = {
  boolean(from2, to2, factor) {
    return factor > 0.5 ? to2 : from2;
  },
  color(from2, to2, factor) {
    const c0 = color(from2 || transparent);
    const c1 = c0.valid && color(to2 || transparent);
    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to2;
  },
  number(from2, to2, factor) {
    return from2 + (to2 - from2) * factor;
  }
};
class Animation {
  constructor(cfg, target, prop, to2) {
    const currentValue = target[prop];
    to2 = resolve([
      cfg.to,
      to2,
      currentValue,
      cfg.from
    ]);
    const from2 = resolve([
      cfg.from,
      currentValue,
      to2
    ]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || typeof from2];
    this._easing = effects[cfg.easing] || effects.linear;
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = this._total = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from2;
    this._to = to2;
    this._promises = void 0;
  }
  active() {
    return this._active;
  }
  update(cfg, to2, date) {
    if (this._active) {
      this._notify(false);
      const currentValue = this._target[this._prop];
      const elapsed = date - this._start;
      const remain = this._duration - elapsed;
      this._start = date;
      this._duration = Math.floor(Math.max(remain, cfg.duration));
      this._total += elapsed;
      this._loop = !!cfg.loop;
      this._to = resolve([
        cfg.to,
        to2,
        currentValue,
        cfg.from
      ]);
      this._from = resolve([
        cfg.from,
        currentValue,
        to2
      ]);
    }
  }
  cancel() {
    if (this._active) {
      this.tick(Date.now());
      this._active = false;
      this._notify(false);
    }
  }
  tick(date) {
    const elapsed = date - this._start;
    const duration = this._duration;
    const prop = this._prop;
    const from2 = this._from;
    const loop = this._loop;
    const to2 = this._to;
    let factor;
    this._active = from2 !== to2 && (loop || elapsed < duration);
    if (!this._active) {
      this._target[prop] = to2;
      this._notify(true);
      return;
    }
    if (elapsed < 0) {
      this._target[prop] = from2;
      return;
    }
    factor = elapsed / duration % 2;
    factor = loop && factor > 1 ? 2 - factor : factor;
    factor = this._easing(Math.min(1, Math.max(0, factor)));
    this._target[prop] = this._fn(from2, to2, factor);
  }
  wait() {
    const promises = this._promises || (this._promises = []);
    return new Promise((res, rej) => {
      promises.push({
        res,
        rej
      });
    });
  }
  _notify(resolved) {
    const method = resolved ? "res" : "rej";
    const promises = this._promises || [];
    for (let i = 0; i < promises.length; i++) {
      promises[i][method]();
    }
  }
}
class Animations {
  constructor(chart, config2) {
    this._chart = chart;
    this._properties = /* @__PURE__ */ new Map();
    this.configure(config2);
  }
  configure(config2) {
    if (!isObject(config2)) {
      return;
    }
    const animationOptions = Object.keys(defaults.animation);
    const animatedProps = this._properties;
    Object.getOwnPropertyNames(config2).forEach((key) => {
      const cfg = config2[key];
      if (!isObject(cfg)) {
        return;
      }
      const resolved = {};
      for (const option of animationOptions) {
        resolved[option] = cfg[option];
      }
      (isArray$1(cfg.properties) && cfg.properties || [
        key
      ]).forEach((prop) => {
        if (prop === key || !animatedProps.has(prop)) {
          animatedProps.set(prop, resolved);
        }
      });
    });
  }
  _animateOptions(target, values) {
    const newOptions = values.options;
    const options2 = resolveTargetOptions(target, newOptions);
    if (!options2) {
      return [];
    }
    const animations = this._createAnimations(options2, newOptions);
    if (newOptions.$shared) {
      awaitAll(target.options.$animations, newOptions).then(() => {
        target.options = newOptions;
      }, () => {
      });
    }
    return animations;
  }
  _createAnimations(target, values) {
    const animatedProps = this._properties;
    const animations = [];
    const running = target.$animations || (target.$animations = {});
    const props = Object.keys(values);
    const date = Date.now();
    let i;
    for (i = props.length - 1; i >= 0; --i) {
      const prop = props[i];
      if (prop.charAt(0) === "$") {
        continue;
      }
      if (prop === "options") {
        animations.push(...this._animateOptions(target, values));
        continue;
      }
      const value = values[prop];
      let animation = running[prop];
      const cfg = animatedProps.get(prop);
      if (animation) {
        if (cfg && animation.active()) {
          animation.update(cfg, value, date);
          continue;
        } else {
          animation.cancel();
        }
      }
      if (!cfg || !cfg.duration) {
        target[prop] = value;
        continue;
      }
      running[prop] = animation = new Animation(cfg, target, prop, value);
      animations.push(animation);
    }
    return animations;
  }
  update(target, values) {
    if (this._properties.size === 0) {
      Object.assign(target, values);
      return;
    }
    const animations = this._createAnimations(target, values);
    if (animations.length) {
      animator.add(this._chart, animations);
      return true;
    }
  }
}
function awaitAll(animations, properties) {
  const running = [];
  const keys = Object.keys(properties);
  for (let i = 0; i < keys.length; i++) {
    const anim = animations[keys[i]];
    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }
  return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }
  let options2 = target.options;
  if (!options2) {
    target.options = newOptions;
    return;
  }
  if (options2.$shared) {
    target.options = options2 = Object.assign({}, options2, {
      $shared: false,
      $animations: {}
    });
  }
  return options2;
}
function scaleClip(scale, allowedOverflow) {
  const opts = scale && scale.options || {};
  const reverse = opts.reverse;
  const min2 = opts.min === void 0 ? allowedOverflow : 0;
  const max2 = opts.max === void 0 ? allowedOverflow : 0;
  return {
    start: reverse ? max2 : min2,
    end: reverse ? min2 : max2
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  const x2 = scaleClip(xScale, allowedOverflow);
  const y2 = scaleClip(yScale, allowedOverflow);
  return {
    top: y2.end,
    right: x2.end,
    bottom: y2.start,
    left: x2.start
  };
}
function toClip(value) {
  let t2, r2, b2, l2;
  if (isObject(value)) {
    t2 = value.top;
    r2 = value.right;
    b2 = value.bottom;
    l2 = value.left;
  } else {
    t2 = r2 = b2 = l2 = value;
  }
  return {
    top: t2,
    right: r2,
    bottom: b2,
    left: l2,
    disabled: value === false
  };
}
function getSortedDatasetIndices(chart, filterVisible) {
  const keys = [];
  const metasets = chart._getSortedDatasetMetas(filterVisible);
  let i, ilen;
  for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    keys.push(metasets[i].index);
  }
  return keys;
}
function applyStack(stack, value, dsIndex, options2 = {}) {
  const keys = stack.keys;
  const singleMode = options2.mode === "single";
  let i, ilen, datasetIndex, otherValue;
  if (value === null) {
    return;
  }
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    datasetIndex = +keys[i];
    if (datasetIndex === dsIndex) {
      if (options2.all) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
      value += otherValue;
    }
  }
  return value;
}
function convertObjectDataToArray(data) {
  const keys = Object.keys(data);
  const adata = new Array(keys.length);
  let i, ilen, key;
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    key = keys[i];
    adata[i] = {
      x: key,
      y: data[key]
    };
  }
  return adata;
}
function isStacked(scale, meta) {
  const stacked = scale && scale.options.stacked;
  return stacked || stacked === void 0 && meta.stack !== void 0;
}
function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
  const { min: min2, max: max2, minDefined, maxDefined } = scale.getUserBounds();
  return {
    min: minDefined ? min2 : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max2 : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
    const value = stack[meta.index];
    if (positive && value > 0 || !positive && value < 0) {
      return meta.index;
    }
  }
  return null;
}
function updateStacks(controller, parsed) {
  const { chart, _cachedMeta: meta } = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const { iScale, vScale, index: datasetIndex } = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;
  for (let i = 0; i < ilen; ++i) {
    const item2 = parsed[i];
    const { [iAxis]: index2, [vAxis]: value } = item2;
    const itemStacks = item2._stacks || (item2._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index2);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
    const visualValues = stack._visualValues || (stack._visualValues = {});
    visualValues[datasetIndex] = value;
  }
}
function getFirstScaleId(chart, axis) {
  const scales = chart.scales;
  return Object.keys(scales).filter((key) => scales[key].axis === axis).shift();
}
function createDatasetContext(parent, index2) {
  return createContext(parent, {
    active: false,
    dataset: void 0,
    datasetIndex: index2,
    index: index2,
    mode: "default",
    type: "dataset"
  });
}
function createDataContext(parent, index2, element) {
  return createContext(parent, {
    active: false,
    dataIndex: index2,
    parsed: void 0,
    raw: void 0,
    element,
    index: index2,
    mode: "default",
    type: "data"
  });
}
function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;
  if (!axis) {
    return;
  }
  items = items || meta._parsed;
  for (const parsed of items) {
    const stacks = parsed._stacks;
    if (!stacks || stacks[axis] === void 0 || stacks[axis][datasetIndex] === void 0) {
      return;
    }
    delete stacks[axis][datasetIndex];
    if (stacks[axis]._visualValues !== void 0 && stacks[axis]._visualValues[datasetIndex] !== void 0) {
      delete stacks[axis]._visualValues[datasetIndex];
    }
  }
}
const isDirectUpdateMode = (mode) => mode === "reset" || mode === "none";
const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {
  keys: getSortedDatasetIndices(chart, true),
  values: null
};
class DatasetController {
  constructor(chart, datasetIndex) {
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this.options = void 0;
    this._parsing = false;
    this._data = void 0;
    this._objectData = void 0;
    this._sharedOptions = void 0;
    this._drawStart = void 0;
    this._drawCount = void 0;
    this.enableOptionSharing = false;
    this.supportsDecimation = false;
    this.$context = void 0;
    this._syncList = [];
    this.datasetElementType = new.target.datasetElementType;
    this.dataElementType = new.target.dataElementType;
    this.initialize();
  }
  initialize() {
    const meta = this._cachedMeta;
    this.configure();
    this.linkScales();
    meta._stacked = isStacked(meta.vScale, meta);
    this.addElements();
    if (this.options.fill && !this.chart.isPluginEnabled("filler")) {
      console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
  }
  updateIndex(datasetIndex) {
    if (this.index !== datasetIndex) {
      clearStacks(this._cachedMeta);
    }
    this.index = datasetIndex;
  }
  linkScales() {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    const chooseId = (axis, x2, y2, r2) => axis === "x" ? x2 : axis === "r" ? r2 : y2;
    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, "x"));
    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, "y"));
    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, "r"));
    const indexAxis = meta.indexAxis;
    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
    meta.xScale = this.getScaleForId(xid);
    meta.yScale = this.getScaleForId(yid);
    meta.rScale = this.getScaleForId(rid);
    meta.iScale = this.getScaleForId(iid);
    meta.vScale = this.getScaleForId(vid);
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(scaleID) {
    return this.chart.scales[scaleID];
  }
  _getOtherScale(scale) {
    const meta = this._cachedMeta;
    return scale === meta.iScale ? meta.vScale : meta.iScale;
  }
  reset() {
    this._update("reset");
  }
  _destroy() {
    const meta = this._cachedMeta;
    if (this._data) {
      unlistenArrayEvents(this._data, this);
    }
    if (meta._stacked) {
      clearStacks(meta);
    }
  }
  _dataCheck() {
    const dataset = this.getDataset();
    const data = dataset.data || (dataset.data = []);
    const _data = this._data;
    if (isObject(data)) {
      this._data = convertObjectDataToArray(data);
    } else if (_data !== data) {
      if (_data) {
        unlistenArrayEvents(_data, this);
        const meta = this._cachedMeta;
        clearStacks(meta);
        meta._parsed = [];
      }
      if (data && Object.isExtensible(data)) {
        listenArrayEvents(data, this);
      }
      this._syncList = [];
      this._data = data;
    }
  }
  addElements() {
    const meta = this._cachedMeta;
    this._dataCheck();
    if (this.datasetElementType) {
      meta.dataset = new this.datasetElementType();
    }
  }
  buildOrUpdateElements(resetNewElements) {
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    let stackChanged = false;
    this._dataCheck();
    const oldStacked = meta._stacked;
    meta._stacked = isStacked(meta.vScale, meta);
    if (meta.stack !== dataset.stack) {
      stackChanged = true;
      clearStacks(meta);
      meta.stack = dataset.stack;
    }
    this._resyncElements(resetNewElements);
    if (stackChanged || oldStacked !== meta._stacked) {
      updateStacks(this, meta._parsed);
    }
  }
  configure() {
    const config2 = this.chart.config;
    const scopeKeys = config2.datasetScopeKeys(this._type);
    const scopes = config2.getOptionScopes(this.getDataset(), scopeKeys, true);
    this.options = config2.createResolver(scopes, this.getContext());
    this._parsing = this.options.parsing;
    this._cachedDataOpts = {};
  }
  parse(start, count) {
    const { _cachedMeta: meta, _data: data } = this;
    const { iScale, _stacked } = meta;
    const iAxis = iScale.axis;
    let sorted = start === 0 && count === data.length ? true : meta._sorted;
    let prev2 = start > 0 && meta._parsed[start - 1];
    let i, cur, parsed;
    if (this._parsing === false) {
      meta._parsed = data;
      meta._sorted = true;
      parsed = data;
    } else {
      if (isArray$1(data[start])) {
        parsed = this.parseArrayData(meta, data, start, count);
      } else if (isObject(data[start])) {
        parsed = this.parseObjectData(meta, data, start, count);
      } else {
        parsed = this.parsePrimitiveData(meta, data, start, count);
      }
      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev2 && cur[iAxis] < prev2[iAxis];
      for (i = 0; i < count; ++i) {
        meta._parsed[i + start] = cur = parsed[i];
        if (sorted) {
          if (isNotInOrderComparedToPrev()) {
            sorted = false;
          }
          prev2 = cur;
        }
      }
      meta._sorted = sorted;
    }
    if (_stacked) {
      updateStacks(this, parsed);
    }
  }
  parsePrimitiveData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = new Array(count);
    let i, ilen, index2;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index2 = i + start;
      parsed[i] = {
        [iAxis]: singleScale || iScale.parse(labels[index2], index2),
        [vAxis]: vScale.parse(data[index2], index2)
      };
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const parsed = new Array(count);
    let i, ilen, index2, item2;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index2 = i + start;
      item2 = data[index2];
      parsed[i] = {
        x: xScale.parse(item2[0], index2),
        y: yScale.parse(item2[1], index2)
      };
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index2, item2;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index2 = i + start;
      item2 = data[index2];
      parsed[i] = {
        x: xScale.parse(resolveObjectKey(item2, xAxisKey), index2),
        y: yScale.parse(resolveObjectKey(item2, yAxisKey), index2)
      };
    }
    return parsed;
  }
  getParsed(index2) {
    return this._cachedMeta._parsed[index2];
  }
  getDataElement(index2) {
    return this._cachedMeta.data[index2];
  }
  applyStack(scale, parsed, mode) {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const value = parsed[scale.axis];
    const stack = {
      keys: getSortedDatasetIndices(chart, true),
      values: parsed._stacks[scale.axis]._visualValues
    };
    return applyStack(stack, value, meta.index, {
      mode
    });
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    const parsedValue = parsed[scale.axis];
    let value = parsedValue === null ? NaN : parsedValue;
    const values = stack && parsed._stacks[scale.axis];
    if (stack && values) {
      stack.values = values;
      value = applyStack(stack, parsedValue, this._cachedMeta.index);
    }
    range.min = Math.min(range.min, value);
    range.max = Math.max(range.max, value);
  }
  getMinMax(scale, canStack) {
    const meta = this._cachedMeta;
    const _parsed = meta._parsed;
    const sorted = meta._sorted && scale === meta.iScale;
    const ilen = _parsed.length;
    const otherScale = this._getOtherScale(scale);
    const stack = createStack(canStack, meta, this.chart);
    const range = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
    let i, parsed;
    function _skip() {
      parsed = _parsed[i];
      const otherValue = parsed[otherScale.axis];
      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
    }
    for (i = 0; i < ilen; ++i) {
      if (_skip()) {
        continue;
      }
      this.updateRangeFromParsed(range, scale, parsed, stack);
      if (sorted) {
        break;
      }
    }
    if (sorted) {
      for (i = ilen - 1; i >= 0; --i) {
        if (_skip()) {
          continue;
        }
        this.updateRangeFromParsed(range, scale, parsed, stack);
        break;
      }
    }
    return range;
  }
  getAllParsedValues(scale) {
    const parsed = this._cachedMeta._parsed;
    const values = [];
    let i, ilen, value;
    for (i = 0, ilen = parsed.length; i < ilen; ++i) {
      value = parsed[i][scale.axis];
      if (isNumberFinite(value)) {
        values.push(value);
      }
    }
    return values;
  }
  getMaxOverflow() {
    return false;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const parsed = this.getParsed(index2);
    return {
      label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
      value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
    };
  }
  _update(mode) {
    const meta = this._cachedMeta;
    this.update(mode || "default");
    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
  }
  update(mode) {
  }
  draw() {
    const ctx = this._ctx;
    const chart = this.chart;
    const meta = this._cachedMeta;
    const elements = meta.data || [];
    const area = chart.chartArea;
    const active = [];
    const start = this._drawStart || 0;
    const count = this._drawCount || elements.length - start;
    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
    let i;
    if (meta.dataset) {
      meta.dataset.draw(ctx, area, start, count);
    }
    for (i = start; i < start + count; ++i) {
      const element = elements[i];
      if (element.hidden) {
        continue;
      }
      if (element.active && drawActiveElementsOnTop) {
        active.push(element);
      } else {
        element.draw(ctx, area);
      }
    }
    for (i = 0; i < active.length; ++i) {
      active[i].draw(ctx, area);
    }
  }
  getStyle(index2, active) {
    const mode = active ? "active" : "default";
    return index2 === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index2 || 0, mode);
  }
  getContext(index2, active, mode) {
    const dataset = this.getDataset();
    let context;
    if (index2 >= 0 && index2 < this._cachedMeta.data.length) {
      const element = this._cachedMeta.data[index2];
      context = element.$context || (element.$context = createDataContext(this.getContext(), index2, element));
      context.parsed = this.getParsed(index2);
      context.raw = dataset.data[index2];
      context.index = context.dataIndex = index2;
    } else {
      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
      context.dataset = dataset;
      context.index = context.datasetIndex = this.index;
    }
    context.active = !!active;
    context.mode = mode;
    return context;
  }
  resolveDatasetElementOptions(mode) {
    return this._resolveElementOptions(this.datasetElementType.id, mode);
  }
  resolveDataElementOptions(index2, mode) {
    return this._resolveElementOptions(this.dataElementType.id, mode, index2);
  }
  _resolveElementOptions(elementType, mode = "default", index2) {
    const active = mode === "active";
    const cache = this._cachedDataOpts;
    const cacheKey = elementType + "-" + mode;
    const cached = cache[cacheKey];
    const sharing = this.enableOptionSharing && defined(index2);
    if (cached) {
      return cloneIfNotShared(cached, sharing);
    }
    const config2 = this.chart.config;
    const scopeKeys = config2.datasetElementScopeKeys(this._type, elementType);
    const prefixes = active ? [
      `${elementType}Hover`,
      "hover",
      elementType,
      ""
    ] : [
      elementType,
      ""
    ];
    const scopes = config2.getOptionScopes(this.getDataset(), scopeKeys);
    const names2 = Object.keys(defaults.elements[elementType]);
    const context = () => this.getContext(index2, active, mode);
    const values = config2.resolveNamedOptions(scopes, names2, context, prefixes);
    if (values.$shared) {
      values.$shared = sharing;
      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
    }
    return values;
  }
  _resolveAnimations(index2, transition, active) {
    const chart = this.chart;
    const cache = this._cachedDataOpts;
    const cacheKey = `animation-${transition}`;
    const cached = cache[cacheKey];
    if (cached) {
      return cached;
    }
    let options2;
    if (chart.options.animation !== false) {
      const config2 = this.chart.config;
      const scopeKeys = config2.datasetAnimationScopeKeys(this._type, transition);
      const scopes = config2.getOptionScopes(this.getDataset(), scopeKeys);
      options2 = config2.createResolver(scopes, this.getContext(index2, active, transition));
    }
    const animations = new Animations(chart, options2 && options2.animations);
    if (options2 && options2._cacheable) {
      cache[cacheKey] = Object.freeze(animations);
    }
    return animations;
  }
  getSharedOptions(options2) {
    if (!options2.$shared) {
      return;
    }
    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options2));
  }
  includeOptions(mode, sharedOptions) {
    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
  }
  _getSharedOptions(start, mode) {
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const previouslySharedOptions = this._sharedOptions;
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
    return {
      sharedOptions,
      includeOptions
    };
  }
  updateElement(element, index2, properties, mode) {
    if (isDirectUpdateMode(mode)) {
      Object.assign(element, properties);
    } else {
      this._resolveAnimations(index2, mode).update(element, properties);
    }
  }
  updateSharedOptions(sharedOptions, mode, newOptions) {
    if (sharedOptions && !isDirectUpdateMode(mode)) {
      this._resolveAnimations(void 0, mode).update(sharedOptions, newOptions);
    }
  }
  _setStyle(element, index2, mode, active) {
    element.active = active;
    const options2 = this.getStyle(index2, active);
    this._resolveAnimations(index2, mode, active).update(element, {
      options: !active && this.getSharedOptions(options2) || options2
    });
  }
  removeHoverStyle(element, datasetIndex, index2) {
    this._setStyle(element, index2, "active", false);
  }
  setHoverStyle(element, datasetIndex, index2) {
    this._setStyle(element, index2, "active", true);
  }
  _removeDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, void 0, "active", false);
    }
  }
  _setDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, void 0, "active", true);
    }
  }
  _resyncElements(resetNewElements) {
    const data = this._data;
    const elements = this._cachedMeta.data;
    for (const [method, arg1, arg2] of this._syncList) {
      this[method](arg1, arg2);
    }
    this._syncList = [];
    const numMeta = elements.length;
    const numData = data.length;
    const count = Math.min(numData, numMeta);
    if (count) {
      this.parse(0, count);
    }
    if (numData > numMeta) {
      this._insertElements(numMeta, numData - numMeta, resetNewElements);
    } else if (numData < numMeta) {
      this._removeElements(numData, numMeta - numData);
    }
  }
  _insertElements(start, count, resetNewElements = true) {
    const meta = this._cachedMeta;
    const data = meta.data;
    const end = start + count;
    let i;
    const move = (arr) => {
      arr.length += count;
      for (i = arr.length - 1; i >= end; i--) {
        arr[i] = arr[i - count];
      }
    };
    move(data);
    for (i = start; i < end; ++i) {
      data[i] = new this.dataElementType();
    }
    if (this._parsing) {
      move(meta._parsed);
    }
    this.parse(start, count);
    if (resetNewElements) {
      this.updateElements(data, start, count, "reset");
    }
  }
  updateElements(element, start, count, mode) {
  }
  _removeElements(start, count) {
    const meta = this._cachedMeta;
    if (this._parsing) {
      const removed = meta._parsed.splice(start, count);
      if (meta._stacked) {
        clearStacks(meta, removed);
      }
    }
    meta.data.splice(start, count);
  }
  _sync(args) {
    if (this._parsing) {
      this._syncList.push(args);
    } else {
      const [method, arg1, arg2] = args;
      this[method](arg1, arg2);
    }
    this.chart._dataChanges.push([
      this.index,
      ...args
    ]);
  }
  _onDataPush() {
    const count = arguments.length;
    this._sync([
      "_insertElements",
      this.getDataset().data.length - count,
      count
    ]);
  }
  _onDataPop() {
    this._sync([
      "_removeElements",
      this._cachedMeta.data.length - 1,
      1
    ]);
  }
  _onDataShift() {
    this._sync([
      "_removeElements",
      0,
      1
    ]);
  }
  _onDataSplice(start, count) {
    if (count) {
      this._sync([
        "_removeElements",
        start,
        count
      ]);
    }
    const newCount = arguments.length - 2;
    if (newCount) {
      this._sync([
        "_insertElements",
        start,
        newCount
      ]);
    }
  }
  _onDataUnshift() {
    this._sync([
      "_insertElements",
      0,
      arguments.length
    ]);
  }
}
__publicField(DatasetController, "defaults", {});
__publicField(DatasetController, "datasetElementType", null);
__publicField(DatasetController, "dataElementType", null);
class LineController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    this.supportsDecimation = true;
    super.initialize();
  }
  update(mode) {
    const meta = this._cachedMeta;
    const { dataset: line2, data: points = [], _dataset } = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if (_scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    line2._chart = this.chart;
    line2._datasetIndex = this.index;
    line2._decimated = !!_dataset._decimated;
    line2.points = points;
    const options2 = this.resolveDatasetElementOptions(mode);
    if (!this.options.showLine) {
      options2.borderWidth = 0;
    }
    options2.segment = this.options.segment;
    this.updateElement(line2, void 0, {
      animated: !animationsDisabled,
      options: options2
    }, mode);
    this.updateElements(points, start, count, mode);
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const { spanGaps, segment } = this.options;
    const maxGapLength = isNumber$1(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
    const end = start + count;
    const pointsCount = points.length;
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i = 0; i < pointsCount; ++i) {
      const point = points[i];
      const properties = directUpdate ? point : {};
      if (i < start || i >= end) {
        properties.skip = true;
        continue;
      }
      const parsed = this.getParsed(i);
      const nullData = isNullOrUndef(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
      }
      if (!directUpdate) {
        this.updateElement(point, i, properties, mode);
      }
      prevParsed = parsed;
    }
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    const data = meta.data || [];
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
  draw() {
    const meta = this._cachedMeta;
    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
    super.draw();
  }
}
__publicField(LineController, "id", "line");
__publicField(LineController, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  showLine: true,
  spanGaps: false
});
__publicField(LineController, "overrides", {
  scales: {
    _index_: {
      type: "category"
    },
    _value_: {
      type: "linear"
    }
  }
});
function abstract() {
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
class DateAdapterBase {
  constructor(options2) {
    __publicField(this, "options");
    this.options = options2 || {};
  }
  /**
  * Override default date adapter methods.
  * Accepts type parameter to define options type.
  * @example
  * Chart._adapters._date.override<{myAdapterOption: string}>({
  *   init() {
  *     console.log(this.options.myAdapterOption);
  *   }
  * })
  */
  static override(members) {
    Object.assign(DateAdapterBase.prototype, members);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  init() {
  }
  formats() {
    return abstract();
  }
  parse() {
    return abstract();
  }
  format() {
    return abstract();
  }
  add() {
    return abstract();
  }
  diff() {
    return abstract();
  }
  startOf() {
    return abstract();
  }
  endOf() {
    return abstract();
  }
}
var adapters = {
  _date: DateAdapterBase
};
function binarySearch(metaset, axis, value, intersect) {
  const { controller, data, _sorted } = metaset;
  const iScale = controller._cachedMeta.iScale;
  if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
    if (!intersect) {
      return lookupMethod(data, axis, value);
    } else if (controller._sharedOptions) {
      const el2 = data[0];
      const range = typeof el2.getRange === "function" && el2.getRange(axis);
      if (range) {
        const start = lookupMethod(data, axis, value - range);
        const end = lookupMethod(data, axis, value + range);
        return {
          lo: start.lo,
          hi: end.hi
        };
      }
    }
  }
  return {
    lo: 0,
    hi: data.length - 1
  };
}
function evaluateInteractionItems(chart, axis, position2, handler2, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position2[axis];
  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
    const { index: index2, data } = metasets[i];
    const { lo, hi: hi2 } = binarySearch(metasets[i], axis, value, intersect);
    for (let j = lo; j <= hi2; ++j) {
      const element = data[j];
      if (!element.skip) {
        handler2(element, index2, j);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf("x") !== -1;
  const useY = axis.indexOf("y") !== -1;
  return function(pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position2, axis, useFinalPosition, includeInvisible) {
  const items = [];
  if (!includeInvisible && !chart.isPointInArea(position2)) {
    return items;
  }
  const evaluationFunc = function(element, datasetIndex, index2) {
    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {
      return;
    }
    if (element.inRange(position2.x, position2.y, useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
    }
  };
  evaluateInteractionItems(chart, axis, position2, evaluationFunc, true);
  return items;
}
function getNearestRadialItems(chart, position2, axis, useFinalPosition) {
  let items = [];
  function evaluationFunc(element, datasetIndex, index2) {
    const { startAngle, endAngle } = element.getProps([
      "startAngle",
      "endAngle"
    ], useFinalPosition);
    const { angle } = getAngleFromPoint(element, {
      x: position2.x,
      y: position2.y
    });
    if (_angleBetween(angle, startAngle, endAngle)) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position2, evaluationFunc);
  return items;
}
function getNearestCartesianItems(chart, position2, axis, intersect, useFinalPosition, includeInvisible) {
  let items = [];
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  function evaluationFunc(element, datasetIndex, index2) {
    const inRange = element.inRange(position2.x, position2.y, useFinalPosition);
    if (intersect && !inRange) {
      return;
    }
    const center = element.getCenterPoint(useFinalPosition);
    const pointInArea = !!includeInvisible || chart.isPointInArea(center);
    if (!pointInArea && !inRange) {
      return;
    }
    const distance = distanceMetric(position2, center);
    if (distance < minDistance) {
      items = [
        {
          element,
          datasetIndex,
          index: index2
        }
      ];
      minDistance = distance;
    } else if (distance === minDistance) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position2, evaluationFunc);
  return items;
}
function getNearestItems(chart, position2, axis, intersect, useFinalPosition, includeInvisible) {
  if (!includeInvisible && !chart.isPointInArea(position2)) {
    return [];
  }
  return axis === "r" && !intersect ? getNearestRadialItems(chart, position2, axis, useFinalPosition) : getNearestCartesianItems(chart, position2, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position2, axis, intersect, useFinalPosition) {
  const items = [];
  const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
  let intersectsItem = false;
  evaluateInteractionItems(chart, axis, position2, (element, datasetIndex, index2) => {
    if (element[rangeMethod](position2[axis], useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
      intersectsItem = intersectsItem || element.inRange(position2.x, position2.y, useFinalPosition);
    }
  });
  if (intersect && !intersectsItem) {
    return [];
  }
  return items;
}
var Interaction = {
  evaluateInteractionItems,
  modes: {
    index(chart, e2, options2, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      const axis = options2.axis || "x";
      const includeInvisible = options2.includeInvisible || false;
      const items = options2.intersect ? getIntersectItems(chart, position2, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position2, axis, false, useFinalPosition, includeInvisible);
      const elements = [];
      if (!items.length) {
        return [];
      }
      chart.getSortedVisibleDatasetMetas().forEach((meta) => {
        const index2 = items[0].index;
        const element = meta.data[index2];
        if (element && !element.skip) {
          elements.push({
            element,
            datasetIndex: meta.index,
            index: index2
          });
        }
      });
      return elements;
    },
    dataset(chart, e2, options2, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      const axis = options2.axis || "xy";
      const includeInvisible = options2.includeInvisible || false;
      let items = options2.intersect ? getIntersectItems(chart, position2, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position2, axis, false, useFinalPosition, includeInvisible);
      if (items.length > 0) {
        const datasetIndex = items[0].datasetIndex;
        const data = chart.getDatasetMeta(datasetIndex).data;
        items = [];
        for (let i = 0; i < data.length; ++i) {
          items.push({
            element: data[i],
            datasetIndex,
            index: i
          });
        }
      }
      return items;
    },
    point(chart, e2, options2, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      const axis = options2.axis || "xy";
      const includeInvisible = options2.includeInvisible || false;
      return getIntersectItems(chart, position2, axis, useFinalPosition, includeInvisible);
    },
    nearest(chart, e2, options2, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      const axis = options2.axis || "xy";
      const includeInvisible = options2.includeInvisible || false;
      return getNearestItems(chart, position2, axis, options2.intersect, useFinalPosition, includeInvisible);
    },
    x(chart, e2, options2, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      return getAxisItems(chart, position2, "x", options2.intersect, useFinalPosition);
    },
    y(chart, e2, options2, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      return getAxisItems(chart, position2, "y", options2.intersect, useFinalPosition);
    }
  }
};
const STATIC_POSITIONS = [
  "left",
  "top",
  "right",
  "bottom"
];
function filterByPosition(array, position2) {
  return array.filter((v2) => v2.pos === position2);
}
function filterDynamicPositionByAxis(array, axis) {
  return array.filter((v2) => STATIC_POSITIONS.indexOf(v2.pos) === -1 && v2.box.axis === axis);
}
function sortByWeight(array, reverse) {
  return array.sort((a, b2) => {
    const v0 = reverse ? b2 : a;
    const v1 = reverse ? a : b2;
    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i, ilen, box, pos, stack, stackWeight;
  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    box = boxes[i];
    ({ position: pos, options: { stack, stackWeight = 1 } } = box);
    layoutBoxes.push({
      index: i,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && pos + stack,
      stackWeight
    });
  }
  return layoutBoxes;
}
function buildStacks(layouts2) {
  const stacks = {};
  for (const wrap of layouts2) {
    const { stack, pos, stackWeight } = wrap;
    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }
    const _stack = stacks[stack] || (stacks[stack] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });
    _stack.count++;
    _stack.weight += stackWeight;
  }
  return stacks;
}
function setLayoutDims(layouts2, params) {
  const stacks = buildStacks(layouts2);
  const { vBoxMaxWidth, hBoxMaxHeight } = params;
  let i, ilen, layout;
  for (i = 0, ilen = layouts2.length; i < ilen; ++i) {
    layout = layouts2[i];
    const { fullSize } = layout.box;
    const stack = stacks[layout.stack];
    const factor = stack && layout.stackWeight / stack.weight;
    if (layout.horizontal) {
      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout.height = hBoxMaxHeight;
    } else {
      layout.width = vBoxMaxWidth;
      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }
  return stacks;
}
function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter((wrap) => wrap.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
  const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, "chartArea"),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a, b2) {
  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b2], chartArea[b2]);
}
function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
  const { pos, box } = layout;
  const maxPadding = chartArea.maxPadding;
  if (!isObject(pos)) {
    if (layout.size) {
      chartArea[pos] -= layout.size;
    }
    const stack = stacks[layout.stack] || {
      size: 0,
      count: 1
    };
    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
    layout.size = stack.size / stack.count;
    chartArea[pos] += layout.size;
  }
  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }
  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout.horizontal ? {
    same: widthChanged,
    other: heightChanged
  } : {
    same: heightChanged,
    other: widthChanged
  };
}
function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos("top");
  chartArea.x += updatePos("left");
  updatePos("right");
  updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;
  function marginForPositions(positions2) {
    const margin = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    positions2.forEach((pos) => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal ? marginForPositions([
    "left",
    "right"
  ]) : marginForPositions([
    "top",
    "bottom"
  ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i, ilen, layout, box, refit, changed;
  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {
    layout = boxes[i];
    box = layout.box;
    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
    const { same, other } = updateDims(chartArea, params, layout, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;
    if (!box.fullSize) {
      refitBoxes.push(layout);
    }
  }
  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let { x: x2, y: y2 } = chartArea;
  for (const layout of boxes) {
    const box = layout.box;
    const stack = stacks[layout.stack] || {
      count: 1,
      placed: 0,
      weight: 1
    };
    const weight = layout.stackWeight / stack.weight || 1;
    if (layout.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;
      if (defined(stack.start)) {
        y2 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y2, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y2, width, height);
      }
      stack.start = y2;
      stack.placed += width;
      y2 = box.bottom;
    } else {
      const height = chartArea.h * weight;
      const width = stack.size || box.width;
      if (defined(stack.start)) {
        x2 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, x2, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x2, chartArea.top + stack.placed, width, height);
      }
      stack.start = x2;
      stack.placed += height;
      x2 = box.right;
    }
  }
  chartArea.x = x2;
  chartArea.y = y2;
}
var layouts = {
  addBox(chart, item2) {
    if (!chart.boxes) {
      chart.boxes = [];
    }
    item2.fullSize = item2.fullSize || false;
    item2.position = item2.position || "top";
    item2.weight = item2.weight || 0;
    item2._layers = item2._layers || function() {
      return [
        {
          z: 0,
          draw(chartArea) {
            item2.draw(chartArea);
          }
        }
      ];
    };
    chart.boxes.push(item2);
  },
  removeBox(chart, layoutItem) {
    const index2 = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    if (index2 !== -1) {
      chart.boxes.splice(index2, 1);
    }
  },
  configure(chart, item2, options2) {
    item2.fullSize = options2.fullSize;
    item2.position = options2.position;
    item2.weight = options2.weight;
  },
  update(chart, width, height, minPadding) {
    if (!chart) {
      return;
    }
    const padding = toPadding(chart.options.layout.padding);
    const availableWidth = Math.max(width - padding.width, 0);
    const availableHeight = Math.max(height - padding.height, 0);
    const boxes = buildLayoutBoxes(chart.boxes);
    const verticalBoxes = boxes.vertical;
    const horizontalBoxes = boxes.horizontal;
    each(chart.boxes, (box) => {
      if (typeof box.beforeLayout === "function") {
        box.beforeLayout();
      }
    });
    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
    const params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding,
      availableWidth,
      availableHeight,
      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
      hBoxMaxHeight: availableHeight / 2
    });
    const maxPadding = Object.assign({}, padding);
    updateMaxPadding(maxPadding, toPadding(minPadding));
    const chartArea = Object.assign({
      maxPadding,
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(boxes.fullSize, chartArea, params, stacks);
    fitBoxes(verticalBoxes, chartArea, params, stacks);
    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
      fitBoxes(verticalBoxes, chartArea, params, stacks);
    }
    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w
    };
    each(boxes.chartArea, (layout) => {
      const box = layout.box;
      Object.assign(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h, {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      });
    });
  }
};
class BasePlatform {
  acquireContext(canvas, aspectRatio) {
  }
  releaseContext(context) {
    return false;
  }
  addEventListener(chart, type, listener) {
  }
  removeEventListener(chart, type, listener) {
  }
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(element, width, height, aspectRatio) {
    width = Math.max(0, width || element.width);
    height = height || element.height;
    return {
      width,
      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
    };
  }
  isAttached(canvas) {
    return true;
  }
  updateConfig(config2) {
  }
}
class BasicPlatform extends BasePlatform {
  acquireContext(item2) {
    return item2 && item2.getContext && item2.getContext("2d") || null;
  }
  updateConfig(config2) {
    config2.options.animation = false;
  }
}
const EXPANDO_KEY = "$chartjs";
const EVENT_TYPES = {
  touchstart: "mousedown",
  touchmove: "mousemove",
  touchend: "mouseup",
  pointerenter: "mouseenter",
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointerleave: "mouseout",
  pointerout: "mouseout"
};
const isNullOrEmpty = (value) => value === null || value === "";
function initCanvas(canvas, aspectRatio) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute("height");
  const renderWidth = canvas.getAttribute("width");
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || "block";
  style.boxSizing = style.boxSizing || "border-box";
  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = readUsedSize(canvas, "width");
    if (displayWidth !== void 0) {
      canvas.width = displayWidth;
    }
  }
  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === "") {
      canvas.height = canvas.width / (aspectRatio || 2);
    } else {
      const displayHeight = readUsedSize(canvas, "height");
      if (displayHeight !== void 0) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
const eventListenerOptions = supportsEventListenerOptions ? {
  passive: true
} : false;
function addListener(node2, type, listener) {
  if (node2) {
    node2.addEventListener(type, listener, eventListenerOptions);
  }
}
function removeListener(chart, type, listener) {
  if (chart && chart.canvas) {
    chart.canvas.removeEventListener(type, listener, eventListenerOptions);
  }
}
function fromNativeEvent(event, chart) {
  const type = EVENT_TYPES[event.type] || event.type;
  const { x: x2, y: y2 } = getRelativePosition(event, chart);
  return {
    type,
    chart,
    native: event,
    x: x2 !== void 0 ? x2 : null,
    y: y2 !== void 0 ? y2 : null
  };
}
function nodeListContains(nodeList, canvas) {
  for (const node2 of nodeList) {
    if (node2 === canvas || node2.contains(canvas)) {
      return true;
    }
  }
}
function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.addedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.removedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
const drpListeningCharts = /* @__PURE__ */ new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
  const dpr = window.devicePixelRatio;
  if (dpr === oldDevicePixelRatio) {
    return;
  }
  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}
function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener("resize", onWindowResize);
  }
  drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);
  if (!drpListeningCharts.size) {
    window.removeEventListener("resize", onWindowResize);
  }
}
function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && _getParentNode(canvas);
  if (!container) {
    return;
  }
  const resize = throttled((width, height) => {
    const w2 = container.clientWidth;
    listener(width, height);
    if (w2 < container.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver((entries) => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;
    if (width === 0 && height === 0) {
      return;
    }
    resize(width, height);
  });
  observer.observe(container);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}
function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }
  if (type === "resize") {
    unlistenDevicePixelRatioChanges(chart);
  }
}
function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = throttled((event) => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event, chart));
    }
  }, chart);
  addListener(canvas, type, proxy);
  return proxy;
}
class DomPlatform extends BasePlatform {
  acquireContext(canvas, aspectRatio) {
    const context = canvas && canvas.getContext && canvas.getContext("2d");
    if (context && context.canvas === canvas) {
      initCanvas(canvas, aspectRatio);
      return context;
    }
    return null;
  }
  releaseContext(context) {
    const canvas = context.canvas;
    if (!canvas[EXPANDO_KEY]) {
      return false;
    }
    const initial = canvas[EXPANDO_KEY].initial;
    [
      "height",
      "width"
    ].forEach((prop) => {
      const value = initial[prop];
      if (isNullOrUndef(value)) {
        canvas.removeAttribute(prop);
      } else {
        canvas.setAttribute(prop, value);
      }
    });
    const style = initial.style || {};
    Object.keys(style).forEach((key) => {
      canvas.style[key] = style[key];
    });
    canvas.width = canvas.width;
    delete canvas[EXPANDO_KEY];
    return true;
  }
  addEventListener(chart, type, listener) {
    this.removeEventListener(chart, type);
    const proxies = chart.$proxies || (chart.$proxies = {});
    const handlers = {
      attach: createAttachObserver,
      detach: createDetachObserver,
      resize: createResizeObserver
    };
    const handler2 = handlers[type] || createProxyAndListen;
    proxies[type] = handler2(chart, type, listener);
  }
  removeEventListener(chart, type) {
    const proxies = chart.$proxies || (chart.$proxies = {});
    const proxy = proxies[type];
    if (!proxy) {
      return;
    }
    const handlers = {
      attach: releaseObserver,
      detach: releaseObserver,
      resize: releaseObserver
    };
    const handler2 = handlers[type] || removeListener;
    handler2(chart, type, proxy);
    proxies[type] = void 0;
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(canvas, width, height, aspectRatio) {
    return getMaximumSize(canvas, width, height, aspectRatio);
  }
  isAttached(canvas) {
    const container = _getParentNode(canvas);
    return !!(container && container.isConnected);
  }
}
function _detectPlatform(canvas) {
  if (!_isDomSupported() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) {
    return BasicPlatform;
  }
  return DomPlatform;
}
let Element$1 = (_a = class {
  constructor() {
    __publicField(this, "x");
    __publicField(this, "y");
    __publicField(this, "active", false);
    __publicField(this, "options");
    __publicField(this, "$animations");
  }
  tooltipPosition(useFinalPosition) {
    const { x: x2, y: y2 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y2
    };
  }
  hasValue() {
    return isNumber$1(this.x) && isNumber$1(this.y);
  }
  getProps(props, final) {
    const anims = this.$animations;
    if (!final || !anims) {
      return this;
    }
    const ret = {};
    props.forEach((prop) => {
      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
    });
    return ret;
  }
}, __publicField(_a, "defaults", {}), __publicField(_a, "defaultRoutes"), _a);
function autoSkip(scale, ticks) {
  const tickOpts = scale.options.ticks;
  const determinedMaxTicks = determineMaxTicks(scale);
  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last = majorIndices[numMajorIndices - 1];
  const newTicks = [];
  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }
  const spacing2 = calculateSpacing(majorIndices, ticks, ticksLimit);
  if (numMajorIndices > 0) {
    let i, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing2, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
      skip(ticks, newTicks, spacing2, majorIndices[i], majorIndices[i + 1]);
    }
    skip(ticks, newTicks, spacing2, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    return newTicks;
  }
  skip(ticks, newTicks, spacing2);
  return newTicks;
}
function determineMaxTicks(scale) {
  const offset = scale.options.offset;
  const tickLength = scale._tickSize();
  const maxScale = scale._length / tickLength + (offset ? 0 : 1);
  const maxChart = scale._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing2 = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing2, 1);
  }
  const factors = _factorize(evenMajorSpacing);
  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {
    const factor = factors[i];
    if (factor > spacing2) {
      return factor;
    }
  }
  return Math.max(spacing2, 1);
}
function getMajorIndices(ticks) {
  const result = [];
  let i, ilen;
  for (i = 0, ilen = ticks.length; i < ilen; i++) {
    if (ticks[i].major) {
      result.push(i);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing2) {
  let count = 0;
  let next2 = majorIndices[0];
  let i;
  spacing2 = Math.ceil(spacing2);
  for (i = 0; i < ticks.length; i++) {
    if (i === next2) {
      newTicks.push(ticks[i]);
      count++;
      next2 = majorIndices[count * spacing2];
    }
  }
}
function skip(ticks, newTicks, spacing2, majorStart, majorEnd) {
  const start = valueOrDefault(majorStart, 0);
  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length2, i, next2;
  spacing2 = Math.ceil(spacing2);
  if (majorEnd) {
    length2 = majorEnd - majorStart;
    spacing2 = length2 / Math.floor(length2 / spacing2);
  }
  next2 = start;
  while (next2 < 0) {
    count++;
    next2 = Math.round(start + count * spacing2);
  }
  for (i = Math.max(start, 0); i < end; i++) {
    if (i === next2) {
      newTicks.push(ticks[i]);
      count++;
      next2 = Math.round(start + count * spacing2);
    }
  }
}
function getEvenSpacing(arr) {
  const len = arr.length;
  let i, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i = 1; i < len; ++i) {
    if (arr[i] - arr[i - 1] !== diff) {
      return false;
    }
  }
  return diff;
}
const reverseAlign = (align) => align === "left" ? "right" : align === "right" ? "left" : align;
const offsetFromEdge = (scale, edge, offset) => edge === "top" || edge === "left" ? scale[edge] + offset : scale[edge] - offset;
const getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);
function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i = 0;
  for (; i < len; i += increment) {
    result.push(arr[Math.floor(i)]);
  }
  return result;
}
function getPixelForGridLine(scale, index2, offsetGridLines) {
  const length2 = scale.ticks.length;
  const validIndex2 = Math.min(index2, length2 - 1);
  const start = scale._startPixel;
  const end = scale._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale.getPixelForTick(validIndex2);
  let offset;
  if (offsetGridLines) {
    if (length2 === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index2 === 0) {
      offset = (scale.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale.getPixelForTick(validIndex2 - 1)) / 2;
    }
    lineValue += validIndex2 < index2 ? offset : -offset;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches, length2) {
  each(caches, (cache) => {
    const gc2 = cache.gc;
    const gcLen = gc2.length / 2;
    let i;
    if (gcLen > length2) {
      for (i = 0; i < gcLen; ++i) {
        delete cache.data[gc2[i]];
      }
      gc2.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options2) {
  return options2.drawTicks ? options2.tickLength : 0;
}
function getTitleHeight(options2, fallback) {
  if (!options2.display) {
    return 0;
  }
  const font = toFont(options2.font, fallback);
  const padding = toPadding(options2.padding);
  const lines = isArray$1(options2.text) ? options2.text.length : 1;
  return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
  return createContext(parent, {
    scale,
    type: "scale"
  });
}
function createTickContext(parent, index2, tick) {
  return createContext(parent, {
    tick,
    index: index2,
    type: "tick"
  });
}
function titleAlign(align, position2, reverse) {
  let ret = _toLeftRightCenter(align);
  if (reverse && position2 !== "right" || !reverse && position2 === "right") {
    ret = reverseAlign(ret);
  }
  return ret;
}
function titleArgs(scale, offset, position2, align) {
  const { top, left, bottom, right, chart } = scale;
  const { chartArea, scales } = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;
  if (scale.isHorizontal()) {
    titleX = _alignStartEnd(align, left, right);
    if (isObject(position2)) {
      const positionAxisID = Object.keys(position2)[0];
      const value = position2[positionAxisID];
      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
    } else if (position2 === "center") {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
    } else {
      titleY = offsetFromEdge(scale, position2, offset);
    }
    maxWidth = right - left;
  } else {
    if (isObject(position2)) {
      const positionAxisID = Object.keys(position2)[0];
      const value = position2[positionAxisID];
      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
    } else if (position2 === "center") {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
    } else {
      titleX = offsetFromEdge(scale, position2, offset);
    }
    titleY = _alignStartEnd(align, bottom, top);
    rotation = position2 === "left" ? -HALF_PI : HALF_PI;
  }
  return {
    titleX,
    titleY,
    maxWidth,
    rotation
  };
}
class Scale extends Element$1 {
  constructor(cfg) {
    super();
    this.id = cfg.id;
    this.type = cfg.type;
    this.options = void 0;
    this.ctx = cfg.ctx;
    this.chart = cfg.chart;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.maxWidth = void 0;
    this.maxHeight = void 0;
    this.paddingTop = void 0;
    this.paddingBottom = void 0;
    this.paddingLeft = void 0;
    this.paddingRight = void 0;
    this.axis = void 0;
    this.labelRotation = void 0;
    this.min = void 0;
    this.max = void 0;
    this._range = void 0;
    this.ticks = [];
    this._gridLineItems = null;
    this._labelItems = null;
    this._labelSizes = null;
    this._length = 0;
    this._maxLength = 0;
    this._longestTextCache = {};
    this._startPixel = void 0;
    this._endPixel = void 0;
    this._reversePixels = false;
    this._userMax = void 0;
    this._userMin = void 0;
    this._suggestedMax = void 0;
    this._suggestedMin = void 0;
    this._ticksLength = 0;
    this._borderValue = 0;
    this._cache = {};
    this._dataLimitsCached = false;
    this.$context = void 0;
  }
  init(options2) {
    this.options = options2.setContext(this.getContext());
    this.axis = options2.axis;
    this._userMin = this.parse(options2.min);
    this._userMax = this.parse(options2.max);
    this._suggestedMin = this.parse(options2.suggestedMin);
    this._suggestedMax = this.parse(options2.suggestedMax);
  }
  parse(raw, index2) {
    return raw;
  }
  getUserBounds() {
    let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
    return {
      min: finiteOrDefault(_userMin, _suggestedMin),
      max: finiteOrDefault(_userMax, _suggestedMax),
      minDefined: isNumberFinite(_userMin),
      maxDefined: isNumberFinite(_userMax)
    };
  }
  getMinMax(canStack) {
    let { min: min2, max: max2, minDefined, maxDefined } = this.getUserBounds();
    let range;
    if (minDefined && maxDefined) {
      return {
        min: min2,
        max: max2
      };
    }
    const metas = this.getMatchingVisibleMetas();
    for (let i = 0, ilen = metas.length; i < ilen; ++i) {
      range = metas[i].controller.getMinMax(this, canStack);
      if (!minDefined) {
        min2 = Math.min(min2, range.min);
      }
      if (!maxDefined) {
        max2 = Math.max(max2, range.max);
      }
    }
    min2 = maxDefined && min2 > max2 ? max2 : min2;
    max2 = minDefined && min2 > max2 ? min2 : max2;
    return {
      min: finiteOrDefault(min2, finiteOrDefault(max2, min2)),
      max: finiteOrDefault(max2, finiteOrDefault(min2, max2))
    };
  }
  getPadding() {
    return {
      left: this.paddingLeft || 0,
      top: this.paddingTop || 0,
      right: this.paddingRight || 0,
      bottom: this.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const data = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  }
  getLabelItems(chartArea = this.chart.chartArea) {
    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
    return items;
  }
  beforeLayout() {
    this._cache = {};
    this._dataLimitsCached = false;
  }
  beforeUpdate() {
    callback(this.options.beforeUpdate, [
      this
    ]);
  }
  update(maxWidth, maxHeight, margins) {
    const { beginAtZero, grace, ticks: tickOpts } = this.options;
    const sampleSize = tickOpts.sampleSize;
    this.beforeUpdate();
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, margins);
    this.ticks = null;
    this._labelSizes = null;
    this._gridLineItems = null;
    this._labelItems = null;
    this.beforeSetDimensions();
    this.setDimensions();
    this.afterSetDimensions();
    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
    if (!this._dataLimitsCached) {
      this.beforeDataLimits();
      this.determineDataLimits();
      this.afterDataLimits();
      this._range = _addGrace(this, grace, beginAtZero);
      this._dataLimitsCached = true;
    }
    this.beforeBuildTicks();
    this.ticks = this.buildTicks() || [];
    this.afterBuildTicks();
    const samplingEnabled = sampleSize < this.ticks.length;
    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
    this.configure();
    this.beforeCalculateLabelRotation();
    this.calculateLabelRotation();
    this.afterCalculateLabelRotation();
    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
      this.ticks = autoSkip(this, this.ticks);
      this._labelSizes = null;
      this.afterAutoSkip();
    }
    if (samplingEnabled) {
      this._convertTicksToLabels(this.ticks);
    }
    this.beforeFit();
    this.fit();
    this.afterFit();
    this.afterUpdate();
  }
  configure() {
    let reversePixels = this.options.reverse;
    let startPixel, endPixel;
    if (this.isHorizontal()) {
      startPixel = this.left;
      endPixel = this.right;
    } else {
      startPixel = this.top;
      endPixel = this.bottom;
      reversePixels = !reversePixels;
    }
    this._startPixel = startPixel;
    this._endPixel = endPixel;
    this._reversePixels = reversePixels;
    this._length = endPixel - startPixel;
    this._alignToPixels = this.options.alignToPixels;
  }
  afterUpdate() {
    callback(this.options.afterUpdate, [
      this
    ]);
  }
  beforeSetDimensions() {
    callback(this.options.beforeSetDimensions, [
      this
    ]);
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = 0;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = 0;
      this.bottom = this.height;
    }
    this.paddingLeft = 0;
    this.paddingTop = 0;
    this.paddingRight = 0;
    this.paddingBottom = 0;
  }
  afterSetDimensions() {
    callback(this.options.afterSetDimensions, [
      this
    ]);
  }
  _callHooks(name) {
    this.chart.notifyPlugins(name, this.getContext());
    callback(this.options[name], [
      this
    ]);
  }
  beforeDataLimits() {
    this._callHooks("beforeDataLimits");
  }
  determineDataLimits() {
  }
  afterDataLimits() {
    this._callHooks("afterDataLimits");
  }
  beforeBuildTicks() {
    this._callHooks("beforeBuildTicks");
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks("afterBuildTicks");
  }
  beforeTickToLabelConversion() {
    callback(this.options.beforeTickToLabelConversion, [
      this
    ]);
  }
  generateTickLabels(ticks) {
    const tickOpts = this.options.ticks;
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      tick = ticks[i];
      tick.label = callback(tickOpts.callback, [
        tick.value,
        i,
        ticks
      ], this);
    }
  }
  afterTickToLabelConversion() {
    callback(this.options.afterTickToLabelConversion, [
      this
    ]);
  }
  beforeCalculateLabelRotation() {
    callback(this.options.beforeCalculateLabelRotation, [
      this
    ]);
  }
  calculateLabelRotation() {
    const options2 = this.options;
    const tickOpts = options2.ticks;
    const numTicks = getTicksLimit(this.ticks.length, options2.ticks.maxTicksLimit);
    const minRotation = tickOpts.minRotation || 0;
    const maxRotation = tickOpts.maxRotation;
    let labelRotation = minRotation;
    let tickWidth, maxHeight, maxLabelDiagonal;
    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
      this.labelRotation = minRotation;
      return;
    }
    const labelSizes = this._getLabelSizes();
    const maxLabelWidth = labelSizes.widest.width;
    const maxLabelHeight = labelSizes.highest.height;
    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
    tickWidth = options2.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
    if (maxLabelWidth + 6 > tickWidth) {
      tickWidth = maxWidth / (numTicks - (options2.offset ? 0.5 : 1));
      maxHeight = this.maxHeight - getTickMarkLength(options2.grid) - tickOpts.padding - getTitleHeight(options2.title, this.chart.options.font);
      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    }
    this.labelRotation = labelRotation;
  }
  afterCalculateLabelRotation() {
    callback(this.options.afterCalculateLabelRotation, [
      this
    ]);
  }
  afterAutoSkip() {
  }
  beforeFit() {
    callback(this.options.beforeFit, [
      this
    ]);
  }
  fit() {
    const minSize = {
      width: 0,
      height: 0
    };
    const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
    const display = this._isVisible();
    const isHorizontal = this.isHorizontal();
    if (display) {
      const titleHeight = getTitleHeight(titleOpts, chart.options.font);
      if (isHorizontal) {
        minSize.width = this.maxWidth;
        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
      } else {
        minSize.height = this.maxHeight;
        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
      }
      if (tickOpts.display && this.ticks.length) {
        const { first, last, widest, highest } = this._getLabelSizes();
        const tickPadding = tickOpts.padding * 2;
        const angleRadians = toRadians(this.labelRotation);
        const cos = Math.cos(angleRadians);
        const sin = Math.sin(angleRadians);
        if (isHorizontal) {
          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
        } else {
          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
        }
        this._calculatePadding(first, last, sin, cos);
      }
    }
    this._handleMargins();
    if (isHorizontal) {
      this.width = this._length = chart.width - this._margins.left - this._margins.right;
      this.height = minSize.height;
    } else {
      this.width = minSize.width;
      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
    }
  }
  _calculatePadding(first, last, sin, cos) {
    const { ticks: { align, padding }, position: position2 } = this.options;
    const isRotated = this.labelRotation !== 0;
    const labelsBelowTicks = position2 !== "top" && this.axis === "x";
    if (this.isHorizontal()) {
      const offsetLeft = this.getPixelForTick(0) - this.left;
      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
      let paddingLeft = 0;
      let paddingRight = 0;
      if (isRotated) {
        if (labelsBelowTicks) {
          paddingLeft = cos * first.width;
          paddingRight = sin * last.height;
        } else {
          paddingLeft = sin * first.height;
          paddingRight = cos * last.width;
        }
      } else if (align === "start") {
        paddingRight = last.width;
      } else if (align === "end") {
        paddingLeft = first.width;
      } else if (align !== "inner") {
        paddingLeft = first.width / 2;
        paddingRight = last.width / 2;
      }
      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
    } else {
      let paddingTop = last.height / 2;
      let paddingBottom = first.height / 2;
      if (align === "start") {
        paddingTop = 0;
        paddingBottom = first.height;
      } else if (align === "end") {
        paddingTop = last.height;
        paddingBottom = 0;
      }
      this.paddingTop = paddingTop + padding;
      this.paddingBottom = paddingBottom + padding;
    }
  }
  _handleMargins() {
    if (this._margins) {
      this._margins.left = Math.max(this.paddingLeft, this._margins.left);
      this._margins.top = Math.max(this.paddingTop, this._margins.top);
      this._margins.right = Math.max(this.paddingRight, this._margins.right);
      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
    }
  }
  afterFit() {
    callback(this.options.afterFit, [
      this
    ]);
  }
  isHorizontal() {
    const { axis, position: position2 } = this.options;
    return position2 === "top" || position2 === "bottom" || axis === "x";
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(ticks) {
    this.beforeTickToLabelConversion();
    this.generateTickLabels(ticks);
    let i, ilen;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      if (isNullOrUndef(ticks[i].label)) {
        ticks.splice(i, 1);
        ilen--;
        i--;
      }
    }
    this.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    let labelSizes = this._labelSizes;
    if (!labelSizes) {
      const sampleSize = this.options.ticks.sampleSize;
      let ticks = this.ticks;
      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }
      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
    }
    return labelSizes;
  }
  _computeLabelSizes(ticks, length2, maxTicksLimit) {
    const { ctx, _longestTextCache: caches } = this;
    const widths = [];
    const heights = [];
    const increment = Math.floor(length2 / getTicksLimit(length2, maxTicksLimit));
    let widestLabelSize = 0;
    let highestLabelSize = 0;
    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
    for (i = 0; i < length2; i += increment) {
      label = ticks[i].label;
      tickFont = this._resolveTickFontOptions(i);
      ctx.font = fontString = tickFont.string;
      cache = caches[fontString] = caches[fontString] || {
        data: {},
        gc: []
      };
      lineHeight = tickFont.lineHeight;
      width = height = 0;
      if (!isNullOrUndef(label) && !isArray$1(label)) {
        width = _measureText(ctx, cache.data, cache.gc, width, label);
        height = lineHeight;
      } else if (isArray$1(label)) {
        for (j = 0, jlen = label.length; j < jlen; ++j) {
          nestedLabel = label[j];
          if (!isNullOrUndef(nestedLabel) && !isArray$1(nestedLabel)) {
            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
            height += lineHeight;
          }
        }
      }
      widths.push(width);
      heights.push(height);
      widestLabelSize = Math.max(width, widestLabelSize);
      highestLabelSize = Math.max(height, highestLabelSize);
    }
    garbageCollect(caches, length2);
    const widest = widths.indexOf(widestLabelSize);
    const highest = heights.indexOf(highestLabelSize);
    const valueAt = (idx) => ({
      width: widths[idx] || 0,
      height: heights[idx] || 0
    });
    return {
      first: valueAt(0),
      last: valueAt(length2 - 1),
      widest: valueAt(widest),
      highest: valueAt(highest),
      widths,
      heights
    };
  }
  getLabelForValue(value) {
    return value;
  }
  getPixelForValue(value, index2) {
    return NaN;
  }
  getValueForPixel(pixel) {
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getPixelForDecimal(decimal) {
    if (this._reversePixels) {
      decimal = 1 - decimal;
    }
    const pixel = this._startPixel + decimal * this._length;
    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
  }
  getDecimalForPixel(pixel) {
    const decimal = (pixel - this._startPixel) / this._length;
    return this._reversePixels ? 1 - decimal : decimal;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const { min: min2, max: max2 } = this;
    return min2 < 0 && max2 < 0 ? max2 : min2 > 0 && max2 > 0 ? min2 : 0;
  }
  getContext(index2) {
    const ticks = this.ticks || [];
    if (index2 >= 0 && index2 < ticks.length) {
      const tick = ticks[index2];
      return tick.$context || (tick.$context = createTickContext(this.getContext(), index2, tick));
    }
    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
  }
  _tickSize() {
    const optionTicks = this.options.ticks;
    const rot = toRadians(this.labelRotation);
    const cos = Math.abs(Math.cos(rot));
    const sin = Math.abs(Math.sin(rot));
    const labelSizes = this._getLabelSizes();
    const padding = optionTicks.autoSkipPadding || 0;
    const w2 = labelSizes ? labelSizes.widest.width + padding : 0;
    const h3 = labelSizes ? labelSizes.highest.height + padding : 0;
    return this.isHorizontal() ? h3 * cos > w2 * sin ? w2 / cos : h3 / sin : h3 * sin < w2 * cos ? h3 / cos : w2 / sin;
  }
  _isVisible() {
    const display = this.options.display;
    if (display !== "auto") {
      return !!display;
    }
    return this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(chartArea) {
    const axis = this.axis;
    const chart = this.chart;
    const options2 = this.options;
    const { grid, position: position2, border } = options2;
    const offset = grid.offset;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const ticksLength = ticks.length + (offset ? 1 : 0);
    const tl2 = getTickMarkLength(grid);
    const items = [];
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = borderOpts.display ? borderOpts.width : 0;
    const axisHalfWidth = axisWidth / 2;
    const alignBorderValue = function(pixel) {
      return _alignPixel(chart, pixel, axisWidth);
    };
    let borderValue, i, lineValue, alignedLineValue;
    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
    if (position2 === "top") {
      borderValue = alignBorderValue(this.bottom);
      ty1 = this.bottom - tl2;
      ty2 = borderValue - axisHalfWidth;
      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
      y2 = chartArea.bottom;
    } else if (position2 === "bottom") {
      borderValue = alignBorderValue(this.top);
      y1 = chartArea.top;
      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
      ty1 = borderValue + axisHalfWidth;
      ty2 = this.top + tl2;
    } else if (position2 === "left") {
      borderValue = alignBorderValue(this.right);
      tx1 = this.right - tl2;
      tx2 = borderValue - axisHalfWidth;
      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
      x2 = chartArea.right;
    } else if (position2 === "right") {
      borderValue = alignBorderValue(this.left);
      x1 = chartArea.left;
      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
      tx1 = borderValue + axisHalfWidth;
      tx2 = this.left + tl2;
    } else if (axis === "x") {
      if (position2 === "center") {
        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
      } else if (isObject(position2)) {
        const positionAxisID = Object.keys(position2)[0];
        const value = position2[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      y1 = chartArea.top;
      y2 = chartArea.bottom;
      ty1 = borderValue + axisHalfWidth;
      ty2 = ty1 + tl2;
    } else if (axis === "y") {
      if (position2 === "center") {
        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
      } else if (isObject(position2)) {
        const positionAxisID = Object.keys(position2)[0];
        const value = position2[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      tx1 = borderValue - axisHalfWidth;
      tx2 = tx1 - tl2;
      x1 = chartArea.left;
      x2 = chartArea.right;
    }
    const limit = valueOrDefault(options2.ticks.maxTicksLimit, ticksLength);
    const step = Math.max(1, Math.ceil(ticksLength / limit));
    for (i = 0; i < ticksLength; i += step) {
      const context = this.getContext(i);
      const optsAtIndex = grid.setContext(context);
      const optsAtIndexBorder = border.setContext(context);
      const lineWidth = optsAtIndex.lineWidth;
      const lineColor = optsAtIndex.color;
      const borderDash = optsAtIndexBorder.dash || [];
      const borderDashOffset = optsAtIndexBorder.dashOffset;
      const tickWidth = optsAtIndex.tickWidth;
      const tickColor = optsAtIndex.tickColor;
      const tickBorderDash = optsAtIndex.tickBorderDash || [];
      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
      lineValue = getPixelForGridLine(this, i, offset);
      if (lineValue === void 0) {
        continue;
      }
      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
      if (isHorizontal) {
        tx1 = tx2 = x1 = x2 = alignedLineValue;
      } else {
        ty1 = ty2 = y1 = y2 = alignedLineValue;
      }
      items.push({
        tx1,
        ty1,
        tx2,
        ty2,
        x1,
        y1,
        x2,
        y2,
        width: lineWidth,
        color: lineColor,
        borderDash,
        borderDashOffset,
        tickWidth,
        tickColor,
        tickBorderDash,
        tickBorderDashOffset
      });
    }
    this._ticksLength = ticksLength;
    this._borderValue = borderValue;
    return items;
  }
  _computeLabelItems(chartArea) {
    const axis = this.axis;
    const options2 = this.options;
    const { position: position2, ticks: optionTicks } = options2;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const { align, crossAlign, padding, mirror } = optionTicks;
    const tl2 = getTickMarkLength(options2.grid);
    const tickAndPadding = tl2 + padding;
    const hTickAndPadding = mirror ? -padding : tickAndPadding;
    const rotation = -toRadians(this.labelRotation);
    const items = [];
    let i, ilen, tick, label, x2, y2, textAlign, pixel, font, lineHeight, lineCount, textOffset;
    let textBaseline = "middle";
    if (position2 === "top") {
      y2 = this.bottom - hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position2 === "bottom") {
      y2 = this.top + hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position2 === "left") {
      const ret = this._getYAxisLabelAlignment(tl2);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (position2 === "right") {
      const ret = this._getYAxisLabelAlignment(tl2);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (axis === "x") {
      if (position2 === "center") {
        y2 = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
      } else if (isObject(position2)) {
        const positionAxisID = Object.keys(position2)[0];
        const value = position2[positionAxisID];
        y2 = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
      }
      textAlign = this._getXAxisLabelAlignment();
    } else if (axis === "y") {
      if (position2 === "center") {
        x2 = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
      } else if (isObject(position2)) {
        const positionAxisID = Object.keys(position2)[0];
        const value = position2[positionAxisID];
        x2 = this.chart.scales[positionAxisID].getPixelForValue(value);
      }
      textAlign = this._getYAxisLabelAlignment(tl2).textAlign;
    }
    if (axis === "y") {
      if (align === "start") {
        textBaseline = "top";
      } else if (align === "end") {
        textBaseline = "bottom";
      }
    }
    const labelSizes = this._getLabelSizes();
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      label = tick.label;
      const optsAtIndex = optionTicks.setContext(this.getContext(i));
      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
      font = this._resolveTickFontOptions(i);
      lineHeight = font.lineHeight;
      lineCount = isArray$1(label) ? label.length : 1;
      const halfCount = lineCount / 2;
      const color2 = optsAtIndex.color;
      const strokeColor = optsAtIndex.textStrokeColor;
      const strokeWidth = optsAtIndex.textStrokeWidth;
      let tickTextAlign = textAlign;
      if (isHorizontal) {
        x2 = pixel;
        if (textAlign === "inner") {
          if (i === ilen - 1) {
            tickTextAlign = !this.options.reverse ? "right" : "left";
          } else if (i === 0) {
            tickTextAlign = !this.options.reverse ? "left" : "right";
          } else {
            tickTextAlign = "center";
          }
        }
        if (position2 === "top") {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = -lineCount * lineHeight + lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
          } else {
            textOffset = -labelSizes.highest.height + lineHeight / 2;
          }
        } else {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
          } else {
            textOffset = labelSizes.highest.height - lineCount * lineHeight;
          }
        }
        if (mirror) {
          textOffset *= -1;
        }
        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
          x2 += lineHeight / 2 * Math.sin(rotation);
        }
      } else {
        y2 = pixel;
        textOffset = (1 - lineCount) * lineHeight / 2;
      }
      let backdrop;
      if (optsAtIndex.showLabelBackdrop) {
        const labelPadding = toPadding(optsAtIndex.backdropPadding);
        const height = labelSizes.heights[i];
        const width = labelSizes.widths[i];
        let top = textOffset - labelPadding.top;
        let left = 0 - labelPadding.left;
        switch (textBaseline) {
          case "middle":
            top -= height / 2;
            break;
          case "bottom":
            top -= height;
            break;
        }
        switch (textAlign) {
          case "center":
            left -= width / 2;
            break;
          case "right":
            left -= width;
            break;
          case "inner":
            if (i === ilen - 1) {
              left -= width;
            } else if (i > 0) {
              left -= width / 2;
            }
            break;
        }
        backdrop = {
          left,
          top,
          width: width + labelPadding.width,
          height: height + labelPadding.height,
          color: optsAtIndex.backdropColor
        };
      }
      items.push({
        label,
        font,
        textOffset,
        options: {
          rotation,
          color: color2,
          strokeColor,
          strokeWidth,
          textAlign: tickTextAlign,
          textBaseline,
          translation: [
            x2,
            y2
          ],
          backdrop
        }
      });
    }
    return items;
  }
  _getXAxisLabelAlignment() {
    const { position: position2, ticks } = this.options;
    const rotation = -toRadians(this.labelRotation);
    if (rotation) {
      return position2 === "top" ? "left" : "right";
    }
    let align = "center";
    if (ticks.align === "start") {
      align = "left";
    } else if (ticks.align === "end") {
      align = "right";
    } else if (ticks.align === "inner") {
      align = "inner";
    }
    return align;
  }
  _getYAxisLabelAlignment(tl2) {
    const { position: position2, ticks: { crossAlign, mirror, padding } } = this.options;
    const labelSizes = this._getLabelSizes();
    const tickAndPadding = tl2 + padding;
    const widest = labelSizes.widest.width;
    let textAlign;
    let x2;
    if (position2 === "left") {
      if (mirror) {
        x2 = this.right + padding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 += widest;
        }
      } else {
        x2 = this.right - tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 = this.left;
        }
      }
    } else if (position2 === "right") {
      if (mirror) {
        x2 = this.left + padding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 -= widest;
        }
      } else {
        x2 = this.left + tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 = this.right;
        }
      }
    } else {
      textAlign = "right";
    }
    return {
      textAlign,
      x: x2
    };
  }
  _computeLabelArea() {
    if (this.options.ticks.mirror) {
      return;
    }
    const chart = this.chart;
    const position2 = this.options.position;
    if (position2 === "left" || position2 === "right") {
      return {
        top: 0,
        left: this.left,
        bottom: chart.height,
        right: this.right
      };
    }
    if (position2 === "top" || position2 === "bottom") {
      return {
        top: this.top,
        left: 0,
        bottom: this.bottom,
        right: chart.width
      };
    }
  }
  drawBackground() {
    const { ctx, options: { backgroundColor }, left, top, width, height } = this;
    if (backgroundColor) {
      ctx.save();
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(left, top, width, height);
      ctx.restore();
    }
  }
  getLineWidthForValue(value) {
    const grid = this.options.grid;
    if (!this._isVisible() || !grid.display) {
      return 0;
    }
    const ticks = this.ticks;
    const index2 = ticks.findIndex((t2) => t2.value === value);
    if (index2 >= 0) {
      const opts = grid.setContext(this.getContext(index2));
      return opts.lineWidth;
    }
    return 0;
  }
  drawGrid(chartArea) {
    const grid = this.options.grid;
    const ctx = this.ctx;
    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
    let i, ilen;
    const drawLine = (p1, p2, style) => {
      if (!style.width || !style.color) {
        return;
      }
      ctx.save();
      ctx.lineWidth = style.width;
      ctx.strokeStyle = style.color;
      ctx.setLineDash(style.borderDash || []);
      ctx.lineDashOffset = style.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(p1.x, p1.y);
      ctx.lineTo(p2.x, p2.y);
      ctx.stroke();
      ctx.restore();
    };
    if (grid.display) {
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        const item2 = items[i];
        if (grid.drawOnChartArea) {
          drawLine({
            x: item2.x1,
            y: item2.y1
          }, {
            x: item2.x2,
            y: item2.y2
          }, item2);
        }
        if (grid.drawTicks) {
          drawLine({
            x: item2.tx1,
            y: item2.ty1
          }, {
            x: item2.tx2,
            y: item2.ty2
          }, {
            color: item2.tickColor,
            width: item2.tickWidth,
            borderDash: item2.tickBorderDash,
            borderDashOffset: item2.tickBorderDashOffset
          });
        }
      }
    }
  }
  drawBorder() {
    const { chart, ctx, options: { border, grid } } = this;
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = border.display ? borderOpts.width : 0;
    if (!axisWidth) {
      return;
    }
    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
    const borderValue = this._borderValue;
    let x1, x2, y1, y2;
    if (this.isHorizontal()) {
      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
      y1 = y2 = borderValue;
    } else {
      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
      x1 = x2 = borderValue;
    }
    ctx.save();
    ctx.lineWidth = borderOpts.width;
    ctx.strokeStyle = borderOpts.color;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
    ctx.restore();
  }
  drawLabels(chartArea) {
    const optionTicks = this.options.ticks;
    if (!optionTicks.display) {
      return;
    }
    const ctx = this.ctx;
    const area = this._computeLabelArea();
    if (area) {
      clipArea(ctx, area);
    }
    const items = this.getLabelItems(chartArea);
    for (const item2 of items) {
      const renderTextOptions = item2.options;
      const tickFont = item2.font;
      const label = item2.label;
      const y2 = item2.textOffset;
      renderText(ctx, label, 0, y2, tickFont, renderTextOptions);
    }
    if (area) {
      unclipArea(ctx);
    }
  }
  drawTitle() {
    const { ctx, options: { position: position2, title, reverse } } = this;
    if (!title.display) {
      return;
    }
    const font = toFont(title.font);
    const padding = toPadding(title.padding);
    const align = title.align;
    let offset = font.lineHeight / 2;
    if (position2 === "bottom" || position2 === "center" || isObject(position2)) {
      offset += padding.bottom;
      if (isArray$1(title.text)) {
        offset += font.lineHeight * (title.text.length - 1);
      }
    } else {
      offset += padding.top;
    }
    const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position2, align);
    renderText(ctx, title.text, 0, 0, font, {
      color: title.color,
      maxWidth,
      rotation,
      textAlign: titleAlign(align, position2, reverse),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
  draw(chartArea) {
    if (!this._isVisible()) {
      return;
    }
    this.drawBackground();
    this.drawGrid(chartArea);
    this.drawBorder();
    this.drawTitle();
    this.drawLabels(chartArea);
  }
  _layers() {
    const opts = this.options;
    const tz = opts.ticks && opts.ticks.z || 0;
    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
    const bz = valueOrDefault(opts.border && opts.border.z, 0);
    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
      return [
        {
          z: tz,
          draw: (chartArea) => {
            this.draw(chartArea);
          }
        }
      ];
    }
    return [
      {
        z: gz,
        draw: (chartArea) => {
          this.drawBackground();
          this.drawGrid(chartArea);
          this.drawTitle();
        }
      },
      {
        z: bz,
        draw: () => {
          this.drawBorder();
        }
      },
      {
        z: tz,
        draw: (chartArea) => {
          this.drawLabels(chartArea);
        }
      }
    ];
  }
  getMatchingVisibleMetas(type) {
    const metas = this.chart.getSortedVisibleDatasetMetas();
    const axisID = this.axis + "AxisID";
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      const meta = metas[i];
      if (meta[axisID] === this.id && (!type || meta.type === type)) {
        result.push(meta);
      }
    }
    return result;
  }
  _resolveTickFontOptions(index2) {
    const opts = this.options.ticks.setContext(this.getContext(index2));
    return toFont(opts.font);
  }
  _maxDigits() {
    const fontSize = this._resolveTickFontOptions(0).lineHeight;
    return (this.isHorizontal() ? this.width : this.height) / fontSize;
  }
}
class TypedRegistry {
  constructor(type, scope, override) {
    this.type = type;
    this.scope = scope;
    this.override = override;
    this.items = /* @__PURE__ */ Object.create(null);
  }
  isForType(type) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
  }
  register(item2) {
    const proto = Object.getPrototypeOf(item2);
    let parentScope;
    if (isIChartComponent(proto)) {
      parentScope = this.register(proto);
    }
    const items = this.items;
    const id2 = item2.id;
    const scope = this.scope + "." + id2;
    if (!id2) {
      throw new Error("class does not have id: " + item2);
    }
    if (id2 in items) {
      return scope;
    }
    items[id2] = item2;
    registerDefaults(item2, scope, parentScope);
    if (this.override) {
      defaults.override(item2.id, item2.overrides);
    }
    return scope;
  }
  get(id2) {
    return this.items[id2];
  }
  unregister(item2) {
    const items = this.items;
    const id2 = item2.id;
    const scope = this.scope;
    if (id2 in items) {
      delete items[id2];
    }
    if (scope && id2 in defaults[scope]) {
      delete defaults[scope][id2];
      if (this.override) {
        delete overrides[id2];
      }
    }
  }
}
function registerDefaults(item2, scope, parentScope) {
  const itemDefaults = merge(/* @__PURE__ */ Object.create(null), [
    parentScope ? defaults.get(parentScope) : {},
    defaults.get(scope),
    item2.defaults
  ]);
  defaults.set(scope, itemDefaults);
  if (item2.defaultRoutes) {
    routeDefaults(scope, item2.defaultRoutes);
  }
  if (item2.descriptors) {
    defaults.describe(scope, item2.descriptors);
  }
}
function routeDefaults(scope, routes) {
  Object.keys(routes).forEach((property) => {
    const propertyParts = property.split(".");
    const sourceName = propertyParts.pop();
    const sourceScope = [
      scope
    ].concat(propertyParts).join(".");
    const parts = routes[property].split(".");
    const targetName = parts.pop();
    const targetScope = parts.join(".");
    defaults.route(sourceScope, sourceName, targetScope, targetName);
  });
}
function isIChartComponent(proto) {
  return "id" in proto && "defaults" in proto;
}
class Registry {
  constructor() {
    this.controllers = new TypedRegistry(DatasetController, "datasets", true);
    this.elements = new TypedRegistry(Element$1, "elements");
    this.plugins = new TypedRegistry(Object, "plugins");
    this.scales = new TypedRegistry(Scale, "scales");
    this._typedRegistries = [
      this.controllers,
      this.scales,
      this.elements
    ];
  }
  add(...args) {
    this._each("register", args);
  }
  remove(...args) {
    this._each("unregister", args);
  }
  addControllers(...args) {
    this._each("register", args, this.controllers);
  }
  addElements(...args) {
    this._each("register", args, this.elements);
  }
  addPlugins(...args) {
    this._each("register", args, this.plugins);
  }
  addScales(...args) {
    this._each("register", args, this.scales);
  }
  getController(id2) {
    return this._get(id2, this.controllers, "controller");
  }
  getElement(id2) {
    return this._get(id2, this.elements, "element");
  }
  getPlugin(id2) {
    return this._get(id2, this.plugins, "plugin");
  }
  getScale(id2) {
    return this._get(id2, this.scales, "scale");
  }
  removeControllers(...args) {
    this._each("unregister", args, this.controllers);
  }
  removeElements(...args) {
    this._each("unregister", args, this.elements);
  }
  removePlugins(...args) {
    this._each("unregister", args, this.plugins);
  }
  removeScales(...args) {
    this._each("unregister", args, this.scales);
  }
  _each(method, args, typedRegistry) {
    [
      ...args
    ].forEach((arg) => {
      const reg = typedRegistry || this._getRegistryForType(arg);
      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
        this._exec(method, reg, arg);
      } else {
        each(arg, (item2) => {
          const itemReg = typedRegistry || this._getRegistryForType(item2);
          this._exec(method, itemReg, item2);
        });
      }
    });
  }
  _exec(method, registry2, component) {
    const camelMethod = _capitalize(method);
    callback(component["before" + camelMethod], [], component);
    registry2[method](component);
    callback(component["after" + camelMethod], [], component);
  }
  _getRegistryForType(type) {
    for (let i = 0; i < this._typedRegistries.length; i++) {
      const reg = this._typedRegistries[i];
      if (reg.isForType(type)) {
        return reg;
      }
    }
    return this.plugins;
  }
  _get(id2, typedRegistry, type) {
    const item2 = typedRegistry.get(id2);
    if (item2 === void 0) {
      throw new Error('"' + id2 + '" is not a registered ' + type + ".");
    }
    return item2;
  }
}
var registry = /* @__PURE__ */ new Registry();
class PluginService {
  constructor() {
    this._init = [];
  }
  notify(chart, hook, args, filter2) {
    if (hook === "beforeInit") {
      this._init = this._createDescriptors(chart, true);
      this._notify(this._init, chart, "install");
    }
    const descriptors2 = filter2 ? this._descriptors(chart).filter(filter2) : this._descriptors(chart);
    const result = this._notify(descriptors2, chart, hook, args);
    if (hook === "afterDestroy") {
      this._notify(descriptors2, chart, "stop");
      this._notify(this._init, chart, "uninstall");
    }
    return result;
  }
  _notify(descriptors2, chart, hook, args) {
    args = args || {};
    for (const descriptor of descriptors2) {
      const plugin = descriptor.plugin;
      const method = plugin[hook];
      const params = [
        chart,
        args,
        descriptor.options
      ];
      if (callback(method, params, plugin) === false && args.cancelable) {
        return false;
      }
    }
    return true;
  }
  invalidate() {
    if (!isNullOrUndef(this._cache)) {
      this._oldCache = this._cache;
      this._cache = void 0;
    }
  }
  _descriptors(chart) {
    if (this._cache) {
      return this._cache;
    }
    const descriptors2 = this._cache = this._createDescriptors(chart);
    this._notifyStateChanges(chart);
    return descriptors2;
  }
  _createDescriptors(chart, all) {
    const config2 = chart && chart.config;
    const options2 = valueOrDefault(config2.options && config2.options.plugins, {});
    const plugins = allPlugins(config2);
    return options2 === false && !all ? [] : createDescriptors(chart, plugins, options2, all);
  }
  _notifyStateChanges(chart) {
    const previousDescriptors = this._oldCache || [];
    const descriptors2 = this._cache;
    const diff = (a, b2) => a.filter((x2) => !b2.some((y2) => x2.plugin.id === y2.plugin.id));
    this._notify(diff(previousDescriptors, descriptors2), chart, "stop");
    this._notify(diff(descriptors2, previousDescriptors), chart, "start");
  }
}
function allPlugins(config2) {
  const localIds = {};
  const plugins = [];
  const keys = Object.keys(registry.plugins.items);
  for (let i = 0; i < keys.length; i++) {
    plugins.push(registry.getPlugin(keys[i]));
  }
  const local = config2.plugins || [];
  for (let i = 0; i < local.length; i++) {
    const plugin = local[i];
    if (plugins.indexOf(plugin) === -1) {
      plugins.push(plugin);
      localIds[plugin.id] = true;
    }
  }
  return {
    plugins,
    localIds
  };
}
function getOpts(options2, all) {
  if (!all && options2 === false) {
    return null;
  }
  if (options2 === true) {
    return {};
  }
  return options2;
}
function createDescriptors(chart, { plugins, localIds }, options2, all) {
  const result = [];
  const context = chart.getContext();
  for (const plugin of plugins) {
    const id2 = plugin.id;
    const opts = getOpts(options2[id2], all);
    if (opts === null) {
      continue;
    }
    result.push({
      plugin,
      options: pluginOpts(chart.config, {
        plugin,
        local: localIds[id2]
      }, opts, context)
    });
  }
  return result;
}
function pluginOpts(config2, { plugin, local }, opts, context) {
  const keys = config2.pluginScopeKeys(plugin);
  const scopes = config2.getOptionScopes(opts, keys);
  if (local && plugin.defaults) {
    scopes.push(plugin.defaults);
  }
  return config2.createResolver(scopes, context, [
    ""
  ], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}
function getIndexAxis(type, options2) {
  const datasetDefaults = defaults.datasets[type] || {};
  const datasetOptions = (options2.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options2.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id2, indexAxis) {
  let axis = id2;
  if (id2 === "_index_") {
    axis = indexAxis;
  } else if (id2 === "_value_") {
    axis = indexAxis === "x" ? "y" : "x";
  }
  return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? "_index_" : "_value_";
}
function idMatchesAxis(id2) {
  if (id2 === "x" || id2 === "y" || id2 === "r") {
    return id2;
  }
}
function axisFromPosition(position2) {
  if (position2 === "top" || position2 === "bottom") {
    return "x";
  }
  if (position2 === "left" || position2 === "right") {
    return "y";
  }
}
function determineAxis(id2, ...scaleOptions) {
  if (idMatchesAxis(id2)) {
    return id2;
  }
  for (const opts of scaleOptions) {
    const axis = opts.axis || axisFromPosition(opts.position) || id2.length > 1 && idMatchesAxis(id2[0].toLowerCase());
    if (axis) {
      return axis;
    }
  }
  throw new Error(`Cannot determine type of '${id2}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id2, axis, dataset) {
  if (dataset[axis + "AxisID"] === id2) {
    return {
      axis
    };
  }
}
function retrieveAxisFromDatasets(id2, config2) {
  if (config2.data && config2.data.datasets) {
    const boundDs = config2.data.datasets.filter((d2) => d2.xAxisID === id2 || d2.yAxisID === id2);
    if (boundDs.length) {
      return getAxisFromDataset(id2, "x", boundDs[0]) || getAxisFromDataset(id2, "y", boundDs[0]);
    }
  }
  return {};
}
function mergeScaleConfig(config2, options2) {
  const chartDefaults = overrides[config2.type] || {
    scales: {}
  };
  const configScales = options2.scales || {};
  const chartIndexAxis = getIndexAxis(config2.type, options2);
  const scales = /* @__PURE__ */ Object.create(null);
  Object.keys(configScales).forEach((id2) => {
    const scaleConf = configScales[id2];
    if (!isObject(scaleConf)) {
      return console.error(`Invalid scale configuration for scale: ${id2}`);
    }
    if (scaleConf._proxy) {
      return console.warn(`Ignoring resolver passed as options for scale: ${id2}`);
    }
    const axis = determineAxis(id2, scaleConf, retrieveAxisFromDatasets(id2, config2), defaults.scales[scaleConf.type]);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    scales[id2] = mergeIf(/* @__PURE__ */ Object.create(null), [
      {
        axis
      },
      scaleConf,
      defaultScaleOptions[axis],
      defaultScaleOptions[defaultId]
    ]);
  });
  config2.data.datasets.forEach((dataset) => {
    const type = dataset.type || config2.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options2);
    const datasetDefaults = overrides[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach((defaultID) => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id2 = dataset[axis + "AxisID"] || axis;
      scales[id2] = scales[id2] || /* @__PURE__ */ Object.create(null);
      mergeIf(scales[id2], [
        {
          axis
        },
        configScales[id2],
        defaultScaleOptions[defaultID]
      ]);
    });
  });
  Object.keys(scales).forEach((key) => {
    const scale = scales[key];
    mergeIf(scale, [
      defaults.scales[scale.type],
      defaults.scale
    ]);
  });
  return scales;
}
function initOptions(config2) {
  const options2 = config2.options || (config2.options = {});
  options2.plugins = valueOrDefault(options2.plugins, {});
  options2.scales = mergeScaleConfig(config2, options2);
}
function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}
function initConfig(config2) {
  config2 = config2 || {};
  config2.data = initData(config2.data);
  initOptions(config2);
  return config2;
}
const keyCache = /* @__PURE__ */ new Map();
const keysCached = /* @__PURE__ */ new Set();
function cachedKeys(cacheKey, generate) {
  let keys = keyCache.get(cacheKey);
  if (!keys) {
    keys = generate();
    keyCache.set(cacheKey, keys);
    keysCached.add(keys);
  }
  return keys;
}
const addIfFound = (set2, obj, key) => {
  const opts = resolveObjectKey(obj, key);
  if (opts !== void 0) {
    set2.add(opts);
  }
};
class Config {
  constructor(config2) {
    this._config = initConfig(config2);
    this._scopeCache = /* @__PURE__ */ new Map();
    this._resolverCache = /* @__PURE__ */ new Map();
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(type) {
    this._config.type = type;
  }
  get data() {
    return this._config.data;
  }
  set data(data) {
    this._config.data = initData(data);
  }
  get options() {
    return this._config.options;
  }
  set options(options2) {
    this._config.options = options2;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const config2 = this._config;
    this.clearCache();
    initOptions(config2);
  }
  clearCache() {
    this._scopeCache.clear();
    this._resolverCache.clear();
  }
  datasetScopeKeys(datasetType) {
    return cachedKeys(datasetType, () => [
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetAnimationScopeKeys(datasetType, transition) {
    return cachedKeys(`${datasetType}.transition.${transition}`, () => [
      [
        `datasets.${datasetType}.transitions.${transition}`,
        `transitions.${transition}`
      ],
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetElementScopeKeys(datasetType, elementType) {
    return cachedKeys(`${datasetType}-${elementType}`, () => [
      [
        `datasets.${datasetType}.elements.${elementType}`,
        `datasets.${datasetType}`,
        `elements.${elementType}`,
        ""
      ]
    ]);
  }
  pluginScopeKeys(plugin) {
    const id2 = plugin.id;
    const type = this.type;
    return cachedKeys(`${type}-plugin-${id2}`, () => [
      [
        `plugins.${id2}`,
        ...plugin.additionalOptionScopes || []
      ]
    ]);
  }
  _cachedScopes(mainScope, resetCache) {
    const _scopeCache = this._scopeCache;
    let cache = _scopeCache.get(mainScope);
    if (!cache || resetCache) {
      cache = /* @__PURE__ */ new Map();
      _scopeCache.set(mainScope, cache);
    }
    return cache;
  }
  getOptionScopes(mainScope, keyLists, resetCache) {
    const { options: options2, type } = this;
    const cache = this._cachedScopes(mainScope, resetCache);
    const cached = cache.get(keyLists);
    if (cached) {
      return cached;
    }
    const scopes = /* @__PURE__ */ new Set();
    keyLists.forEach((keys) => {
      if (mainScope) {
        scopes.add(mainScope);
        keys.forEach((key) => addIfFound(scopes, mainScope, key));
      }
      keys.forEach((key) => addIfFound(scopes, options2, key));
      keys.forEach((key) => addIfFound(scopes, overrides[type] || {}, key));
      keys.forEach((key) => addIfFound(scopes, defaults, key));
      keys.forEach((key) => addIfFound(scopes, descriptors, key));
    });
    const array = Array.from(scopes);
    if (array.length === 0) {
      array.push(/* @__PURE__ */ Object.create(null));
    }
    if (keysCached.has(keyLists)) {
      cache.set(keyLists, array);
    }
    return array;
  }
  chartOptionScopes() {
    const { options: options2, type } = this;
    return [
      options2,
      overrides[type] || {},
      defaults.datasets[type] || {},
      {
        type
      },
      defaults,
      descriptors
    ];
  }
  resolveNamedOptions(scopes, names2, context, prefixes = [
    ""
  ]) {
    const result = {
      $shared: true
    };
    const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes);
    let options2 = resolver;
    if (needContext(resolver, names2)) {
      result.$shared = false;
      context = isFunction(context) ? context() : context;
      const subResolver = this.createResolver(scopes, context, subPrefixes);
      options2 = _attachContext(resolver, context, subResolver);
    }
    for (const prop of names2) {
      result[prop] = options2[prop];
    }
    return result;
  }
  createResolver(scopes, context, prefixes = [
    ""
  ], descriptorDefaults) {
    const { resolver } = getResolver(this._resolverCache, scopes, prefixes);
    return isObject(context) ? _attachContext(resolver, context, void 0, descriptorDefaults) : resolver;
  }
}
function getResolver(resolverCache, scopes, prefixes) {
  let cache = resolverCache.get(scopes);
  if (!cache) {
    cache = /* @__PURE__ */ new Map();
    resolverCache.set(scopes, cache);
  }
  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);
  if (!cached) {
    const resolver = _createResolver(scopes, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter((p2) => !p2.toLowerCase().includes("hover"))
    };
    cache.set(cacheKey, cached);
  }
  return cached;
}
const hasFunction = (value) => isObject(value) && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));
function needContext(proxy, names2) {
  const { isScriptable, isIndexable } = _descriptors(proxy);
  for (const prop of names2) {
    const scriptable = isScriptable(prop);
    const indexable = isIndexable(prop);
    const value = (indexable || scriptable) && proxy[prop];
    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray$1(value)) {
      return true;
    }
  }
  return false;
}
var version = "4.4.2";
const KNOWN_POSITIONS = [
  "top",
  "bottom",
  "left",
  "right",
  "chartArea"
];
function positionIsHorizontal(position2, axis) {
  return position2 === "top" || position2 === "bottom" || KNOWN_POSITIONS.indexOf(position2) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
  return function(a, b2) {
    return a[l1] === b2[l1] ? a[l2] - b2[l2] : a[l1] - b2[l1];
  };
}
function onAnimationsComplete(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins("afterRender");
  callback(animationOptions && animationOptions.onComplete, [
    context
  ], chart);
}
function onAnimationProgress(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  callback(animationOptions && animationOptions.onProgress, [
    context
  ], chart);
}
function getCanvas(item2) {
  if (_isDomSupported() && typeof item2 === "string") {
    item2 = document.getElementById(item2);
  } else if (item2 && item2.length) {
    item2 = item2[0];
  }
  if (item2 && item2.canvas) {
    item2 = item2.canvas;
  }
  return item2;
}
const instances = {};
const getChart = (key) => {
  const canvas = getCanvas(key);
  return Object.values(instances).filter((c2) => c2.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
  const keys = Object.keys(obj);
  for (const key of keys) {
    const intKey = +key;
    if (intKey >= start) {
      const value = obj[key];
      delete obj[key];
      if (move > 0 || intKey > start) {
        obj[intKey + move] = value;
      }
    }
  }
}
function determineLastEvent(e2, lastEvent, inChartArea, isClick) {
  if (!inChartArea || e2.type === "mouseout") {
    return null;
  }
  if (isClick) {
    return lastEvent;
  }
  return e2;
}
function getSizeForArea(scale, chartArea, field) {
  return scale.options.clip ? scale[field] : chartArea[field];
}
function getDatasetArea(meta, chartArea) {
  const { xScale, yScale } = meta;
  if (xScale && yScale) {
    return {
      left: getSizeForArea(xScale, chartArea, "left"),
      right: getSizeForArea(xScale, chartArea, "right"),
      top: getSizeForArea(yScale, chartArea, "top"),
      bottom: getSizeForArea(yScale, chartArea, "bottom")
    };
  }
  return chartArea;
}
let Chart$1 = (_b = class {
  static register(...items) {
    registry.add(...items);
    invalidatePlugins();
  }
  static unregister(...items) {
    registry.remove(...items);
    invalidatePlugins();
  }
  constructor(item2, userConfig) {
    const config2 = this.config = new Config(userConfig);
    const initialCanvas = getCanvas(item2);
    const existingChart = getChart(initialCanvas);
    if (existingChart) {
      throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "' must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
    }
    const options2 = config2.createResolver(config2.chartOptionScopes(), this.getContext());
    this.platform = new (config2.platform || _detectPlatform(initialCanvas))();
    this.platform.updateConfig(config2);
    const context = this.platform.acquireContext(initialCanvas, options2.aspectRatio);
    const canvas = context && context.canvas;
    const height = canvas && canvas.height;
    const width = canvas && canvas.width;
    this.id = uid();
    this.ctx = context;
    this.canvas = canvas;
    this.width = width;
    this.height = height;
    this._options = options2;
    this._aspectRatio = this.aspectRatio;
    this._layers = [];
    this._metasets = [];
    this._stacks = void 0;
    this.boxes = [];
    this.currentDevicePixelRatio = void 0;
    this.chartArea = void 0;
    this._active = [];
    this._lastEvent = void 0;
    this._listeners = {};
    this._responsiveListeners = void 0;
    this._sortedMetasets = [];
    this.scales = {};
    this._plugins = new PluginService();
    this.$proxies = {};
    this._hiddenIndices = {};
    this.attached = false;
    this._animationsDisabled = void 0;
    this.$context = void 0;
    this._doResize = debounce((mode) => this.update(mode), options2.resizeDelay || 0);
    this._dataChanges = [];
    instances[this.id] = this;
    if (!context || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    animator.listen(this, "complete", onAnimationsComplete);
    animator.listen(this, "progress", onAnimationProgress);
    this._initialize();
    if (this.attached) {
      this.update();
    }
  }
  get aspectRatio() {
    const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
    if (!isNullOrUndef(aspectRatio)) {
      return aspectRatio;
    }
    if (maintainAspectRatio && _aspectRatio) {
      return _aspectRatio;
    }
    return height ? width / height : null;
  }
  get data() {
    return this.config.data;
  }
  set data(data) {
    this.config.data = data;
  }
  get options() {
    return this._options;
  }
  set options(options2) {
    this.config.options = options2;
  }
  get registry() {
    return registry;
  }
  _initialize() {
    this.notifyPlugins("beforeInit");
    if (this.options.responsive) {
      this.resize();
    } else {
      retinaScale(this, this.options.devicePixelRatio);
    }
    this.bindEvents();
    this.notifyPlugins("afterInit");
    return this;
  }
  clear() {
    clearCanvas(this.canvas, this.ctx);
    return this;
  }
  stop() {
    animator.stop(this);
    return this;
  }
  resize(width, height) {
    if (!animator.running(this)) {
      this._resize(width, height);
    } else {
      this._resizeBeforeDraw = {
        width,
        height
      };
    }
  }
  _resize(width, height) {
    const options2 = this.options;
    const canvas = this.canvas;
    const aspectRatio = options2.maintainAspectRatio && this.aspectRatio;
    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
    const newRatio = options2.devicePixelRatio || this.platform.getDevicePixelRatio();
    const mode = this.width ? "resize" : "attach";
    this.width = newSize.width;
    this.height = newSize.height;
    this._aspectRatio = this.aspectRatio;
    if (!retinaScale(this, newRatio, true)) {
      return;
    }
    this.notifyPlugins("resize", {
      size: newSize
    });
    callback(options2.onResize, [
      this,
      newSize
    ], this);
    if (this.attached) {
      if (this._doResize(mode)) {
        this.render();
      }
    }
  }
  ensureScalesHaveIDs() {
    const options2 = this.options;
    const scalesOptions = options2.scales || {};
    each(scalesOptions, (axisOptions, axisID) => {
      axisOptions.id = axisID;
    });
  }
  buildOrUpdateScales() {
    const options2 = this.options;
    const scaleOpts = options2.scales;
    const scales = this.scales;
    const updated = Object.keys(scales).reduce((obj, id2) => {
      obj[id2] = false;
      return obj;
    }, {});
    let items = [];
    if (scaleOpts) {
      items = items.concat(Object.keys(scaleOpts).map((id2) => {
        const scaleOptions = scaleOpts[id2];
        const axis = determineAxis(id2, scaleOptions);
        const isRadial = axis === "r";
        const isHorizontal = axis === "x";
        return {
          options: scaleOptions,
          dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
          dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
        };
      }));
    }
    each(items, (item2) => {
      const scaleOptions = item2.options;
      const id2 = scaleOptions.id;
      const axis = determineAxis(id2, scaleOptions);
      const scaleType = valueOrDefault(scaleOptions.type, item2.dtype);
      if (scaleOptions.position === void 0 || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item2.dposition)) {
        scaleOptions.position = item2.dposition;
      }
      updated[id2] = true;
      let scale = null;
      if (id2 in scales && scales[id2].type === scaleType) {
        scale = scales[id2];
      } else {
        const scaleClass = registry.getScale(scaleType);
        scale = new scaleClass({
          id: id2,
          type: scaleType,
          ctx: this.ctx,
          chart: this
        });
        scales[scale.id] = scale;
      }
      scale.init(scaleOptions, options2);
    });
    each(updated, (hasUpdated, id2) => {
      if (!hasUpdated) {
        delete scales[id2];
      }
    });
    each(scales, (scale) => {
      layouts.configure(this, scale, scale.options);
      layouts.addBox(this, scale);
    });
  }
  _updateMetasets() {
    const metasets = this._metasets;
    const numData = this.data.datasets.length;
    const numMeta = metasets.length;
    metasets.sort((a, b2) => a.index - b2.index);
    if (numMeta > numData) {
      for (let i = numData; i < numMeta; ++i) {
        this._destroyDatasetMeta(i);
      }
      metasets.splice(numData, numMeta - numData);
    }
    this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
  }
  _removeUnreferencedMetasets() {
    const { _metasets: metasets, data: { datasets } } = this;
    if (metasets.length > datasets.length) {
      delete this._stacks;
    }
    metasets.forEach((meta, index2) => {
      if (datasets.filter((x2) => x2 === meta._dataset).length === 0) {
        this._destroyDatasetMeta(index2);
      }
    });
  }
  buildOrUpdateControllers() {
    const newControllers = [];
    const datasets = this.data.datasets;
    let i, ilen;
    this._removeUnreferencedMetasets();
    for (i = 0, ilen = datasets.length; i < ilen; i++) {
      const dataset = datasets[i];
      let meta = this.getDatasetMeta(i);
      const type = dataset.type || this.config.type;
      if (meta.type && meta.type !== type) {
        this._destroyDatasetMeta(i);
        meta = this.getDatasetMeta(i);
      }
      meta.type = type;
      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
      meta.order = dataset.order || 0;
      meta.index = i;
      meta.label = "" + dataset.label;
      meta.visible = this.isDatasetVisible(i);
      if (meta.controller) {
        meta.controller.updateIndex(i);
        meta.controller.linkScales();
      } else {
        const ControllerClass = registry.getController(type);
        const { datasetElementType, dataElementType } = defaults.datasets[type];
        Object.assign(ControllerClass, {
          dataElementType: registry.getElement(dataElementType),
          datasetElementType: datasetElementType && registry.getElement(datasetElementType)
        });
        meta.controller = new ControllerClass(this, i);
        newControllers.push(meta.controller);
      }
    }
    this._updateMetasets();
    return newControllers;
  }
  _resetElements() {
    each(this.data.datasets, (dataset, datasetIndex) => {
      this.getDatasetMeta(datasetIndex).controller.reset();
    }, this);
  }
  reset() {
    this._resetElements();
    this.notifyPlugins("reset");
  }
  update(mode) {
    const config2 = this.config;
    config2.update();
    const options2 = this._options = config2.createResolver(config2.chartOptionScopes(), this.getContext());
    const animsDisabled = this._animationsDisabled = !options2.animation;
    this._updateScales();
    this._checkEventBindings();
    this._updateHiddenIndices();
    this._plugins.invalidate();
    if (this.notifyPlugins("beforeUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    const newControllers = this.buildOrUpdateControllers();
    this.notifyPlugins("beforeElementsUpdate");
    let minPadding = 0;
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {
      const { controller } = this.getDatasetMeta(i);
      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
      controller.buildOrUpdateElements(reset);
      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
    }
    minPadding = this._minPadding = options2.layout.autoPadding ? minPadding : 0;
    this._updateLayout(minPadding);
    if (!animsDisabled) {
      each(newControllers, (controller) => {
        controller.reset();
      });
    }
    this._updateDatasets(mode);
    this.notifyPlugins("afterUpdate", {
      mode
    });
    this._layers.sort(compare2Level("z", "_idx"));
    const { _active, _lastEvent } = this;
    if (_lastEvent) {
      this._eventHandler(_lastEvent, true);
    } else if (_active.length) {
      this._updateHoverStyles(_active, _active, true);
    }
    this.render();
  }
  _updateScales() {
    each(this.scales, (scale) => {
      layouts.removeBox(this, scale);
    });
    this.ensureScalesHaveIDs();
    this.buildOrUpdateScales();
  }
  _checkEventBindings() {
    const options2 = this.options;
    const existingEvents = new Set(Object.keys(this._listeners));
    const newEvents = new Set(options2.events);
    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options2.responsive) {
      this.unbindEvents();
      this.bindEvents();
    }
  }
  _updateHiddenIndices() {
    const { _hiddenIndices } = this;
    const changes = this._getUniformDataChanges() || [];
    for (const { method, start, count } of changes) {
      const move = method === "_removeElements" ? -count : count;
      moveNumericKeys(_hiddenIndices, start, move);
    }
  }
  _getUniformDataChanges() {
    const _dataChanges = this._dataChanges;
    if (!_dataChanges || !_dataChanges.length) {
      return;
    }
    this._dataChanges = [];
    const datasetCount = this.data.datasets.length;
    const makeSet = (idx) => new Set(_dataChanges.filter((c2) => c2[0] === idx).map((c2, i) => i + "," + c2.splice(1).join(",")));
    const changeSet = makeSet(0);
    for (let i = 1; i < datasetCount; i++) {
      if (!setsEqual(changeSet, makeSet(i))) {
        return;
      }
    }
    return Array.from(changeSet).map((c2) => c2.split(",")).map((a) => ({
      method: a[1],
      start: +a[2],
      count: +a[3]
    }));
  }
  _updateLayout(minPadding) {
    if (this.notifyPlugins("beforeLayout", {
      cancelable: true
    }) === false) {
      return;
    }
    layouts.update(this, this.width, this.height, minPadding);
    const area = this.chartArea;
    const noArea = area.width <= 0 || area.height <= 0;
    this._layers = [];
    each(this.boxes, (box) => {
      if (noArea && box.position === "chartArea") {
        return;
      }
      if (box.configure) {
        box.configure();
      }
      this._layers.push(...box._layers());
    }, this);
    this._layers.forEach((item2, index2) => {
      item2._idx = index2;
    });
    this.notifyPlugins("afterLayout");
  }
  _updateDatasets(mode) {
    if (this.notifyPlugins("beforeDatasetsUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this.getDatasetMeta(i).controller.configure();
    }
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this._updateDataset(i, isFunction(mode) ? mode({
        datasetIndex: i
      }) : mode);
    }
    this.notifyPlugins("afterDatasetsUpdate", {
      mode
    });
  }
  _updateDataset(index2, mode) {
    const meta = this.getDatasetMeta(index2);
    const args = {
      meta,
      index: index2,
      mode,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetUpdate", args) === false) {
      return;
    }
    meta.controller._update(mode);
    args.cancelable = false;
    this.notifyPlugins("afterDatasetUpdate", args);
  }
  render() {
    if (this.notifyPlugins("beforeRender", {
      cancelable: true
    }) === false) {
      return;
    }
    if (animator.has(this)) {
      if (this.attached && !animator.running(this)) {
        animator.start(this);
      }
    } else {
      this.draw();
      onAnimationsComplete({
        chart: this
      });
    }
  }
  draw() {
    let i;
    if (this._resizeBeforeDraw) {
      const { width, height } = this._resizeBeforeDraw;
      this._resize(width, height);
      this._resizeBeforeDraw = null;
    }
    this.clear();
    if (this.width <= 0 || this.height <= 0) {
      return;
    }
    if (this.notifyPlugins("beforeDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const layers = this._layers;
    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
      layers[i].draw(this.chartArea);
    }
    this._drawDatasets();
    for (; i < layers.length; ++i) {
      layers[i].draw(this.chartArea);
    }
    this.notifyPlugins("afterDraw");
  }
  _getSortedDatasetMetas(filterVisible) {
    const metasets = this._sortedMetasets;
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metasets.length; i < ilen; ++i) {
      const meta = metasets[i];
      if (!filterVisible || meta.visible) {
        result.push(meta);
      }
    }
    return result;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }
  _drawDatasets() {
    if (this.notifyPlugins("beforeDatasetsDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const metasets = this.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      this._drawDataset(metasets[i]);
    }
    this.notifyPlugins("afterDatasetsDraw");
  }
  _drawDataset(meta) {
    const ctx = this.ctx;
    const clip = meta._clip;
    const useClip = !clip.disabled;
    const area = getDatasetArea(meta, this.chartArea);
    const args = {
      meta,
      index: meta.index,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetDraw", args) === false) {
      return;
    }
    if (useClip) {
      clipArea(ctx, {
        left: clip.left === false ? 0 : area.left - clip.left,
        right: clip.right === false ? this.width : area.right + clip.right,
        top: clip.top === false ? 0 : area.top - clip.top,
        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
      });
    }
    meta.controller.draw();
    if (useClip) {
      unclipArea(ctx);
    }
    args.cancelable = false;
    this.notifyPlugins("afterDatasetDraw", args);
  }
  isPointInArea(point) {
    return _isPointInArea(point, this.chartArea, this._minPadding);
  }
  getElementsAtEventForMode(e2, mode, options2, useFinalPosition) {
    const method = Interaction.modes[mode];
    if (typeof method === "function") {
      return method(this, e2, options2, useFinalPosition);
    }
    return [];
  }
  getDatasetMeta(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    const metasets = this._metasets;
    let meta = metasets.filter((x2) => x2 && x2._dataset === dataset).pop();
    if (!meta) {
      meta = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: dataset && dataset.order || 0,
        index: datasetIndex,
        _dataset: dataset,
        _parsed: [],
        _sorted: false
      };
      metasets.push(meta);
    }
    return meta;
  }
  getContext() {
    return this.$context || (this.$context = createContext(null, {
      chart: this,
      type: "chart"
    }));
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    if (!dataset) {
      return false;
    }
    const meta = this.getDatasetMeta(datasetIndex);
    return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
  }
  setDatasetVisibility(datasetIndex, visible) {
    const meta = this.getDatasetMeta(datasetIndex);
    meta.hidden = !visible;
  }
  toggleDataVisibility(index2) {
    this._hiddenIndices[index2] = !this._hiddenIndices[index2];
  }
  getDataVisibility(index2) {
    return !this._hiddenIndices[index2];
  }
  _updateVisibility(datasetIndex, dataIndex, visible) {
    const mode = visible ? "show" : "hide";
    const meta = this.getDatasetMeta(datasetIndex);
    const anims = meta.controller._resolveAnimations(void 0, mode);
    if (defined(dataIndex)) {
      meta.data[dataIndex].hidden = !visible;
      this.update();
    } else {
      this.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {
        visible
      });
      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : void 0);
    }
  }
  hide(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, false);
  }
  show(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, true);
  }
  _destroyDatasetMeta(datasetIndex) {
    const meta = this._metasets[datasetIndex];
    if (meta && meta.controller) {
      meta.controller._destroy();
    }
    delete this._metasets[datasetIndex];
  }
  _stop() {
    let i, ilen;
    this.stop();
    animator.remove(this);
    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this._destroyDatasetMeta(i);
    }
  }
  destroy() {
    this.notifyPlugins("beforeDestroy");
    const { canvas, ctx } = this;
    this._stop();
    this.config.clearCache();
    if (canvas) {
      this.unbindEvents();
      clearCanvas(canvas, ctx);
      this.platform.releaseContext(ctx);
      this.canvas = null;
      this.ctx = null;
    }
    delete instances[this.id];
    this.notifyPlugins("afterDestroy");
  }
  toBase64Image(...args) {
    return this.canvas.toDataURL(...args);
  }
  bindEvents() {
    this.bindUserEvents();
    if (this.options.responsive) {
      this.bindResponsiveEvents();
    } else {
      this.attached = true;
    }
  }
  bindUserEvents() {
    const listeners = this._listeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const listener = (e2, x2, y2) => {
      e2.offsetX = x2;
      e2.offsetY = y2;
      this._eventHandler(e2);
    };
    each(this.options.events, (type) => _add(type, listener));
  }
  bindResponsiveEvents() {
    if (!this._responsiveListeners) {
      this._responsiveListeners = {};
    }
    const listeners = this._responsiveListeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const _remove = (type, listener2) => {
      if (listeners[type]) {
        platform.removeEventListener(this, type, listener2);
        delete listeners[type];
      }
    };
    const listener = (width, height) => {
      if (this.canvas) {
        this.resize(width, height);
      }
    };
    let detached;
    const attached = () => {
      _remove("attach", attached);
      this.attached = true;
      this.resize();
      _add("resize", listener);
      _add("detach", detached);
    };
    detached = () => {
      this.attached = false;
      _remove("resize", listener);
      this._stop();
      this._resize(0, 0);
      _add("attach", attached);
    };
    if (platform.isAttached(this.canvas)) {
      attached();
    } else {
      detached();
    }
  }
  unbindEvents() {
    each(this._listeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._listeners = {};
    each(this._responsiveListeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._responsiveListeners = void 0;
  }
  updateHoverStyle(items, mode, enabled) {
    const prefix2 = enabled ? "set" : "remove";
    let meta, item2, i, ilen;
    if (mode === "dataset") {
      meta = this.getDatasetMeta(items[0].datasetIndex);
      meta.controller["_" + prefix2 + "DatasetHoverStyle"]();
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      item2 = items[i];
      const controller = item2 && this.getDatasetMeta(item2.datasetIndex).controller;
      if (controller) {
        controller[prefix2 + "HoverStyle"](item2.element, item2.datasetIndex, item2.index);
      }
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements) {
    const lastActive = this._active || [];
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("No dataset found at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(active, lastActive);
    if (changed) {
      this._active = active;
      this._lastEvent = null;
      this._updateHoverStyles(active, lastActive);
    }
  }
  notifyPlugins(hook, args, filter2) {
    return this._plugins.notify(this, hook, args, filter2);
  }
  isPluginEnabled(pluginId) {
    return this._plugins._cache.filter((p2) => p2.plugin.id === pluginId).length === 1;
  }
  _updateHoverStyles(active, lastActive, replay) {
    const hoverOptions = this.options.hover;
    const diff = (a, b2) => a.filter((x2) => !b2.some((y2) => x2.datasetIndex === y2.datasetIndex && x2.index === y2.index));
    const deactivated = diff(lastActive, active);
    const activated = replay ? active : diff(active, lastActive);
    if (deactivated.length) {
      this.updateHoverStyle(deactivated, hoverOptions.mode, false);
    }
    if (activated.length && hoverOptions.mode) {
      this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
  }
  _eventHandler(e2, replay) {
    const args = {
      event: e2,
      replay,
      cancelable: true,
      inChartArea: this.isPointInArea(e2)
    };
    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e2.native.type);
    if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) {
      return;
    }
    const changed = this._handleEvent(e2, replay, args.inChartArea);
    args.cancelable = false;
    this.notifyPlugins("afterEvent", args, eventFilter);
    if (changed || args.changed) {
      this.render();
    }
    return this;
  }
  _handleEvent(e2, replay, inChartArea) {
    const { _active: lastActive = [], options: options2 } = this;
    const useFinalPosition = replay;
    const active = this._getActiveElements(e2, lastActive, inChartArea, useFinalPosition);
    const isClick = _isClickEvent(e2);
    const lastEvent = determineLastEvent(e2, this._lastEvent, inChartArea, isClick);
    if (inChartArea) {
      this._lastEvent = null;
      callback(options2.onHover, [
        e2,
        active,
        this
      ], this);
      if (isClick) {
        callback(options2.onClick, [
          e2,
          active,
          this
        ], this);
      }
    }
    const changed = !_elementsEqual(active, lastActive);
    if (changed || replay) {
      this._active = active;
      this._updateHoverStyles(active, lastActive, replay);
    }
    this._lastEvent = lastEvent;
    return changed;
  }
  _getActiveElements(e2, lastActive, inChartArea, useFinalPosition) {
    if (e2.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const hoverOptions = this.options.hover;
    return this.getElementsAtEventForMode(e2, hoverOptions.mode, hoverOptions, useFinalPosition);
  }
}, __publicField(_b, "defaults", defaults), __publicField(_b, "instances", instances), __publicField(_b, "overrides", overrides), __publicField(_b, "registry", registry), __publicField(_b, "version", version), __publicField(_b, "getChart", getChart), _b);
function invalidatePlugins() {
  return each(Chart$1.instances, (chart) => chart._plugins.invalidate());
}
function setStyle(ctx, options2, style = options2) {
  ctx.lineCap = valueOrDefault(style.borderCapStyle, options2.borderCapStyle);
  ctx.setLineDash(valueOrDefault(style.borderDash, options2.borderDash));
  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options2.borderDashOffset);
  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options2.borderJoinStyle);
  ctx.lineWidth = valueOrDefault(style.borderWidth, options2.borderWidth);
  ctx.strokeStyle = valueOrDefault(style.borderColor, options2.borderColor);
}
function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}
function getLineMethod(options2) {
  if (options2.stepped) {
    return _steppedLineTo;
  }
  if (options2.tension || options2.cubicInterpolationMode === "monotone") {
    return _bezierCurveTo;
  }
  return lineTo;
}
function pathVars(points, segment, params = {}) {
  const count = points.length;
  const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
  const { start: segmentStart, end: segmentEnd } = segment;
  const start = Math.max(paramsStart, segmentStart);
  const end = Math.min(paramsEnd, segmentEnd);
  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
  return {
    count,
    start,
    loop: segment.loop,
    ilen: end < start && !outside ? count + end - start : end - start
  };
}
function pathSegment(ctx, line2, segment, params) {
  const { points, options: options2 } = line2;
  const { count, start, loop, ilen } = pathVars(points, segment, params);
  const lineMethod = getLineMethod(options2);
  let { move = true, reverse } = params || {};
  let i, point, prev2;
  for (i = 0; i <= ilen; ++i) {
    point = points[(start + (reverse ? ilen - i : i)) % count];
    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev2, point, reverse, options2.stepped);
    }
    prev2 = point;
  }
  if (loop) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev2, point, reverse, options2.stepped);
  }
  return !!loop;
}
function fastPathSegment(ctx, line2, segment, params) {
  const points = line2.points;
  const { count, start, ilen } = pathVars(points, segment, params);
  const { move = true, reverse } = params || {};
  let avgX = 0;
  let countX = 0;
  let i, point, prevX, minY, maxY, lastY;
  const pointIndex = (index2) => (start + (reverse ? ilen - index2 : index2)) % count;
  const drawX = () => {
    if (minY !== maxY) {
      ctx.lineTo(avgX, maxY);
      ctx.lineTo(avgX, minY);
      ctx.lineTo(avgX, lastY);
    }
  };
  if (move) {
    point = points[pointIndex(0)];
    ctx.moveTo(point.x, point.y);
  }
  for (i = 0; i <= ilen; ++i) {
    point = points[pointIndex(i)];
    if (point.skip) {
      continue;
    }
    const x2 = point.x;
    const y2 = point.y;
    const truncX = x2 | 0;
    if (truncX === prevX) {
      if (y2 < minY) {
        minY = y2;
      } else if (y2 > maxY) {
        maxY = y2;
      }
      avgX = (countX * avgX + x2) / ++countX;
    } else {
      drawX();
      ctx.lineTo(x2, y2);
      prevX = truncX;
      countX = 0;
      minY = maxY = y2;
    }
    lastY = y2;
  }
  drawX();
}
function _getSegmentMethod(line2) {
  const opts = line2.options;
  const borderDash = opts.borderDash && opts.borderDash.length;
  const useFastPath = !line2._decimated && !line2._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options2) {
  if (options2.stepped) {
    return _steppedInterpolation;
  }
  if (options2.tension || options2.cubicInterpolationMode === "monotone") {
    return _bezierInterpolation;
  }
  return _pointInLine;
}
function strokePathWithCache(ctx, line2, start, count) {
  let path = line2._path;
  if (!path) {
    path = line2._path = new Path2D();
    if (line2.path(path, start, count)) {
      path.closePath();
    }
  }
  setStyle(ctx, line2.options);
  ctx.stroke(path);
}
function strokePathDirect(ctx, line2, start, count) {
  const { segments, options: options2 } = line2;
  const segmentMethod = _getSegmentMethod(line2);
  for (const segment of segments) {
    setStyle(ctx, options2, segment.style);
    ctx.beginPath();
    if (segmentMethod(ctx, line2, segment, {
      start,
      end: start + count - 1
    })) {
      ctx.closePath();
    }
    ctx.stroke();
  }
}
const usePath2D = typeof Path2D === "function";
function draw(ctx, line2, start, count) {
  if (usePath2D && !line2.options.segment) {
    strokePathWithCache(ctx, line2, start, count);
  } else {
    strokePathDirect(ctx, line2, start, count);
  }
}
class LineElement extends Element$1 {
  constructor(cfg) {
    super();
    this.animated = true;
    this.options = void 0;
    this._chart = void 0;
    this._loop = void 0;
    this._fullLoop = void 0;
    this._path = void 0;
    this._points = void 0;
    this._segments = void 0;
    this._decimated = false;
    this._pointsUpdated = false;
    this._datasetIndex = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  updateControlPoints(chartArea, indexAxis) {
    const options2 = this.options;
    if ((options2.tension || options2.cubicInterpolationMode === "monotone") && !options2.stepped && !this._pointsUpdated) {
      const loop = options2.spanGaps ? this._loop : this._fullLoop;
      _updateBezierControlPoints(this._points, options2, chartArea, loop, indexAxis);
      this._pointsUpdated = true;
    }
  }
  set points(points) {
    this._points = points;
    delete this._segments;
    delete this._path;
    this._pointsUpdated = false;
  }
  get points() {
    return this._points;
  }
  get segments() {
    return this._segments || (this._segments = _computeSegments(this, this.options.segment));
  }
  first() {
    const segments = this.segments;
    const points = this.points;
    return segments.length && points[segments[0].start];
  }
  last() {
    const segments = this.segments;
    const points = this.points;
    const count = segments.length;
    return count && points[segments[count - 1].end];
  }
  interpolate(point, property) {
    const options2 = this.options;
    const value = point[property];
    const points = this.points;
    const segments = _boundSegments(this, {
      property,
      start: value,
      end: value
    });
    if (!segments.length) {
      return;
    }
    const result = [];
    const _interpolate = _getInterpolationMethod(options2);
    let i, ilen;
    for (i = 0, ilen = segments.length; i < ilen; ++i) {
      const { start, end } = segments[i];
      const p1 = points[start];
      const p2 = points[end];
      if (p1 === p2) {
        result.push(p1);
        continue;
      }
      const t2 = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
      const interpolated = _interpolate(p1, p2, t2, options2.stepped);
      interpolated[property] = point[property];
      result.push(interpolated);
    }
    return result.length === 1 ? result[0] : result;
  }
  pathSegment(ctx, segment, params) {
    const segmentMethod = _getSegmentMethod(this);
    return segmentMethod(ctx, this, segment, params);
  }
  path(ctx, start, count) {
    const segments = this.segments;
    const segmentMethod = _getSegmentMethod(this);
    let loop = this._loop;
    start = start || 0;
    count = count || this.points.length - start;
    for (const segment of segments) {
      loop &= segmentMethod(ctx, this, segment, {
        start,
        end: start + count - 1
      });
    }
    return !!loop;
  }
  draw(ctx, chartArea, start, count) {
    const options2 = this.options || {};
    const points = this.points || [];
    if (points.length && options2.borderWidth) {
      ctx.save();
      draw(ctx, this, start, count);
      ctx.restore();
    }
    if (this.animated) {
      this._pointsUpdated = false;
      this._path = void 0;
    }
  }
}
__publicField(LineElement, "id", "line");
__publicField(LineElement, "defaults", {
  borderCapStyle: "butt",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: "miter",
  borderWidth: 3,
  capBezierPoints: true,
  cubicInterpolationMode: "default",
  fill: false,
  spanGaps: false,
  stepped: false,
  tension: 0
});
__publicField(LineElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
__publicField(LineElement, "descriptors", {
  _scriptable: true,
  _indexable: (name) => name !== "borderDash" && name !== "fill"
});
function inRange$1(el2, pos, axis, useFinalPosition) {
  const options2 = el2.options;
  const { [axis]: value } = el2.getProps([
    axis
  ], useFinalPosition);
  return Math.abs(pos - value) < options2.radius + options2.hitRadius;
}
class PointElement extends Element$1 {
  constructor(cfg) {
    super();
    __publicField(this, "parsed");
    __publicField(this, "skip");
    __publicField(this, "stop");
    this.options = void 0;
    this.parsed = void 0;
    this.skip = void 0;
    this.stop = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    const options2 = this.options;
    const { x: x2, y: y2 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return Math.pow(mouseX - x2, 2) + Math.pow(mouseY - y2, 2) < Math.pow(options2.hitRadius + options2.radius, 2);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange$1(this, mouseX, "x", useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange$1(this, mouseY, "y", useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y2 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y2
    };
  }
  size(options2) {
    options2 = options2 || this.options || {};
    let radius = options2.radius || 0;
    radius = Math.max(radius, radius && options2.hoverRadius || 0);
    const borderWidth = radius && options2.borderWidth || 0;
    return (radius + borderWidth) * 2;
  }
  draw(ctx, area) {
    const options2 = this.options;
    if (this.skip || options2.radius < 0.1 || !_isPointInArea(this, area, this.size(options2) / 2)) {
      return;
    }
    ctx.strokeStyle = options2.borderColor;
    ctx.lineWidth = options2.borderWidth;
    ctx.fillStyle = options2.backgroundColor;
    drawPoint(ctx, options2, this.x, this.y);
  }
  getRange() {
    const options2 = this.options || {};
    return options2.radius + options2.hitRadius;
  }
}
__publicField(PointElement, "id", "point");
/**
* @type {any}
*/
__publicField(PointElement, "defaults", {
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: "circle",
  radius: 3,
  rotation: 0
});
/**
* @type {any}
*/
__publicField(PointElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
function _segments(line2, target, property) {
  const segments = line2.segments;
  const points = line2.points;
  const tpoints = target.points;
  const parts = [];
  for (const segment of segments) {
    let { start, end } = segment;
    end = _findSegmentEnd(start, end, points);
    const bounds = _getBounds(property, points[start], points[end], segment.loop);
    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[start],
        end: points[end]
      });
      continue;
    }
    const targetSegments = _boundSegments(target, bounds);
    for (const tgt of targetSegments) {
      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
      const fillSources = _boundSegment(segment, points, subBounds);
      for (const fillSource of fillSources) {
        parts.push({
          source: fillSource,
          target: tgt,
          start: {
            [property]: _getEdge(bounds, subBounds, "start", Math.max)
          },
          end: {
            [property]: _getEdge(bounds, subBounds, "end", Math.min)
          }
        });
      }
    }
  }
  return parts;
}
function _getBounds(property, first, last, loop) {
  if (loop) {
    return;
  }
  let start = first[property];
  let end = last[property];
  if (property === "angle") {
    start = _normalizeAngle(start);
    end = _normalizeAngle(end);
  }
  return {
    property,
    start,
    end
  };
}
function _pointsFromSegments(boundary, line2) {
  const { x: x2 = null, y: y2 = null } = boundary || {};
  const linePoints = line2.points;
  const points = [];
  line2.segments.forEach(({ start, end }) => {
    end = _findSegmentEnd(start, end, linePoints);
    const first = linePoints[start];
    const last = linePoints[end];
    if (y2 !== null) {
      points.push({
        x: first.x,
        y: y2
      });
      points.push({
        x: last.x,
        y: y2
      });
    } else if (x2 !== null) {
      points.push({
        x: x2,
        y: first.y
      });
      points.push({
        x: x2,
        y: last.y
      });
    }
  });
  return points;
}
function _findSegmentEnd(start, end, points) {
  for (; end > start; end--) {
    const point = points[end];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      break;
    }
  }
  return end;
}
function _getEdge(a, b2, prop, fn) {
  if (a && b2) {
    return fn(a[prop], b2[prop]);
  }
  return a ? a[prop] : b2 ? b2[prop] : 0;
}
function _createBoundaryLine(boundary, line2) {
  let points = [];
  let _loop = false;
  if (isArray$1(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = _pointsFromSegments(boundary, line2);
  }
  return points.length ? new LineElement({
    points,
    options: {
      tension: 0
    },
    _loop,
    _fullLoop: _loop
  }) : null;
}
function _shouldApplyFill(source) {
  return source && source.fill !== false;
}
function _resolveTarget(sources, index2, propagate) {
  const source = sources[index2];
  let fill2 = source.fill;
  const visited = [
    index2
  ];
  let target;
  if (!propagate) {
    return fill2;
  }
  while (fill2 !== false && visited.indexOf(fill2) === -1) {
    if (!isNumberFinite(fill2)) {
      return fill2;
    }
    target = sources[fill2];
    if (!target) {
      return false;
    }
    if (target.visible) {
      return fill2;
    }
    visited.push(fill2);
    fill2 = target.fill;
  }
  return false;
}
function _decodeFill(line2, index2, count) {
  const fill2 = parseFillOption(line2);
  if (isObject(fill2)) {
    return isNaN(fill2.value) ? false : fill2;
  }
  let target = parseFloat(fill2);
  if (isNumberFinite(target) && Math.floor(target) === target) {
    return decodeTargetIndex(fill2[0], index2, target, count);
  }
  return [
    "origin",
    "start",
    "end",
    "stack",
    "shape"
  ].indexOf(fill2) >= 0 && fill2;
}
function decodeTargetIndex(firstCh, index2, target, count) {
  if (firstCh === "-" || firstCh === "+") {
    target = index2 + target;
  }
  if (target === index2 || target < 0 || target >= count) {
    return false;
  }
  return target;
}
function _getTargetPixel(fill2, scale) {
  let pixel = null;
  if (fill2 === "start") {
    pixel = scale.bottom;
  } else if (fill2 === "end") {
    pixel = scale.top;
  } else if (isObject(fill2)) {
    pixel = scale.getPixelForValue(fill2.value);
  } else if (scale.getBasePixel) {
    pixel = scale.getBasePixel();
  }
  return pixel;
}
function _getTargetValue(fill2, scale, startValue) {
  let value;
  if (fill2 === "start") {
    value = startValue;
  } else if (fill2 === "end") {
    value = scale.options.reverse ? scale.min : scale.max;
  } else if (isObject(fill2)) {
    value = fill2.value;
  } else {
    value = scale.getBaseValue();
  }
  return value;
}
function parseFillOption(line2) {
  const options2 = line2.options;
  const fillOption = options2.fill;
  let fill2 = valueOrDefault(fillOption && fillOption.target, fillOption);
  if (fill2 === void 0) {
    fill2 = !!options2.backgroundColor;
  }
  if (fill2 === false || fill2 === null) {
    return false;
  }
  if (fill2 === true) {
    return "origin";
  }
  return fill2;
}
function _buildStackLine(source) {
  const { scale, index: index2, line: line2 } = source;
  const points = [];
  const segments = line2.segments;
  const sourcePoints = line2.points;
  const linesBelow = getLinesBelow(scale, index2);
  linesBelow.push(_createBoundaryLine({
    x: null,
    y: scale.bottom
  }, line2));
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    for (let j = segment.start; j <= segment.end; j++) {
      addPointsBelow(points, sourcePoints[j], linesBelow);
    }
  }
  return new LineElement({
    points,
    options: {}
  });
}
function getLinesBelow(scale, index2) {
  const below = [];
  const metas = scale.getMatchingVisibleMetas("line");
  for (let i = 0; i < metas.length; i++) {
    const meta = metas[i];
    if (meta.index === index2) {
      break;
    }
    if (!meta.hidden) {
      below.unshift(meta.dataset);
    }
  }
  return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
  const postponed = [];
  for (let j = 0; j < linesBelow.length; j++) {
    const line2 = linesBelow[j];
    const { first, last, point } = findPoint(line2, sourcePoint, "x");
    if (!point || first && last) {
      continue;
    }
    if (first) {
      postponed.unshift(point);
    } else {
      points.push(point);
      if (!last) {
        break;
      }
    }
  }
  points.push(...postponed);
}
function findPoint(line2, sourcePoint, property) {
  const point = line2.interpolate(sourcePoint, property);
  if (!point) {
    return {};
  }
  const pointValue = point[property];
  const segments = line2.segments;
  const linePoints = line2.points;
  let first = false;
  let last = false;
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    const firstValue = linePoints[segment.start][property];
    const lastValue = linePoints[segment.end][property];
    if (_isBetween(pointValue, firstValue, lastValue)) {
      first = pointValue === firstValue;
      last = pointValue === lastValue;
      break;
    }
  }
  return {
    first,
    last,
    point
  };
}
class simpleArc {
  constructor(opts) {
    this.x = opts.x;
    this.y = opts.y;
    this.radius = opts.radius;
  }
  pathSegment(ctx, bounds, opts) {
    const { x: x2, y: y2, radius } = this;
    bounds = bounds || {
      start: 0,
      end: TAU
    };
    ctx.arc(x2, y2, radius, bounds.end, bounds.start, true);
    return !opts.bounds;
  }
  interpolate(point) {
    const { x: x2, y: y2, radius } = this;
    const angle = point.angle;
    return {
      x: x2 + Math.cos(angle) * radius,
      y: y2 + Math.sin(angle) * radius,
      angle
    };
  }
}
function _getTarget(source) {
  const { chart, fill: fill2, line: line2 } = source;
  if (isNumberFinite(fill2)) {
    return getLineByIndex(chart, fill2);
  }
  if (fill2 === "stack") {
    return _buildStackLine(source);
  }
  if (fill2 === "shape") {
    return true;
  }
  const boundary = computeBoundary(source);
  if (boundary instanceof simpleArc) {
    return boundary;
  }
  return _createBoundaryLine(boundary, line2);
}
function getLineByIndex(chart, index2) {
  const meta = chart.getDatasetMeta(index2);
  const visible = meta && chart.isDatasetVisible(index2);
  return visible ? meta.dataset : null;
}
function computeBoundary(source) {
  const scale = source.scale || {};
  if (scale.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }
  return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
  const { scale = {}, fill: fill2 } = source;
  const pixel = _getTargetPixel(fill2, scale);
  if (isNumberFinite(pixel)) {
    const horizontal = scale.isHorizontal();
    return {
      x: horizontal ? pixel : null,
      y: horizontal ? null : pixel
    };
  }
  return null;
}
function computeCircularBoundary(source) {
  const { scale, fill: fill2 } = source;
  const options2 = scale.options;
  const length2 = scale.getLabels().length;
  const start = options2.reverse ? scale.max : scale.min;
  const value = _getTargetValue(fill2, scale, start);
  const target = [];
  if (options2.grid.circular) {
    const center = scale.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale.getDistanceFromCenterForValue(value)
    });
  }
  for (let i = 0; i < length2; ++i) {
    target.push(scale.getPointPositionForValue(i, value));
  }
  return target;
}
function _drawfill(ctx, source, area) {
  const target = _getTarget(source);
  const { line: line2, scale, axis } = source;
  const lineOpts = line2.options;
  const fillOption = lineOpts.fill;
  const color2 = lineOpts.backgroundColor;
  const { above = color2, below = color2 } = fillOption || {};
  if (target && line2.points.length) {
    clipArea(ctx, area);
    doFill(ctx, {
      line: line2,
      target,
      above,
      below,
      area,
      scale,
      axis
    });
    unclipArea(ctx);
  }
}
function doFill(ctx, cfg) {
  const { line: line2, target, above, below, area, scale } = cfg;
  const property = line2._loop ? "angle" : cfg.axis;
  ctx.save();
  if (property === "x" && below !== above) {
    clipVertical(ctx, target, area.top);
    fill(ctx, {
      line: line2,
      target,
      color: above,
      scale,
      property
    });
    ctx.restore();
    ctx.save();
    clipVertical(ctx, target, area.bottom);
  }
  fill(ctx, {
    line: line2,
    target,
    color: below,
    scale,
    property
  });
  ctx.restore();
}
function clipVertical(ctx, target, clipY) {
  const { segments, points } = target;
  let first = true;
  let lineLoop = false;
  ctx.beginPath();
  for (const segment of segments) {
    const { start, end } = segment;
    const firstPoint = points[start];
    const lastPoint = points[_findSegmentEnd(start, end, points)];
    if (first) {
      ctx.moveTo(firstPoint.x, firstPoint.y);
      first = false;
    } else {
      ctx.lineTo(firstPoint.x, clipY);
      ctx.lineTo(firstPoint.x, firstPoint.y);
    }
    lineLoop = !!target.pathSegment(ctx, segment, {
      move: lineLoop
    });
    if (lineLoop) {
      ctx.closePath();
    } else {
      ctx.lineTo(lastPoint.x, clipY);
    }
  }
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}
function fill(ctx, cfg) {
  const { line: line2, target, property, color: color2, scale } = cfg;
  const segments = _segments(line2, target, property);
  for (const { source: src, target: tgt, start, end } of segments) {
    const { style: { backgroundColor = color2 } = {} } = src;
    const notShape = target !== true;
    ctx.save();
    ctx.fillStyle = backgroundColor;
    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
    ctx.beginPath();
    const lineLoop = !!line2.pathSegment(ctx, src);
    let loop;
    if (notShape) {
      if (lineLoop) {
        ctx.closePath();
      } else {
        interpolatedLineTo(ctx, target, end, property);
      }
      const targetLoop = !!target.pathSegment(ctx, tgt, {
        move: lineLoop,
        reverse: true
      });
      loop = lineLoop && targetLoop;
      if (!loop) {
        interpolatedLineTo(ctx, target, start, property);
      }
    }
    ctx.closePath();
    ctx.fill(loop ? "evenodd" : "nonzero");
    ctx.restore();
  }
}
function clipBounds(ctx, scale, bounds) {
  const { top, bottom } = scale.chart.chartArea;
  const { property, start, end } = bounds || {};
  if (property === "x") {
    ctx.beginPath();
    ctx.rect(start, top, end - start, bottom - top);
    ctx.clip();
  }
}
function interpolatedLineTo(ctx, target, point, property) {
  const interpolatedPoint = target.interpolate(point, property);
  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}
var index$1 = {
  id: "filler",
  afterDatasetsUpdate(chart, _args, options2) {
    const count = (chart.data.datasets || []).length;
    const sources = [];
    let meta, i, line2, source;
    for (i = 0; i < count; ++i) {
      meta = chart.getDatasetMeta(i);
      line2 = meta.dataset;
      source = null;
      if (line2 && line2.options && line2 instanceof LineElement) {
        source = {
          visible: chart.isDatasetVisible(i),
          index: i,
          fill: _decodeFill(line2, i, count),
          chart,
          axis: meta.controller.options.indexAxis,
          scale: meta.vScale,
          line: line2
        };
      }
      meta.$filler = source;
      sources.push(source);
    }
    for (i = 0; i < count; ++i) {
      source = sources[i];
      if (!source || source.fill === false) {
        continue;
      }
      source.fill = _resolveTarget(sources, i, options2.propagate);
    }
  },
  beforeDraw(chart, _args, options2) {
    const draw2 = options2.drawTime === "beforeDraw";
    const metasets = chart.getSortedVisibleDatasetMetas();
    const area = chart.chartArea;
    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;
      if (!source) {
        continue;
      }
      source.line.updateControlPoints(area, source.axis);
      if (draw2 && source.fill) {
        _drawfill(chart.ctx, source, area);
      }
    }
  },
  beforeDatasetsDraw(chart, _args, options2) {
    if (options2.drawTime !== "beforeDatasetsDraw") {
      return;
    }
    const metasets = chart.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;
      if (_shouldApplyFill(source)) {
        _drawfill(chart.ctx, source, chart.chartArea);
      }
    }
  },
  beforeDatasetDraw(chart, args, options2) {
    const source = args.meta.$filler;
    if (!_shouldApplyFill(source) || options2.drawTime !== "beforeDatasetDraw") {
      return;
    }
    _drawfill(chart.ctx, source, chart.chartArea);
  },
  defaults: {
    propagate: true,
    drawTime: "beforeDatasetDraw"
  }
};
const getBoxSize = (labelOpts, fontSize) => {
  let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
  if (labelOpts.usePointStyle) {
    boxHeight = Math.min(boxHeight, fontSize);
    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
  }
  return {
    boxWidth,
    boxHeight,
    itemHeight: Math.max(fontSize, boxHeight)
  };
};
const itemsEqual = (a, b2) => a !== null && b2 !== null && a.datasetIndex === b2.datasetIndex && a.index === b2.index;
class Legend extends Element$1 {
  constructor(config2) {
    super();
    this._added = false;
    this.legendHitBoxes = [];
    this._hoveredItem = null;
    this.doughnutMode = false;
    this.chart = config2.chart;
    this.options = config2.options;
    this.ctx = config2.ctx;
    this.legendItems = void 0;
    this.columnSizes = void 0;
    this.lineWidths = void 0;
    this.maxHeight = void 0;
    this.maxWidth = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.height = void 0;
    this.width = void 0;
    this._margins = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight, margins) {
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins;
    this.setDimensions();
    this.buildLabels();
    this.fit();
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = this._margins.left;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = this._margins.top;
      this.bottom = this.height;
    }
  }
  buildLabels() {
    const labelOpts = this.options.labels || {};
    let legendItems = callback(labelOpts.generateLabels, [
      this.chart
    ], this) || [];
    if (labelOpts.filter) {
      legendItems = legendItems.filter((item2) => labelOpts.filter(item2, this.chart.data));
    }
    if (labelOpts.sort) {
      legendItems = legendItems.sort((a, b2) => labelOpts.sort(a, b2, this.chart.data));
    }
    if (this.options.reverse) {
      legendItems.reverse();
    }
    this.legendItems = legendItems;
  }
  fit() {
    const { options: options2, ctx } = this;
    if (!options2.display) {
      this.width = this.height = 0;
      return;
    }
    const labelOpts = options2.labels;
    const labelFont = toFont(labelOpts.font);
    const fontSize = labelFont.size;
    const titleHeight = this._computeTitleHeight();
    const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
    let width, height;
    ctx.font = labelFont.string;
    if (this.isHorizontal()) {
      width = this.maxWidth;
      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    } else {
      height = this.maxHeight;
      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
    }
    this.width = Math.min(width, options2.maxWidth || this.maxWidth);
    this.height = Math.min(height, options2.maxHeight || this.maxHeight);
  }
  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
    const { ctx, maxWidth, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const lineWidths = this.lineWidths = [
      0
    ];
    const lineHeight = itemHeight + padding;
    let totalHeight = titleHeight;
    ctx.textAlign = "left";
    ctx.textBaseline = "middle";
    let row = -1;
    let top = -lineHeight;
    this.legendItems.forEach((legendItem, i) => {
      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
        totalHeight += lineHeight;
        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
        top += lineHeight;
        row++;
      }
      hitboxes[i] = {
        left: 0,
        top,
        row,
        width: itemWidth,
        height: itemHeight
      };
      lineWidths[lineWidths.length - 1] += itemWidth + padding;
    });
    return totalHeight;
  }
  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
    const { ctx, maxHeight, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const columnSizes = this.columnSizes = [];
    const heightLimit = maxHeight - titleHeight;
    let totalWidth = padding;
    let currentColWidth = 0;
    let currentColHeight = 0;
    let left = 0;
    let col = 0;
    this.legendItems.forEach((legendItem, i) => {
      const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
        totalWidth += currentColWidth + padding;
        columnSizes.push({
          width: currentColWidth,
          height: currentColHeight
        });
        left += currentColWidth + padding;
        col++;
        currentColWidth = currentColHeight = 0;
      }
      hitboxes[i] = {
        left,
        top: currentColHeight,
        col,
        width: itemWidth,
        height: itemHeight
      };
      currentColWidth = Math.max(currentColWidth, itemWidth);
      currentColHeight += itemHeight + padding;
    });
    totalWidth += currentColWidth;
    columnSizes.push({
      width: currentColWidth,
      height: currentColHeight
    });
    return totalWidth;
  }
  adjustHitBoxes() {
    if (!this.options.display) {
      return;
    }
    const titleHeight = this._computeTitleHeight();
    const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
    if (this.isHorizontal()) {
      let row = 0;
      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
      for (const hitbox of hitboxes) {
        if (row !== hitbox.row) {
          row = hitbox.row;
          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
        }
        hitbox.top += this.top + titleHeight + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
        left += hitbox.width + padding;
      }
    } else {
      let col = 0;
      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
      for (const hitbox of hitboxes) {
        if (hitbox.col !== col) {
          col = hitbox.col;
          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
        }
        hitbox.top = top;
        hitbox.left += this.left + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
        top += hitbox.height + padding;
      }
    }
  }
  isHorizontal() {
    return this.options.position === "top" || this.options.position === "bottom";
  }
  draw() {
    if (this.options.display) {
      const ctx = this.ctx;
      clipArea(ctx, this);
      this._draw();
      unclipArea(ctx);
    }
  }
  _draw() {
    const { options: opts, columnSizes, lineWidths, ctx } = this;
    const { align, labels: labelOpts } = opts;
    const defaultColor = defaults.color;
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const labelFont = toFont(labelOpts.font);
    const { padding } = labelOpts;
    const fontSize = labelFont.size;
    const halfFontSize = fontSize / 2;
    let cursor2;
    this.drawTitle();
    ctx.textAlign = rtlHelper.textAlign("left");
    ctx.textBaseline = "middle";
    ctx.lineWidth = 0.5;
    ctx.font = labelFont.string;
    const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
    const drawLegendBox = function(x2, y2, legendItem) {
      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
        return;
      }
      ctx.save();
      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
      ctx.lineCap = valueOrDefault(legendItem.lineCap, "butt");
      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, "miter");
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
      if (labelOpts.usePointStyle) {
        const drawOptions = {
          radius: boxHeight * Math.SQRT2 / 2,
          pointStyle: legendItem.pointStyle,
          rotation: legendItem.rotation,
          borderWidth: lineWidth
        };
        const centerX = rtlHelper.xPlus(x2, boxWidth / 2);
        const centerY = y2 + halfFontSize;
        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
      } else {
        const yBoxTop = y2 + Math.max((fontSize - boxHeight) / 2, 0);
        const xBoxLeft = rtlHelper.leftForLtr(x2, boxWidth);
        const borderRadius2 = toTRBLCorners(legendItem.borderRadius);
        ctx.beginPath();
        if (Object.values(borderRadius2).some((v2) => v2 !== 0)) {
          addRoundedRectPath(ctx, {
            x: xBoxLeft,
            y: yBoxTop,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius2
          });
        } else {
          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
        }
        ctx.fill();
        if (lineWidth !== 0) {
          ctx.stroke();
        }
      }
      ctx.restore();
    };
    const fillText = function(x2, y2, legendItem) {
      renderText(ctx, legendItem.text, x2, y2 + itemHeight / 2, labelFont, {
        strikethrough: legendItem.hidden,
        textAlign: rtlHelper.textAlign(legendItem.textAlign)
      });
    };
    const isHorizontal = this.isHorizontal();
    const titleHeight = this._computeTitleHeight();
    if (isHorizontal) {
      cursor2 = {
        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
        y: this.top + padding + titleHeight,
        line: 0
      };
    } else {
      cursor2 = {
        x: this.left + padding,
        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
        line: 0
      };
    }
    overrideTextDirection(this.ctx, opts.textDirection);
    const lineHeight = itemHeight + padding;
    this.legendItems.forEach((legendItem, i) => {
      ctx.strokeStyle = legendItem.fontColor;
      ctx.fillStyle = legendItem.fontColor;
      const textWidth = ctx.measureText(legendItem.text).width;
      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
      const width = boxWidth + halfFontSize + textWidth;
      let x2 = cursor2.x;
      let y2 = cursor2.y;
      rtlHelper.setWidth(this.width);
      if (isHorizontal) {
        if (i > 0 && x2 + width + padding > this.right) {
          y2 = cursor2.y += lineHeight;
          cursor2.line++;
          x2 = cursor2.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor2.line]);
        }
      } else if (i > 0 && y2 + lineHeight > this.bottom) {
        x2 = cursor2.x = x2 + columnSizes[cursor2.line].width + padding;
        cursor2.line++;
        y2 = cursor2.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor2.line].height);
      }
      const realX = rtlHelper.x(x2);
      drawLegendBox(realX, y2, legendItem);
      x2 = _textX(textAlign, x2 + boxWidth + halfFontSize, isHorizontal ? x2 + width : this.right, opts.rtl);
      fillText(rtlHelper.x(x2), y2, legendItem);
      if (isHorizontal) {
        cursor2.x += width + padding;
      } else if (typeof legendItem.text !== "string") {
        const fontLineHeight = labelFont.lineHeight;
        cursor2.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
      } else {
        cursor2.y += lineHeight;
      }
    });
    restoreTextDirection(this.ctx, opts.textDirection);
  }
  drawTitle() {
    const opts = this.options;
    const titleOpts = opts.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    if (!titleOpts.display) {
      return;
    }
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const ctx = this.ctx;
    const position2 = titleOpts.position;
    const halfFontSize = titleFont.size / 2;
    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
    let y2;
    let left = this.left;
    let maxWidth = this.width;
    if (this.isHorizontal()) {
      maxWidth = Math.max(...this.lineWidths);
      y2 = this.top + topPaddingPlusHalfFontSize;
      left = _alignStartEnd(opts.align, left, this.right - maxWidth);
    } else {
      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
      y2 = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
    }
    const x2 = _alignStartEnd(position2, left, left + maxWidth);
    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position2));
    ctx.textBaseline = "middle";
    ctx.strokeStyle = titleOpts.color;
    ctx.fillStyle = titleOpts.color;
    ctx.font = titleFont.string;
    renderText(ctx, titleOpts.text, x2, y2, titleFont);
  }
  _computeTitleHeight() {
    const titleOpts = this.options.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
  }
  _getLegendItemAt(x2, y2) {
    let i, hitBox, lh2;
    if (_isBetween(x2, this.left, this.right) && _isBetween(y2, this.top, this.bottom)) {
      lh2 = this.legendHitBoxes;
      for (i = 0; i < lh2.length; ++i) {
        hitBox = lh2[i];
        if (_isBetween(x2, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y2, hitBox.top, hitBox.top + hitBox.height)) {
          return this.legendItems[i];
        }
      }
    }
    return null;
  }
  handleEvent(e2) {
    const opts = this.options;
    if (!isListened(e2.type, opts)) {
      return;
    }
    const hoveredItem = this._getLegendItemAt(e2.x, e2.y);
    if (e2.type === "mousemove" || e2.type === "mouseout") {
      const previous = this._hoveredItem;
      const sameItem = itemsEqual(previous, hoveredItem);
      if (previous && !sameItem) {
        callback(opts.onLeave, [
          e2,
          previous,
          this
        ], this);
      }
      this._hoveredItem = hoveredItem;
      if (hoveredItem && !sameItem) {
        callback(opts.onHover, [
          e2,
          hoveredItem,
          this
        ], this);
      }
    } else if (hoveredItem) {
      callback(opts.onClick, [
        e2,
        hoveredItem,
        this
      ], this);
    }
  }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
  return {
    itemWidth,
    itemHeight
  };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
  let legendItemText = legendItem.text;
  if (legendItemText && typeof legendItemText !== "string") {
    legendItemText = legendItemText.reduce((a, b2) => a.length > b2.length ? a : b2);
  }
  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
  let itemHeight = _itemHeight;
  if (typeof legendItem.text !== "string") {
    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
  }
  return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
  const labelHeight = legendItem.text ? legendItem.text.length : 0;
  return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
  if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) {
    return true;
  }
  if (opts.onClick && (type === "click" || type === "mouseup")) {
    return true;
  }
  return false;
}
var plugin_legend = {
  id: "legend",
  _element: Legend,
  start(chart, _args, options2) {
    const legend = chart.legend = new Legend({
      ctx: chart.ctx,
      options: options2,
      chart
    });
    layouts.configure(chart, legend, options2);
    layouts.addBox(chart, legend);
  },
  stop(chart) {
    layouts.removeBox(chart, chart.legend);
    delete chart.legend;
  },
  beforeUpdate(chart, _args, options2) {
    const legend = chart.legend;
    layouts.configure(chart, legend, options2);
    legend.options = options2;
  },
  afterUpdate(chart) {
    const legend = chart.legend;
    legend.buildLabels();
    legend.adjustHitBoxes();
  },
  afterEvent(chart, args) {
    if (!args.replay) {
      chart.legend.handleEvent(args.event);
    }
  },
  defaults: {
    display: true,
    position: "top",
    align: "center",
    fullSize: true,
    reverse: false,
    weight: 1e3,
    onClick(e2, legendItem, legend) {
      const index2 = legendItem.datasetIndex;
      const ci2 = legend.chart;
      if (ci2.isDatasetVisible(index2)) {
        ci2.hide(index2);
        legendItem.hidden = true;
      } else {
        ci2.show(index2);
        legendItem.hidden = false;
      }
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (ctx) => ctx.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(chart) {
        const datasets = chart.data.datasets;
        const { labels: { usePointStyle, pointStyle, textAlign, color: color2, useBorderRadius, borderRadius: borderRadius2 } } = chart.legend.options;
        return chart._getSortedDatasetMetas().map((meta) => {
          const style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
          const borderWidth = toPadding(style.borderWidth);
          return {
            text: datasets[meta.index].label,
            fillStyle: style.backgroundColor,
            fontColor: color2,
            hidden: !meta.visible,
            lineCap: style.borderCapStyle,
            lineDash: style.borderDash,
            lineDashOffset: style.borderDashOffset,
            lineJoin: style.borderJoinStyle,
            lineWidth: (borderWidth.width + borderWidth.height) / 4,
            strokeStyle: style.borderColor,
            pointStyle: pointStyle || style.pointStyle,
            rotation: style.rotation,
            textAlign: textAlign || style.textAlign,
            borderRadius: useBorderRadius && (borderRadius2 || style.borderRadius),
            datasetIndex: meta.index
          };
        }, this);
      }
    },
    title: {
      color: (ctx) => ctx.chart.options.color,
      display: false,
      position: "center",
      text: ""
    }
  },
  descriptors: {
    _scriptable: (name) => !name.startsWith("on"),
    labels: {
      _scriptable: (name) => ![
        "generateLabels",
        "filter",
        "sort"
      ].includes(name)
    }
  }
};
class Title extends Element$1 {
  constructor(config2) {
    super();
    this.chart = config2.chart;
    this.options = config2.options;
    this.ctx = config2.ctx;
    this._padding = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight) {
    const opts = this.options;
    this.left = 0;
    this.top = 0;
    if (!opts.display) {
      this.width = this.height = this.right = this.bottom = 0;
      return;
    }
    this.width = this.right = maxWidth;
    this.height = this.bottom = maxHeight;
    const lineCount = isArray$1(opts.text) ? opts.text.length : 1;
    this._padding = toPadding(opts.padding);
    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
    if (this.isHorizontal()) {
      this.height = textSize;
    } else {
      this.width = textSize;
    }
  }
  isHorizontal() {
    const pos = this.options.position;
    return pos === "top" || pos === "bottom";
  }
  _drawArgs(offset) {
    const { top, left, bottom, right, options: options2 } = this;
    const align = options2.align;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    if (this.isHorizontal()) {
      titleX = _alignStartEnd(align, left, right);
      titleY = top + offset;
      maxWidth = right - left;
    } else {
      if (options2.position === "left") {
        titleX = left + offset;
        titleY = _alignStartEnd(align, bottom, top);
        rotation = PI * -0.5;
      } else {
        titleX = right - offset;
        titleY = _alignStartEnd(align, top, bottom);
        rotation = PI * 0.5;
      }
      maxWidth = bottom - top;
    }
    return {
      titleX,
      titleY,
      maxWidth,
      rotation
    };
  }
  draw() {
    const ctx = this.ctx;
    const opts = this.options;
    if (!opts.display) {
      return;
    }
    const fontOpts = toFont(opts.font);
    const lineHeight = fontOpts.lineHeight;
    const offset = lineHeight / 2 + this._padding.top;
    const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
    renderText(ctx, opts.text, 0, 0, fontOpts, {
      color: opts.color,
      maxWidth,
      rotation,
      textAlign: _toLeftRightCenter(opts.align),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
}
function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
var plugin_title = {
  id: "title",
  _element: Title,
  start(chart, _args, options2) {
    createTitle(chart, options2);
  },
  stop(chart) {
    const titleBlock = chart.titleBlock;
    layouts.removeBox(chart, titleBlock);
    delete chart.titleBlock;
  },
  beforeUpdate(chart, _args, options2) {
    const title = chart.titleBlock;
    layouts.configure(chart, title, options2);
    title.options = options2;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "bold"
    },
    fullSize: true,
    padding: 10,
    position: "top",
    text: "",
    weight: 2e3
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
const positioners = {
  average(items) {
    if (!items.length) {
      return false;
    }
    let i, len;
    let xSet = /* @__PURE__ */ new Set();
    let y2 = 0;
    let count = 0;
    for (i = 0, len = items.length; i < len; ++i) {
      const el2 = items[i].element;
      if (el2 && el2.hasValue()) {
        const pos = el2.tooltipPosition();
        xSet.add(pos.x);
        y2 += pos.y;
        ++count;
      }
    }
    const xAverage = [
      ...xSet
    ].reduce((a, b2) => a + b2) / xSet.size;
    return {
      x: xAverage,
      y: y2 / count
    };
  },
  nearest(items, eventPosition) {
    if (!items.length) {
      return false;
    }
    let x2 = eventPosition.x;
    let y2 = eventPosition.y;
    let minDistance = Number.POSITIVE_INFINITY;
    let i, len, nearestElement;
    for (i = 0, len = items.length; i < len; ++i) {
      const el2 = items[i].element;
      if (el2 && el2.hasValue()) {
        const center = el2.getCenterPoint();
        const d2 = distanceBetweenPoints(eventPosition, center);
        if (d2 < minDistance) {
          minDistance = d2;
          nearestElement = el2;
        }
      }
    }
    if (nearestElement) {
      const tp = nearestElement.tooltipPosition();
      x2 = tp.x;
      y2 = tp.y;
    }
    return {
      x: x2,
      y: y2
    };
  }
};
function pushOrConcat(base, toPush) {
  if (toPush) {
    if (isArray$1(toPush)) {
      Array.prototype.push.apply(base, toPush);
    } else {
      base.push(toPush);
    }
  }
  return base;
}
function splitNewlines(str) {
  if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
    return str.split("\n");
  }
  return str;
}
function createTooltipItem(chart, item2) {
  const { element, datasetIndex, index: index2 } = item2;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const { label, value } = controller.getLabelAndValue(index2);
  return {
    chart,
    label,
    parsed: controller.getParsed(index2),
    raw: chart.data.datasets[datasetIndex].data[index2],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index2,
    datasetIndex,
    element
  };
}
function getTooltipSize(tooltip, options2) {
  const ctx = tooltip.chart.ctx;
  const { body, footer, title } = tooltip;
  const { boxWidth, boxHeight } = options2;
  const bodyFont = toFont(options2.bodyFont);
  const titleFont = toFont(options2.titleFont);
  const footerFont = toFont(options2.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body.length;
  const padding = toPadding(options2.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options2.titleSpacing + options2.titleMarginBottom;
  }
  if (combinedBodyLength) {
    const bodyLineHeight = options2.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options2.bodySpacing;
  }
  if (footerLineCount) {
    height += options2.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options2.footerSpacing;
  }
  let widthPadding = 0;
  const maxLineWidth = function(line2) {
    width = Math.max(width, ctx.measureText(line2).width + widthPadding);
  };
  ctx.save();
  ctx.font = titleFont.string;
  each(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options2.displayColors ? boxWidth + 2 + options2.boxPadding : 0;
  each(body, (bodyItem) => {
    each(bodyItem.before, maxLineWidth);
    each(bodyItem.lines, maxLineWidth);
    each(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  each(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {
    width,
    height
  };
}
function determineYAlign(chart, size) {
  const { y: y2, height } = size;
  if (y2 < height / 2) {
    return "top";
  } else if (y2 > chart.height - height / 2) {
    return "bottom";
  }
  return "center";
}
function doesNotFitWithAlign(xAlign, chart, options2, size) {
  const { x: x2, width } = size;
  const caret2 = options2.caretSize + options2.caretPadding;
  if (xAlign === "left" && x2 + width + caret2 > chart.width) {
    return true;
  }
  if (xAlign === "right" && x2 - width - caret2 < 0) {
    return true;
  }
}
function determineXAlign(chart, options2, size, yAlign) {
  const { x: x2, width } = size;
  const { width: chartWidth, chartArea: { left, right } } = chart;
  let xAlign = "center";
  if (yAlign === "center") {
    xAlign = x2 <= (left + right) / 2 ? "left" : "right";
  } else if (x2 <= width / 2) {
    xAlign = "left";
  } else if (x2 >= chartWidth - width / 2) {
    xAlign = "right";
  }
  if (doesNotFitWithAlign(xAlign, chart, options2, size)) {
    xAlign = "center";
  }
  return xAlign;
}
function determineAlignment(chart, options2, size) {
  const yAlign = size.yAlign || options2.yAlign || determineYAlign(chart, size);
  return {
    xAlign: size.xAlign || options2.xAlign || determineXAlign(chart, options2, size, yAlign),
    yAlign
  };
}
function alignX(size, xAlign) {
  let { x: x2, width } = size;
  if (xAlign === "right") {
    x2 -= width;
  } else if (xAlign === "center") {
    x2 -= width / 2;
  }
  return x2;
}
function alignY(size, yAlign, paddingAndSize) {
  let { y: y2, height } = size;
  if (yAlign === "top") {
    y2 += paddingAndSize;
  } else if (yAlign === "bottom") {
    y2 -= height + paddingAndSize;
  } else {
    y2 -= height / 2;
  }
  return y2;
}
function getBackgroundPoint(options2, size, alignment, chart) {
  const { caretSize, caretPadding, cornerRadius } = options2;
  const { xAlign, yAlign } = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
  let x2 = alignX(size, xAlign);
  const y2 = alignY(size, yAlign, paddingAndSize);
  if (yAlign === "center") {
    if (xAlign === "left") {
      x2 += paddingAndSize;
    } else if (xAlign === "right") {
      x2 -= paddingAndSize;
    }
  } else if (xAlign === "left") {
    x2 -= Math.max(topLeft, bottomLeft) + caretSize;
  } else if (xAlign === "right") {
    x2 += Math.max(topRight, bottomRight) + caretSize;
  }
  return {
    x: _limitValue(x2, 0, chart.width - size.width),
    y: _limitValue(y2, 0, chart.height - size.height)
  };
}
function getAlignedX(tooltip, align, options2) {
  const padding = toPadding(options2.padding);
  return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback2) {
  return pushOrConcat([], splitNewlines(callback2));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
  return createContext(parent, {
    tooltip,
    tooltipItems,
    type: "tooltip"
  });
}
function overrideCallbacks(callbacks, context) {
  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
  return override ? callbacks.override(override) : callbacks;
}
const defaultCallbacks = {
  beforeTitle: noop$2,
  title(tooltipItems) {
    if (tooltipItems.length > 0) {
      const item2 = tooltipItems[0];
      const labels = item2.chart.data.labels;
      const labelCount = labels ? labels.length : 0;
      if (this && this.options && this.options.mode === "dataset") {
        return item2.dataset.label || "";
      } else if (item2.label) {
        return item2.label;
      } else if (labelCount > 0 && item2.dataIndex < labelCount) {
        return labels[item2.dataIndex];
      }
    }
    return "";
  },
  afterTitle: noop$2,
  beforeBody: noop$2,
  beforeLabel: noop$2,
  label(tooltipItem) {
    if (this && this.options && this.options.mode === "dataset") {
      return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
    }
    let label = tooltipItem.dataset.label || "";
    if (label) {
      label += ": ";
    }
    const value = tooltipItem.formattedValue;
    if (!isNullOrUndef(value)) {
      label += value;
    }
    return label;
  },
  labelColor(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options2 = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      borderColor: options2.borderColor,
      backgroundColor: options2.backgroundColor,
      borderWidth: options2.borderWidth,
      borderDash: options2.borderDash,
      borderDashOffset: options2.borderDashOffset,
      borderRadius: 0
    };
  },
  labelTextColor() {
    return this.options.bodyColor;
  },
  labelPointStyle(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options2 = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      pointStyle: options2.pointStyle,
      rotation: options2.rotation
    };
  },
  afterLabel: noop$2,
  afterBody: noop$2,
  beforeFooter: noop$2,
  footer: noop$2,
  afterFooter: noop$2
};
function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
  const result = callbacks[name].call(ctx, arg);
  if (typeof result === "undefined") {
    return defaultCallbacks[name].call(ctx, arg);
  }
  return result;
}
let Tooltip$1 = (_c = class extends Element$1 {
  constructor(config2) {
    super();
    this.opacity = 0;
    this._active = [];
    this._eventPosition = void 0;
    this._size = void 0;
    this._cachedAnimations = void 0;
    this._tooltipItems = [];
    this.$animations = void 0;
    this.$context = void 0;
    this.chart = config2.chart;
    this.options = config2.options;
    this.dataPoints = void 0;
    this.title = void 0;
    this.beforeBody = void 0;
    this.body = void 0;
    this.afterBody = void 0;
    this.footer = void 0;
    this.xAlign = void 0;
    this.yAlign = void 0;
    this.x = void 0;
    this.y = void 0;
    this.height = void 0;
    this.width = void 0;
    this.caretX = void 0;
    this.caretY = void 0;
    this.labelColors = void 0;
    this.labelPointStyles = void 0;
    this.labelTextColors = void 0;
  }
  initialize(options2) {
    this.options = options2;
    this._cachedAnimations = void 0;
    this.$context = void 0;
  }
  _resolveAnimations() {
    const cached = this._cachedAnimations;
    if (cached) {
      return cached;
    }
    const chart = this.chart;
    const options2 = this.options.setContext(this.getContext());
    const opts = options2.enabled && chart.options.animation && options2.animations;
    const animations = new Animations(this.chart, opts);
    if (opts._cacheable) {
      this._cachedAnimations = Object.freeze(animations);
    }
    return animations;
  }
  getContext() {
    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
  }
  getTitle(context, options2) {
    const { callbacks } = options2;
    const beforeTitle = invokeCallbackWithFallback(callbacks, "beforeTitle", this, context);
    const title = invokeCallbackWithFallback(callbacks, "title", this, context);
    const afterTitle = invokeCallbackWithFallback(callbacks, "afterTitle", this, context);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    lines = pushOrConcat(lines, splitNewlines(title));
    lines = pushOrConcat(lines, splitNewlines(afterTitle));
    return lines;
  }
  getBeforeBody(tooltipItems, options2) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options2.callbacks, "beforeBody", this, tooltipItems));
  }
  getBody(tooltipItems, options2) {
    const { callbacks } = options2;
    const bodyItems = [];
    each(tooltipItems, (context) => {
      const bodyItem = {
        before: [],
        lines: [],
        after: []
      };
      const scoped = overrideCallbacks(callbacks, context);
      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, "beforeLabel", this, context)));
      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, "label", this, context));
      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, "afterLabel", this, context)));
      bodyItems.push(bodyItem);
    });
    return bodyItems;
  }
  getAfterBody(tooltipItems, options2) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options2.callbacks, "afterBody", this, tooltipItems));
  }
  getFooter(tooltipItems, options2) {
    const { callbacks } = options2;
    const beforeFooter = invokeCallbackWithFallback(callbacks, "beforeFooter", this, tooltipItems);
    const footer = invokeCallbackWithFallback(callbacks, "footer", this, tooltipItems);
    const afterFooter = invokeCallbackWithFallback(callbacks, "afterFooter", this, tooltipItems);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    lines = pushOrConcat(lines, splitNewlines(footer));
    lines = pushOrConcat(lines, splitNewlines(afterFooter));
    return lines;
  }
  _createItems(options2) {
    const active = this._active;
    const data = this.chart.data;
    const labelColors = [];
    const labelPointStyles = [];
    const labelTextColors = [];
    let tooltipItems = [];
    let i, len;
    for (i = 0, len = active.length; i < len; ++i) {
      tooltipItems.push(createTooltipItem(this.chart, active[i]));
    }
    if (options2.filter) {
      tooltipItems = tooltipItems.filter((element, index2, array) => options2.filter(element, index2, array, data));
    }
    if (options2.itemSort) {
      tooltipItems = tooltipItems.sort((a, b2) => options2.itemSort(a, b2, data));
    }
    each(tooltipItems, (context) => {
      const scoped = overrideCallbacks(options2.callbacks, context);
      labelColors.push(invokeCallbackWithFallback(scoped, "labelColor", this, context));
      labelPointStyles.push(invokeCallbackWithFallback(scoped, "labelPointStyle", this, context));
      labelTextColors.push(invokeCallbackWithFallback(scoped, "labelTextColor", this, context));
    });
    this.labelColors = labelColors;
    this.labelPointStyles = labelPointStyles;
    this.labelTextColors = labelTextColors;
    this.dataPoints = tooltipItems;
    return tooltipItems;
  }
  update(changed, replay) {
    const options2 = this.options.setContext(this.getContext());
    const active = this._active;
    let properties;
    let tooltipItems = [];
    if (!active.length) {
      if (this.opacity !== 0) {
        properties = {
          opacity: 0
        };
      }
    } else {
      const position2 = positioners[options2.position].call(this, active, this._eventPosition);
      tooltipItems = this._createItems(options2);
      this.title = this.getTitle(tooltipItems, options2);
      this.beforeBody = this.getBeforeBody(tooltipItems, options2);
      this.body = this.getBody(tooltipItems, options2);
      this.afterBody = this.getAfterBody(tooltipItems, options2);
      this.footer = this.getFooter(tooltipItems, options2);
      const size = this._size = getTooltipSize(this, options2);
      const positionAndSize = Object.assign({}, position2, size);
      const alignment = determineAlignment(this.chart, options2, positionAndSize);
      const backgroundPoint = getBackgroundPoint(options2, positionAndSize, alignment, this.chart);
      this.xAlign = alignment.xAlign;
      this.yAlign = alignment.yAlign;
      properties = {
        opacity: 1,
        x: backgroundPoint.x,
        y: backgroundPoint.y,
        width: size.width,
        height: size.height,
        caretX: position2.x,
        caretY: position2.y
      };
    }
    this._tooltipItems = tooltipItems;
    this.$context = void 0;
    if (properties) {
      this._resolveAnimations().update(this, properties);
    }
    if (changed && options2.external) {
      options2.external.call(this, {
        chart: this.chart,
        tooltip: this,
        replay
      });
    }
  }
  drawCaret(tooltipPoint, ctx, size, options2) {
    const caretPosition = this.getCaretPosition(tooltipPoint, size, options2);
    ctx.lineTo(caretPosition.x1, caretPosition.y1);
    ctx.lineTo(caretPosition.x2, caretPosition.y2);
    ctx.lineTo(caretPosition.x3, caretPosition.y3);
  }
  getCaretPosition(tooltipPoint, size, options2) {
    const { xAlign, yAlign } = this;
    const { caretSize, cornerRadius } = options2;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
    const { x: ptX, y: ptY } = tooltipPoint;
    const { width, height } = size;
    let x1, x2, x3, y1, y2, y3;
    if (yAlign === "center") {
      y2 = ptY + height / 2;
      if (xAlign === "left") {
        x1 = ptX;
        x2 = x1 - caretSize;
        y1 = y2 + caretSize;
        y3 = y2 - caretSize;
      } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        y1 = y2 - caretSize;
        y3 = y2 + caretSize;
      }
      x3 = x1;
    } else {
      if (xAlign === "left") {
        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
      } else if (xAlign === "right") {
        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
      } else {
        x2 = this.caretX;
      }
      if (yAlign === "top") {
        y1 = ptY;
        y2 = y1 - caretSize;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
      } else {
        y1 = ptY + height;
        y2 = y1 + caretSize;
        x1 = x2 + caretSize;
        x3 = x2 - caretSize;
      }
      y3 = y1;
    }
    return {
      x1,
      x2,
      x3,
      y1,
      y2,
      y3
    };
  }
  drawTitle(pt, ctx, options2) {
    const title = this.title;
    const length2 = title.length;
    let titleFont, titleSpacing, i;
    if (length2) {
      const rtlHelper = getRtlAdapter(options2.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options2.titleAlign, options2);
      ctx.textAlign = rtlHelper.textAlign(options2.titleAlign);
      ctx.textBaseline = "middle";
      titleFont = toFont(options2.titleFont);
      titleSpacing = options2.titleSpacing;
      ctx.fillStyle = options2.titleColor;
      ctx.font = titleFont.string;
      for (i = 0; i < length2; ++i) {
        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
        pt.y += titleFont.lineHeight + titleSpacing;
        if (i + 1 === length2) {
          pt.y += options2.titleMarginBottom - titleSpacing;
        }
      }
    }
  }
  _drawColorBox(ctx, pt, i, rtlHelper, options2) {
    const labelColor = this.labelColors[i];
    const labelPointStyle = this.labelPointStyles[i];
    const { boxHeight, boxWidth } = options2;
    const bodyFont = toFont(options2.bodyFont);
    const colorX = getAlignedX(this, "left", options2);
    const rtlColorX = rtlHelper.x(colorX);
    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
    const colorY = pt.y + yOffSet;
    if (options2.usePointStyle) {
      const drawOptions = {
        radius: Math.min(boxWidth, boxHeight) / 2,
        pointStyle: labelPointStyle.pointStyle,
        rotation: labelPointStyle.rotation,
        borderWidth: 1
      };
      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
      const centerY = colorY + boxHeight / 2;
      ctx.strokeStyle = options2.multiKeyBackground;
      ctx.fillStyle = options2.multiKeyBackground;
      drawPoint(ctx, drawOptions, centerX, centerY);
      ctx.strokeStyle = labelColor.borderColor;
      ctx.fillStyle = labelColor.backgroundColor;
      drawPoint(ctx, drawOptions, centerX, centerY);
    } else {
      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
      ctx.strokeStyle = labelColor.borderColor;
      ctx.setLineDash(labelColor.borderDash || []);
      ctx.lineDashOffset = labelColor.borderDashOffset || 0;
      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
      const borderRadius2 = toTRBLCorners(labelColor.borderRadius);
      if (Object.values(borderRadius2).some((v2) => v2 !== 0)) {
        ctx.beginPath();
        ctx.fillStyle = options2.multiKeyBackground;
        addRoundedRectPath(ctx, {
          x: outerX,
          y: colorY,
          w: boxWidth,
          h: boxHeight,
          radius: borderRadius2
        });
        ctx.fill();
        ctx.stroke();
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.beginPath();
        addRoundedRectPath(ctx, {
          x: innerX,
          y: colorY + 1,
          w: boxWidth - 2,
          h: boxHeight - 2,
          radius: borderRadius2
        });
        ctx.fill();
      } else {
        ctx.fillStyle = options2.multiKeyBackground;
        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
      }
    }
    ctx.fillStyle = this.labelTextColors[i];
  }
  drawBody(pt, ctx, options2) {
    const { body } = this;
    const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options2;
    const bodyFont = toFont(options2.bodyFont);
    let bodyLineHeight = bodyFont.lineHeight;
    let xLinePadding = 0;
    const rtlHelper = getRtlAdapter(options2.rtl, this.x, this.width);
    const fillLineOfText = function(line2) {
      ctx.fillText(line2, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
      pt.y += bodyLineHeight + bodySpacing;
    };
    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
    let bodyItem, textColor, lines, i, j, ilen, jlen;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = "middle";
    ctx.font = bodyFont.string;
    pt.x = getAlignedX(this, bodyAlignForCalculation, options2);
    ctx.fillStyle = options2.bodyColor;
    each(this.beforeBody, fillLineOfText);
    xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
    for (i = 0, ilen = body.length; i < ilen; ++i) {
      bodyItem = body[i];
      textColor = this.labelTextColors[i];
      ctx.fillStyle = textColor;
      each(bodyItem.before, fillLineOfText);
      lines = bodyItem.lines;
      if (displayColors && lines.length) {
        this._drawColorBox(ctx, pt, i, rtlHelper, options2);
        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
      }
      for (j = 0, jlen = lines.length; j < jlen; ++j) {
        fillLineOfText(lines[j]);
        bodyLineHeight = bodyFont.lineHeight;
      }
      each(bodyItem.after, fillLineOfText);
    }
    xLinePadding = 0;
    bodyLineHeight = bodyFont.lineHeight;
    each(this.afterBody, fillLineOfText);
    pt.y -= bodySpacing;
  }
  drawFooter(pt, ctx, options2) {
    const footer = this.footer;
    const length2 = footer.length;
    let footerFont, i;
    if (length2) {
      const rtlHelper = getRtlAdapter(options2.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options2.footerAlign, options2);
      pt.y += options2.footerMarginTop;
      ctx.textAlign = rtlHelper.textAlign(options2.footerAlign);
      ctx.textBaseline = "middle";
      footerFont = toFont(options2.footerFont);
      ctx.fillStyle = options2.footerColor;
      ctx.font = footerFont.string;
      for (i = 0; i < length2; ++i) {
        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
        pt.y += footerFont.lineHeight + options2.footerSpacing;
      }
    }
  }
  drawBackground(pt, ctx, tooltipSize, options2) {
    const { xAlign, yAlign } = this;
    const { x: x2, y: y2 } = pt;
    const { width, height } = tooltipSize;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(options2.cornerRadius);
    ctx.fillStyle = options2.backgroundColor;
    ctx.strokeStyle = options2.borderColor;
    ctx.lineWidth = options2.borderWidth;
    ctx.beginPath();
    ctx.moveTo(x2 + topLeft, y2);
    if (yAlign === "top") {
      this.drawCaret(pt, ctx, tooltipSize, options2);
    }
    ctx.lineTo(x2 + width - topRight, y2);
    ctx.quadraticCurveTo(x2 + width, y2, x2 + width, y2 + topRight);
    if (yAlign === "center" && xAlign === "right") {
      this.drawCaret(pt, ctx, tooltipSize, options2);
    }
    ctx.lineTo(x2 + width, y2 + height - bottomRight);
    ctx.quadraticCurveTo(x2 + width, y2 + height, x2 + width - bottomRight, y2 + height);
    if (yAlign === "bottom") {
      this.drawCaret(pt, ctx, tooltipSize, options2);
    }
    ctx.lineTo(x2 + bottomLeft, y2 + height);
    ctx.quadraticCurveTo(x2, y2 + height, x2, y2 + height - bottomLeft);
    if (yAlign === "center" && xAlign === "left") {
      this.drawCaret(pt, ctx, tooltipSize, options2);
    }
    ctx.lineTo(x2, y2 + topLeft);
    ctx.quadraticCurveTo(x2, y2, x2 + topLeft, y2);
    ctx.closePath();
    ctx.fill();
    if (options2.borderWidth > 0) {
      ctx.stroke();
    }
  }
  _updateAnimationTarget(options2) {
    const chart = this.chart;
    const anims = this.$animations;
    const animX = anims && anims.x;
    const animY = anims && anims.y;
    if (animX || animY) {
      const position2 = positioners[options2.position].call(this, this._active, this._eventPosition);
      if (!position2) {
        return;
      }
      const size = this._size = getTooltipSize(this, options2);
      const positionAndSize = Object.assign({}, position2, this._size);
      const alignment = determineAlignment(chart, options2, positionAndSize);
      const point = getBackgroundPoint(options2, positionAndSize, alignment, chart);
      if (animX._to !== point.x || animY._to !== point.y) {
        this.xAlign = alignment.xAlign;
        this.yAlign = alignment.yAlign;
        this.width = size.width;
        this.height = size.height;
        this.caretX = position2.x;
        this.caretY = position2.y;
        this._resolveAnimations().update(this, point);
      }
    }
  }
  _willRender() {
    return !!this.opacity;
  }
  draw(ctx) {
    const options2 = this.options.setContext(this.getContext());
    let opacity = this.opacity;
    if (!opacity) {
      return;
    }
    this._updateAnimationTarget(options2);
    const tooltipSize = {
      width: this.width,
      height: this.height
    };
    const pt = {
      x: this.x,
      y: this.y
    };
    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
    const padding = toPadding(options2.padding);
    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
    if (options2.enabled && hasTooltipContent) {
      ctx.save();
      ctx.globalAlpha = opacity;
      this.drawBackground(pt, ctx, tooltipSize, options2);
      overrideTextDirection(ctx, options2.textDirection);
      pt.y += padding.top;
      this.drawTitle(pt, ctx, options2);
      this.drawBody(pt, ctx, options2);
      this.drawFooter(pt, ctx, options2);
      restoreTextDirection(ctx, options2.textDirection);
      ctx.restore();
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements, eventPosition) {
    const lastActive = this._active;
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.chart.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("Cannot find a dataset at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(lastActive, active);
    const positionChanged = this._positionChanged(active, eventPosition);
    if (changed || positionChanged) {
      this._active = active;
      this._eventPosition = eventPosition;
      this._ignoreReplayEvents = true;
      this.update(true);
    }
  }
  handleEvent(e2, replay, inChartArea = true) {
    if (replay && this._ignoreReplayEvents) {
      return false;
    }
    this._ignoreReplayEvents = false;
    const options2 = this.options;
    const lastActive = this._active || [];
    const active = this._getActiveElements(e2, lastActive, replay, inChartArea);
    const positionChanged = this._positionChanged(active, e2);
    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
    if (changed) {
      this._active = active;
      if (options2.enabled || options2.external) {
        this._eventPosition = {
          x: e2.x,
          y: e2.y
        };
        this.update(true, replay);
      }
    }
    return changed;
  }
  _getActiveElements(e2, lastActive, replay, inChartArea) {
    const options2 = this.options;
    if (e2.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive.filter((i) => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== void 0);
    }
    const active = this.chart.getElementsAtEventForMode(e2, options2.mode, options2, replay);
    if (options2.reverse) {
      active.reverse();
    }
    return active;
  }
  _positionChanged(active, e2) {
    const { caretX, caretY, options: options2 } = this;
    const position2 = positioners[options2.position].call(this, active, e2);
    return position2 !== false && (caretX !== position2.x || caretY !== position2.y);
  }
}, __publicField(_c, "positioners", positioners), _c);
var plugin_tooltip = {
  id: "tooltip",
  _element: Tooltip$1,
  positioners,
  afterInit(chart, _args, options2) {
    if (options2) {
      chart.tooltip = new Tooltip$1({
        chart,
        options: options2
      });
    }
  },
  beforeUpdate(chart, _args, options2) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options2);
    }
  },
  reset(chart, _args, options2) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options2);
    }
  },
  afterDraw(chart) {
    const tooltip = chart.tooltip;
    if (tooltip && tooltip._willRender()) {
      const args = {
        tooltip
      };
      if (chart.notifyPlugins("beforeTooltipDraw", {
        ...args,
        cancelable: true
      }) === false) {
        return;
      }
      tooltip.draw(chart.ctx);
      chart.notifyPlugins("afterTooltipDraw", args);
    }
  },
  afterEvent(chart, args) {
    if (chart.tooltip) {
      const useFinalPosition = args.replay;
      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
        args.changed = true;
      }
    }
  },
  defaults: {
    enabled: true,
    external: null,
    position: "average",
    backgroundColor: "rgba(0,0,0,0.8)",
    titleColor: "#fff",
    titleFont: {
      weight: "bold"
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: "left",
    bodyColor: "#fff",
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: "left",
    footerColor: "#fff",
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: "bold"
    },
    footerAlign: "left",
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (ctx, opts) => opts.bodyFont.size,
    boxWidth: (ctx, opts) => opts.bodyFont.size,
    multiKeyBackground: "#fff",
    displayColors: true,
    boxPadding: 0,
    borderColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: "easeOutQuart"
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "width",
          "height",
          "caretX",
          "caretY"
        ]
      },
      opacity: {
        easing: "linear",
        duration: 200
      }
    },
    callbacks: defaultCallbacks
  },
  defaultRoutes: {
    bodyFont: "font",
    footerFont: "font",
    titleFont: "font"
  },
  descriptors: {
    _scriptable: (name) => name !== "filter" && name !== "itemSort" && name !== "external",
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: "animation"
    }
  },
  additionalOptionScopes: [
    "interaction"
  ]
};
const addIfString = (labels, raw, index2, addedLabels) => {
  if (typeof raw === "string") {
    index2 = labels.push(raw) - 1;
    addedLabels.unshift({
      index: index2,
      label: raw
    });
  } else if (isNaN(raw)) {
    index2 = null;
  }
  return index2;
};
function findOrAddLabel(labels, raw, index2, addedLabels) {
  const first = labels.indexOf(raw);
  if (first === -1) {
    return addIfString(labels, raw, index2, addedLabels);
  }
  const last = labels.lastIndexOf(raw);
  return first !== last ? index2 : first;
}
const validIndex = (index2, max2) => index2 === null ? null : _limitValue(Math.round(index2), 0, max2);
function _getLabelForValue(value) {
  const labels = this.getLabels();
  if (value >= 0 && value < labels.length) {
    return labels[value];
  }
  return value;
}
class CategoryScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this._startValue = void 0;
    this._valueRange = 0;
    this._addedLabels = [];
  }
  init(scaleOptions) {
    const added = this._addedLabels;
    if (added.length) {
      const labels = this.getLabels();
      for (const { index: index2, label } of added) {
        if (labels[index2] === label) {
          labels.splice(index2, 1);
        }
      }
      this._addedLabels = [];
    }
    super.init(scaleOptions);
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    const labels = this.getLabels();
    index2 = isFinite(index2) && labels[index2] === raw ? index2 : findOrAddLabel(labels, raw, valueOrDefault(index2, raw), this._addedLabels);
    return validIndex(index2, labels.length - 1);
  }
  determineDataLimits() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min: min2, max: max2 } = this.getMinMax(true);
    if (this.options.bounds === "ticks") {
      if (!minDefined) {
        min2 = 0;
      }
      if (!maxDefined) {
        max2 = this.getLabels().length - 1;
      }
    }
    this.min = min2;
    this.max = max2;
  }
  buildTicks() {
    const min2 = this.min;
    const max2 = this.max;
    const offset = this.options.offset;
    const ticks = [];
    let labels = this.getLabels();
    labels = min2 === 0 && max2 === labels.length - 1 ? labels : labels.slice(min2, max2 + 1);
    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
    this._startValue = this.min - (offset ? 0.5 : 0);
    for (let value = min2; value <= max2; value++) {
      ticks.push({
        value
      });
    }
    return ticks;
  }
  getLabelForValue(value) {
    return _getLabelForValue.call(this, value);
  }
  configure() {
    super.configure();
    if (!this.isHorizontal()) {
      this._reversePixels = !this._reversePixels;
    }
  }
  getPixelForValue(value) {
    if (typeof value !== "number") {
      value = this.parse(value);
    }
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getValueForPixel(pixel) {
    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
}
__publicField(CategoryScale, "id", "category");
__publicField(CategoryScale, "defaults", {
  ticks: {
    callback: _getLabelForValue
  }
});
function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const { bounds, step, min: min2, max: max2, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const { min: rmin, max: rmax } = dataRange;
  const minDefined = !isNullOrUndef(min2);
  const maxDefined = !isNullOrUndef(max2);
  const countDefined = !isNullOrUndef(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing2 = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;
  if (spacing2 < MIN_SPACING && !minDefined && !maxDefined) {
    return [
      {
        value: rmin
      },
      {
        value: rmax
      }
    ];
  }
  numSpaces = Math.ceil(rmax / spacing2) - Math.floor(rmin / spacing2);
  if (numSpaces > maxSpaces) {
    spacing2 = niceNum(numSpaces * spacing2 / maxSpaces / unit) * unit;
  }
  if (!isNullOrUndef(precision)) {
    factor = Math.pow(10, precision);
    spacing2 = Math.ceil(spacing2 * factor) / factor;
  }
  if (bounds === "ticks") {
    niceMin = Math.floor(rmin / spacing2) * spacing2;
    niceMax = Math.ceil(rmax / spacing2) * spacing2;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }
  if (minDefined && maxDefined && step && almostWhole((max2 - min2) / step, spacing2 / 1e3)) {
    numSpaces = Math.round(Math.min((max2 - min2) / spacing2, maxTicks));
    spacing2 = (max2 - min2) / numSpaces;
    niceMin = min2;
    niceMax = max2;
  } else if (countDefined) {
    niceMin = minDefined ? min2 : niceMin;
    niceMax = maxDefined ? max2 : niceMax;
    numSpaces = count - 1;
    spacing2 = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing2;
    if (almostEquals(numSpaces, Math.round(numSpaces), spacing2 / 1e3)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }
  const decimalPlaces = Math.max(_decimalPlaces(spacing2), _decimalPlaces(niceMin));
  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j = 0;
  if (minDefined) {
    if (includeBounds && niceMin !== min2) {
      ticks.push({
        value: min2
      });
      if (niceMin < min2) {
        j++;
      }
      if (almostEquals(Math.round((niceMin + j * spacing2) * factor) / factor, min2, relativeLabelSize(min2, minSpacing, generationOptions))) {
        j++;
      }
    } else if (niceMin < min2) {
      j++;
    }
  }
  for (; j < numSpaces; ++j) {
    const tickValue = Math.round((niceMin + j * spacing2) * factor) / factor;
    if (maxDefined && tickValue > max2) {
      break;
    }
    ticks.push({
      value: tickValue
    });
  }
  if (maxDefined && includeBounds && niceMax !== max2) {
    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max2, relativeLabelSize(max2, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max2;
    } else {
      ticks.push({
        value: max2
      });
    }
  } else if (!maxDefined || niceMax === max2) {
    ticks.push({
      value: niceMax
    });
  }
  return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
  const rad = toRadians(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 1e-3;
  const length2 = 0.75 * minSpacing * ("" + value).length;
  return Math.min(minSpacing / ratio, length2);
}
class LinearScaleBase extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._endValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) {
      return null;
    }
    return +raw;
  }
  handleTickRangeOptions() {
    const { beginAtZero } = this.options;
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min: min2, max: max2 } = this;
    const setMin = (v2) => min2 = minDefined ? min2 : v2;
    const setMax = (v2) => max2 = maxDefined ? max2 : v2;
    if (beginAtZero) {
      const minSign = sign(min2);
      const maxSign = sign(max2);
      if (minSign < 0 && maxSign < 0) {
        setMax(0);
      } else if (minSign > 0 && maxSign > 0) {
        setMin(0);
      }
    }
    if (min2 === max2) {
      let offset = max2 === 0 ? 1 : Math.abs(max2 * 0.05);
      setMax(max2 + offset);
      if (!beginAtZero) {
        setMin(min2 - offset);
      }
    }
    this.min = min2;
    this.max = max2;
  }
  getTickLimit() {
    const tickOpts = this.options.ticks;
    let { maxTicksLimit, stepSize } = tickOpts;
    let maxTicks;
    if (stepSize) {
      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
      if (maxTicks > 1e3) {
        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
        maxTicks = 1e3;
      }
    } else {
      maxTicks = this.computeTickLimit();
      maxTicksLimit = maxTicksLimit || 11;
    }
    if (maxTicksLimit) {
      maxTicks = Math.min(maxTicksLimit, maxTicks);
    }
    return maxTicks;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const opts = this.options;
    const tickOpts = opts.ticks;
    let maxTicks = this.getTickLimit();
    maxTicks = Math.max(2, maxTicks);
    const numericGeneratorOptions = {
      maxTicks,
      bounds: opts.bounds,
      min: opts.min,
      max: opts.max,
      precision: tickOpts.precision,
      step: tickOpts.stepSize,
      count: tickOpts.count,
      maxDigits: this._maxDigits(),
      horizontal: this.isHorizontal(),
      minRotation: tickOpts.minRotation || 0,
      includeBounds: tickOpts.includeBounds !== false
    };
    const dataRange = this._range || this;
    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  configure() {
    const ticks = this.ticks;
    let start = this.min;
    let end = this.max;
    super.configure();
    if (this.options.offset && ticks.length) {
      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
      start -= offset;
      end += offset;
    }
    this._startValue = start;
    this._endValue = end;
    this._valueRange = end - start;
  }
  getLabelForValue(value) {
    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
}
class LinearScale extends LinearScaleBase {
  determineDataLimits() {
    const { min: min2, max: max2 } = this.getMinMax(true);
    this.min = isNumberFinite(min2) ? min2 : 0;
    this.max = isNumberFinite(max2) ? max2 : 1;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    const horizontal = this.isHorizontal();
    const length2 = horizontal ? this.width : this.height;
    const minRotation = toRadians(this.options.ticks.minRotation);
    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 1e-3;
    const tickFont = this._resolveTickFontOptions(0);
    return Math.ceil(length2 / Math.min(40, tickFont.lineHeight / ratio));
  }
  getPixelForValue(value) {
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  }
}
__publicField(LinearScale, "id", "linear");
__publicField(LinearScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.numeric
  }
});
const log10Floor = (v2) => Math.floor(log10(v2));
const changeExponent = (v2, m2) => Math.pow(10, log10Floor(v2) + m2);
function isMajor(tickVal) {
  const remain = tickVal / Math.pow(10, log10Floor(tickVal));
  return remain === 1;
}
function steps(min2, max2, rangeExp) {
  const rangeStep = Math.pow(10, rangeExp);
  const start = Math.floor(min2 / rangeStep);
  const end = Math.ceil(max2 / rangeStep);
  return end - start;
}
function startExp(min2, max2) {
  const range = max2 - min2;
  let rangeExp = log10Floor(range);
  while (steps(min2, max2, rangeExp) > 10) {
    rangeExp++;
  }
  while (steps(min2, max2, rangeExp) < 10) {
    rangeExp--;
  }
  return Math.min(rangeExp, log10Floor(min2));
}
function generateTicks(generationOptions, { min: min2, max: max2 }) {
  min2 = finiteOrDefault(generationOptions.min, min2);
  const ticks = [];
  const minExp = log10Floor(min2);
  let exp = startExp(min2, max2);
  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
  const stepSize = Math.pow(10, exp);
  const base = minExp > exp ? Math.pow(10, minExp) : 0;
  const start = Math.round((min2 - base) * precision) / precision;
  const offset = Math.floor((min2 - base) / stepSize / 10) * stepSize * 10;
  let significand = Math.floor((start - offset) / Math.pow(10, exp));
  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);
  while (value < max2) {
    ticks.push({
      value,
      major: isMajor(value),
      significand
    });
    if (significand >= 10) {
      significand = significand < 15 ? 15 : 20;
    } else {
      significand++;
    }
    if (significand >= 20) {
      exp++;
      significand = 2;
      precision = exp >= 0 ? 1 : precision;
    }
    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;
  }
  const lastTick = finiteOrDefault(generationOptions.max, value);
  ticks.push({
    value: lastTick,
    major: isMajor(lastTick),
    significand
  });
  return ticks;
}
class LogarithmicScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    const value = LinearScaleBase.prototype.parse.apply(this, [
      raw,
      index2
    ]);
    if (value === 0) {
      this._zero = true;
      return void 0;
    }
    return isNumberFinite(value) && value > 0 ? value : null;
  }
  determineDataLimits() {
    const { min: min2, max: max2 } = this.getMinMax(true);
    this.min = isNumberFinite(min2) ? Math.max(0, min2) : null;
    this.max = isNumberFinite(max2) ? Math.max(0, max2) : null;
    if (this.options.beginAtZero) {
      this._zero = true;
    }
    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {
      this.min = min2 === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
    }
    this.handleTickRangeOptions();
  }
  handleTickRangeOptions() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let min2 = this.min;
    let max2 = this.max;
    const setMin = (v2) => min2 = minDefined ? min2 : v2;
    const setMax = (v2) => max2 = maxDefined ? max2 : v2;
    if (min2 === max2) {
      if (min2 <= 0) {
        setMin(1);
        setMax(10);
      } else {
        setMin(changeExponent(min2, -1));
        setMax(changeExponent(max2, 1));
      }
    }
    if (min2 <= 0) {
      setMin(changeExponent(max2, -1));
    }
    if (max2 <= 0) {
      setMax(changeExponent(min2, 1));
    }
    this.min = min2;
    this.max = max2;
  }
  buildTicks() {
    const opts = this.options;
    const generationOptions = {
      min: this._userMin,
      max: this._userMax
    };
    const ticks = generateTicks(generationOptions, this);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  getLabelForValue(value) {
    return value === void 0 ? "0" : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
  configure() {
    const start = this.min;
    super.configure();
    this._startValue = log10(start);
    this._valueRange = log10(this.max) - log10(start);
  }
  getPixelForValue(value) {
    if (value === void 0 || value === 0) {
      value = this.min;
    }
    if (value === null || isNaN(value)) {
      return NaN;
    }
    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    const decimal = this.getDecimalForPixel(pixel);
    return Math.pow(10, this._startValue + decimal * this._valueRange);
  }
}
__publicField(LogarithmicScale, "id", "logarithmic");
__publicField(LogarithmicScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.logarithmic,
    major: {
      enabled: true
    }
  }
});
function getTickBackdropHeight(opts) {
  const tickOpts = opts.ticks;
  if (tickOpts.display && opts.display) {
    const padding = toPadding(tickOpts.backdropPadding);
    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
  }
  return 0;
}
function measureLabelSize(ctx, font, label) {
  label = isArray$1(label) ? label : [
    label
  ];
  return {
    w: _longestText(ctx, font.string, label),
    h: label.length * font.lineHeight
  };
}
function determineLimits(angle, pos, size, min2, max2) {
  if (angle === min2 || angle === max2) {
    return {
      start: pos - size / 2,
      end: pos + size / 2
    };
  } else if (angle < min2 || angle > max2) {
    return {
      start: pos - size,
      end: pos
    };
  }
  return {
    start: pos,
    end: pos + size
  };
}
function fitWithPointLabels(scale) {
  const orig = {
    l: scale.left + scale._padding.left,
    r: scale.right - scale._padding.right,
    t: scale.top + scale._padding.top,
    b: scale.bottom - scale._padding.bottom
  };
  const limits = Object.assign({}, orig);
  const labelSizes = [];
  const padding = [];
  const valueCount = scale._pointLabels.length;
  const pointLabelOpts = scale.options.pointLabels;
  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
  for (let i = 0; i < valueCount; i++) {
    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
    padding[i] = opts.padding;
    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
    const plFont = toFont(opts.font);
    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
    labelSizes[i] = textSize;
    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);
    const angle = Math.round(toDegrees(angleRadians));
    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    updateLimits(limits, orig, angleRadians, hLimits, vLimits);
  }
  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
  const sin = Math.abs(Math.sin(angle));
  const cos = Math.abs(Math.cos(angle));
  let x2 = 0;
  let y2 = 0;
  if (hLimits.start < orig.l) {
    x2 = (orig.l - hLimits.start) / sin;
    limits.l = Math.min(limits.l, orig.l - x2);
  } else if (hLimits.end > orig.r) {
    x2 = (hLimits.end - orig.r) / sin;
    limits.r = Math.max(limits.r, orig.r + x2);
  }
  if (vLimits.start < orig.t) {
    y2 = (orig.t - vLimits.start) / cos;
    limits.t = Math.min(limits.t, orig.t - y2);
  } else if (vLimits.end > orig.b) {
    y2 = (vLimits.end - orig.b) / cos;
    limits.b = Math.max(limits.b, orig.b + y2);
  }
}
function createPointLabelItem(scale, index2, itemOpts) {
  const outerDistance = scale.drawingArea;
  const { extra, additionalAngle, padding, size } = itemOpts;
  const pointLabelPosition = scale.getPointPosition(index2, outerDistance + extra + padding, additionalAngle);
  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
  const y2 = yForAngle(pointLabelPosition.y, size.h, angle);
  const textAlign = getTextAlignForAngle(angle);
  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
  return {
    visible: true,
    x: pointLabelPosition.x,
    y: y2,
    textAlign,
    left,
    top: y2,
    right: left + size.w,
    bottom: y2 + size.h
  };
}
function isNotOverlapped(item2, area) {
  if (!area) {
    return true;
  }
  const { left, top, right, bottom } = item2;
  const apexesInArea = _isPointInArea({
    x: left,
    y: top
  }, area) || _isPointInArea({
    x: left,
    y: bottom
  }, area) || _isPointInArea({
    x: right,
    y: top
  }, area) || _isPointInArea({
    x: right,
    y: bottom
  }, area);
  return !apexesInArea;
}
function buildPointLabelItems(scale, labelSizes, padding) {
  const items = [];
  const valueCount = scale._pointLabels.length;
  const opts = scale.options;
  const { centerPointLabels, display } = opts.pointLabels;
  const itemOpts = {
    extra: getTickBackdropHeight(opts) / 2,
    additionalAngle: centerPointLabels ? PI / valueCount : 0
  };
  let area;
  for (let i = 0; i < valueCount; i++) {
    itemOpts.padding = padding[i];
    itemOpts.size = labelSizes[i];
    const item2 = createPointLabelItem(scale, i, itemOpts);
    items.push(item2);
    if (display === "auto") {
      item2.visible = isNotOverlapped(item2, area);
      if (item2.visible) {
        area = item2;
      }
    }
  }
  return items;
}
function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return "center";
  } else if (angle < 180) {
    return "left";
  }
  return "right";
}
function leftForTextAlign(x2, w2, align) {
  if (align === "right") {
    x2 -= w2;
  } else if (align === "center") {
    x2 -= w2 / 2;
  }
  return x2;
}
function yForAngle(y2, h3, angle) {
  if (angle === 90 || angle === 270) {
    y2 -= h3 / 2;
  } else if (angle > 270 || angle < 90) {
    y2 -= h3;
  }
  return y2;
}
function drawPointLabelBox(ctx, opts, item2) {
  const { left, top, right, bottom } = item2;
  const { backdropColor } = opts;
  if (!isNullOrUndef(backdropColor)) {
    const borderRadius2 = toTRBLCorners(opts.borderRadius);
    const padding = toPadding(opts.backdropPadding);
    ctx.fillStyle = backdropColor;
    const backdropLeft = left - padding.left;
    const backdropTop = top - padding.top;
    const backdropWidth = right - left + padding.width;
    const backdropHeight = bottom - top + padding.height;
    if (Object.values(borderRadius2).some((v2) => v2 !== 0)) {
      ctx.beginPath();
      addRoundedRectPath(ctx, {
        x: backdropLeft,
        y: backdropTop,
        w: backdropWidth,
        h: backdropHeight,
        radius: borderRadius2
      });
      ctx.fill();
    } else {
      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
    }
  }
}
function drawPointLabels(scale, labelCount) {
  const { ctx, options: { pointLabels } } = scale;
  for (let i = labelCount - 1; i >= 0; i--) {
    const item2 = scale._pointLabelItems[i];
    if (!item2.visible) {
      continue;
    }
    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
    drawPointLabelBox(ctx, optsAtIndex, item2);
    const plFont = toFont(optsAtIndex.font);
    const { x: x2, y: y2, textAlign } = item2;
    renderText(ctx, scale._pointLabels[i], x2, y2 + plFont.lineHeight / 2, plFont, {
      color: optsAtIndex.color,
      textAlign,
      textBaseline: "middle"
    });
  }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
  const { ctx } = scale;
  if (circular) {
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
  } else {
    let pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (let i = 1; i < labelCount; i++) {
      pointPosition = scale.getPointPosition(i, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
  const ctx = scale.ctx;
  const circular = gridLineOpts.circular;
  const { color: color2, lineWidth } = gridLineOpts;
  if (!circular && !labelCount || !color2 || !lineWidth || radius < 0) {
    return;
  }
  ctx.save();
  ctx.strokeStyle = color2;
  ctx.lineWidth = lineWidth;
  ctx.setLineDash(borderOpts.dash);
  ctx.lineDashOffset = borderOpts.dashOffset;
  ctx.beginPath();
  pathRadiusLine(scale, radius, circular, labelCount);
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}
function createPointLabelContext(parent, index2, label) {
  return createContext(parent, {
    label,
    index: index2,
    type: "pointLabel"
  });
}
class RadialLinearScale extends LinearScaleBase {
  constructor(cfg) {
    super(cfg);
    this.xCenter = void 0;
    this.yCenter = void 0;
    this.drawingArea = void 0;
    this._pointLabels = [];
    this._pointLabelItems = [];
  }
  setDimensions() {
    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
    const w2 = this.width = this.maxWidth - padding.width;
    const h3 = this.height = this.maxHeight - padding.height;
    this.xCenter = Math.floor(this.left + w2 / 2 + padding.left);
    this.yCenter = Math.floor(this.top + h3 / 2 + padding.top);
    this.drawingArea = Math.floor(Math.min(w2, h3) / 2);
  }
  determineDataLimits() {
    const { min: min2, max: max2 } = this.getMinMax(false);
    this.min = isNumberFinite(min2) && !isNaN(min2) ? min2 : 0;
    this.max = isNumberFinite(max2) && !isNaN(max2) ? max2 : 0;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
  }
  generateTickLabels(ticks) {
    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
    this._pointLabels = this.getLabels().map((value, index2) => {
      const label = callback(this.options.pointLabels.callback, [
        value,
        index2
      ], this);
      return label || label === 0 ? label : "";
    }).filter((v2, i) => this.chart.getDataVisibility(i));
  }
  fit() {
    const opts = this.options;
    if (opts.display && opts.pointLabels.display) {
      fitWithPointLabels(this);
    } else {
      this.setCenterPoint(0, 0, 0, 0);
    }
  }
  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
  }
  getIndexAngle(index2) {
    const angleMultiplier = TAU / (this._pointLabels.length || 1);
    const startAngle = this.options.startAngle || 0;
    return _normalizeAngle(index2 * angleMultiplier + toRadians(startAngle));
  }
  getDistanceFromCenterForValue(value) {
    if (isNullOrUndef(value)) {
      return NaN;
    }
    const scalingFactor = this.drawingArea / (this.max - this.min);
    if (this.options.reverse) {
      return (this.max - value) * scalingFactor;
    }
    return (value - this.min) * scalingFactor;
  }
  getValueForDistanceFromCenter(distance) {
    if (isNullOrUndef(distance)) {
      return NaN;
    }
    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
  }
  getPointLabelContext(index2) {
    const pointLabels = this._pointLabels || [];
    if (index2 >= 0 && index2 < pointLabels.length) {
      const pointLabel = pointLabels[index2];
      return createPointLabelContext(this.getContext(), index2, pointLabel);
    }
  }
  getPointPosition(index2, distanceFromCenter, additionalAngle = 0) {
    const angle = this.getIndexAngle(index2) - HALF_PI + additionalAngle;
    return {
      x: Math.cos(angle) * distanceFromCenter + this.xCenter,
      y: Math.sin(angle) * distanceFromCenter + this.yCenter,
      angle
    };
  }
  getPointPositionForValue(index2, value) {
    return this.getPointPosition(index2, this.getDistanceFromCenterForValue(value));
  }
  getBasePosition(index2) {
    return this.getPointPositionForValue(index2 || 0, this.getBaseValue());
  }
  getPointLabelPosition(index2) {
    const { left, top, right, bottom } = this._pointLabelItems[index2];
    return {
      left,
      top,
      right,
      bottom
    };
  }
  drawBackground() {
    const { backgroundColor, grid: { circular } } = this.options;
    if (backgroundColor) {
      const ctx = this.ctx;
      ctx.save();
      ctx.beginPath();
      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
      ctx.closePath();
      ctx.fillStyle = backgroundColor;
      ctx.fill();
      ctx.restore();
    }
  }
  drawGrid() {
    const ctx = this.ctx;
    const opts = this.options;
    const { angleLines, grid, border } = opts;
    const labelCount = this._pointLabels.length;
    let i, offset, position2;
    if (opts.pointLabels.display) {
      drawPointLabels(this, labelCount);
    }
    if (grid.display) {
      this.ticks.forEach((tick, index2) => {
        if (index2 !== 0 || index2 === 0 && this.min < 0) {
          offset = this.getDistanceFromCenterForValue(tick.value);
          const context = this.getContext(index2);
          const optsAtIndex = grid.setContext(context);
          const optsAtIndexBorder = border.setContext(context);
          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
        }
      });
    }
    if (angleLines.display) {
      ctx.save();
      for (i = labelCount - 1; i >= 0; i--) {
        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
        const { color: color2, lineWidth } = optsAtIndex;
        if (!lineWidth || !color2) {
          continue;
        }
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = color2;
        ctx.setLineDash(optsAtIndex.borderDash);
        ctx.lineDashOffset = optsAtIndex.borderDashOffset;
        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
        position2 = this.getPointPosition(i, offset);
        ctx.beginPath();
        ctx.moveTo(this.xCenter, this.yCenter);
        ctx.lineTo(position2.x, position2.y);
        ctx.stroke();
      }
      ctx.restore();
    }
  }
  drawBorder() {
  }
  drawLabels() {
    const ctx = this.ctx;
    const opts = this.options;
    const tickOpts = opts.ticks;
    if (!tickOpts.display) {
      return;
    }
    const startAngle = this.getIndexAngle(0);
    let offset, width;
    ctx.save();
    ctx.translate(this.xCenter, this.yCenter);
    ctx.rotate(startAngle);
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    this.ticks.forEach((tick, index2) => {
      if (index2 === 0 && this.min >= 0 && !opts.reverse) {
        return;
      }
      const optsAtIndex = tickOpts.setContext(this.getContext(index2));
      const tickFont = toFont(optsAtIndex.font);
      offset = this.getDistanceFromCenterForValue(this.ticks[index2].value);
      if (optsAtIndex.showLabelBackdrop) {
        ctx.font = tickFont.string;
        width = ctx.measureText(tick.label).width;
        ctx.fillStyle = optsAtIndex.backdropColor;
        const padding = toPadding(optsAtIndex.backdropPadding);
        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
      }
      renderText(ctx, tick.label, 0, -offset, tickFont, {
        color: optsAtIndex.color,
        strokeColor: optsAtIndex.textStrokeColor,
        strokeWidth: optsAtIndex.textStrokeWidth
      });
    });
    ctx.restore();
  }
  drawTitle() {
  }
}
__publicField(RadialLinearScale, "id", "radialLinear");
__publicField(RadialLinearScale, "defaults", {
  display: true,
  animate: true,
  position: "chartArea",
  angleLines: {
    display: true,
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0
  },
  grid: {
    circular: false
  },
  startAngle: 0,
  ticks: {
    showLabelBackdrop: true,
    callback: Ticks.formatters.numeric
  },
  pointLabels: {
    backdropColor: void 0,
    backdropPadding: 2,
    display: true,
    font: {
      size: 10
    },
    callback(label) {
      return label;
    },
    padding: 5,
    centerPointLabels: false
  }
});
__publicField(RadialLinearScale, "defaultRoutes", {
  "angleLines.color": "borderColor",
  "pointLabels.color": "color",
  "ticks.color": "color"
});
__publicField(RadialLinearScale, "descriptors", {
  angleLines: {
    _fallback: "grid"
  }
});
const INTERVALS = {
  millisecond: {
    common: true,
    size: 1,
    steps: 1e3
  },
  second: {
    common: true,
    size: 1e3,
    steps: 60
  },
  minute: {
    common: true,
    size: 6e4,
    steps: 60
  },
  hour: {
    common: true,
    size: 36e5,
    steps: 24
  },
  day: {
    common: true,
    size: 864e5,
    steps: 30
  },
  week: {
    common: false,
    size: 6048e5,
    steps: 4
  },
  month: {
    common: true,
    size: 2628e6,
    steps: 12
  },
  quarter: {
    common: false,
    size: 7884e6,
    steps: 4
  },
  year: {
    common: true,
    size: 3154e7
  }
};
const UNITS = /* @__PURE__ */ Object.keys(INTERVALS);
function sorter(a, b2) {
  return a - b2;
}
function parse$1(scale, input2) {
  if (isNullOrUndef(input2)) {
    return null;
  }
  const adapter = scale._adapter;
  const { parser, round: round2, isoWeekday } = scale._parseOpts;
  let value = input2;
  if (typeof parser === "function") {
    value = parser(value);
  }
  if (!isNumberFinite(value)) {
    value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
  }
  if (value === null) {
    return null;
  }
  if (round2) {
    value = round2 === "week" && (isNumber$1(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round2);
  }
  return +value;
}
function determineUnitForAutoTicks(minUnit, min2, max2, capacity) {
  const ilen = UNITS.length;
  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    const interval = INTERVALS[UNITS[i]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
    if (interval.common && Math.ceil((max2 - min2) / (factor * interval.size)) <= capacity) {
      return UNITS[i];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min2, max2) {
  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    const unit = UNITS[i];
    if (INTERVALS[unit].common && scale._adapter.diff(max2, min2, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    if (INTERVALS[UNITS[i]].common) {
      return UNITS[i];
    }
  }
}
function addTick(ticks, time, timestamps) {
  if (!timestamps) {
    ticks[time] = true;
  } else if (timestamps.length) {
    const { lo, hi: hi2 } = _lookup(timestamps, time);
    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi2];
    ticks[timestamp] = true;
  }
}
function setMajorTicks(scale, ticks, map2, majorUnit) {
  const adapter = scale._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last = ticks[ticks.length - 1].value;
  let major, index2;
  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index2 = map2[major];
    if (index2 >= 0) {
      ticks[index2].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
  const ticks = [];
  const map2 = {};
  const ilen = values.length;
  let i, value;
  for (i = 0; i < ilen; ++i) {
    value = values[i];
    map2[value] = i;
    ticks.push({
      value,
      major: false
    });
  }
  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map2, majorUnit);
}
class TimeScale extends Scale {
  constructor(props) {
    super(props);
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
    this._unit = "day";
    this._majorUnit = void 0;
    this._offsets = {};
    this._normalized = false;
    this._parseOpts = void 0;
  }
  init(scaleOpts, opts = {}) {
    const time = scaleOpts.time || (scaleOpts.time = {});
    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
    adapter.init(opts);
    mergeIf(time.displayFormats, adapter.formats());
    this._parseOpts = {
      parser: time.parser,
      round: time.round,
      isoWeekday: time.isoWeekday
    };
    super.init(scaleOpts);
    this._normalized = opts.normalized;
  }
  parse(raw, index2) {
    if (raw === void 0) {
      return null;
    }
    return parse$1(this, raw);
  }
  beforeLayout() {
    super.beforeLayout();
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const options2 = this.options;
    const adapter = this._adapter;
    const unit = options2.time.unit || "day";
    let { min: min2, max: max2, minDefined, maxDefined } = this.getUserBounds();
    function _applyBounds(bounds) {
      if (!minDefined && !isNaN(bounds.min)) {
        min2 = Math.min(min2, bounds.min);
      }
      if (!maxDefined && !isNaN(bounds.max)) {
        max2 = Math.max(max2, bounds.max);
      }
    }
    if (!minDefined || !maxDefined) {
      _applyBounds(this._getLabelBounds());
      if (options2.bounds !== "ticks" || options2.ticks.source !== "labels") {
        _applyBounds(this.getMinMax(false));
      }
    }
    min2 = isNumberFinite(min2) && !isNaN(min2) ? min2 : +adapter.startOf(Date.now(), unit);
    max2 = isNumberFinite(max2) && !isNaN(max2) ? max2 : +adapter.endOf(Date.now(), unit) + 1;
    this.min = Math.min(min2, max2 - 1);
    this.max = Math.max(min2 + 1, max2);
  }
  _getLabelBounds() {
    const arr = this.getLabelTimestamps();
    let min2 = Number.POSITIVE_INFINITY;
    let max2 = Number.NEGATIVE_INFINITY;
    if (arr.length) {
      min2 = arr[0];
      max2 = arr[arr.length - 1];
    }
    return {
      min: min2,
      max: max2
    };
  }
  buildTicks() {
    const options2 = this.options;
    const timeOpts = options2.time;
    const tickOpts = options2.ticks;
    const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
    if (options2.bounds === "ticks" && timestamps.length) {
      this.min = this._userMin || timestamps[0];
      this.max = this._userMax || timestamps[timestamps.length - 1];
    }
    const min2 = this.min;
    const max2 = this.max;
    const ticks = _filterBetween(timestamps, min2, max2);
    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min2)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
    this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? void 0 : determineMajorUnit(this._unit);
    this.initOffsets(timestamps);
    if (options2.reverse) {
      ticks.reverse();
    }
    return ticksFromTimestamps(this, ticks, this._majorUnit);
  }
  afterAutoSkip() {
    if (this.options.offsetAfterAutoskip) {
      this.initOffsets(this.ticks.map((tick) => +tick.value));
    }
  }
  initOffsets(timestamps = []) {
    let start = 0;
    let end = 0;
    let first, last;
    if (this.options.offset && timestamps.length) {
      first = this.getDecimalForValue(timestamps[0]);
      if (timestamps.length === 1) {
        start = 1 - first;
      } else {
        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
      }
      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
      if (timestamps.length === 1) {
        end = last;
      } else {
        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
      }
    }
    const limit = timestamps.length < 3 ? 0.5 : 0.25;
    start = _limitValue(start, 0, limit);
    end = _limitValue(end, 0, limit);
    this._offsets = {
      start,
      end,
      factor: 1 / (start + 1 + end)
    };
  }
  _generate() {
    const adapter = this._adapter;
    const min2 = this.min;
    const max2 = this.max;
    const options2 = this.options;
    const timeOpts = options2.time;
    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min2, max2, this._getLabelCapacity(min2));
    const stepSize = valueOrDefault(options2.ticks.stepSize, 1);
    const weekday = minor === "week" ? timeOpts.isoWeekday : false;
    const hasWeekday = isNumber$1(weekday) || weekday === true;
    const ticks = {};
    let first = min2;
    let time, count;
    if (hasWeekday) {
      first = +adapter.startOf(first, "isoWeek", weekday);
    }
    first = +adapter.startOf(first, hasWeekday ? "day" : minor);
    if (adapter.diff(max2, min2, minor) > 1e5 * stepSize) {
      throw new Error(min2 + " and " + max2 + " are too far apart with stepSize of " + stepSize + " " + minor);
    }
    const timestamps = options2.ticks.source === "data" && this.getDataTimestamps();
    for (time = first, count = 0; time < max2; time = +adapter.add(time, stepSize, minor), count++) {
      addTick(ticks, time, timestamps);
    }
    if (time === max2 || options2.bounds === "ticks" || count === 1) {
      addTick(ticks, time, timestamps);
    }
    return Object.keys(ticks).sort(sorter).map((x2) => +x2);
  }
  getLabelForValue(value) {
    const adapter = this._adapter;
    const timeOpts = this.options.time;
    if (timeOpts.tooltipFormat) {
      return adapter.format(value, timeOpts.tooltipFormat);
    }
    return adapter.format(value, timeOpts.displayFormats.datetime);
  }
  format(value, format) {
    const options2 = this.options;
    const formats = options2.time.displayFormats;
    const unit = this._unit;
    const fmt = format || formats[unit];
    return this._adapter.format(value, fmt);
  }
  _tickFormatFunction(time, index2, ticks, format) {
    const options2 = this.options;
    const formatter = options2.ticks.callback;
    if (formatter) {
      return callback(formatter, [
        time,
        index2,
        ticks
      ], this);
    }
    const formats = options2.time.displayFormats;
    const unit = this._unit;
    const majorUnit = this._majorUnit;
    const minorFormat = unit && formats[unit];
    const majorFormat = majorUnit && formats[majorUnit];
    const tick = ticks[index2];
    const major = majorUnit && majorFormat && tick && tick.major;
    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
  }
  generateTickLabels(ticks) {
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      tick.label = this._tickFormatFunction(tick.value, i, ticks);
    }
  }
  getDecimalForValue(value) {
    return value === null ? NaN : (value - this.min) / (this.max - this.min);
  }
  getPixelForValue(value) {
    const offsets = this._offsets;
    const pos = this.getDecimalForValue(value);
    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return this.min + pos * (this.max - this.min);
  }
  _getLabelSize(label) {
    const ticksOpts = this.options.ticks;
    const tickLabelWidth = this.ctx.measureText(label).width;
    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    const cosRotation = Math.cos(angle);
    const sinRotation = Math.sin(angle);
    const tickFontSize = this._resolveTickFontOptions(0).size;
    return {
      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
    };
  }
  _getLabelCapacity(exampleTime) {
    const timeOpts = this.options.time;
    const displayFormats = timeOpts.displayFormats;
    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
      exampleTime
    ], this._majorUnit), format);
    const size = this._getLabelSize(exampleLabel);
    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
    return capacity > 0 ? capacity : 1;
  }
  getDataTimestamps() {
    let timestamps = this._cache.data || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const metas = this.getMatchingVisibleMetas();
    if (this._normalized && metas.length) {
      return this._cache.data = metas[0].controller.getAllParsedValues(this);
    }
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
    }
    return this._cache.data = this.normalize(timestamps);
  }
  getLabelTimestamps() {
    const timestamps = this._cache.labels || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const labels = this.getLabels();
    for (i = 0, ilen = labels.length; i < ilen; ++i) {
      timestamps.push(parse$1(this, labels[i]));
    }
    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
  }
  normalize(values) {
    return _arrayUnique(values.sort(sorter));
  }
}
__publicField(TimeScale, "id", "time");
__publicField(TimeScale, "defaults", {
  bounds: "data",
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: "millisecond",
    displayFormats: {}
  },
  ticks: {
    source: "auto",
    callback: false,
    major: {
      enabled: false
    }
  }
});
function interpolate(table2, val, reverse) {
  let lo = 0;
  let hi2 = table2.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;
  if (reverse) {
    if (val >= table2[lo].pos && val <= table2[hi2].pos) {
      ({ lo, hi: hi2 } = _lookupByKey(table2, "pos", val));
    }
    ({ pos: prevSource, time: prevTarget } = table2[lo]);
    ({ pos: nextSource, time: nextTarget } = table2[hi2]);
  } else {
    if (val >= table2[lo].time && val <= table2[hi2].time) {
      ({ lo, hi: hi2 } = _lookupByKey(table2, "time", val));
    }
    ({ time: prevSource, pos: prevTarget } = table2[lo]);
    ({ time: nextSource, pos: nextTarget } = table2[hi2]);
  }
  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
  constructor(props) {
    super(props);
    this._table = [];
    this._minPos = void 0;
    this._tableRange = void 0;
  }
  initOffsets() {
    const timestamps = this._getTimestampsForTable();
    const table2 = this._table = this.buildLookupTable(timestamps);
    this._minPos = interpolate(table2, this.min);
    this._tableRange = interpolate(table2, this.max) - this._minPos;
    super.initOffsets(timestamps);
  }
  buildLookupTable(timestamps) {
    const { min: min2, max: max2 } = this;
    const items = [];
    const table2 = [];
    let i, ilen, prev2, curr, next2;
    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
      curr = timestamps[i];
      if (curr >= min2 && curr <= max2) {
        items.push(curr);
      }
    }
    if (items.length < 2) {
      return [
        {
          time: min2,
          pos: 0
        },
        {
          time: max2,
          pos: 1
        }
      ];
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      next2 = items[i + 1];
      prev2 = items[i - 1];
      curr = items[i];
      if (Math.round((next2 + prev2) / 2) !== curr) {
        table2.push({
          time: curr,
          pos: i / (ilen - 1)
        });
      }
    }
    return table2;
  }
  _generate() {
    const min2 = this.min;
    const max2 = this.max;
    let timestamps = super.getDataTimestamps();
    if (!timestamps.includes(min2) || !timestamps.length) {
      timestamps.splice(0, 0, min2);
    }
    if (!timestamps.includes(max2) || timestamps.length === 1) {
      timestamps.push(max2);
    }
    return timestamps.sort((a, b2) => a - b2);
  }
  _getTimestampsForTable() {
    let timestamps = this._cache.all || [];
    if (timestamps.length) {
      return timestamps;
    }
    const data = this.getDataTimestamps();
    const label = this.getLabelTimestamps();
    if (data.length && label.length) {
      timestamps = this.normalize(data.concat(label));
    } else {
      timestamps = data.length ? data : label;
    }
    timestamps = this._cache.all = timestamps;
    return timestamps;
  }
  getDecimalForValue(value) {
    return (interpolate(this._table, value) - this._minPos) / this._tableRange;
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
  }
}
__publicField(TimeSeriesScale, "id", "timeseries");
__publicField(TimeSeriesScale, "defaults", TimeScale.defaults);
const defaultDatasetIdKey = "label";
function reforwardRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}
function setOptions(chart, nextOptions) {
  const options2 = chart.options;
  if (options2 && nextOptions) {
    Object.assign(options2, nextOptions);
  }
}
function setLabels(currentData, nextLabels) {
  currentData.labels = nextLabels;
}
function setDatasets(currentData, nextDatasets) {
  let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;
  const addedDatasets = [];
  currentData.datasets = nextDatasets.map((nextDataset) => {
    const currentDataset = currentData.datasets.find((dataset) => dataset[datasetIdKey] === nextDataset[datasetIdKey]);
    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {
      return {
        ...nextDataset
      };
    }
    addedDatasets.push(currentDataset);
    Object.assign(currentDataset, nextDataset);
    return currentDataset;
  });
}
function cloneData(data) {
  let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;
  const nextData = {
    labels: [],
    datasets: []
  };
  setLabels(nextData, data.labels);
  setDatasets(nextData, data.datasets, datasetIdKey);
  return nextData;
}
function ChartComponent(props, ref) {
  const { height = 150, width = 300, redraw = false, datasetIdKey, type, data, options: options2, plugins = [], fallbackContent, updateMode, ...canvasProps } = props;
  const canvasRef = reactExports.useRef(null);
  const chartRef = reactExports.useRef();
  const renderChart = () => {
    if (!canvasRef.current)
      return;
    chartRef.current = new Chart$1(canvasRef.current, {
      type,
      data: cloneData(data, datasetIdKey),
      options: options2 && {
        ...options2
      },
      plugins
    });
    reforwardRef(ref, chartRef.current);
  };
  const destroyChart = () => {
    reforwardRef(ref, null);
    if (chartRef.current) {
      chartRef.current.destroy();
      chartRef.current = null;
    }
  };
  reactExports.useEffect(() => {
    if (!redraw && chartRef.current && options2) {
      setOptions(chartRef.current, options2);
    }
  }, [
    redraw,
    options2
  ]);
  reactExports.useEffect(() => {
    if (!redraw && chartRef.current) {
      setLabels(chartRef.current.config.data, data.labels);
    }
  }, [
    redraw,
    data.labels
  ]);
  reactExports.useEffect(() => {
    if (!redraw && chartRef.current && data.datasets) {
      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);
    }
  }, [
    redraw,
    data.datasets
  ]);
  reactExports.useEffect(() => {
    if (!chartRef.current)
      return;
    if (redraw) {
      destroyChart();
      setTimeout(renderChart);
    } else {
      chartRef.current.update(updateMode);
    }
  }, [
    redraw,
    options2,
    data.labels,
    data.datasets,
    updateMode
  ]);
  reactExports.useEffect(() => {
    if (!chartRef.current)
      return;
    destroyChart();
    setTimeout(renderChart);
  }, [
    type
  ]);
  reactExports.useEffect(() => {
    renderChart();
    return () => destroyChart();
  }, []);
  return /* @__PURE__ */ React.createElement("canvas", Object.assign({
    ref: canvasRef,
    role: "img",
    height,
    width
  }, canvasProps), fallbackContent);
}
const Chart = /* @__PURE__ */ reactExports.forwardRef(ChartComponent);
function createTypedChart(type, registerables) {
  Chart$1.register(registerables);
  return /* @__PURE__ */ reactExports.forwardRef((props, ref) => /* @__PURE__ */ React.createElement(Chart, Object.assign({}, props, {
    ref,
    type
  })));
}
const Line = /* @__PURE__ */ createTypedChart("line", LineController);
function hexToRGBA(hex2, alpha2 = 1) {
  const [r2, g2, b2] = hex2.match(/\w\w/g).map((x2) => parseInt(x2, 16));
  return `rgba(${r2},${g2},${b2},${alpha2})`;
}
const toUSD = (value) => {
  return Math.floor(value).toLocaleString("en-US", {
    style: "currency",
    currency: "USD",
    maximumFractionDigits: 0
  });
};
const currencyTemplate = (field) => {
  return (rowData) => {
    if (typeof rowData[field] === "string") {
      return rowData[field];
    }
    return toUSD(rowData[field]);
  };
};
const percentageTemplate = (field) => {
  return (rowData) => {
    return `${(rowData[field] * 100).toFixed(2)}%`;
  };
};
Chart$1.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  index$1,
  plugin_title,
  plugin_tooltip,
  plugin_legend
);
const TaxChart = ({
  taxData: taxData2,
  income,
  filingStatus,
  config: config2
}) => {
  const data = reactExports.useMemo(
    () => {
      const colors2 = [
        "#003f5c",
        "#444e86",
        "#955196",
        "#dd5182",
        "#ff6e54",
        "#ffa600"
      ];
      let datasets = [];
      if (taxData2.standardDeductions) {
        const color2 = colors2[colors2.length - 1];
        datasets.push({
          label: `Taxable Income`,
          data: taxData2.taxableIncome,
          borderColor: color2,
          backgroundColor: color2,
          fill: "false",
          pointRadius: 0,
          order: -1,
          yAxisID: "y2"
        });
      }
      if (taxData2.socialSecurity) {
        const color2 = colors2[0];
        datasets.push({
          label: "SS Taxes",
          data: taxData2.socialSecurity.basic,
          borderColor: color2,
          backgroundColor: color2,
          fill: true,
          pointRadius: 0,
          borderWidth: 1
        });
      }
      if (taxData2.medicare) {
        const color2 = colors2[1];
        datasets.push({
          label: "Medicare",
          data: taxData2.medicare.basic,
          borderColor: color2,
          backgroundColor: color2,
          fill: true,
          pointRadius: 0,
          borderWidth: 1
        });
      }
      if (taxData2.federalIncome) {
        const color2 = colors2[2];
        datasets.push({
          label: `Federal Income Taxes`,
          data: taxData2.federalIncome.basic,
          borderColor: color2,
          backgroundColor: color2,
          fill: true,
          pointRadius: 0,
          borderWidth: 1
        });
      }
      if (taxData2.takehomePay) {
        const color2 = colors2[3];
        datasets.push({
          label: `Takehome Pay`,
          data: taxData2.takehomePay,
          borderColor: hexToRGBA(color2, 0.15),
          backgroundColor: hexToRGBA(color2, 0.15),
          fill: true,
          pointRadius: 0
        });
      }
      if (taxData2.federalIncomeMarginal) {
        const color2 = colors2[colors2.length - 2];
        datasets.push({
          label: `Federal Marginal Rate`,
          data: taxData2.federalIncomeMarginal,
          borderColor: color2,
          backgroundColor: color2,
          fill: "false",
          yAxisID: "y1",
          pointRadius: 0,
          order: -1
        });
      }
      return {
        labels: taxData2.years,
        datasets
      };
    },
    [taxData2, config2, filingStatus, income]
  );
  const options2 = reactExports.useMemo(() => {
    let yScales = {
      x: {},
      y: {
        min: 0,
        max: income,
        stacked: true,
        ticks: {
          callback: function(value) {
            return toUSD(value);
          }
        }
      }
    };
    if (config2.showMarginalFederalRate) {
      yScales.y1 = {
        min: 0,
        max: 1,
        stacked: false,
        position: "right",
        title: {
          text: "Marginal rate",
          display: true
        },
        ticks: {
          callback: function(value) {
            return (value * 100).toFixed(0) + "%";
          }
        }
      };
    }
    if (config2.includeStandardDeductions) {
      yScales.y2 = {
        min: 0,
        max: income,
        display: false
      };
    }
    return {
      type: "line",
      responsive: true,
      scales: yScales,
      plugins: {
        legend: {
          position: "top"
        },
        title: {
          display: true,
          text: `Equivalent taxes owed for income $${income.toLocaleString(
            "en-US"
          )} using inflation adjusted historical tax code, filing ${filingStatus.label}`
        },
        tooltip: {
          mode: "nearest",
          axis: "x",
          intersect: false,
          callbacks: {
            label: function(context) {
              var label = context.dataset.label || "";
              if (context.dataset.yAxisID === "y1") {
                if (context.parsed.y !== null) {
                  label += ": " + (context.parsed.y * 100).toFixed(0) + "%";
                }
              } else {
                if (context.parsed.y !== null) {
                  label += ": $" + Math.round(Number(context.parsed.y)).toLocaleString("en-US");
                }
              }
              return label;
            }
          }
        }
      }
    };
  }, [taxData2, config2, filingStatus, income]);
  const [chartConfig, setChartConfig] = reactExports.useState({ data, options: options2 });
  reactExports.useEffect(() => {
    setChartConfig({ data, options: options2 });
  }, [data, options2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { height: "750px", width: "1200px" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Line,
    {
      data: chartConfig.data,
      options: chartConfig.options
    }
  ) });
};
function _extends$r() {
  _extends$r = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$r.apply(this, arguments);
}
var ArrowDownIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$r({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M6.99994 14C6.91097 14.0004 6.82281 13.983 6.74064 13.9489C6.65843 13.9148 6.58387 13.8646 6.52133 13.8013L1.10198 8.38193C0.982318 8.25351 0.917175 8.08367 0.920272 7.90817C0.923368 7.73267 0.994462 7.56523 1.11858 7.44111C1.24269 7.317 1.41014 7.2459 1.58563 7.2428C1.76113 7.23971 1.93098 7.30485 2.0594 7.42451L6.32263 11.6877V0.677419C6.32263 0.497756 6.394 0.325452 6.52104 0.198411C6.64808 0.0713706 6.82039 0 7.00005 0C7.17971 0 7.35202 0.0713706 7.47906 0.198411C7.6061 0.325452 7.67747 0.497756 7.67747 0.677419V11.6877L11.9407 7.42451C12.0691 7.30485 12.2389 7.23971 12.4144 7.2428C12.5899 7.2459 12.7574 7.317 12.8815 7.44111C13.0056 7.56523 13.0767 7.73267 13.0798 7.90817C13.0829 8.08367 13.0178 8.25351 12.8981 8.38193L7.47875 13.8013C7.41621 13.8646 7.34164 13.9148 7.25944 13.9489C7.17727 13.983 7.08912 14.0004 7.00015 14C7.00012 14 7.00009 14 7.00005 14C7.00001 14 6.99998 14 6.99994 14Z",
    fill: "currentColor"
  }));
}));
ArrowDownIcon.displayName = "ArrowDownIcon";
function _extends$q() {
  _extends$q = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$q.apply(this, arguments);
}
var ArrowUpIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$q({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M6.51551 13.799C6.64205 13.9255 6.813 13.9977 6.99193 14C7.17087 13.9977 7.34182 13.9255 7.46835 13.799C7.59489 13.6725 7.66701 13.5015 7.66935 13.3226V2.31233L11.9326 6.57554C11.9951 6.63887 12.0697 6.68907 12.1519 6.72319C12.2341 6.75731 12.3223 6.77467 12.4113 6.77425C12.5003 6.77467 12.5885 6.75731 12.6707 6.72319C12.7529 6.68907 12.8274 6.63887 12.89 6.57554C13.0168 6.44853 13.0881 6.27635 13.0881 6.09683C13.0881 5.91732 13.0168 5.74514 12.89 5.61812L7.48846 0.216594C7.48274 0.210436 7.4769 0.204374 7.47094 0.198411C7.3439 0.0713707 7.1716 0 6.99193 0C6.81227 0 6.63997 0.0713707 6.51293 0.198411C6.50704 0.204296 6.50128 0.210278 6.49563 0.216354L1.09386 5.61812C0.974201 5.74654 0.909057 5.91639 0.912154 6.09189C0.91525 6.26738 0.986345 6.43483 1.11046 6.55894C1.23457 6.68306 1.40202 6.75415 1.57752 6.75725C1.75302 6.76035 1.92286 6.6952 2.05128 6.57554L6.31451 2.31231V13.3226C6.31685 13.5015 6.38898 13.6725 6.51551 13.799Z",
    fill: "currentColor"
  }));
}));
ArrowUpIcon.displayName = "ArrowUpIcon";
function _extends$p() {
  _extends$p = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$p.apply(this, arguments);
}
var SpinnerIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$p({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M6.99701 14C5.85441 13.999 4.72939 13.7186 3.72012 13.1832C2.71084 12.6478 1.84795 11.8737 1.20673 10.9284C0.565504 9.98305 0.165424 8.89526 0.041387 7.75989C-0.0826496 6.62453 0.073125 5.47607 0.495122 4.4147C0.917119 3.35333 1.59252 2.4113 2.46241 1.67077C3.33229 0.930247 4.37024 0.413729 5.4857 0.166275C6.60117 -0.0811796 7.76026 -0.0520535 8.86188 0.251112C9.9635 0.554278 10.9742 1.12227 11.8057 1.90555C11.915 2.01493 11.9764 2.16319 11.9764 2.31778C11.9764 2.47236 11.915 2.62062 11.8057 2.73C11.7521 2.78503 11.688 2.82877 11.6171 2.85864C11.5463 2.8885 11.4702 2.90389 11.3933 2.90389C11.3165 2.90389 11.2404 2.8885 11.1695 2.85864C11.0987 2.82877 11.0346 2.78503 10.9809 2.73C9.9998 1.81273 8.73246 1.26138 7.39226 1.16876C6.05206 1.07615 4.72086 1.44794 3.62279 2.22152C2.52471 2.99511 1.72683 4.12325 1.36345 5.41602C1.00008 6.70879 1.09342 8.08723 1.62775 9.31926C2.16209 10.5513 3.10478 11.5617 4.29713 12.1803C5.48947 12.7989 6.85865 12.988 8.17414 12.7157C9.48963 12.4435 10.6711 11.7264 11.5196 10.6854C12.3681 9.64432 12.8319 8.34282 12.8328 7C12.8328 6.84529 12.8943 6.69692 13.0038 6.58752C13.1132 6.47812 13.2616 6.41667 13.4164 6.41667C13.5712 6.41667 13.7196 6.47812 13.8291 6.58752C13.9385 6.69692 14 6.84529 14 7C14 8.85651 13.2622 10.637 11.9489 11.9497C10.6356 13.2625 8.85432 14 6.99701 14Z",
    fill: "currentColor"
  }));
}));
SpinnerIcon.displayName = "SpinnerIcon";
function _extends$o() {
  _extends$o = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$o.apply(this, arguments);
}
var AngleDoubleLeftIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$o({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M5.71602 11.164C5.80782 11.2021 5.9063 11.2215 6.00569 11.221C6.20216 11.2301 6.39427 11.1612 6.54025 11.0294C6.68191 10.8875 6.76148 10.6953 6.76148 10.4948C6.76148 10.2943 6.68191 10.1021 6.54025 9.96024L3.51441 6.9344L6.54025 3.90855C6.624 3.76126 6.65587 3.59011 6.63076 3.42254C6.60564 3.25498 6.525 3.10069 6.40175 2.98442C6.2785 2.86815 6.11978 2.79662 5.95104 2.7813C5.78229 2.76598 5.61329 2.80776 5.47112 2.89994L1.97123 6.39983C1.82957 6.54167 1.75 6.73393 1.75 6.9344C1.75 7.13486 1.82957 7.32712 1.97123 7.46896L5.47112 10.9991C5.54096 11.0698 5.62422 11.1259 5.71602 11.164ZM11.0488 10.9689C11.1775 11.1156 11.3585 11.2061 11.5531 11.221C11.7477 11.2061 11.9288 11.1156 12.0574 10.9689C12.1815 10.8302 12.25 10.6506 12.25 10.4645C12.25 10.2785 12.1815 10.0989 12.0574 9.96024L9.03158 6.93439L12.0574 3.90855C12.1248 3.76739 12.1468 3.60881 12.1204 3.45463C12.0939 3.30045 12.0203 3.15826 11.9097 3.04765C11.7991 2.93703 11.6569 2.86343 11.5027 2.83698C11.3486 2.81053 11.19 2.83252 11.0488 2.89994L7.51865 6.36957C7.37699 6.51141 7.29742 6.70367 7.29742 6.90414C7.29742 7.1046 7.37699 7.29686 7.51865 7.4387L11.0488 10.9689Z",
    fill: "currentColor"
  }));
}));
AngleDoubleLeftIcon.displayName = "AngleDoubleLeftIcon";
function _extends$n() {
  _extends$n = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$n.apply(this, arguments);
}
var AngleUpIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$n({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M10.4134 9.49931C10.3148 9.49977 10.2172 9.48055 10.1262 9.44278C10.0352 9.405 9.95263 9.34942 9.88338 9.27931L6.88338 6.27931L3.88338 9.27931C3.73811 9.34946 3.57409 9.3709 3.41567 9.34044C3.25724 9.30999 3.11286 9.22926 3.00395 9.11025C2.89504 8.99124 2.82741 8.84028 2.8111 8.67978C2.79478 8.51928 2.83065 8.35781 2.91338 8.21931L6.41338 4.71931C6.55401 4.57886 6.74463 4.49997 6.94338 4.49997C7.14213 4.49997 7.33276 4.57886 7.47338 4.71931L10.9734 8.21931C11.1138 8.35994 11.1927 8.55056 11.1927 8.74931C11.1927 8.94806 11.1138 9.13868 10.9734 9.27931C10.9007 9.35315 10.8132 9.41089 10.7168 9.44879C10.6203 9.48669 10.5169 9.5039 10.4134 9.49931Z",
    fill: "currentColor"
  }));
}));
AngleUpIcon.displayName = "AngleUpIcon";
function _arrayLikeToArray$9(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles$4(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$9(arr);
}
function _iterableToArray$4(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray$9(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$9(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$9(o, minLen);
}
function _nonIterableSpread$4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray$4(arr) {
  return _arrayWithoutHoles$4(arr) || _iterableToArray$4(arr) || _unsupportedIterableToArray$9(arr) || _nonIterableSpread$4();
}
var KeyFilter = {
  /* eslint-disable */
  DEFAULT_MASKS: {
    pint: /[\d]/,
    "int": /[\d\-]/,
    pnum: /[\d\.]/,
    money: /[\d\.\s,]/,
    num: /[\d\-\.]/,
    hex: /[0-9a-f]/i,
    email: /[a-z0-9_\.\-@]/i,
    alpha: /[a-z_]/i,
    alphanum: /[a-z0-9_]/i
  },
  /* eslint-enable */
  getRegex: function getRegex(keyfilter) {
    return KeyFilter.DEFAULT_MASKS[keyfilter] ? KeyFilter.DEFAULT_MASKS[keyfilter] : keyfilter;
  },
  onBeforeInput: function onBeforeInput(e2, keyfilter, validateOnly) {
    if (validateOnly || !DomHandler.isAndroid()) {
      return;
    }
    this.validateKey(e2, e2.data, keyfilter);
  },
  onKeyPress: function onKeyPress(e2, keyfilter, validateOnly) {
    if (validateOnly || DomHandler.isAndroid()) {
      return;
    }
    if (e2.ctrlKey || e2.altKey) {
      return;
    }
    this.validateKey(e2, e2.key, keyfilter);
  },
  onPaste: function onPaste(e2, keyfilter, validateOnly) {
    if (validateOnly) {
      return;
    }
    var regex = this.getRegex(keyfilter);
    var clipboard = e2.clipboardData.getData("text");
    _toConsumableArray$4(clipboard).forEach(function(c2) {
      if (!regex.test(c2)) {
        e2.preventDefault();
        return false;
      }
    });
  },
  validateKey: function validateKey(e2, key, keyfilter) {
    if (key === null || key === void 0) {
      return;
    }
    var isPrintableKey = key.length === 1;
    if (!isPrintableKey) {
      return;
    }
    var regex = this.getRegex(keyfilter);
    if (!regex.test(key)) {
      e2.preventDefault();
    }
  },
  validate: function validate(e2, keyfilter) {
    var value = e2.target.value, validatePattern = true;
    var regex = this.getRegex(keyfilter);
    if (value && !regex.test(value)) {
      validatePattern = false;
    }
    return validatePattern;
  }
};
function _arrayWithHoles$7(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$7(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _arrayLikeToArray$8(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray$8(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$8(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$8(o, minLen);
}
function _nonIterableRest$7() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$7(arr, i) {
  return _arrayWithHoles$7(arr) || _iterableToArrayLimit$7(arr, i) || _unsupportedIterableToArray$8(arr, i) || _nonIterableRest$7();
}
var PortalBase = {
  defaultProps: {
    __TYPE: "Portal",
    element: null,
    appendTo: null,
    visible: false,
    onMounted: null,
    onUnmounted: null,
    children: void 0
  },
  getProps: function getProps3(props) {
    return ObjectUtils.getMergedProps(props, PortalBase.defaultProps);
  },
  getOtherProps: function getOtherProps3(props) {
    return ObjectUtils.getDiffProps(props, PortalBase.defaultProps);
  }
};
var Portal = /* @__PURE__ */ reactExports.memo(function(inProps) {
  var props = PortalBase.getProps(inProps);
  var context = reactExports.useContext(PrimeReactContext);
  var _React$useState = reactExports.useState(props.visible && DomHandler.isClient()), _React$useState2 = _slicedToArray$7(_React$useState, 2), mountedState = _React$useState2[0], setMountedState = _React$useState2[1];
  useMountEffect(function() {
    if (DomHandler.isClient() && !mountedState) {
      setMountedState(true);
      props.onMounted && props.onMounted();
    }
  });
  useUpdateEffect(function() {
    props.onMounted && props.onMounted();
  }, [mountedState]);
  useUnmountEffect(function() {
    props.onUnmounted && props.onUnmounted();
  });
  var element = props.element || props.children;
  if (element && mountedState) {
    var appendTo = props.appendTo || context && context.appendTo || PrimeReact$2.appendTo;
    if (ObjectUtils.isFunction(appendTo)) {
      appendTo = appendTo();
    }
    if (!appendTo) {
      appendTo = document.body;
    }
    return appendTo === "self" ? element : /* @__PURE__ */ ReactDOM.createPortal(element, appendTo);
  }
  return null;
});
Portal.displayName = "Portal";
function _extends$m() {
  _extends$m = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$m.apply(this, arguments);
}
function _typeof$9(o) {
  "@babel/helpers - typeof";
  return _typeof$9 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$9(o);
}
function _toPrimitive$8(input2, hint) {
  if (_typeof$9(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$9(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$8(arg) {
  var key = _toPrimitive$8(arg, "string");
  return _typeof$9(key) === "symbol" ? key : String(key);
}
function _defineProperty$9(obj, key, value) {
  key = _toPropertyKey$8(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayLikeToArray$7(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles$3(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$7(arr);
}
function _iterableToArray$3(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray$7(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$7(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$7(o, minLen);
}
function _nonIterableSpread$3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray$3(arr) {
  return _arrayWithoutHoles$3(arr) || _iterableToArray$3(arr) || _unsupportedIterableToArray$7(arr) || _nonIterableSpread$3();
}
function _arrayWithHoles$6(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$6(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _nonIterableRest$6() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$6(arr, i) {
  return _arrayWithHoles$6(arr) || _iterableToArrayLimit$6(arr, i) || _unsupportedIterableToArray$7(arr, i) || _nonIterableRest$6();
}
var classes$7 = {
  root: function root2(_ref3) {
    var positionState = _ref3.positionState, classNameState = _ref3.classNameState;
    return classNames$1("p-tooltip p-component", _defineProperty$9({}, "p-tooltip-".concat(positionState), true), classNameState);
  },
  arrow: "p-tooltip-arrow",
  text: "p-tooltip-text"
};
var inlineStyles$2 = {
  arrow: function arrow(_ref22) {
    var context = _ref22.context;
    return {
      top: context.bottom ? "0" : context.right || context.left || !context.right && !context.left && !context.top && !context.bottom ? "50%" : null,
      bottom: context.top ? "0" : null,
      left: context.right || !context.right && !context.left && !context.top && !context.bottom ? "0" : context.top || context.bottom ? "50%" : null,
      right: context.left ? "0" : null
    };
  }
};
var styles$7 = "\n@layer primereact {\n    .p-tooltip {\n        position: absolute;\n        padding: .25em .5rem;\n        /* #3687: Tooltip prevent scrollbar flickering */\n        top: -9999px;\n        left: -9999px;\n    }\n    \n    .p-tooltip.p-tooltip-right,\n    .p-tooltip.p-tooltip-left {\n        padding: 0 .25rem;\n    }\n    \n    .p-tooltip.p-tooltip-top,\n    .p-tooltip.p-tooltip-bottom {\n        padding:.25em 0;\n    }\n    \n    .p-tooltip .p-tooltip-text {\n       white-space: pre-line;\n       word-break: break-word;\n    }\n    \n    .p-tooltip-arrow {\n        position: absolute;\n        width: 0;\n        height: 0;\n        border-color: transparent;\n        border-style: solid;\n    }\n    \n    .p-tooltip-right .p-tooltip-arrow {\n        top: 50%;\n        left: 0;\n        margin-top: -.25rem;\n        border-width: .25em .25em .25em 0;\n    }\n    \n    .p-tooltip-left .p-tooltip-arrow {\n        top: 50%;\n        right: 0;\n        margin-top: -.25rem;\n        border-width: .25em 0 .25em .25rem;\n    }\n    \n    .p-tooltip.p-tooltip-top {\n        padding: .25em 0;\n    }\n    \n    .p-tooltip-top .p-tooltip-arrow {\n        bottom: 0;\n        left: 50%;\n        margin-left: -.25rem;\n        border-width: .25em .25em 0;\n    }\n    \n    .p-tooltip-bottom .p-tooltip-arrow {\n        top: 0;\n        left: 50%;\n        margin-left: -.25rem;\n        border-width: 0 .25em .25rem;\n    }\n\n    .p-tooltip-target-wrapper {\n        display: inline-flex;\n    }\n}\n";
var TooltipBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Tooltip",
    appendTo: null,
    at: null,
    autoHide: true,
    autoZIndex: true,
    baseZIndex: 0,
    className: null,
    content: null,
    disabled: false,
    event: null,
    hideDelay: 0,
    hideEvent: "mouseleave",
    id: null,
    mouseTrack: false,
    mouseTrackLeft: 5,
    mouseTrackTop: 5,
    my: null,
    onBeforeHide: null,
    onBeforeShow: null,
    onHide: null,
    onShow: null,
    position: "right",
    showDelay: 0,
    showEvent: "mouseenter",
    showOnDisabled: false,
    style: null,
    target: null,
    updateDelay: 0,
    children: void 0
  },
  css: {
    classes: classes$7,
    styles: styles$7,
    inlineStyles: inlineStyles$2
  }
});
function ownKeys$l(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$k(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$l(Object(t2), true).forEach(function(r3) {
      _defineProperty$9(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$l(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var Tooltip = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = TooltipBase.getProps(inProps, context);
  var _React$useState = reactExports.useState(false), _React$useState2 = _slicedToArray$6(_React$useState, 2), visibleState = _React$useState2[0], setVisibleState = _React$useState2[1];
  var _React$useState3 = reactExports.useState(props.position), _React$useState4 = _slicedToArray$6(_React$useState3, 2), positionState = _React$useState4[0], setPositionState = _React$useState4[1];
  var _React$useState5 = reactExports.useState(""), _React$useState6 = _slicedToArray$6(_React$useState5, 2), classNameState = _React$useState6[0], setClassNameState = _React$useState6[1];
  var metaData = {
    props,
    state: {
      visible: visibleState,
      position: positionState,
      className: classNameState
    },
    context: {
      right: positionState === "right",
      left: positionState === "left",
      top: positionState === "top",
      bottom: positionState === "bottom"
    }
  };
  var _TooltipBase$setMetaD = TooltipBase.setMetaData(metaData), ptm = _TooltipBase$setMetaD.ptm, cx = _TooltipBase$setMetaD.cx, sx = _TooltipBase$setMetaD.sx, isUnstyled = _TooltipBase$setMetaD.isUnstyled;
  useHandleStyle(TooltipBase.css.styles, isUnstyled, {
    name: "tooltip"
  });
  var elementRef = reactExports.useRef(null);
  var textRef = reactExports.useRef(null);
  var currentTargetRef = reactExports.useRef(null);
  var containerSize = reactExports.useRef(null);
  var allowHide = reactExports.useRef(true);
  var timeouts = reactExports.useRef({});
  var currentMouseEvent = reactExports.useRef(null);
  var _useResizeListener = useResizeListener({
    listener: function listener(event) {
      !DomHandler.isTouchDevice() && hide(event);
    }
  }), _useResizeListener2 = _slicedToArray$6(_useResizeListener, 2), bindWindowResizeListener = _useResizeListener2[0], unbindWindowResizeListener = _useResizeListener2[1];
  var _useOverlayScrollList = useOverlayScrollListener({
    target: currentTargetRef.current,
    listener: function listener(event) {
      hide(event);
    },
    when: visibleState
  }), _useOverlayScrollList2 = _slicedToArray$6(_useOverlayScrollList, 2), bindOverlayScrollListener = _useOverlayScrollList2[0], unbindOverlayScrollListener = _useOverlayScrollList2[1];
  var isTargetContentEmpty = function isTargetContentEmpty2(target) {
    return !(props.content || getTargetOption(target, "tooltip"));
  };
  var isContentEmpty = function isContentEmpty2(target) {
    return !(props.content || getTargetOption(target, "tooltip") || props.children);
  };
  var isMouseTrack = function isMouseTrack2(target) {
    return getTargetOption(target, "mousetrack") || props.mouseTrack;
  };
  var isDisabled = function isDisabled2(target) {
    return getTargetOption(target, "disabled") === "true" || hasTargetOption(target, "disabled") || props.disabled;
  };
  var isShowOnDisabled = function isShowOnDisabled2(target) {
    return getTargetOption(target, "showondisabled") || props.showOnDisabled;
  };
  var isAutoHide = function isAutoHide2() {
    return getTargetOption(currentTargetRef.current, "autohide") || props.autoHide;
  };
  var getTargetOption = function getTargetOption2(target, option) {
    return hasTargetOption(target, "data-pr-".concat(option)) ? target.getAttribute("data-pr-".concat(option)) : null;
  };
  var hasTargetOption = function hasTargetOption2(target, option) {
    return target && target.hasAttribute(option);
  };
  var getEvents = function getEvents2(target) {
    var showEvents = [getTargetOption(target, "showevent") || props.showEvent];
    var hideEvents = [getTargetOption(target, "hideevent") || props.hideEvent];
    if (isMouseTrack(target)) {
      showEvents = ["mousemove"];
      hideEvents = ["mouseleave"];
    } else {
      var event = getTargetOption(target, "event") || props.event;
      if (event === "focus") {
        showEvents = ["focus"];
        hideEvents = ["blur"];
      }
      if (event === "both") {
        showEvents = ["focus", "mouseenter"];
        hideEvents = ["blur", "mouseleave"];
      }
    }
    return {
      showEvents,
      hideEvents
    };
  };
  var getPosition = function getPosition2(target) {
    return getTargetOption(target, "position") || positionState;
  };
  var getMouseTrackPosition = function getMouseTrackPosition2(target) {
    var top = getTargetOption(target, "mousetracktop") || props.mouseTrackTop;
    var left = getTargetOption(target, "mousetrackleft") || props.mouseTrackLeft;
    return {
      top,
      left
    };
  };
  var updateText = function updateText2(target, callback2) {
    if (textRef.current) {
      var content = getTargetOption(target, "tooltip") || props.content;
      if (content) {
        textRef.current.innerHTML = "";
        textRef.current.appendChild(document.createTextNode(content));
        callback2();
      } else if (props.children) {
        callback2();
      }
    }
  };
  var updateTooltipState = function updateTooltipState2(position2) {
    updateText(currentTargetRef.current, function() {
      var _currentMouseEvent$cu = currentMouseEvent.current, x2 = _currentMouseEvent$cu.pageX, y2 = _currentMouseEvent$cu.pageY;
      if (props.autoZIndex && !ZIndexUtils.get(elementRef.current)) {
        ZIndexUtils.set("tooltip", elementRef.current, context && context.autoZIndex || PrimeReact$2.autoZIndex, props.baseZIndex || context && context.zIndex["tooltip"] || PrimeReact$2.zIndex["tooltip"]);
      }
      elementRef.current.style.left = "";
      elementRef.current.style.top = "";
      if (isAutoHide()) {
        elementRef.current.style.pointerEvents = "none";
      }
      var mouseTrackCheck = isMouseTrack(currentTargetRef.current) || position2 === "mouse";
      if (mouseTrackCheck && !containerSize.current || mouseTrackCheck) {
        containerSize.current = {
          width: DomHandler.getOuterWidth(elementRef.current),
          height: DomHandler.getOuterHeight(elementRef.current)
        };
      }
      align(currentTargetRef.current, {
        x: x2,
        y: y2
      }, position2);
    });
  };
  var show = function show2(e2) {
    currentTargetRef.current = e2.currentTarget;
    var disabled = isDisabled(currentTargetRef.current);
    var empty = isContentEmpty(isShowOnDisabled(currentTargetRef.current) && disabled ? currentTargetRef.current.firstChild : currentTargetRef.current);
    if (empty || disabled) {
      return;
    }
    currentMouseEvent.current = e2;
    if (visibleState) {
      applyDelay("updateDelay", updateTooltipState);
    } else {
      var success = sendCallback(props.onBeforeShow, {
        originalEvent: e2,
        target: currentTargetRef.current
      });
      if (success) {
        applyDelay("showDelay", function() {
          setVisibleState(true);
          sendCallback(props.onShow, {
            originalEvent: e2,
            target: currentTargetRef.current
          });
        });
      }
    }
  };
  var hide = function hide2(e2) {
    clearTimeouts();
    if (visibleState) {
      var success = sendCallback(props.onBeforeHide, {
        originalEvent: e2,
        target: currentTargetRef.current
      });
      if (success) {
        applyDelay("hideDelay", function() {
          if (!isAutoHide() && allowHide.current === false) {
            return;
          }
          ZIndexUtils.clear(elementRef.current);
          DomHandler.removeClass(elementRef.current, "p-tooltip-active");
          setVisibleState(false);
          sendCallback(props.onHide, {
            originalEvent: e2,
            target: currentTargetRef.current
          });
        });
      }
    }
  };
  var align = function align2(target, coordinate, position2) {
    var left = 0, top = 0, currentPosition = position2 || positionState;
    if ((isMouseTrack(target) || currentPosition == "mouse") && coordinate) {
      var _containerSize = {
        width: DomHandler.getOuterWidth(elementRef.current),
        height: DomHandler.getOuterHeight(elementRef.current)
      };
      left = coordinate.x;
      top = coordinate.y;
      var _getMouseTrackPositio = getMouseTrackPosition(target), mouseTrackTop = _getMouseTrackPositio.top, mouseTrackLeft = _getMouseTrackPositio.left;
      switch (currentPosition) {
        case "left":
          left -= _containerSize.width + mouseTrackLeft;
          top -= _containerSize.height / 2 - mouseTrackTop;
          break;
        case "right":
        case "mouse":
          left += mouseTrackLeft;
          top -= _containerSize.height / 2 - mouseTrackTop;
          break;
        case "top":
          left -= _containerSize.width / 2 - mouseTrackLeft;
          top -= _containerSize.height + mouseTrackTop;
          break;
        case "bottom":
          left -= _containerSize.width / 2 - mouseTrackLeft;
          top += mouseTrackTop;
          break;
      }
      if (left <= 0 || containerSize.current.width > _containerSize.width) {
        elementRef.current.style.left = "0px";
        elementRef.current.style.right = window.innerWidth - _containerSize.width - left + "px";
      } else {
        elementRef.current.style.right = "";
        elementRef.current.style.left = left + "px";
      }
      elementRef.current.style.top = top + "px";
      DomHandler.addClass(elementRef.current, "p-tooltip-active");
    } else {
      var pos = DomHandler.findCollisionPosition(currentPosition);
      var my = getTargetOption(target, "my") || props.my || pos.my;
      var at = getTargetOption(target, "at") || props.at || pos.at;
      elementRef.current.style.padding = "0px";
      DomHandler.flipfitCollision(elementRef.current, target, my, at, function(calculatedPosition) {
        var _calculatedPosition$a = calculatedPosition.at, atX = _calculatedPosition$a.x, atY = _calculatedPosition$a.y;
        var myX = calculatedPosition.my.x;
        var newPosition = props.at ? atX !== "center" && atX !== myX ? atX : atY : calculatedPosition.at["".concat(pos.axis)];
        elementRef.current.style.padding = "";
        setPositionState(newPosition);
        updateContainerPosition(newPosition);
        DomHandler.addClass(elementRef.current, "p-tooltip-active");
      });
    }
  };
  var updateContainerPosition = function updateContainerPosition2(position2) {
    if (elementRef.current) {
      var style = getComputedStyle(elementRef.current);
      if (position2 === "left")
        elementRef.current.style.left = parseFloat(style.left) - parseFloat(style.paddingLeft) * 2 + "px";
      else if (position2 === "top")
        elementRef.current.style.top = parseFloat(style.top) - parseFloat(style.paddingTop) * 2 + "px";
    }
  };
  var _onMouseEnter = function onMouseEnter() {
    if (!isAutoHide()) {
      allowHide.current = false;
    }
  };
  var _onMouseLeave = function onMouseLeave(e2) {
    if (!isAutoHide()) {
      allowHide.current = true;
      hide(e2);
    }
  };
  var bindTargetEvent = function bindTargetEvent2(target) {
    if (target) {
      var _getEvents = getEvents(target), showEvents = _getEvents.showEvents, hideEvents = _getEvents.hideEvents;
      var currentTarget = getTarget(target);
      showEvents.forEach(function(event) {
        return currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.addEventListener(event, show);
      });
      hideEvents.forEach(function(event) {
        return currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.addEventListener(event, hide);
      });
    }
  };
  var unbindTargetEvent = function unbindTargetEvent2(target) {
    if (target) {
      var _getEvents2 = getEvents(target), showEvents = _getEvents2.showEvents, hideEvents = _getEvents2.hideEvents;
      var currentTarget = getTarget(target);
      showEvents.forEach(function(event) {
        return currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.removeEventListener(event, show);
      });
      hideEvents.forEach(function(event) {
        return currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.removeEventListener(event, hide);
      });
    }
  };
  var applyDelay = function applyDelay2(delayProp, callback2) {
    clearTimeouts();
    var delay = getTargetOption(currentTargetRef.current, delayProp.toLowerCase()) || props[delayProp];
    !!delay ? timeouts.current["".concat(delayProp)] = setTimeout(function() {
      return callback2();
    }, delay) : callback2();
  };
  var sendCallback = function sendCallback2(callback2) {
    if (callback2) {
      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }
      var result = callback2.apply(void 0, params);
      if (result === void 0) {
        result = true;
      }
      return result;
    }
    return true;
  };
  var clearTimeouts = function clearTimeouts2() {
    Object.values(timeouts.current).forEach(function(t2) {
      return clearTimeout(t2);
    });
  };
  var getTarget = function getTarget2(target) {
    if (target) {
      if (isShowOnDisabled(target)) {
        if (!target.hasWrapper) {
          var wrapper2 = document.createElement("div");
          var isInputElement = target.nodeName === "INPUT";
          if (isInputElement) {
            DomHandler.addMultipleClasses(wrapper2, "p-tooltip-target-wrapper p-inputwrapper");
          } else {
            DomHandler.addClass(wrapper2, "p-tooltip-target-wrapper");
          }
          target.parentNode.insertBefore(wrapper2, target);
          wrapper2.appendChild(target);
          target.hasWrapper = true;
          return wrapper2;
        } else {
          return target.parentElement;
        }
      } else if (target.hasWrapper) {
        var _target$parentElement;
        (_target$parentElement = target.parentElement).replaceWith.apply(_target$parentElement, _toConsumableArray$3(target.parentElement.childNodes));
        delete target.hasWrapper;
      }
      return target;
    }
    return null;
  };
  var updateTargetEvents = function updateTargetEvents2(target) {
    unloadTargetEvents(target);
    loadTargetEvents(target);
  };
  var loadTargetEvents = function loadTargetEvents2(target) {
    setTargetEventOperations(target || props.target, bindTargetEvent);
  };
  var unloadTargetEvents = function unloadTargetEvents2(target) {
    setTargetEventOperations(target || props.target, unbindTargetEvent);
  };
  var setTargetEventOperations = function setTargetEventOperations2(target, operation) {
    target = ObjectUtils.getRefElement(target);
    if (target) {
      if (DomHandler.isElement(target)) {
        operation(target);
      } else {
        var setEvent = function setEvent2(target2) {
          var element2 = DomHandler.find(document, target2);
          element2.forEach(function(el2) {
            operation(el2);
          });
        };
        if (target instanceof Array) {
          target.forEach(function(t2) {
            setEvent(t2);
          });
        } else {
          setEvent(target);
        }
      }
    }
  };
  useMountEffect(function() {
    if (visibleState && currentTargetRef.current && isDisabled(currentTargetRef.current)) {
      hide();
    }
  });
  useUpdateEffect(function() {
    loadTargetEvents();
    return function() {
      unloadTargetEvents();
    };
  }, [show, hide, props.target]);
  useUpdateEffect(function() {
    if (visibleState) {
      var position2 = getPosition(currentTargetRef.current);
      var classname = getTargetOption(currentTargetRef.current, "classname");
      setPositionState(position2);
      setClassNameState(classname);
      updateTooltipState(position2);
      bindWindowResizeListener();
      bindOverlayScrollListener();
    } else {
      setPositionState(props.position);
      setClassNameState("");
      currentTargetRef.current = null;
      containerSize.current = null;
      allowHide.current = true;
    }
    return function() {
      unbindWindowResizeListener();
      unbindOverlayScrollListener();
    };
  }, [visibleState]);
  useUpdateEffect(function() {
    if (visibleState) {
      applyDelay("updateDelay", function() {
        updateText(currentTargetRef.current, function() {
          align(currentTargetRef.current);
        });
      });
    }
  }, [props.content]);
  useUnmountEffect(function() {
    hide();
    ZIndexUtils.clear(elementRef.current);
  });
  reactExports.useImperativeHandle(ref, function() {
    return {
      props,
      updateTargetEvents,
      loadTargetEvents,
      unloadTargetEvents,
      show,
      hide,
      getElement: function getElement() {
        return elementRef.current;
      },
      getTarget: function getTarget2() {
        return currentTargetRef.current;
      }
    };
  });
  var createElement = function createElement2() {
    var empty = isTargetContentEmpty(currentTargetRef.current);
    var rootProps = mergeProps2({
      id: props.id,
      className: classNames$1(props.className, cx("root", {
        positionState,
        classNameState
      })),
      style: props.style,
      role: "tooltip",
      "aria-hidden": visibleState,
      onMouseEnter: function onMouseEnter(e2) {
        return _onMouseEnter();
      },
      onMouseLeave: function onMouseLeave(e2) {
        return _onMouseLeave(e2);
      }
    }, TooltipBase.getOtherProps(props), ptm("root"));
    var arrowProps = mergeProps2({
      className: cx("arrow"),
      style: sx("arrow", _objectSpread$k({}, metaData))
    }, ptm("arrow"));
    var textProps = mergeProps2({
      className: cx("text")
    }, ptm("text"));
    return /* @__PURE__ */ reactExports.createElement("div", _extends$m({
      ref: elementRef
    }, rootProps), /* @__PURE__ */ reactExports.createElement("div", arrowProps), /* @__PURE__ */ reactExports.createElement("div", _extends$m({
      ref: textRef
    }, textProps), empty && props.children));
  };
  if (visibleState) {
    var element = createElement();
    return /* @__PURE__ */ reactExports.createElement(Portal, {
      element,
      appendTo: props.appendTo,
      visible: true
    });
  }
  return null;
}));
Tooltip.displayName = "Tooltip";
function _extends$l() {
  _extends$l = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$l.apply(this, arguments);
}
function _typeof$8(o) {
  "@babel/helpers - typeof";
  return _typeof$8 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$8(o);
}
function _toPrimitive$7(input2, hint) {
  if (_typeof$8(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$8(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$7(arg) {
  var key = _toPrimitive$7(arg, "string");
  return _typeof$8(key) === "symbol" ? key : String(key);
}
function _defineProperty$8(obj, key, value) {
  key = _toPropertyKey$7(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var classes$6 = {
  root: function root3(_ref3) {
    var props = _ref3.props, isFilled = _ref3.isFilled;
    return classNames$1("p-inputtext p-component", {
      "p-disabled": props.disabled,
      "p-filled": isFilled
    }, props.className);
  }
};
var InputTextBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "InputText",
    __parentMetadata: null,
    children: void 0,
    className: null,
    keyfilter: null,
    onBeforeInput: null,
    onInput: null,
    onKeyDown: null,
    onPaste: null,
    tooltip: null,
    tooltipOptions: null,
    validateOnly: false
  },
  css: {
    classes: classes$6
  }
});
function ownKeys$k(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$j(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$k(Object(t2), true).forEach(function(r3) {
      _defineProperty$8(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$k(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var InputText = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = InputTextBase.getProps(inProps, context);
  var _InputTextBase$setMet = InputTextBase.setMetaData(_objectSpread$j(_objectSpread$j({
    props
  }, props.__parentMetadata), {}, {
    context: {
      disabled: props.disabled
    }
  })), ptm = _InputTextBase$setMet.ptm, cx = _InputTextBase$setMet.cx, isUnstyled = _InputTextBase$setMet.isUnstyled;
  useHandleStyle(InputTextBase.css.styles, isUnstyled, {
    name: "inputtext",
    styled: true
  });
  var elementRef = reactExports.useRef(ref);
  var onKeyDown = function onKeyDown2(event) {
    props.onKeyDown && props.onKeyDown(event);
    if (props.keyfilter) {
      KeyFilter.onKeyPress(event, props.keyfilter, props.validateOnly);
    }
  };
  var onBeforeInput2 = function onBeforeInput3(event) {
    props.onBeforeInput && props.onBeforeInput(event);
    if (props.keyfilter) {
      KeyFilter.onBeforeInput(event, props.keyfilter, props.validateOnly);
    }
  };
  var onInput = function onInput2(event) {
    var target = event.target;
    var validatePattern = true;
    if (props.keyfilter && props.validateOnly) {
      validatePattern = KeyFilter.validate(event, props.keyfilter);
    }
    props.onInput && props.onInput(event, validatePattern);
    ObjectUtils.isNotEmpty(target.value) ? DomHandler.addClass(target, "p-filled") : DomHandler.removeClass(target, "p-filled");
  };
  var onPaste2 = function onPaste3(event) {
    props.onPaste && props.onPaste(event);
    if (props.keyfilter) {
      KeyFilter.onPaste(event, props.keyfilter, props.validateOnly);
    }
  };
  reactExports.useEffect(function() {
    ObjectUtils.combinedRefs(elementRef, ref);
  }, [elementRef, ref]);
  var isFilled = reactExports.useMemo(function() {
    return ObjectUtils.isNotEmpty(props.value) || ObjectUtils.isNotEmpty(props.defaultValue);
  }, [props.value, props.defaultValue]);
  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip);
  var rootProps = mergeProps2({
    className: classNames$1(props.className, cx("root", {
      isFilled
    })),
    onBeforeInput: onBeforeInput2,
    onInput,
    onKeyDown,
    onPaste: onPaste2
  }, InputTextBase.getOtherProps(props), ptm("root"));
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("input", _extends$l({
    ref: elementRef
  }, rootProps)), hasTooltip && /* @__PURE__ */ reactExports.createElement(Tooltip, _extends$l({
    target: elementRef,
    content: props.tooltip,
    pt: ptm("tooltip")
  }, props.tooltipOptions)));
}));
InputText.displayName = "InputText";
function _extends$k() {
  _extends$k = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$k.apply(this, arguments);
}
function _arrayLikeToArray$6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles$2(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$6(arr);
}
function _iterableToArray$2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray$6(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$6(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$6(o, minLen);
}
function _nonIterableSpread$2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray$2(arr) {
  return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableSpread$2();
}
function _typeof$7(o) {
  "@babel/helpers - typeof";
  return _typeof$7 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$7(o);
}
function _toPrimitive$6(input2, hint) {
  if (_typeof$7(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$7(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$6(arg) {
  var key = _toPrimitive$6(arg, "string");
  return _typeof$7(key) === "symbol" ? key : String(key);
}
function _defineProperty$7(obj, key, value) {
  key = _toPropertyKey$6(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles$5(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$5(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _nonIterableRest$5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$5(arr, i) {
  return _arrayWithHoles$5(arr) || _iterableToArrayLimit$5(arr, i) || _unsupportedIterableToArray$6(arr, i) || _nonIterableRest$5();
}
var classes$5 = {
  root: function root4(_ref3) {
    var props = _ref3.props, focusedState = _ref3.focusedState, stacked = _ref3.stacked, horizontal = _ref3.horizontal, vertical = _ref3.vertical;
    return classNames$1("p-inputnumber p-component p-inputwrapper", {
      "p-inputwrapper-filled": props.value != null && props.value.toString().length > 0,
      "p-inputwrapper-focus": focusedState,
      "p-inputnumber-buttons-stacked": stacked,
      "p-inputnumber-buttons-horizontal": horizontal,
      "p-inputnumber-buttons-vertical": vertical
    });
  },
  buttonGroup: "p-inputnumber-button-group",
  incrementButton: function incrementButton(_ref22) {
    var props = _ref22.props;
    return classNames$1("p-inputnumber-button p-inputnumber-button-up p-button p-button-icon-only p-component", {
      "p-disabled": props.disabled
    });
  },
  incrementIcon: "p-button-icon",
  decrementButton: function decrementButton(_ref3) {
    var props = _ref3.props;
    return classNames$1("p-inputnumber-button p-inputnumber-button-down p-button p-button-icon-only p-component", {
      "p-disabled": props.disabled
    });
  },
  decrementIcon: "p-button-icon"
};
var styles$6 = "\n@layer primereact {\n    .p-inputnumber {\n        display: inline-flex;\n    }\n    \n    .p-inputnumber-button {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex: 0 0 auto;\n    }\n    \n    .p-inputnumber-buttons-stacked .p-button.p-inputnumber-button .p-button-label,\n    .p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button .p-button-label {\n        display: none;\n    }\n    \n    .p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-up {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n        border-bottom-right-radius: 0;\n        padding: 0;\n    }\n    \n    .p-inputnumber-buttons-stacked .p-inputnumber-input {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n    }\n    \n    .p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-down {\n        border-top-left-radius: 0;\n        border-top-right-radius: 0;\n        border-bottom-left-radius: 0;\n        padding: 0;\n    }\n    \n    .p-inputnumber-buttons-stacked .p-inputnumber-button-group {\n        display: flex;\n        flex-direction: column;\n    }\n    \n    .p-inputnumber-buttons-stacked .p-inputnumber-button-group .p-button.p-inputnumber-button {\n        flex: 1 1 auto;\n    }\n    \n    .p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-up {\n        order: 3;\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n    }\n    \n    .p-inputnumber-buttons-horizontal .p-inputnumber-input {\n        order: 2;\n        border-radius: 0;\n    }\n    \n    .p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-down {\n        order: 1;\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n    }\n    \n    .p-inputnumber-buttons-vertical {\n        flex-direction: column;\n    }\n    \n    .p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-up {\n        order: 1;\n        border-bottom-left-radius: 0;\n        border-bottom-right-radius: 0;\n        width: 100%;\n    }\n    \n    .p-inputnumber-buttons-vertical .p-inputnumber-input {\n        order: 2;\n        border-radius: 0;\n        text-align: center;\n    }\n    \n    .p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-down {\n        order: 3;\n        border-top-left-radius: 0;\n        border-top-right-radius: 0;\n        width: 100%;\n    }\n    \n    .p-inputnumber-input {\n        flex: 1 1 auto;\n    }\n    \n    .p-fluid .p-inputnumber {\n        width: 100%;\n    }\n    \n    .p-fluid .p-inputnumber .p-inputnumber-input {\n        width: 1%;\n    }\n    \n    .p-fluid .p-inputnumber-buttons-vertical .p-inputnumber-input {\n        width: 100%;\n    }\n}\n";
var InputNumberBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "InputNumber",
    __parentMetadata: null,
    allowEmpty: true,
    ariaLabelledBy: null,
    autoFocus: false,
    buttonLayout: "stacked",
    className: null,
    currency: void 0,
    currencyDisplay: void 0,
    decrementButtonClassName: null,
    decrementButtonIcon: null,
    disabled: false,
    format: true,
    id: null,
    incrementButtonClassName: null,
    incrementButtonIcon: null,
    inputClassName: null,
    inputId: null,
    inputMode: null,
    inputRef: null,
    inputStyle: null,
    locale: void 0,
    localeMatcher: void 0,
    max: null,
    maxFractionDigits: void 0,
    maxLength: null,
    min: null,
    minFractionDigits: void 0,
    mode: "decimal",
    name: null,
    onBlur: null,
    onChange: null,
    onFocus: null,
    onKeyDown: null,
    onKeyUp: null,
    onValueChange: null,
    pattern: null,
    placeholder: null,
    prefix: null,
    readOnly: false,
    required: false,
    roundingMode: void 0,
    showButtons: false,
    size: null,
    step: 1,
    style: null,
    suffix: null,
    tabIndex: null,
    tooltip: null,
    tooltipOptions: null,
    type: "text",
    useGrouping: true,
    value: null,
    children: void 0
  },
  css: {
    classes: classes$5,
    styles: styles$6
  }
});
function ownKeys$j(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$i(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$j(Object(t2), true).forEach(function(r3) {
      _defineProperty$7(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$j(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var InputNumber = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = InputNumberBase.getProps(inProps, context);
  var _React$useState = reactExports.useState(false), _React$useState2 = _slicedToArray$5(_React$useState, 2), focusedState = _React$useState2[0], setFocusedState = _React$useState2[1];
  var metaData = _objectSpread$i(_objectSpread$i({
    props
  }, props.__parentMetadata), {}, {
    state: {
      focused: focusedState
    }
  });
  var _InputNumberBase$setM = InputNumberBase.setMetaData(metaData), ptm = _InputNumberBase$setM.ptm, cx = _InputNumberBase$setM.cx, isUnstyled = _InputNumberBase$setM.isUnstyled;
  useHandleStyle(InputNumberBase.css.styles, isUnstyled, {
    name: "inputnumber"
  });
  var elementRef = reactExports.useRef(null);
  var inputRef = reactExports.useRef(null);
  var timer = reactExports.useRef(null);
  var lastValue = reactExports.useRef(null);
  var numberFormat = reactExports.useRef(null);
  var groupChar = reactExports.useRef(null);
  var prefixChar = reactExports.useRef(null);
  var suffixChar = reactExports.useRef(null);
  var isSpecialChar = reactExports.useRef(null);
  var _numeral = reactExports.useRef(null);
  var _group = reactExports.useRef(null);
  var _minusSign = reactExports.useRef(null);
  var _currency = reactExports.useRef(null);
  var _decimal = reactExports.useRef(null);
  var _decimalSeparator = reactExports.useRef(null);
  var _suffix = reactExports.useRef(null);
  var _prefix = reactExports.useRef(null);
  var _index = reactExports.useRef(null);
  var isFocusedByClick = reactExports.useRef(false);
  var _locale = props.locale || context && context.locale || PrimeReact$2.locale;
  var stacked = props.showButtons && props.buttonLayout === "stacked";
  var horizontal = props.showButtons && props.buttonLayout === "horizontal";
  var vertical = props.showButtons && props.buttonLayout === "vertical";
  var inputMode = props.inputMode || (props.mode === "decimal" && !props.minFractionDigits ? "numeric" : "decimal");
  var getOptions = function getOptions2() {
    return {
      localeMatcher: props.localeMatcher,
      style: props.mode,
      currency: props.currency,
      currencyDisplay: props.currencyDisplay,
      useGrouping: props.useGrouping,
      minimumFractionDigits: props.minFractionDigits,
      maximumFractionDigits: props.maxFractionDigits,
      roundingMode: props.roundingMode
    };
  };
  var constructParser = function constructParser2() {
    numberFormat.current = new Intl.NumberFormat(_locale, getOptions());
    var numerals = _toConsumableArray$2(new Intl.NumberFormat(_locale, {
      useGrouping: false
    }).format(9876543210)).reverse();
    var index2 = new Map(numerals.map(function(d2, i) {
      return [d2, i];
    }));
    _numeral.current = new RegExp("[".concat(numerals.join(""), "]"), "g");
    _group.current = getGroupingExpression();
    _minusSign.current = getMinusSignExpression();
    _currency.current = getCurrencyExpression();
    _decimal.current = getDecimalExpression();
    _decimalSeparator.current = getDecimalSeparator();
    _suffix.current = getSuffixExpression();
    _prefix.current = getPrefixExpression();
    _index.current = function(d2) {
      return index2.get(d2);
    };
  };
  var escapeRegExp2 = function escapeRegExp3(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  };
  var getDecimalSeparator = function getDecimalSeparator2() {
    return new Intl.NumberFormat(_locale, {
      useGrouping: false
    }).format(1.1).trim().replace(_numeral.current, "");
  };
  var getDecimalExpression = function getDecimalExpression2() {
    var formatter = new Intl.NumberFormat(_locale, _objectSpread$i(_objectSpread$i({}, getOptions()), {}, {
      useGrouping: false
    }));
    return new RegExp("[".concat(formatter.format(1.1).replace(_currency.current, "").trim().replace(_numeral.current, ""), "]"), "g");
  };
  var getGroupingExpression = function getGroupingExpression2() {
    var formatter = new Intl.NumberFormat(_locale, {
      useGrouping: true
    });
    groupChar.current = formatter.format(1e6).trim().replace(_numeral.current, "").charAt(0);
    return new RegExp("[".concat(groupChar.current, "]"), "g");
  };
  var getMinusSignExpression = function getMinusSignExpression2() {
    var formatter = new Intl.NumberFormat(_locale, {
      useGrouping: false
    });
    return new RegExp("[".concat(formatter.format(-1).trim().replace(_numeral.current, ""), "]"), "g");
  };
  var getCurrencyExpression = function getCurrencyExpression2() {
    if (props.currency) {
      var formatter = new Intl.NumberFormat(_locale, {
        style: "currency",
        currency: props.currency,
        currencyDisplay: props.currencyDisplay,
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
        roundingMode: props.roundingMode
      });
      return new RegExp("[".concat(formatter.format(1).replace(/\s/g, "").replace(_numeral.current, "").replace(_group.current, ""), "]"), "g");
    }
    return new RegExp("[]", "g");
  };
  var getPrefixExpression = function getPrefixExpression2() {
    if (props.prefix) {
      prefixChar.current = props.prefix;
    } else {
      var formatter = new Intl.NumberFormat(_locale, {
        style: props.mode,
        currency: props.currency,
        currencyDisplay: props.currencyDisplay
      });
      prefixChar.current = formatter.format(1).split("1")[0];
    }
    return new RegExp("".concat(escapeRegExp2(prefixChar.current || "")), "g");
  };
  var getSuffixExpression = function getSuffixExpression2() {
    if (props.suffix) {
      suffixChar.current = props.suffix;
    } else {
      var formatter = new Intl.NumberFormat(_locale, {
        style: props.mode,
        currency: props.currency,
        currencyDisplay: props.currencyDisplay,
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
        roundingMode: props.roundingMode
      });
      suffixChar.current = formatter.format(1).split("1")[1];
    }
    return new RegExp("".concat(escapeRegExp2(suffixChar.current || "")), "g");
  };
  var formatValue2 = function formatValue3(value) {
    if (value != null) {
      if (value === "-") {
        return value;
      }
      if (props.format) {
        var formatter = new Intl.NumberFormat(_locale, getOptions());
        var _formattedValue = formatter.format(value);
        if (props.prefix) {
          _formattedValue = props.prefix + _formattedValue;
        }
        if (props.suffix) {
          _formattedValue = _formattedValue + props.suffix;
        }
        return _formattedValue;
      }
      return value.toString();
    }
    return "";
  };
  var parseValue = function parseValue2(text) {
    var filteredText = text.replace(_suffix.current, "").replace(_prefix.current, "").trim().replace(/\s/g, "").replace(_currency.current, "").replace(_group.current, "").replace(_minusSign.current, "-").replace(_decimal.current, ".").replace(_numeral.current, _index.current);
    if (filteredText) {
      if (filteredText === "-")
        return filteredText;
      var parsedValue = +filteredText;
      return isNaN(parsedValue) ? null : parsedValue;
    }
    return null;
  };
  var repeat = function repeat2(event, interval, dir) {
    var i = interval || 500;
    clearTimer();
    timer.current = setTimeout(function() {
      repeat2(event, 40, dir);
    }, i);
    spin(event, dir);
  };
  var spin = function spin2(event, dir) {
    if (inputRef.current) {
      var step = props.step * dir;
      var currentValue = parseValue(inputRef.current.value) || 0;
      var newValue = validateValue(currentValue + step);
      if (props.maxLength && props.maxLength < formatValue2(newValue).length) {
        return;
      }
      handleOnChange(event, currentValue, newValue);
      !DomHandler.isTouchDevice() && updateInput(newValue, null, "spin");
      updateModel(event, newValue);
    }
  };
  var onUpButtonMouseDown = function onUpButtonMouseDown2(event) {
    if (!props.disabled && !props.readOnly) {
      DomHandler.focus(inputRef.current, props.autoFocus);
      repeat(event, null, 1);
      event.preventDefault();
    }
  };
  var onUpButtonMouseUp = function onUpButtonMouseUp2() {
    if (!props.disabled && !props.readOnly) {
      clearTimer();
    }
  };
  var onUpButtonMouseLeave = function onUpButtonMouseLeave2() {
    if (!props.disabled && !props.readOnly) {
      clearTimer();
    }
  };
  var onUpButtonKeyUp = function onUpButtonKeyUp2() {
    if (!props.disabled && !props.readOnly) {
      clearTimer();
    }
  };
  var onUpButtonKeyDown = function onUpButtonKeyDown2(event) {
    if (!props.disabled && !props.readOnly && (event.keyCode === 32 || event.keyCode === 13)) {
      repeat(event, null, 1);
    }
  };
  var onDownButtonMouseDown = function onDownButtonMouseDown2(event) {
    if (!props.disabled && !props.readOnly) {
      DomHandler.focus(inputRef.current, props.autoFocus);
      repeat(event, null, -1);
      event.preventDefault();
    }
  };
  var onDownButtonMouseUp = function onDownButtonMouseUp2() {
    if (!props.disabled && !props.readOnly) {
      clearTimer();
    }
  };
  var onDownButtonMouseLeave = function onDownButtonMouseLeave2() {
    if (!props.disabled && !props.readOnly) {
      clearTimer();
    }
  };
  var onDownButtonKeyUp = function onDownButtonKeyUp2() {
    if (!props.disabled && !props.readOnly) {
      clearTimer();
    }
  };
  var onDownButtonKeyDown = function onDownButtonKeyDown2(event) {
    if (!props.disabled && !props.readOnly && (event.keyCode === 32 || event.keyCode === 13)) {
      repeat(event, null, -1);
    }
  };
  var onInput = function onInput2(event) {
    if (props.disabled || props.readOnly) {
      return;
    }
    if (isSpecialChar.current) {
      event.target.value = lastValue.current;
    }
    isSpecialChar.current = false;
  };
  var onInputKeyDown = function onInputKeyDown2(event) {
    if (props.disabled || props.readOnly) {
      return;
    }
    if (props.onKeyDown) {
      props.onKeyDown(event);
      if (event.defaultPrevented) {
        return;
      }
    }
    lastValue.current = event.target.value;
    if (event.shiftKey || event.altKey) {
      isSpecialChar.current = true;
      return;
    }
    var selectionStart = event.target.selectionStart;
    var selectionEnd = event.target.selectionEnd;
    var inputValue = event.target.value;
    var newValueStr = null;
    if (event.altKey) {
      event.preventDefault();
    }
    switch (event.code) {
      case "ArrowUp":
        spin(event, 1);
        event.preventDefault();
        break;
      case "ArrowDown":
        spin(event, -1);
        event.preventDefault();
        break;
      case "ArrowLeft":
        if (!isNumeralChar(inputValue.charAt(selectionStart - 1))) {
          event.preventDefault();
        }
        break;
      case "ArrowRight":
        if (!isNumeralChar(inputValue.charAt(selectionStart))) {
          event.preventDefault();
        }
        break;
      case "Tab":
      case "Enter":
        newValueStr = validateValue(parseValue(inputValue));
        inputRef.current.value = formatValue2(newValueStr);
        inputRef.current.setAttribute("aria-valuenow", newValueStr);
        updateModel(event, newValueStr);
        break;
      case "Backspace":
        event.preventDefault();
        if (selectionStart === selectionEnd) {
          var deleteChar = inputValue.charAt(selectionStart - 1);
          if (isNumeralChar(deleteChar)) {
            var _getDecimalCharIndexe = getDecimalCharIndexes(inputValue), decimalCharIndex = _getDecimalCharIndexe.decimalCharIndex, decimalCharIndexWithoutPrefix = _getDecimalCharIndexe.decimalCharIndexWithoutPrefix;
            var decimalLength = getDecimalLength(inputValue);
            if (_group.current.test(deleteChar)) {
              _group.current.lastIndex = 0;
              newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);
            } else if (_decimal.current.test(deleteChar)) {
              _decimal.current.lastIndex = 0;
              if (decimalLength) {
                inputRef.current.setSelectionRange(selectionStart - 1, selectionStart - 1);
              } else {
                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);
              }
            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {
              var insertedText = isDecimalMode() && (props.minFractionDigits || 0) < decimalLength ? "" : "0";
              newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);
            } else if (decimalCharIndexWithoutPrefix === 1) {
              newValueStr = inputValue.slice(0, selectionStart - 1) + "0" + inputValue.slice(selectionStart);
              newValueStr = parseValue(newValueStr) > 0 ? newValueStr : "";
            } else {
              newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);
            }
          } else if (_currency.current.test(deleteChar)) {
            var _getCharIndexes = getCharIndexes(inputValue), minusCharIndex = _getCharIndexes.minusCharIndex, currencyCharIndex = _getCharIndexes.currencyCharIndex;
            if (minusCharIndex === currencyCharIndex - 1) {
              newValueStr = inputValue.slice(0, minusCharIndex) + inputValue.slice(selectionStart);
            }
          }
          updateValue(event, newValueStr, null, "delete-single");
        } else {
          newValueStr = deleteRange(inputValue, selectionStart, selectionEnd);
          updateValue(event, newValueStr, null, "delete-range");
        }
        break;
      case "Delete":
        event.preventDefault();
        if (selectionStart === selectionEnd) {
          var _deleteChar = inputValue.charAt(selectionStart);
          var _getDecimalCharIndexe2 = getDecimalCharIndexes(inputValue), _decimalCharIndex = _getDecimalCharIndexe2.decimalCharIndex, _decimalCharIndexWithoutPrefix = _getDecimalCharIndexe2.decimalCharIndexWithoutPrefix;
          if (isNumeralChar(_deleteChar)) {
            var _decimalLength = getDecimalLength(inputValue);
            if (_group.current.test(_deleteChar)) {
              _group.current.lastIndex = 0;
              newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);
            } else if (_decimal.current.test(_deleteChar)) {
              _decimal.current.lastIndex = 0;
              if (_decimalLength) {
                inputRef.current.setSelectionRange(selectionStart + 1, selectionStart + 1);
              } else {
                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);
              }
            } else if (_decimalCharIndex > 0 && selectionStart > _decimalCharIndex) {
              var _insertedText = isDecimalMode() && (props.minFractionDigits || 0) < _decimalLength ? "" : "0";
              newValueStr = inputValue.slice(0, selectionStart) + _insertedText + inputValue.slice(selectionStart + 1);
            } else if (_decimalCharIndexWithoutPrefix === 1) {
              newValueStr = inputValue.slice(0, selectionStart) + "0" + inputValue.slice(selectionStart + 1);
              newValueStr = parseValue(newValueStr) > 0 ? newValueStr : "";
            } else {
              newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);
            }
          }
          updateValue(event, newValueStr, null, "delete-back-single");
        } else {
          newValueStr = deleteRange(inputValue, selectionStart, selectionEnd);
          updateValue(event, newValueStr, null, "delete-range");
        }
        break;
      case "End":
        event.preventDefault();
        if (!ObjectUtils.isEmpty(props.max)) {
          updateModel(event, props.max);
        }
        break;
      case "Home":
        event.preventDefault();
        if (!ObjectUtils.isEmpty(props.min)) {
          updateModel(event, props.min);
        }
        break;
    }
  };
  var onInputKeyUp = function onInputKeyUp2(event) {
    if (props.disabled || props.readOnly) {
      return;
    }
    if (props.onKeyUp) {
      props.onKeyUp(event);
      if (event.defaultPrevented) {
        return;
      }
    }
    var code = event.which || event.keyCode;
    if (code !== 13) {
      event.preventDefault();
    }
    var _char = String.fromCharCode(code);
    var _isDecimalSign = isDecimalSign(_char);
    var _isMinusSign = isMinusSign(_char);
    if (48 <= code && code <= 57 || _isMinusSign || _isDecimalSign) {
      insert(event, _char, {
        isDecimalSign: _isDecimalSign,
        isMinusSign: _isMinusSign
      });
    }
  };
  var onPaste2 = function onPaste3(event) {
    event.preventDefault();
    if (props.disabled || props.readOnly) {
      return;
    }
    var data = (event.clipboardData || window["clipboardData"]).getData("Text");
    if (data) {
      var filteredData = parseValue(data);
      if (filteredData != null) {
        insert(event, filteredData.toString());
      }
    }
  };
  var allowMinusSign = function allowMinusSign2() {
    return ObjectUtils.isEmpty(props.min) || props.min < 0;
  };
  var isMinusSign = function isMinusSign2(_char2) {
    if (_minusSign.current.test(_char2) || _char2 === "-") {
      _minusSign.current.lastIndex = 0;
      return true;
    }
    return false;
  };
  var replaceDecimalSeparator2 = function replaceDecimalSeparator3(val) {
    if (isFloat(val)) {
      return val.toString().replace(/\.(?=[^.]*$)/, _decimalSeparator.current);
    }
    return val;
  };
  var isDecimalSign = function isDecimalSign2(_char3) {
    if (_decimal.current.test(_char3) || isFloat(_char3)) {
      _decimal.current.lastIndex = 0;
      return true;
    }
    return false;
  };
  var isDecimalMode = function isDecimalMode2() {
    return props.mode === "decimal";
  };
  var isFloat = function isFloat2(val) {
    var formatter = new Intl.NumberFormat(_locale, getOptions());
    var parseVal = parseValue(formatter.format(val));
    if (parseVal === null)
      return false;
    return parseVal % 1 !== 0;
  };
  var getDecimalCharIndexes = function getDecimalCharIndexes2(val) {
    var decimalCharIndex = val.search(_decimal.current);
    _decimal.current.lastIndex = 0;
    var filteredVal = val.replace(_prefix.current, "").trim().replace(/\s/g, "").replace(_currency.current, "");
    var decimalCharIndexWithoutPrefix = filteredVal.search(_decimal.current);
    _decimal.current.lastIndex = 0;
    return {
      decimalCharIndex,
      decimalCharIndexWithoutPrefix
    };
  };
  var getCharIndexes = function getCharIndexes2(val) {
    var decimalCharIndex = val.search(_decimal.current);
    _decimal.current.lastIndex = 0;
    var minusCharIndex = val.search(_minusSign.current);
    _minusSign.current.lastIndex = 0;
    var suffixCharIndex = val.search(_suffix.current);
    _suffix.current.lastIndex = 0;
    var currencyCharIndex = val.search(_currency.current);
    if (currencyCharIndex === 0 && prefixChar.current && prefixChar.current.length > 1) {
      currencyCharIndex = prefixChar.current.trim().length;
    }
    _currency.current.lastIndex = 0;
    return {
      decimalCharIndex,
      minusCharIndex,
      suffixCharIndex,
      currencyCharIndex
    };
  };
  var insert = function insert2(event, text) {
    var sign2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
      isDecimalSign: false,
      isMinusSign: false
    };
    var minusCharIndexOnText = text.search(_minusSign.current);
    _minusSign.current.lastIndex = 0;
    if (!allowMinusSign() && minusCharIndexOnText !== -1) {
      return;
    }
    var selectionStart = inputRef.current.selectionStart;
    var selectionEnd = inputRef.current.selectionEnd;
    var inputValue = inputRef.current.value.trim();
    var _getCharIndexes2 = getCharIndexes(inputValue), decimalCharIndex = _getCharIndexes2.decimalCharIndex, minusCharIndex = _getCharIndexes2.minusCharIndex, suffixCharIndex = _getCharIndexes2.suffixCharIndex, currencyCharIndex = _getCharIndexes2.currencyCharIndex;
    var newValueStr;
    if (sign2.isMinusSign) {
      var isNewMinusSign = minusCharIndex === -1;
      if (isNewMinusSign && (selectionStart === 0 || selectionStart === currencyCharIndex + 1)) {
        newValueStr = inputValue;
        if (isNewMinusSign || selectionEnd !== 0) {
          newValueStr = insertText(inputValue, text, 0, selectionEnd);
        }
        updateValue(event, newValueStr, text, "insert");
      }
    } else if (sign2.isDecimalSign) {
      if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {
        updateValue(event, inputValue, text, "insert");
      } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {
        newValueStr = insertText(inputValue, text, selectionStart, selectionEnd);
        updateValue(event, newValueStr, text, "insert");
      } else if (decimalCharIndex === -1 && props.maxFractionDigits) {
        newValueStr = insertText(inputValue, text, selectionStart, selectionEnd);
        updateValue(event, newValueStr, text, "insert");
      }
    } else {
      var maxFractionDigits = numberFormat.current.resolvedOptions().maximumFractionDigits;
      var operation = selectionStart !== selectionEnd ? "range-insert" : "insert";
      if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {
        if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {
          var charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;
          newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);
          updateValue(event, newValueStr, text, operation);
        }
      } else {
        newValueStr = insertText(inputValue, text, selectionStart, selectionEnd);
        updateValue(event, newValueStr, text, operation);
      }
    }
  };
  var replaceSuffix = function replaceSuffix2(value) {
    return value ? value.replace(_suffix.current, "").trim().replace(/\s/g, "").replace(_currency.current, "") : value;
  };
  var insertText = function insertText2(value, text, start, end) {
    var textSplit = text === "." ? text : text.split(".");
    if (textSplit.length === 2) {
      var decimalCharIndex = value.slice(start, end).search(_decimal.current);
      _decimal.current.lastIndex = 0;
      return decimalCharIndex > 0 ? value.slice(0, start) + formatValue2(text) + replaceSuffix(value).slice(end) : value || formatValue2(text);
    } else if (end - start === value.length) {
      return formatValue2(text);
    } else if (start === 0) {
      var suffix = ObjectUtils.isLetter(value[end]) ? end - 1 : end;
      return text + value.slice(suffix);
    } else if (end === value.length) {
      return value.slice(0, start) + text;
    } else {
      var selectionValue = value.slice(start, end);
      var space = /\s$/.test(selectionValue) ? " " : "";
      return value.slice(0, start) + text + space + value.slice(end);
    }
  };
  var deleteRange = function deleteRange2(value, start, end) {
    var newValueStr;
    if (end - start === value.length)
      newValueStr = "";
    else if (start === 0)
      newValueStr = value.slice(end);
    else if (end === value.length)
      newValueStr = value.slice(0, start);
    else
      newValueStr = value.slice(0, start) + value.slice(end);
    return newValueStr;
  };
  var initCursor = function initCursor2() {
    var selectionStart = inputRef.current.selectionStart;
    var inputValue = inputRef.current.value;
    var valueLength = inputValue.length;
    var index2 = null;
    var prefixLength = (prefixChar.current || "").length;
    inputValue = inputValue.replace(_prefix.current, "");
    selectionStart = selectionStart - prefixLength;
    var _char4 = inputValue.charAt(selectionStart);
    if (isNumeralChar(_char4)) {
      return selectionStart + prefixLength;
    }
    var i = selectionStart - 1;
    while (i >= 0) {
      _char4 = inputValue.charAt(i);
      if (isNumeralChar(_char4)) {
        index2 = i + prefixLength;
        break;
      } else {
        i--;
      }
    }
    if (index2 !== null) {
      inputRef.current.setSelectionRange(index2 + 1, index2 + 1);
    } else {
      i = selectionStart;
      while (i < valueLength) {
        _char4 = inputValue.charAt(i);
        if (isNumeralChar(_char4)) {
          index2 = i + prefixLength;
          break;
        } else {
          i++;
        }
      }
      if (index2 !== null) {
        inputRef.current.setSelectionRange(index2, index2);
      }
    }
    return index2 || 0;
  };
  var onInputPointerDown = function onInputPointerDown2() {
    isFocusedByClick.current = true;
  };
  var onInputClick = function onInputClick2() {
    initCursor();
  };
  var isNumeralChar = function isNumeralChar2(_char5) {
    if (_char5.length === 1 && (_numeral.current.test(_char5) || _decimal.current.test(_char5) || _group.current.test(_char5) || _minusSign.current.test(_char5))) {
      resetRegex();
      return true;
    } else {
      return false;
    }
  };
  var resetRegex = function resetRegex2() {
    _numeral.current.lastIndex = 0;
    _decimal.current.lastIndex = 0;
    _group.current.lastIndex = 0;
    _minusSign.current.lastIndex = 0;
  };
  var updateValue = function updateValue2(event, valueStr, insertedValueStr, operation) {
    var currentValue = inputRef.current.value;
    var newValue = null;
    if (valueStr != null) {
      newValue = evaluateEmpty(parseValue(valueStr));
      updateInput(newValue, insertedValueStr, operation, valueStr);
      handleOnChange(event, currentValue, newValue);
    }
  };
  var evaluateEmpty = function evaluateEmpty2(newValue) {
    return !newValue && !props.allowEmpty ? props.min || 0 : newValue;
  };
  var handleOnChange = function handleOnChange2(event, currentValue, newValue) {
    if (props.onChange && isValueChanged(currentValue, newValue)) {
      props.onChange({
        originalEvent: event,
        value: newValue
      });
    }
  };
  var isValueChanged = function isValueChanged2(currentValue, newValue) {
    if (newValue === null && currentValue !== null) {
      return true;
    }
    if (newValue != null) {
      var parsedCurrentValue = typeof currentValue === "string" ? parseValue(currentValue) : currentValue;
      return newValue !== parsedCurrentValue;
    }
    return false;
  };
  var validateValue = function validateValue2(value) {
    if (value === "-") {
      return null;
    }
    return validateValueByLimit(value);
  };
  var validateValueByLimit = function validateValueByLimit2(value) {
    if (ObjectUtils.isEmpty(value)) {
      return null;
    }
    if (props.min !== null && value < props.min) {
      return props.min;
    }
    if (props.max !== null && value > props.max) {
      return props.max;
    }
    return value;
  };
  var updateInput = function updateInput2(value, insertedValueStr, operation, valueStr) {
    insertedValueStr = insertedValueStr || "";
    var inputEl = inputRef.current;
    var inputValue = inputEl.value;
    var newValue = formatValue2(value);
    var currentLength = inputValue.length;
    if (newValue !== valueStr) {
      newValue = concatValues(newValue, valueStr);
    }
    if (currentLength === 0) {
      inputEl.value = newValue;
      inputEl.setSelectionRange(0, 0);
      var index2 = initCursor();
      var selectionEnd = index2 + insertedValueStr.length;
      inputEl.setSelectionRange(selectionEnd, selectionEnd);
    } else {
      var selectionStart = inputEl.selectionStart;
      var _selectionEnd = inputEl.selectionEnd;
      if (props.maxLength && props.maxLength < newValue.length) {
        return;
      }
      inputEl.value = newValue;
      var newLength = newValue.length;
      if (operation === "range-insert") {
        var startValue = parseValue((inputValue || "").slice(0, selectionStart));
        var startValueStr = startValue !== null ? startValue.toString() : "";
        var startExpr = startValueStr.split("").join("(".concat(groupChar.current, ")?"));
        var sRegex = new RegExp(startExpr, "g");
        sRegex.test(newValue);
        var tExpr = insertedValueStr.split("").join("(".concat(groupChar.current, ")?"));
        var tRegex = new RegExp(tExpr, "g");
        tRegex.test(newValue.slice(sRegex.lastIndex));
        _selectionEnd = sRegex.lastIndex + tRegex.lastIndex;
        inputEl.setSelectionRange(_selectionEnd, _selectionEnd);
      } else if (newLength === currentLength) {
        if (operation === "insert" || operation === "delete-back-single") {
          var newSelectionEnd = _selectionEnd;
          if (insertedValueStr === "0") {
            newSelectionEnd = _selectionEnd + 1;
          } else {
            newSelectionEnd = newSelectionEnd + Number(isDecimalSign(value) || isDecimalSign(insertedValueStr));
          }
          inputEl.setSelectionRange(newSelectionEnd, newSelectionEnd);
        } else if (operation === "delete-single") {
          inputEl.setSelectionRange(_selectionEnd - 1, _selectionEnd - 1);
        } else if (operation === "delete-range" || operation === "spin") {
          inputEl.setSelectionRange(_selectionEnd, _selectionEnd);
        }
      } else if (operation === "delete-back-single") {
        var prevChar = inputValue.charAt(_selectionEnd - 1);
        var nextChar = inputValue.charAt(_selectionEnd);
        var diff = currentLength - newLength;
        var isGroupChar = _group.current.test(nextChar);
        if (isGroupChar && diff === 1) {
          _selectionEnd += 1;
        } else if (!isGroupChar && isNumeralChar(prevChar)) {
          _selectionEnd += -1 * diff + 1;
        }
        _group.current.lastIndex = 0;
        inputEl.setSelectionRange(_selectionEnd, _selectionEnd);
      } else if (inputValue === "-" && operation === "insert") {
        inputEl.setSelectionRange(0, 0);
        var _index2 = initCursor();
        var _selectionEnd2 = _index2 + insertedValueStr.length + 1;
        inputEl.setSelectionRange(_selectionEnd2, _selectionEnd2);
      } else {
        _selectionEnd = _selectionEnd + (newLength - currentLength);
        inputEl.setSelectionRange(_selectionEnd, _selectionEnd);
      }
    }
    inputEl.setAttribute("aria-valuenow", value);
  };
  var updateInputValue = function updateInputValue2(newValue) {
    newValue = evaluateEmpty(newValue);
    var inputEl = inputRef.current;
    var value = inputEl.value;
    var _formattedValue = formattedValue(newValue);
    if (value !== _formattedValue) {
      inputEl.value = _formattedValue;
      inputEl.setAttribute("aria-valuenow", newValue);
    }
  };
  var formattedValue = function formattedValue2(val) {
    return formatValue2(evaluateEmpty(val));
  };
  var concatValues = function concatValues2(val1, val2) {
    if (val1 && val2) {
      var decimalCharIndex = val2.search(_decimal.current);
      _decimal.current.lastIndex = 0;
      var newVal1 = replaceDecimalSeparator2(val1).split(_decimal.current)[0].replace(_suffix.current, "").trim();
      return decimalCharIndex !== -1 ? newVal1 + val2.slice(decimalCharIndex) : val1;
    }
    return val1;
  };
  var getDecimalLength = function getDecimalLength2(value) {
    if (value) {
      var valueSplit = value.split(_decimal.current);
      if (valueSplit.length === 2) {
        return replaceSuffix(valueSplit[1]).length;
      }
    }
    return 0;
  };
  var updateModel = function updateModel2(event, value) {
    if (props.onValueChange) {
      props.onValueChange({
        originalEvent: event,
        value,
        stopPropagation: function stopPropagation() {
          event.stopPropagation();
        },
        preventDefault: function preventDefault() {
          event.preventDefault();
        },
        target: {
          name: props.name,
          id: props.id,
          value
        }
      });
    }
  };
  var onInputFocus = function onInputFocus2(event) {
    setFocusedState(true);
    props.onFocus && props.onFocus(event);
    if ((props.suffix || props.currency || props.prefix) && inputRef.current && !isFocusedByClick.current) {
      var inputValue = inputRef.current.value;
      var prefixLength = (prefixChar.current || "").length;
      var suffixLength = (suffixChar.current || "").length;
      var end = inputValue.length === 0 ? 0 : inputValue.length - suffixLength;
      inputRef.current.setSelectionRange(prefixLength, end);
    }
  };
  var onInputBlur = function onInputBlur2(event) {
    setFocusedState(false);
    isFocusedByClick.current = false;
    if (inputRef.current) {
      var currentValue = inputRef.current.value;
      if (isValueChanged(currentValue, props.value)) {
        var newValue = validateValue(parseValue(currentValue));
        updateInputValue(newValue);
        updateModel(event, newValue);
      }
    }
    props.onBlur && props.onBlur(event);
  };
  var clearTimer = function clearTimer2() {
    if (timer.current) {
      clearInterval(timer.current);
    }
  };
  var changeValue = function changeValue2() {
    var val = validateValueByLimit(props.value);
    updateInputValue(props.format ? val : replaceDecimalSeparator2(val));
    var newValue = validateValue(props.value);
    if (props.value !== null && props.value !== newValue) {
      updateModel(null, newValue);
    }
  };
  var getFormatter = function getFormatter2() {
    return numberFormat.current;
  };
  reactExports.useImperativeHandle(ref, function() {
    return {
      props,
      focus: function focus() {
        return DomHandler.focus(inputRef.current);
      },
      getFormatter,
      getElement: function getElement() {
        return elementRef.current;
      },
      getInput: function getInput() {
        return inputRef.current;
      }
    };
  });
  reactExports.useEffect(function() {
    ObjectUtils.combinedRefs(inputRef, props.inputRef);
  }, [inputRef, props.inputRef]);
  useMountEffect(function() {
    constructParser();
    var newValue = validateValue(props.value);
    if (props.value !== null && props.value !== newValue) {
      updateModel(null, newValue);
    }
  });
  useUpdateEffect(function() {
    constructParser();
    changeValue();
  }, [props.locale, props.localeMatcher, props.mode, props.currency, props.currencyDisplay, props.useGrouping, props.minFractionDigits, props.maxFractionDigits, props.suffix, props.prefix]);
  useUpdateEffect(function() {
    changeValue();
  }, [props.value]);
  useUpdateEffect(function() {
    if (props.disabled) {
      clearTimer();
    }
  }, [props.disabled]);
  var createInputElement = function createInputElement2() {
    var className = classNames$1("p-inputnumber-input", props.inputClassName);
    var valueToRender = formattedValue(props.value);
    return /* @__PURE__ */ reactExports.createElement(InputText, _extends$k({
      ref: inputRef,
      id: props.inputId,
      style: props.inputStyle,
      role: "spinbutton",
      className,
      defaultValue: valueToRender,
      type: props.type,
      size: props.size,
      tabIndex: props.tabIndex,
      inputMode,
      maxLength: props.maxLength,
      disabled: props.disabled,
      required: props.required,
      pattern: props.pattern,
      placeholder: props.placeholder,
      readOnly: props.readOnly,
      name: props.name,
      autoFocus: props.autoFocus,
      onKeyDown: onInputKeyDown,
      onKeyPress: onInputKeyUp,
      onInput,
      onClick: onInputClick,
      onPointerDown: onInputPointerDown,
      onBlur: onInputBlur,
      onFocus: onInputFocus,
      onPaste: onPaste2,
      min: props.min,
      max: props.max,
      "aria-valuemin": props.min,
      "aria-valuemax": props.max,
      "aria-valuenow": props.value
    }, ariaProps, dataProps, {
      pt: ptm("input"),
      __parentMetadata: {
        parent: metaData
      }
    }));
  };
  var createUpButton = function createUpButton2() {
    var incrementIconProps = mergeProps2({
      className: cx("incrementIcon")
    }, ptm("incrementIcon"));
    var icon2 = props.incrementButtonIcon || /* @__PURE__ */ reactExports.createElement(AngleUpIcon, incrementIconProps);
    var upButton = IconUtils.getJSXIcon(icon2, _objectSpread$i({}, incrementIconProps), {
      props
    });
    var incrementButtonProps = mergeProps2({
      type: "button",
      className: classNames$1(props.incrementButtonClassName, cx("incrementButton")),
      onPointerLeave: onUpButtonMouseLeave,
      onPointerDown: function onPointerDown(e2) {
        return onUpButtonMouseDown(e2);
      },
      onPointerUp: onUpButtonMouseUp,
      onKeyDown: function onKeyDown(e2) {
        return onUpButtonKeyDown(e2);
      },
      onKeyUp: onUpButtonKeyUp,
      disabled: props.disabled,
      tabIndex: -1,
      "aria-hidden": true
    }, ptm("incrementButton"));
    return /* @__PURE__ */ reactExports.createElement("button", incrementButtonProps, upButton, /* @__PURE__ */ reactExports.createElement(Ripple, null));
  };
  var createDownButton = function createDownButton2() {
    var decrementIconProps = mergeProps2({
      className: cx("decrementIcon")
    }, ptm("decrementIcon"));
    var icon2 = props.decrementButtonIcon || /* @__PURE__ */ reactExports.createElement(AngleDownIcon, decrementIconProps);
    var downButton = IconUtils.getJSXIcon(icon2, _objectSpread$i({}, decrementIconProps), {
      props
    });
    var decrementButtonProps = mergeProps2({
      type: "button",
      className: classNames$1(props.decrementButtonClassName, cx("decrementButton")),
      onPointerLeave: onDownButtonMouseLeave,
      onPointerDown: function onPointerDown(e2) {
        return onDownButtonMouseDown(e2);
      },
      onPointerUp: onDownButtonMouseUp,
      onKeyDown: function onKeyDown(e2) {
        return onDownButtonKeyDown(e2);
      },
      onKeyUp: onDownButtonKeyUp,
      disabled: props.disabled,
      tabIndex: -1,
      "aria-hidden": true
    }, ptm("decrementButton"));
    return /* @__PURE__ */ reactExports.createElement("button", decrementButtonProps, downButton, /* @__PURE__ */ reactExports.createElement(Ripple, null));
  };
  var createButtonGroup = function createButtonGroup2() {
    var upButton = props.showButtons && createUpButton();
    var downButton = props.showButtons && createDownButton();
    var buttonGroupProps = mergeProps2({
      className: cx("buttonGroup")
    }, ptm("buttonGroup"));
    if (stacked) {
      return /* @__PURE__ */ reactExports.createElement("span", buttonGroupProps, upButton, downButton);
    }
    return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, upButton, downButton);
  };
  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip);
  var otherProps = InputNumberBase.getOtherProps(props);
  var dataProps = ObjectUtils.reduceKeys(otherProps, DomHandler.DATA_PROPS);
  var ariaProps = ObjectUtils.reduceKeys(otherProps, DomHandler.ARIA_PROPS);
  var inputElement = createInputElement();
  var buttonGroup = createButtonGroup();
  var rootProps = mergeProps2({
    id: props.id,
    className: classNames$1(props.className, cx("root", {
      focusedState,
      stacked,
      horizontal,
      vertical
    })),
    style: props.style
  }, otherProps, ptm("root"));
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("span", _extends$k({
    ref: elementRef
  }, rootProps), inputElement, buttonGroup), hasTooltip && /* @__PURE__ */ reactExports.createElement(Tooltip, _extends$k({
    target: elementRef,
    content: props.tooltip,
    pt: ptm("tooltip")
  }, props.tooltipOptions)));
}));
InputNumber.displayName = "InputNumber";
function _extends$j() {
  _extends$j = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$j.apply(this, arguments);
}
var AngleDoubleRightIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$j({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M7.68757 11.1451C7.7791 11.1831 7.8773 11.2024 7.9764 11.2019C8.07769 11.1985 8.17721 11.1745 8.26886 11.1312C8.36052 11.088 8.44238 11.0265 8.50943 10.9505L12.0294 7.49085C12.1707 7.34942 12.25 7.15771 12.25 6.95782C12.25 6.75794 12.1707 6.56622 12.0294 6.42479L8.50943 2.90479C8.37014 2.82159 8.20774 2.78551 8.04633 2.80192C7.88491 2.81833 7.73309 2.88635 7.6134 2.99588C7.4937 3.10541 7.41252 3.25061 7.38189 3.40994C7.35126 3.56927 7.37282 3.73423 7.44337 3.88033L10.4605 6.89748L7.44337 9.91463C7.30212 10.0561 7.22278 10.2478 7.22278 10.4477C7.22278 10.6475 7.30212 10.8393 7.44337 10.9807C7.51301 11.0512 7.59603 11.1071 7.68757 11.1451ZM1.94207 10.9505C2.07037 11.0968 2.25089 11.1871 2.44493 11.2019C2.63898 11.1871 2.81949 11.0968 2.94779 10.9505L6.46779 7.49085C6.60905 7.34942 6.68839 7.15771 6.68839 6.95782C6.68839 6.75793 6.60905 6.56622 6.46779 6.42479L2.94779 2.90479C2.80704 2.83757 2.6489 2.81563 2.49517 2.84201C2.34143 2.86839 2.19965 2.94178 2.08936 3.05207C1.97906 3.16237 1.90567 3.30415 1.8793 3.45788C1.85292 3.61162 1.87485 3.76975 1.94207 3.9105L4.95922 6.92765L1.94207 9.9448C1.81838 10.0831 1.75 10.2621 1.75 10.4477C1.75 10.6332 1.81838 10.8122 1.94207 10.9505Z",
    fill: "currentColor"
  }));
}));
AngleDoubleRightIcon.displayName = "AngleDoubleRightIcon";
function _extends$i() {
  _extends$i = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$i.apply(this, arguments);
}
var AngleLeftIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$i({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M8.75 11.185C8.65146 11.1854 8.55381 11.1662 8.4628 11.1284C8.37179 11.0906 8.28924 11.0351 8.22 10.965L4.72 7.46496C4.57955 7.32433 4.50066 7.13371 4.50066 6.93496C4.50066 6.73621 4.57955 6.54558 4.72 6.40496L8.22 2.93496C8.36095 2.84357 8.52851 2.80215 8.69582 2.81733C8.86312 2.83252 9.02048 2.90344 9.14268 3.01872C9.26487 3.134 9.34483 3.28696 9.36973 3.4531C9.39463 3.61924 9.36303 3.78892 9.28 3.93496L6.28 6.93496L9.28 9.93496C9.42045 10.0756 9.49934 10.2662 9.49934 10.465C9.49934 10.6637 9.42045 10.8543 9.28 10.995C9.13526 11.1257 8.9448 11.1939 8.75 11.185Z",
    fill: "currentColor"
  }));
}));
AngleLeftIcon.displayName = "AngleLeftIcon";
function _extends$h() {
  _extends$h = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$h.apply(this, arguments);
}
var ChevronDownIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$h({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M7.01744 10.398C6.91269 10.3985 6.8089 10.378 6.71215 10.3379C6.61541 10.2977 6.52766 10.2386 6.45405 10.1641L1.13907 4.84913C1.03306 4.69404 0.985221 4.5065 1.00399 4.31958C1.02276 4.13266 1.10693 3.95838 1.24166 3.82747C1.37639 3.69655 1.55301 3.61742 1.74039 3.60402C1.92777 3.59062 2.11386 3.64382 2.26584 3.75424L7.01744 8.47394L11.769 3.75424C11.9189 3.65709 12.097 3.61306 12.2748 3.62921C12.4527 3.64535 12.6199 3.72073 12.7498 3.84328C12.8797 3.96582 12.9647 4.12842 12.9912 4.30502C13.0177 4.48162 12.9841 4.662 12.8958 4.81724L7.58083 10.1322C7.50996 10.2125 7.42344 10.2775 7.32656 10.3232C7.22968 10.3689 7.12449 10.3944 7.01744 10.398Z",
    fill: "currentColor"
  }));
}));
ChevronDownIcon.displayName = "ChevronDownIcon";
function _extends$g() {
  _extends$g = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$g.apply(this, arguments);
}
var TimesIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$g({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M8.01186 7.00933L12.27 2.75116C12.341 2.68501 12.398 2.60524 12.4375 2.51661C12.4769 2.42798 12.4982 2.3323 12.4999 2.23529C12.5016 2.13827 12.4838 2.0419 12.4474 1.95194C12.4111 1.86197 12.357 1.78024 12.2884 1.71163C12.2198 1.64302 12.138 1.58893 12.0481 1.55259C11.9581 1.51625 11.8617 1.4984 11.7647 1.50011C11.6677 1.50182 11.572 1.52306 11.4834 1.56255C11.3948 1.60204 11.315 1.65898 11.2488 1.72997L6.99067 5.98814L2.7325 1.72997C2.59553 1.60234 2.41437 1.53286 2.22718 1.53616C2.03999 1.53946 1.8614 1.61529 1.72901 1.74767C1.59663 1.88006 1.5208 2.05865 1.5175 2.24584C1.5142 2.43303 1.58368 2.61419 1.71131 2.75116L5.96948 7.00933L1.71131 11.2675C1.576 11.403 1.5 11.5866 1.5 11.7781C1.5 11.9696 1.576 12.1532 1.71131 12.2887C1.84679 12.424 2.03043 12.5 2.2219 12.5C2.41338 12.5 2.59702 12.424 2.7325 12.2887L6.99067 8.03052L11.2488 12.2887C11.3843 12.424 11.568 12.5 11.7594 12.5C11.9509 12.5 12.1346 12.424 12.27 12.2887C12.4053 12.1532 12.4813 11.9696 12.4813 11.7781C12.4813 11.5866 12.4053 11.403 12.27 11.2675L8.01186 7.00933Z",
    fill: "currentColor"
  }));
}));
TimesIcon.displayName = "TimesIcon";
var OverlayService = EventBus();
function _extends$f() {
  _extends$f = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$f.apply(this, arguments);
}
function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _setPrototypeOf(o, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
    o2.__proto__ = p3;
    return o2;
  };
  return _setPrototypeOf(o, p2);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function hasClass(element, className) {
  if (element.classList)
    return !!className && element.classList.contains(className);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}
function addClass(element, className) {
  if (element.classList)
    element.classList.add(className);
  else if (!hasClass(element, className))
    if (typeof element.className === "string")
      element.className = element.className + " " + className;
    else
      element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass$1(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}
const config = {
  disabled: false
};
const TransitionGroupContext = React.createContext(null);
var forceReflow = function forceReflow2(node2) {
  return node2.scrollTop;
};
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Transition2, _React$Component);
  function Transition2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref3, prevState) {
    var nextIn = _ref3.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout2 = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout2;
    if (timeout2 != null && typeof timeout2 !== "number") {
      exit = timeout2.exit;
      enter = timeout2.enter;
      appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
    }
    return {
      exit,
      enter,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
          if (node2)
            forceReflow(node2);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref22 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing], maybeNode = _ref22[0], maybeAppearing = _ref22[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
    if (!mounting && !enter || config.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
    if (!exit || config.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback2) {
    callback2 = this.setNextCallback(callback2);
    this.setState(nextState, callback2);
  };
  _proto.setNextCallback = function setNextCallback(callback2) {
    var _this4 = this;
    var active = true;
    this.nextCallback = function(event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback2(event);
      }
    };
    this.nextCallback.cancel = function() {
      active = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler2) {
    this.setNextCallback(handler2);
    var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
    if (!node2 || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout2 != null) {
      setTimeout(this.nextCallback, timeout2);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children = _this$props.children;
    _this$props.in;
    _this$props.mountOnEnter;
    _this$props.unmountOnExit;
    _this$props.appear;
    _this$props.enter;
    _this$props.exit;
    _this$props.timeout;
    _this$props.addEndListener;
    _this$props.onEnter;
    _this$props.onEntering;
    _this$props.onEntered;
    _this$props.onExit;
    _this$props.onExiting;
    _this$props.onExited;
    _this$props.nodeRef;
    var childProps = _objectWithoutPropertiesLoose$1(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
    );
  };
  return Transition2;
}(React.Component);
Transition.contextType = TransitionGroupContext;
Transition.propTypes = {};
function noop$1() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop$1,
  onEntering: noop$1,
  onEntered: noop$1,
  onExit: noop$1,
  onExiting: noop$1,
  onExited: noop$1
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
const Transition$1 = Transition;
var _addClass = function addClass$1(node2, classes2) {
  return node2 && classes2 && classes2.split(" ").forEach(function(c2) {
    return addClass(node2, c2);
  });
};
var removeClass = function removeClass2(node2, classes2) {
  return node2 && classes2 && classes2.split(" ").forEach(function(c2) {
    return removeClass$1(node2, c2);
  });
};
var CSSTransition$1 = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(CSSTransition2, _React$Component);
  function CSSTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    };
    _this.onEnter = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
      _this.removeClasses(node2, "exit");
      _this.addClass(node2, appearing ? "appear" : "enter", "base");
      if (_this.props.onEnter) {
        _this.props.onEnter(maybeNode, maybeAppearing);
      }
    };
    _this.onEntering = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
      var type = appearing ? "appear" : "enter";
      _this.addClass(node2, type, "active");
      if (_this.props.onEntering) {
        _this.props.onEntering(maybeNode, maybeAppearing);
      }
    };
    _this.onEntered = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
      var type = appearing ? "appear" : "enter";
      _this.removeClasses(node2, type);
      _this.addClass(node2, type, "done");
      if (_this.props.onEntered) {
        _this.props.onEntered(maybeNode, maybeAppearing);
      }
    };
    _this.onExit = function(maybeNode) {
      var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument4[0];
      _this.removeClasses(node2, "appear");
      _this.removeClasses(node2, "enter");
      _this.addClass(node2, "exit", "base");
      if (_this.props.onExit) {
        _this.props.onExit(maybeNode);
      }
    };
    _this.onExiting = function(maybeNode) {
      var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument5[0];
      _this.addClass(node2, "exit", "active");
      if (_this.props.onExiting) {
        _this.props.onExiting(maybeNode);
      }
    };
    _this.onExited = function(maybeNode) {
      var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument6[0];
      _this.removeClasses(node2, "exit");
      _this.addClass(node2, "exit", "done");
      if (_this.props.onExited) {
        _this.props.onExited(maybeNode);
      }
    };
    _this.resolveArguments = function(maybeNode, maybeAppearing) {
      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
    };
    _this.getClassNames = function(type) {
      var classNames2 = _this.props.classNames;
      var isStringClassNames = typeof classNames2 === "string";
      var prefix2 = isStringClassNames && classNames2 ? classNames2 + "-" : "";
      var baseClassName = isStringClassNames ? "" + prefix2 + type : classNames2[type];
      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames2[type + "Active"];
      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames2[type + "Done"];
      return {
        baseClassName,
        activeClassName,
        doneClassName
      };
    };
    return _this;
  }
  var _proto = CSSTransition2.prototype;
  _proto.addClass = function addClass2(node2, type, phase) {
    var className = this.getClassNames(type)[phase + "ClassName"];
    var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
    if (type === "appear" && phase === "done" && doneClassName) {
      className += " " + doneClassName;
    }
    if (phase === "active") {
      if (node2)
        forceReflow(node2);
    }
    if (className) {
      this.appliedClasses[type][phase] = className;
      _addClass(node2, className);
    }
  };
  _proto.removeClasses = function removeClasses(node2, type) {
    var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
    this.appliedClasses[type] = {};
    if (baseClassName) {
      removeClass(node2, baseClassName);
    }
    if (activeClassName) {
      removeClass(node2, activeClassName);
    }
    if (doneClassName) {
      removeClass(node2, doneClassName);
    }
  };
  _proto.render = function render() {
    var _this$props = this.props;
    _this$props.classNames;
    var props = _objectWithoutPropertiesLoose$1(_this$props, ["classNames"]);
    return /* @__PURE__ */ React.createElement(Transition$1, _extends$f({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };
  return CSSTransition2;
}(React.Component);
CSSTransition$1.defaultProps = {
  classNames: ""
};
CSSTransition$1.propTypes = {};
const CSSTransition$1$1 = CSSTransition$1;
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _typeof$6(o) {
  "@babel/helpers - typeof";
  return _typeof$6 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$6(o);
}
function _toPrimitive$5(input2, hint) {
  if (_typeof$6(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$6(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$5(arg) {
  var key = _toPrimitive$5(arg, "string");
  return _typeof$6(key) === "symbol" ? key : String(key);
}
function _defineProperty$6(obj, key, value) {
  key = _toPropertyKey$5(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var CSSTransitionBase = {
  defaultProps: {
    __TYPE: "CSSTransition",
    children: void 0
  },
  getProps: function getProps4(props) {
    return ObjectUtils.getMergedProps(props, CSSTransitionBase.defaultProps);
  },
  getOtherProps: function getOtherProps4(props) {
    return ObjectUtils.getDiffProps(props, CSSTransitionBase.defaultProps);
  }
};
function ownKeys$i(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$h(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$i(Object(t2), true).forEach(function(r3) {
      _defineProperty$6(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$i(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var CSSTransition = /* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var props = CSSTransitionBase.getProps(inProps);
  var context = reactExports.useContext(PrimeReactContext);
  var disabled = props.disabled || props.options && props.options.disabled || context && !context.cssTransition || !PrimeReact$2.cssTransition;
  var onEnter = function onEnter2(node2, isAppearing) {
    props.onEnter && props.onEnter(node2, isAppearing);
    props.options && props.options.onEnter && props.options.onEnter(node2, isAppearing);
  };
  var onEntering = function onEntering2(node2, isAppearing) {
    props.onEntering && props.onEntering(node2, isAppearing);
    props.options && props.options.onEntering && props.options.onEntering(node2, isAppearing);
  };
  var onEntered = function onEntered2(node2, isAppearing) {
    props.onEntered && props.onEntered(node2, isAppearing);
    props.options && props.options.onEntered && props.options.onEntered(node2, isAppearing);
  };
  var onExit = function onExit2(node2) {
    props.onExit && props.onExit(node2);
    props.options && props.options.onExit && props.options.onExit(node2);
  };
  var onExiting = function onExiting2(node2) {
    props.onExiting && props.onExiting(node2);
    props.options && props.options.onExiting && props.options.onExiting(node2);
  };
  var onExited = function onExited2(node2) {
    props.onExited && props.onExited(node2);
    props.options && props.options.onExited && props.options.onExited(node2);
  };
  useUpdateEffect(function() {
    if (disabled) {
      var node2 = ObjectUtils.getRefElement(props.nodeRef);
      if (props["in"]) {
        onEnter(node2, true);
        onEntering(node2, true);
        onEntered(node2, true);
      } else {
        onExit(node2);
        onExiting(node2);
        onExited(node2);
      }
    }
  }, [props["in"]]);
  if (disabled) {
    return props["in"] ? props.children : null;
  } else {
    var immutableProps = {
      nodeRef: props.nodeRef,
      "in": props["in"],
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited
    };
    var mutableProps = {
      classNames: props.classNames,
      timeout: props.timeout,
      unmountOnExit: props.unmountOnExit
    };
    var mergedProps = _objectSpread$h(_objectSpread$h(_objectSpread$h({}, mutableProps), props.options || {}), immutableProps);
    return /* @__PURE__ */ reactExports.createElement(CSSTransition$1$1, mergedProps, props.children);
  }
});
CSSTransition.displayName = "CSSTransition";
function _extends$e() {
  _extends$e = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$e.apply(this, arguments);
}
var SearchIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$e({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.67602 11.0265C3.6661 11.688 4.83011 12.0411 6.02086 12.0411C6.81149 12.0411 7.59438 11.8854 8.32483 11.5828C8.87005 11.357 9.37808 11.0526 9.83317 10.6803L12.9769 13.8241C13.0323 13.8801 13.0983 13.9245 13.171 13.9548C13.2438 13.985 13.3219 14.0003 13.4007 14C13.4795 14.0003 13.5575 13.985 13.6303 13.9548C13.7031 13.9245 13.7691 13.8801 13.8244 13.8241C13.9367 13.7116 13.9998 13.5592 13.9998 13.4003C13.9998 13.2414 13.9367 13.089 13.8244 12.9765L10.6807 9.8328C11.053 9.37773 11.3573 8.86972 11.5831 8.32452C11.8857 7.59408 12.0414 6.81119 12.0414 6.02056C12.0414 4.8298 11.6883 3.66579 11.0268 2.67572C10.3652 1.68564 9.42494 0.913972 8.32483 0.45829C7.22472 0.00260857 6.01418 -0.116618 4.84631 0.115686C3.67844 0.34799 2.60568 0.921393 1.76369 1.76338C0.921698 2.60537 0.348296 3.67813 0.115991 4.84601C-0.116313 6.01388 0.00291375 7.22441 0.458595 8.32452C0.914277 9.42464 1.68595 10.3649 2.67602 11.0265ZM3.35565 2.0158C4.14456 1.48867 5.07206 1.20731 6.02086 1.20731C7.29317 1.20731 8.51338 1.71274 9.41304 2.6124C10.3127 3.51206 10.8181 4.73226 10.8181 6.00457C10.8181 6.95337 10.5368 7.88088 10.0096 8.66978C9.48251 9.45868 8.73328 10.0736 7.85669 10.4367C6.98011 10.7997 6.01554 10.8947 5.08496 10.7096C4.15439 10.5245 3.2996 10.0676 2.62869 9.39674C1.95778 8.72583 1.50089 7.87104 1.31579 6.94046C1.13068 6.00989 1.22568 5.04532 1.58878 4.16874C1.95187 3.29215 2.56675 2.54292 3.35565 2.0158Z",
    fill: "currentColor"
  }));
}));
SearchIcon.displayName = "SearchIcon";
function _extends$d() {
  _extends$d = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$d.apply(this, arguments);
}
function _typeof$5(o) {
  "@babel/helpers - typeof";
  return _typeof$5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$5(o);
}
function _toPrimitive$4(input2, hint) {
  if (_typeof$5(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$5(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$4(arg) {
  var key = _toPrimitive$4(arg, "string");
  return _typeof$5(key) === "symbol" ? key : String(key);
}
function _defineProperty$5(obj, key, value) {
  key = _toPropertyKey$4(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles$4(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$4(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _arrayLikeToArray$5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray$5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$5(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$5(o, minLen);
}
function _nonIterableRest$4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$4(arr, i) {
  return _arrayWithHoles$4(arr) || _iterableToArrayLimit$4(arr, i) || _unsupportedIterableToArray$5(arr, i) || _nonIterableRest$4();
}
var styles$5 = "\n.p-virtualscroller {\n    position: relative;\n    overflow: auto;\n    contain: strict;\n    transform: translateZ(0);\n    will-change: scroll-position;\n    outline: 0 none;\n}\n\n.p-virtualscroller-content {\n    position: absolute;\n    top: 0;\n    left: 0;\n    /*contain: content;*/\n    min-height: 100%;\n    min-width: 100%;\n    will-change: transform;\n}\n\n.p-virtualscroller-spacer {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 1px;\n    width: 1px;\n    transform-origin: 0 0;\n    pointer-events: none;\n}\n\n.p-virtualscroller-loader {\n    position: sticky;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n\n.p-virtualscroller-loader.p-component-overlay {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.p-virtualscroller-loading-icon {\n    font-size: 2rem;\n}\n\n.p-virtualscroller-horizontal > .p-virtualscroller-content {\n    display: flex;\n}\n\n/* Inline */\n.p-virtualscroller-inline .p-virtualscroller-content {\n    position: static;\n}\n";
var VirtualScrollerBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "VirtualScroller",
    __parentMetadata: null,
    id: null,
    style: null,
    className: null,
    tabIndex: 0,
    items: null,
    itemSize: 0,
    scrollHeight: null,
    scrollWidth: null,
    orientation: "vertical",
    step: 0,
    numToleratedItems: null,
    delay: 0,
    resizeDelay: 10,
    appendOnly: false,
    inline: false,
    lazy: false,
    disabled: false,
    loaderDisabled: false,
    loadingIcon: null,
    columns: null,
    loading: void 0,
    autoSize: false,
    showSpacer: true,
    showLoader: false,
    loadingTemplate: null,
    loaderIconTemplate: null,
    itemTemplate: null,
    contentTemplate: null,
    onScroll: null,
    onScrollIndexChange: null,
    onLazyLoad: null,
    children: void 0
  },
  css: {
    styles: styles$5
  }
});
function ownKeys$h(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$g(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$h(Object(t2), true).forEach(function(r3) {
      _defineProperty$5(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$h(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var VirtualScroller = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var context = reactExports.useContext(PrimeReactContext);
  var props = VirtualScrollerBase.getProps(inProps, context);
  var prevProps = usePrevious(inProps) || {};
  var vertical = props.orientation === "vertical";
  var horizontal = props.orientation === "horizontal";
  var both = props.orientation === "both";
  var _React$useState = reactExports.useState(both ? {
    rows: 0,
    cols: 0
  } : 0), _React$useState2 = _slicedToArray$4(_React$useState, 2), firstState = _React$useState2[0], setFirstState = _React$useState2[1];
  var _React$useState3 = reactExports.useState(both ? {
    rows: 0,
    cols: 0
  } : 0), _React$useState4 = _slicedToArray$4(_React$useState3, 2), lastState = _React$useState4[0], setLastState = _React$useState4[1];
  var _React$useState5 = reactExports.useState(0), _React$useState6 = _slicedToArray$4(_React$useState5, 2), pageState = _React$useState6[0], setPageState = _React$useState6[1];
  var _React$useState7 = reactExports.useState(both ? {
    rows: 0,
    cols: 0
  } : 0), _React$useState8 = _slicedToArray$4(_React$useState7, 2), numItemsInViewportState = _React$useState8[0], setNumItemsInViewportState = _React$useState8[1];
  var _React$useState9 = reactExports.useState(props.numToleratedItems), _React$useState10 = _slicedToArray$4(_React$useState9, 2), numToleratedItemsState = _React$useState10[0], setNumToleratedItemsState = _React$useState10[1];
  var _React$useState11 = reactExports.useState(props.loading || false), _React$useState12 = _slicedToArray$4(_React$useState11, 2), loadingState = _React$useState12[0], setLoadingState = _React$useState12[1];
  var _React$useState13 = reactExports.useState([]), _React$useState14 = _slicedToArray$4(_React$useState13, 2), loaderArrState = _React$useState14[0], setLoaderArrState = _React$useState14[1];
  var _VirtualScrollerBase$ = VirtualScrollerBase.setMetaData({
    props,
    state: {
      first: firstState,
      last: lastState,
      page: pageState,
      numItemsInViewport: numItemsInViewportState,
      numToleratedItems: numToleratedItemsState,
      loading: loadingState,
      loaderArr: loaderArrState
    }
  }), ptm = _VirtualScrollerBase$.ptm;
  useStyle(VirtualScrollerBase.css.styles, {
    name: "virtualscroller"
  });
  var elementRef = reactExports.useRef(null);
  var _contentRef = reactExports.useRef(null);
  var _spacerRef = reactExports.useRef(null);
  var _stickyRef = reactExports.useRef(null);
  var lastScrollPos = reactExports.useRef(both ? {
    top: 0,
    left: 0
  } : 0);
  var scrollTimeout = reactExports.useRef(null);
  var resizeTimeout = reactExports.useRef(null);
  var contentStyle = reactExports.useRef({});
  var spacerStyle = reactExports.useRef({});
  var defaultWidth = reactExports.useRef(null);
  var defaultHeight = reactExports.useRef(null);
  var defaultContentWidth = reactExports.useRef(null);
  var defaultContentHeight = reactExports.useRef(null);
  var isItemRangeChanged = reactExports.useRef(false);
  var lazyLoadState = reactExports.useRef(null);
  var _useResizeListener = useResizeListener({
    listener: function listener(event) {
      return onResize();
    },
    when: !props.disabled
  }), _useResizeListener2 = _slicedToArray$4(_useResizeListener, 1), bindWindowResizeListener = _useResizeListener2[0];
  var _useEventListener = useEventListener({
    target: "window",
    type: "orientationchange",
    listener: function listener(event) {
      return onResize();
    },
    when: !props.disabled
  }), _useEventListener2 = _slicedToArray$4(_useEventListener, 1), bindOrientationChangeListener = _useEventListener2[0];
  var getElementRef = function getElementRef2() {
    return elementRef;
  };
  var getPageByFirst = function getPageByFirst2(first) {
    return Math.floor((first + numToleratedItemsState * 4) / (props.step || 1));
  };
  var setContentElement = function setContentElement2(element) {
    _contentRef.current = element || _contentRef.current || DomHandler.findSingle(elementRef.current, ".p-virtualscroller-content");
  };
  var isPageChanged = function isPageChanged2(first) {
    return props.step ? pageState !== getPageByFirst(first) : true;
  };
  var scrollTo2 = function scrollTo3(options2) {
    lastScrollPos.current = both ? {
      top: 0,
      left: 0
    } : 0;
    elementRef.current && elementRef.current.scrollTo(options2);
  };
  var scrollToIndex = function scrollToIndex2(index2) {
    var behavior = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "auto";
    var _calculateNumItems = calculateNumItems(), numToleratedItems = _calculateNumItems.numToleratedItems;
    var contentPos = getContentPosition();
    var calculateFirst = function calculateFirst2() {
      var _index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var _numT = arguments.length > 1 ? arguments[1] : void 0;
      return _index <= _numT ? 0 : _index;
    };
    var calculateCoord = function calculateCoord2(_first, _size, _cpos) {
      return _first * _size + _cpos;
    };
    var scrollToItem = function scrollToItem2() {
      var left = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var top = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return scrollTo2({
        left,
        top,
        behavior
      });
    };
    var newFirst = both ? {
      rows: 0,
      cols: 0
    } : 0;
    var isRangeChanged = false;
    if (both) {
      newFirst = {
        rows: calculateFirst(index2[0], numToleratedItems[0]),
        cols: calculateFirst(index2[1], numToleratedItems[1])
      };
      scrollToItem(calculateCoord(newFirst.cols, props.itemSize[1], contentPos.left), calculateCoord(newFirst.rows, props.itemSize[0], contentPos.top));
      isRangeChanged = firstState.rows !== newFirst.rows || firstState.cols !== newFirst.cols;
    } else {
      newFirst = calculateFirst(index2, numToleratedItems);
      horizontal ? scrollToItem(calculateCoord(newFirst, props.itemSize, contentPos.left), 0) : scrollToItem(0, calculateCoord(newFirst, props.itemSize, contentPos.top));
      isRangeChanged = firstState !== newFirst;
    }
    isItemRangeChanged.current = isRangeChanged;
    setFirstState(newFirst);
  };
  var scrollInView = function scrollInView2(index2, to2) {
    var behavior = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "auto";
    if (to2) {
      var _getRenderedRange = getRenderedRange(), first = _getRenderedRange.first, viewport = _getRenderedRange.viewport;
      var scrollToItem = function scrollToItem2() {
        var left = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
        var top = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        return scrollTo2({
          left,
          top,
          behavior
        });
      };
      var isToStart = to2 === "to-start";
      var isToEnd = to2 === "to-end";
      if (isToStart) {
        if (both) {
          if (viewport.first.rows - first.rows > index2[0]) {
            scrollToItem(viewport.first.cols * props.itemSize[1], (viewport.first.rows - 1) * props.itemSize[0]);
          } else if (viewport.first.cols - first.cols > index2[1]) {
            scrollToItem((viewport.first.cols - 1) * props.itemSize[1], viewport.first.rows * props.itemSize[0]);
          }
        } else {
          if (viewport.first - first > index2) {
            var pos = (viewport.first - 1) * props.itemSize;
            horizontal ? scrollToItem(pos, 0) : scrollToItem(0, pos);
          }
        }
      } else if (isToEnd) {
        if (both) {
          if (viewport.last.rows - first.rows <= index2[0] + 1) {
            scrollToItem(viewport.first.cols * props.itemSize[1], (viewport.first.rows + 1) * props.itemSize[0]);
          } else if (viewport.last.cols - first.cols <= index2[1] + 1) {
            scrollToItem((viewport.first.cols + 1) * props.itemSize[1], viewport.first.rows * props.itemSize[0]);
          }
        } else {
          if (viewport.last - first <= index2 + 1) {
            var _pos2 = (viewport.first + 1) * props.itemSize;
            horizontal ? scrollToItem(_pos2, 0) : scrollToItem(0, _pos2);
          }
        }
      }
    } else {
      scrollToIndex(index2, behavior);
    }
  };
  var getRows = function getRows2() {
    return loadingState ? props.loaderDisabled ? loaderArrState : [] : loadedItems();
  };
  var getColumns = function getColumns2() {
    if (props.columns && both || horizontal) {
      return loadingState && props.loaderDisabled ? both ? loaderArrState[0] : loaderArrState : props.columns.slice(both ? firstState.cols : firstState, both ? lastState.cols : lastState);
    }
    return props.columns;
  };
  var getRenderedRange = function getRenderedRange2() {
    var calculateFirstInViewport = function calculateFirstInViewport2(_pos, _size) {
      return Math.floor(_pos / (_size || _pos));
    };
    var firstInViewport = firstState;
    var lastInViewport = 0;
    if (elementRef.current) {
      var _elementRef$current = elementRef.current, scrollTop = _elementRef$current.scrollTop, scrollLeft = _elementRef$current.scrollLeft;
      if (both) {
        firstInViewport = {
          rows: calculateFirstInViewport(scrollTop, props.itemSize[0]),
          cols: calculateFirstInViewport(scrollLeft, props.itemSize[1])
        };
        lastInViewport = {
          rows: firstInViewport.rows + numItemsInViewportState.rows,
          cols: firstInViewport.cols + numItemsInViewportState.cols
        };
      } else {
        var scrollPos = horizontal ? scrollLeft : scrollTop;
        firstInViewport = calculateFirstInViewport(scrollPos, props.itemSize);
        lastInViewport = firstInViewport + numItemsInViewportState;
      }
    }
    return {
      first: firstState,
      last: lastState,
      viewport: {
        first: firstInViewport,
        last: lastInViewport
      }
    };
  };
  var calculateNumItems = function calculateNumItems2() {
    var contentPos = getContentPosition();
    var contentWidth = elementRef.current ? elementRef.current.offsetWidth - contentPos.left : 0;
    var contentHeight = elementRef.current ? elementRef.current.offsetHeight - contentPos.top : 0;
    var calculateNumItemsInViewport = function calculateNumItemsInViewport2(_contentSize, _itemSize) {
      return Math.ceil(_contentSize / (_itemSize || _contentSize));
    };
    var calculateNumToleratedItems = function calculateNumToleratedItems2(_numItems) {
      return Math.ceil(_numItems / 2);
    };
    var numItemsInViewport = both ? {
      rows: calculateNumItemsInViewport(contentHeight, props.itemSize[0]),
      cols: calculateNumItemsInViewport(contentWidth, props.itemSize[1])
    } : calculateNumItemsInViewport(horizontal ? contentWidth : contentHeight, props.itemSize);
    var numToleratedItems = numToleratedItemsState || (both ? [calculateNumToleratedItems(numItemsInViewport.rows), calculateNumToleratedItems(numItemsInViewport.cols)] : calculateNumToleratedItems(numItemsInViewport));
    return {
      numItemsInViewport,
      numToleratedItems
    };
  };
  var calculateOptions = function calculateOptions2() {
    var _calculateNumItems2 = calculateNumItems(), numItemsInViewport = _calculateNumItems2.numItemsInViewport, numToleratedItems = _calculateNumItems2.numToleratedItems;
    var calculateLast = function calculateLast2(_first, _num, _numT) {
      var _isCols = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      return getLast(_first + _num + (_first < _numT ? 2 : 3) * _numT, _isCols);
    };
    var last = both ? {
      rows: calculateLast(firstState.rows, numItemsInViewport.rows, numToleratedItems[0]),
      cols: calculateLast(firstState.cols, numItemsInViewport.cols, numToleratedItems[1], true)
    } : calculateLast(firstState, numItemsInViewport, numToleratedItems);
    setNumItemsInViewportState(numItemsInViewport);
    setNumToleratedItemsState(numToleratedItems);
    setLastState(last);
    if (props.showLoader) {
      setLoaderArrState(both ? Array.from({
        length: numItemsInViewport.rows
      }).map(function() {
        return Array.from({
          length: numItemsInViewport.cols
        });
      }) : Array.from({
        length: numItemsInViewport
      }));
    }
    if (props.lazy) {
      Promise.resolve().then(function() {
        lazyLoadState.current = {
          first: props.step ? both ? {
            rows: 0,
            cols: firstState.cols
          } : 0 : firstState,
          last: Math.min(props.step ? props.step : last, props.items.length)
        };
        props.onLazyLoad && props.onLazyLoad(lazyLoadState.current);
      });
    }
  };
  var calculateAutoSize = function calculateAutoSize2(loading) {
    if (props.autoSize && !loading) {
      Promise.resolve().then(function() {
        if (_contentRef.current) {
          _contentRef.current.style.minHeight = _contentRef.current.style.minWidth = "auto";
          _contentRef.current.style.position = "relative";
          elementRef.current.style.contain = "none";
          var _ref3 = [DomHandler.getWidth(elementRef.current), DomHandler.getHeight(elementRef.current)], width = _ref3[0], height = _ref3[1];
          (both || horizontal) && (elementRef.current.style.width = (width < defaultWidth.current ? width : props.scrollWidth || defaultWidth.current) + "px");
          (both || vertical) && (elementRef.current.style.height = (height < defaultHeight.current ? height : props.scrollHeight || defaultHeight.current) + "px");
          _contentRef.current.style.minHeight = _contentRef.current.style.minWidth = "";
          _contentRef.current.style.position = "";
          elementRef.current.style.contain = "";
        }
      });
    }
  };
  var getLast = function getLast2() {
    var last = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    var isCols = arguments.length > 1 ? arguments[1] : void 0;
    return props.items ? Math.min(isCols ? (props.columns || props.items[0]).length : props.items.length, last) : 0;
  };
  var getContentPosition = function getContentPosition2() {
    if (_contentRef.current) {
      var style = getComputedStyle(_contentRef.current);
      var left = parseFloat(style.paddingLeft) + Math.max(parseFloat(style.left) || 0, 0);
      var right = parseFloat(style.paddingRight) + Math.max(parseFloat(style.right) || 0, 0);
      var top = parseFloat(style.paddingTop) + Math.max(parseFloat(style.top) || 0, 0);
      var bottom = parseFloat(style.paddingBottom) + Math.max(parseFloat(style.bottom) || 0, 0);
      return {
        left,
        right,
        top,
        bottom,
        x: left + right,
        y: top + bottom
      };
    }
    return {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0,
      x: 0,
      y: 0
    };
  };
  var setSize = function setSize2() {
    if (elementRef.current) {
      var parentElement = elementRef.current.parentElement;
      var width = props.scrollWidth || "".concat(elementRef.current.offsetWidth || parentElement.offsetWidth, "px");
      var height = props.scrollHeight || "".concat(elementRef.current.offsetHeight || parentElement.offsetHeight, "px");
      var setProp = function setProp2(_name, _value) {
        return elementRef.current.style[_name] = _value;
      };
      if (both || horizontal) {
        setProp("height", height);
        setProp("width", width);
      } else {
        setProp("height", height);
      }
    }
  };
  var setSpacerSize = function setSpacerSize2() {
    var items = props.items;
    if (items) {
      var contentPos = getContentPosition();
      var setProp = function setProp2(_name, _value, _size) {
        var _cpos = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
        return spacerStyle.current = _objectSpread$g(_objectSpread$g({}, spacerStyle.current), _defineProperty$5({}, "".concat(_name), (_value || []).length * _size + _cpos + "px"));
      };
      if (both) {
        setProp("height", items, props.itemSize[0], contentPos.y);
        setProp("width", props.columns || items[1], props.itemSize[1], contentPos.x);
      } else {
        horizontal ? setProp("width", props.columns || items, props.itemSize, contentPos.x) : setProp("height", items, props.itemSize, contentPos.y);
      }
    }
  };
  var setContentPosition = function setContentPosition2(pos) {
    if (_contentRef.current && !props.appendOnly) {
      var first = pos ? pos.first : firstState;
      var calculateTranslateVal = function calculateTranslateVal2(_first, _size) {
        return _first * _size;
      };
      var setTransform = function setTransform2() {
        var _x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
        var _y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        _stickyRef.current && (_stickyRef.current.style.top = "-".concat(_y, "px"));
        contentStyle.current = _objectSpread$g(_objectSpread$g({}, contentStyle.current), {
          transform: "translate3d(".concat(_x, "px, ").concat(_y, "px, 0)")
        });
      };
      if (both) {
        setTransform(calculateTranslateVal(first.cols, props.itemSize[1]), calculateTranslateVal(first.rows, props.itemSize[0]));
      } else {
        var translateVal = calculateTranslateVal(first, props.itemSize);
        horizontal ? setTransform(translateVal, 0) : setTransform(0, translateVal);
      }
    }
  };
  var onScrollPositionChange = function onScrollPositionChange2(event) {
    var target = event.target;
    var contentPos = getContentPosition();
    var calculateScrollPos = function calculateScrollPos2(_pos, _cpos) {
      return _pos ? _pos > _cpos ? _pos - _cpos : _pos : 0;
    };
    var calculateCurrentIndex = function calculateCurrentIndex2(_pos, _size) {
      return Math.floor(_pos / (_size || _pos));
    };
    var calculateTriggerIndex = function calculateTriggerIndex2(_currentIndex, _first, _last, _num, _numT, _isScrollDownOrRight) {
      return _currentIndex <= _numT ? _numT : _isScrollDownOrRight ? _last - _num - _numT : _first + _numT - 1;
    };
    var calculateFirst = function calculateFirst2(_currentIndex, _triggerIndex, _first, _last, _num, _numT, _isScrollDownOrRight) {
      if (_currentIndex <= _numT)
        return 0;
      else
        return Math.max(0, _isScrollDownOrRight ? _currentIndex < _triggerIndex ? _first : _currentIndex - _numT : _currentIndex > _triggerIndex ? _first : _currentIndex - 2 * _numT);
    };
    var calculateLast = function calculateLast2(_currentIndex, _first, _last, _num, _numT, _isCols) {
      var lastValue = _first + _num + 2 * _numT;
      if (_currentIndex >= _numT) {
        lastValue += _numT + 1;
      }
      return getLast(lastValue, _isCols);
    };
    var scrollTop = calculateScrollPos(target.scrollTop, contentPos.top);
    var scrollLeft = calculateScrollPos(target.scrollLeft, contentPos.left);
    var newFirst = both ? {
      rows: 0,
      cols: 0
    } : 0;
    var newLast = lastState;
    var isRangeChanged = false;
    var newScrollPos = lastScrollPos.current;
    if (both) {
      var isScrollDown = lastScrollPos.current.top <= scrollTop;
      var isScrollRight = lastScrollPos.current.left <= scrollLeft;
      if (!props.appendOnly || props.appendOnly && (isScrollDown || isScrollRight)) {
        var currentIndex = {
          rows: calculateCurrentIndex(scrollTop, props.itemSize[0]),
          cols: calculateCurrentIndex(scrollLeft, props.itemSize[1])
        };
        var triggerIndex = {
          rows: calculateTriggerIndex(currentIndex.rows, firstState.rows, lastState.rows, numItemsInViewportState.rows, numToleratedItemsState[0], isScrollDown),
          cols: calculateTriggerIndex(currentIndex.cols, firstState.cols, lastState.cols, numItemsInViewportState.cols, numToleratedItemsState[1], isScrollRight)
        };
        newFirst = {
          rows: calculateFirst(currentIndex.rows, triggerIndex.rows, firstState.rows, lastState.rows, numItemsInViewportState.rows, numToleratedItemsState[0], isScrollDown),
          cols: calculateFirst(currentIndex.cols, triggerIndex.cols, firstState.cols, lastState.cols, numItemsInViewportState.cols, numToleratedItemsState[1], isScrollRight)
        };
        newLast = {
          rows: calculateLast(currentIndex.rows, newFirst.rows, lastState.rows, numItemsInViewportState.rows, numToleratedItemsState[0]),
          cols: calculateLast(currentIndex.cols, newFirst.cols, lastState.cols, numItemsInViewportState.cols, numToleratedItemsState[1], true)
        };
        isRangeChanged = newFirst.rows !== firstState.rows || newLast.rows !== lastState.rows || newFirst.cols !== firstState.cols || newLast.cols !== lastState.cols || isItemRangeChanged.current;
        newScrollPos = {
          top: scrollTop,
          left: scrollLeft
        };
      }
    } else {
      var scrollPos = horizontal ? scrollLeft : scrollTop;
      var isScrollDownOrRight = lastScrollPos.current <= scrollPos;
      if (!props.appendOnly || props.appendOnly && isScrollDownOrRight) {
        var _currentIndex2 = calculateCurrentIndex(scrollPos, props.itemSize);
        var _triggerIndex2 = calculateTriggerIndex(_currentIndex2, firstState, lastState, numItemsInViewportState, numToleratedItemsState, isScrollDownOrRight);
        newFirst = calculateFirst(_currentIndex2, _triggerIndex2, firstState, lastState, numItemsInViewportState, numToleratedItemsState, isScrollDownOrRight);
        newLast = calculateLast(_currentIndex2, newFirst, lastState, numItemsInViewportState, numToleratedItemsState);
        isRangeChanged = newFirst !== firstState || newLast !== lastState || isItemRangeChanged.current;
        newScrollPos = scrollPos;
      }
    }
    return {
      first: newFirst,
      last: newLast,
      isRangeChanged,
      scrollPos: newScrollPos
    };
  };
  var onScrollChange = function onScrollChange2(event) {
    var _onScrollPositionChan = onScrollPositionChange(event), first = _onScrollPositionChan.first, last = _onScrollPositionChan.last, isRangeChanged = _onScrollPositionChan.isRangeChanged, scrollPos = _onScrollPositionChan.scrollPos;
    if (isRangeChanged) {
      var newState = {
        first,
        last
      };
      setContentPosition(newState);
      setFirstState(first);
      setLastState(last);
      lastScrollPos.current = scrollPos;
      props.onScrollIndexChange && props.onScrollIndexChange(newState);
      if (props.lazy && isPageChanged(first)) {
        var newLazyLoadState = {
          first: props.step ? Math.min(getPageByFirst(first) * props.step, props.items.length - props.step) : first,
          last: Math.min(props.step ? (getPageByFirst(first) + 1) * props.step : last, props.items.length)
        };
        var isLazyStateChanged = !lazyLoadState.current || lazyLoadState.current.first !== newLazyLoadState.first || lazyLoadState.current.last !== newLazyLoadState.last;
        isLazyStateChanged && props.onLazyLoad && props.onLazyLoad(newLazyLoadState);
        lazyLoadState.current = newLazyLoadState;
      }
    }
  };
  var _onScroll = function onScroll(event) {
    props.onScroll && props.onScroll(event);
    if (props.delay) {
      if (scrollTimeout.current) {
        clearTimeout(scrollTimeout.current);
      }
      if (isPageChanged(firstState)) {
        if (!loadingState && props.showLoader) {
          var _onScrollPositionChan2 = onScrollPositionChange(event), isRangeChanged = _onScrollPositionChan2.isRangeChanged;
          var changed = isRangeChanged || (props.step ? isPageChanged(firstState) : false);
          changed && setLoadingState(true);
        }
        scrollTimeout.current = setTimeout(function() {
          onScrollChange(event);
          if (loadingState && props.showLoader && (!props.lazy || props.loading === void 0)) {
            setLoadingState(false);
            setPageState(getPageByFirst(firstState));
          }
        }, props.delay);
      }
    } else {
      onScrollChange(event);
    }
  };
  var onResize = function onResize2() {
    if (resizeTimeout.current) {
      clearTimeout(resizeTimeout.current);
    }
    resizeTimeout.current = setTimeout(function() {
      if (elementRef.current) {
        var _ref22 = [DomHandler.getWidth(elementRef.current), DomHandler.getHeight(elementRef.current)], width = _ref22[0], height = _ref22[1];
        var isDiffWidth = width !== defaultWidth.current, isDiffHeight = height !== defaultHeight.current;
        var reinit = both ? isDiffWidth || isDiffHeight : horizontal ? isDiffWidth : vertical ? isDiffHeight : false;
        if (reinit) {
          setNumToleratedItemsState(props.numToleratedItems);
          defaultWidth.current = width;
          defaultHeight.current = height;
          defaultContentWidth.current = DomHandler.getWidth(_contentRef.current);
          defaultContentHeight.current = DomHandler.getHeight(_contentRef.current);
        }
      }
    }, props.resizeDelay);
  };
  var getOptions = function getOptions2(renderedIndex) {
    var count = (props.items || []).length;
    var index2 = both ? firstState.rows + renderedIndex : firstState + renderedIndex;
    return {
      index: index2,
      count,
      first: index2 === 0,
      last: index2 === count - 1,
      even: index2 % 2 === 0,
      odd: index2 % 2 !== 0,
      props
    };
  };
  var loaderOptions = function loaderOptions2(index2, extOptions) {
    var count = loaderArrState.length;
    return _objectSpread$g({
      index: index2,
      count,
      first: index2 === 0,
      last: index2 === count - 1,
      even: index2 % 2 === 0,
      odd: index2 % 2 !== 0,
      props
    }, extOptions);
  };
  var loadedItems = function loadedItems2() {
    var items = props.items;
    if (items && !loadingState) {
      if (both)
        return items.slice(props.appendOnly ? 0 : firstState.rows, lastState.rows).map(function(item2) {
          return props.columns ? item2 : item2.slice(props.appendOnly ? 0 : firstState.cols, lastState.cols);
        });
      else if (horizontal && props.columns)
        return items;
      else
        return items.slice(props.appendOnly ? 0 : firstState, lastState);
    }
    return [];
  };
  var viewInit = function viewInit2() {
    if (elementRef.current && DomHandler.isVisible(elementRef.current)) {
      setContentElement(_contentRef.current);
      init();
      bindWindowResizeListener();
      bindOrientationChangeListener();
      defaultWidth.current = DomHandler.getWidth(elementRef.current);
      defaultHeight.current = DomHandler.getHeight(elementRef.current);
      defaultContentWidth.current = DomHandler.getWidth(_contentRef.current);
      defaultContentHeight.current = DomHandler.getHeight(_contentRef.current);
    }
  };
  var init = function init2() {
    if (!props.disabled) {
      setSize();
      calculateOptions();
      setSpacerSize();
    }
  };
  useMountEffect(function() {
    viewInit();
  });
  useUpdateEffect(function() {
    init();
  }, [props.itemSize, props.scrollHeight, props.scrollWidth]);
  useUpdateEffect(function() {
    if (props.numToleratedItems !== numToleratedItemsState) {
      setNumToleratedItemsState(props.numToleratedItems);
    }
  }, [props.numToleratedItems]);
  useUpdateEffect(function() {
    if (props.numToleratedItems === numToleratedItemsState) {
      init();
    }
  }, [numToleratedItemsState]);
  useUpdateEffect(function() {
    if (!prevProps.items || prevProps.items.length !== (props.items || []).length) {
      init();
    }
    var loading = loadingState;
    if (props.lazy && prevProps.loading !== props.loading && props.loading !== loadingState) {
      setLoadingState(props.loading);
      loading = props.loading;
    }
    calculateAutoSize(loading);
  });
  useUpdateEffect(function() {
    lastScrollPos.current = both ? {
      top: 0,
      left: 0
    } : 0;
  }, [props.orientation]);
  reactExports.useImperativeHandle(ref, function() {
    return {
      props,
      getElementRef,
      scrollTo: scrollTo2,
      scrollToIndex,
      scrollInView,
      getRenderedRange
    };
  });
  var createLoaderItem = function createLoaderItem2(index2) {
    var extOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var options2 = loaderOptions(index2, extOptions);
    var content2 = ObjectUtils.getJSXElement(props.loadingTemplate, options2);
    return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, {
      key: index2
    }, content2);
  };
  var createLoader = function createLoader2() {
    var iconClassName = "p-virtualscroller-loading-icon";
    var loadingIconProps = mergeProps({
      className: iconClassName
    }, ptm("loadingIcon"));
    var icon2 = props.loadingIcon || /* @__PURE__ */ reactExports.createElement(SpinnerIcon, _extends$d({}, loadingIconProps, {
      spin: true
    }));
    var loadingIcon2 = IconUtils.getJSXIcon(icon2, _objectSpread$g({}, loadingIconProps), {
      props
    });
    if (!props.loaderDisabled && props.showLoader && loadingState) {
      var className2 = classNames$1("p-virtualscroller-loader", {
        "p-component-overlay": !props.loadingTemplate
      });
      var content2 = loadingIcon2;
      if (props.loadingTemplate) {
        content2 = loaderArrState.map(function(_, index2) {
          return createLoaderItem(index2, both && {
            numCols: numItemsInViewportState.cols
          });
        });
      } else if (props.loaderIconTemplate) {
        var defaultContentOptions = {
          iconClassName,
          element: content2,
          props
        };
        content2 = ObjectUtils.getJSXElement(props.loaderIconTemplate, defaultContentOptions);
      }
      var loaderProps = mergeProps({
        className: className2
      }, ptm("loader"));
      return /* @__PURE__ */ reactExports.createElement("div", loaderProps, content2);
    }
    return null;
  };
  var createSpacer = function createSpacer2() {
    if (props.showSpacer) {
      var spacerProps = mergeProps({
        ref: _spacerRef,
        style: spacerStyle.current,
        className: "p-virtualscroller-spacer"
      }, ptm("spacer"));
      return /* @__PURE__ */ reactExports.createElement("div", spacerProps);
    }
    return null;
  };
  var createItem = function createItem2(item2, index2) {
    var options2 = getOptions(index2);
    var content2 = ObjectUtils.getJSXElement(props.itemTemplate, item2, options2);
    return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, {
      key: options2.index
    }, content2);
  };
  var createItems = function createItems2() {
    var items = loadedItems();
    return items.map(createItem);
  };
  var createContent = function createContent2() {
    var items = createItems();
    var className2 = classNames$1("p-virtualscroller-content", {
      "p-virtualscroller-loading": loadingState
    });
    var contentProps = mergeProps({
      ref: _contentRef,
      style: contentStyle.current,
      className: className2
    }, ptm("content"));
    var content2 = /* @__PURE__ */ reactExports.createElement("div", contentProps, items);
    if (props.contentTemplate) {
      var defaultOptions = {
        style: contentStyle.current,
        className: className2,
        spacerStyle: spacerStyle.current,
        contentRef: function contentRef(el2) {
          return _contentRef.current = ObjectUtils.getRefElement(el2);
        },
        spacerRef: function spacerRef(el2) {
          return _spacerRef.current = ObjectUtils.getRefElement(el2);
        },
        stickyRef: function stickyRef(el2) {
          return _stickyRef.current = ObjectUtils.getRefElement(el2);
        },
        items: loadedItems(),
        getItemOptions: function getItemOptions(index2) {
          return getOptions(index2);
        },
        children: items,
        element: content2,
        props,
        loading: loadingState,
        getLoaderOptions: function getLoaderOptions(index2, ext) {
          return loaderOptions(index2, ext);
        },
        loadingTemplate: props.loadingTemplate,
        itemSize: props.itemSize,
        rows: getRows(),
        columns: getColumns(),
        vertical,
        horizontal,
        both
      };
      return ObjectUtils.getJSXElement(props.contentTemplate, defaultOptions);
    }
    return content2;
  };
  if (props.disabled) {
    var content = ObjectUtils.getJSXElement(props.contentTemplate, {
      items: props.items,
      rows: props.items,
      columns: props.columns
    });
    return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, props.children, content);
  } else {
    var className = classNames$1("p-virtualscroller", {
      "p-virtualscroller-inline": props.inline,
      "p-virtualscroller-both p-both-scroll": both,
      "p-virtualscroller-horizontal p-horizontal-scroll": horizontal
    }, props.className);
    var loader = createLoader();
    var _content = createContent();
    var spacer = createSpacer();
    var rootProps = mergeProps({
      ref: elementRef,
      className,
      tabIndex: props.tabIndex,
      style: props.style,
      onScroll: function onScroll(e2) {
        return _onScroll(e2);
      }
    }, VirtualScrollerBase.getOtherProps(props), ptm("root"));
    return /* @__PURE__ */ reactExports.createElement("div", rootProps, _content, spacer, loader);
  }
}));
VirtualScroller.displayName = "VirtualScroller";
function _extends$c() {
  _extends$c = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$c.apply(this, arguments);
}
function _typeof$4(o) {
  "@babel/helpers - typeof";
  return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$4(o);
}
function _toPrimitive$3(input2, hint) {
  if (_typeof$4(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$4(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$3(arg) {
  var key = _toPrimitive$3(arg, "string");
  return _typeof$4(key) === "symbol" ? key : String(key);
}
function _defineProperty$4(obj, key, value) {
  key = _toPropertyKey$3(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles$3(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$3(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _arrayLikeToArray$1$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray$1$1(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1$1(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$1$1(o, minLen);
}
function _nonIterableRest$3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$3(arr, i) {
  return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i) || _unsupportedIterableToArray$1$1(arr, i) || _nonIterableRest$3();
}
var classes$4 = {
  root: function root5(_ref3) {
    var props = _ref3.props, focusedState = _ref3.focusedState, overlayVisibleState = _ref3.overlayVisibleState;
    return classNames$1("p-dropdown p-component p-inputwrapper", {
      "p-disabled": props.disabled,
      "p-focus": focusedState,
      "p-dropdown-clearable": props.showClear && !props.disabled,
      "p-inputwrapper-filled": ObjectUtils.isNotEmpty(props.value),
      "p-inputwrapper-focus": focusedState || overlayVisibleState
    });
  },
  input: function input(_ref22) {
    var props = _ref22.props, label = _ref22.label;
    return props.editable ? "p-dropdown-label p-inputtext" : classNames$1("p-dropdown-label p-inputtext", {
      "p-placeholder": label === null && props.placeholder,
      "p-dropdown-label-empty": label === null && !props.placeholder
    });
  },
  trigger: "p-dropdown-trigger",
  emptyMessage: "p-dropdown-empty-message",
  itemGroup: function itemGroup(_ref3) {
    var optionGroupLabel = _ref3.optionGroupLabel;
    return classNames$1("p-dropdown-item-group", {
      "p-dropdown-item-empty": !optionGroupLabel || optionGroupLabel.length === 0
    });
  },
  dropdownIcon: "p-dropdown-trigger-icon p-clickable",
  loadingIcon: "p-dropdown-trigger-icon p-clickable",
  clearIcon: "p-dropdown-clear-icon p-clickable",
  filterIcon: "p-dropdown-filter-icon",
  filterClearIcon: "p-dropdown-filter-clear-icon",
  filterContainer: function filterContainer(_ref4) {
    var clearIcon = _ref4.clearIcon;
    return classNames$1("p-dropdown-filter-container", {
      "p-dropdown-clearable-filter": !!clearIcon
    });
  },
  filterInput: "p-dropdown-filter p-inputtext p-component",
  list: function list(_ref5) {
    var virtualScrollerOptions = _ref5.virtualScrollerOptions;
    return virtualScrollerOptions ? "p-dropdown-items" : "p-dropdown-items";
  },
  panel: function panel(_ref6) {
    var context = _ref6.context;
    return classNames$1("p-dropdown-panel p-component", {
      "p-input-filled": context && context.inputStyle === "filled" || PrimeReact$2.inputStyle === "filled",
      "p-ripple-disabled": context && context.ripple === false || PrimeReact$2.ripple === false
    });
  },
  item: function item(_ref7) {
    var selected = _ref7.selected, disabled = _ref7.disabled, label = _ref7.label, index2 = _ref7.index, focusedOptionIndex = _ref7.focusedOptionIndex;
    return classNames$1("p-dropdown-item", {
      "p-highlight": selected,
      "p-disabled": disabled,
      "p-focus": index2 === focusedOptionIndex,
      "p-dropdown-item-empty": !label || label.length === 0
    });
  },
  wrapper: "p-dropdown-items-wrapper",
  header: "p-dropdown-header",
  footer: "p-dropdown-footer",
  transition: "p-connected-overlay"
};
var styles$4 = "\n@layer primereact {\n    .p-dropdown {\n        display: inline-flex;\n        cursor: pointer;\n        position: relative;\n        user-select: none;\n    }\n    \n    .p-dropdown-trigger {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n    }\n    \n    .p-dropdown-label {\n        display: block;\n        white-space: nowrap;\n        overflow: hidden;\n        flex: 1 1 auto;\n        width: 1%;\n        text-overflow: ellipsis;\n        cursor: pointer;\n    }\n    \n    .p-dropdown-label-empty {\n        overflow: hidden;\n        visibility: hidden;\n    }\n    \n    input.p-dropdown-label  {\n        cursor: default;\n    }\n    \n    .p-dropdown .p-dropdown-panel {\n        min-width: 100%;\n    }\n    \n    .p-dropdown-panel {\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n    \n    .p-dropdown-items-wrapper {\n        overflow: auto;\n    }\n    \n    .p-dropdown-item {\n        cursor: pointer;\n        font-weight: normal;\n        white-space: nowrap;\n        position: relative;\n        overflow: hidden;\n    }\n    \n    .p-dropdown-items {\n        margin: 0;\n        padding: 0;\n        list-style-type: none;\n    }\n    \n    .p-dropdown-filter {\n        width: 100%;\n    }\n    \n    .p-dropdown-filter-container {\n        position: relative;\n    }\n    \n    .p-dropdown-clear-icon,\n    .p-dropdown-filter-icon,\n    .p-dropdown-filter-clear-icon {\n        position: absolute;\n        top: 50%;\n        margin-top: -.5rem;\n    }\n    \n    .p-fluid .p-dropdown {\n        display: flex;\n    }\n    \n    .p-fluid .p-dropdown .p-dropdown-label {\n        width: 1%;\n    }\n}\n";
var inlineStyles$1 = {
  wrapper: function wrapper(_ref8) {
    var props = _ref8.props;
    return {
      maxHeight: props.scrollHeight || "auto"
    };
  },
  panel: function panel2(_ref9) {
    var props = _ref9.props;
    props.panelStyle;
  }
};
var DropdownBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Dropdown",
    __parentMetadata: null,
    appendTo: null,
    ariaLabel: null,
    ariaLabelledBy: null,
    autoFocus: false,
    children: void 0,
    className: null,
    clearIcon: null,
    dataKey: null,
    disabled: false,
    dropdownIcon: null,
    editable: false,
    emptyFilterMessage: null,
    emptyMessage: null,
    filter: false,
    filterBy: null,
    filterClearIcon: null,
    filterIcon: null,
    filterInputAutoFocus: true,
    filterLocale: void 0,
    filterMatchMode: "contains",
    filterPlaceholder: null,
    filterTemplate: null,
    focusInputRef: null,
    id: null,
    inputId: null,
    inputRef: null,
    itemTemplate: null,
    loading: false,
    loadingIcon: null,
    maxLength: null,
    name: null,
    onBlur: null,
    onChange: null,
    onContextMenu: null,
    onFilter: null,
    onFocus: null,
    onHide: null,
    onMouseDown: null,
    onShow: null,
    optionDisabled: null,
    optionGroupChildren: "items",
    selectOnFocus: false,
    autoOptionFocus: false,
    optionGroupLabel: null,
    optionGroupTemplate: null,
    optionLabel: null,
    optionValue: null,
    options: null,
    panelClassName: null,
    panelFooterTemplate: null,
    panelStyle: null,
    placeholder: null,
    required: false,
    resetFilterOnHide: false,
    scrollHeight: "200px",
    showClear: false,
    showFilterClear: false,
    showOnFocus: false,
    style: null,
    tabIndex: null,
    tooltip: null,
    tooltipOptions: null,
    transitionOptions: null,
    value: null,
    valueTemplate: null,
    virtualScrollerOptions: null
  },
  css: {
    classes: classes$4,
    styles: styles$4,
    inlineStyles: inlineStyles$1
  }
});
var DropdownItem = /* @__PURE__ */ reactExports.memo(function(props) {
  var mergeProps2 = useMergeProps();
  var ptm = props.ptm, cx = props.cx, selected = props.selected, disabled = props.disabled, option = props.option, label = props.label, index2 = props.index, focusedOptionIndex = props.focusedOptionIndex;
  var getPTOptions = function getPTOptions2(key) {
    return ptm(key, {
      context: {
        selected,
        disabled
      }
    });
  };
  var _onClick = function onClick(event, i) {
    if (props.onClick) {
      props.onClick({
        originalEvent: event,
        option
      });
    }
  };
  var content = props.template ? ObjectUtils.getJSXElement(props.template, props.option) : props.label;
  var itemProps = mergeProps2({
    role: "option",
    key: props.label,
    className: classNames$1(option.className, cx("item", {
      selected,
      disabled,
      label,
      index: index2,
      focusedOptionIndex
    })),
    style: props.style,
    onClick: function onClick(e2) {
      return _onClick(e2);
    },
    "aria-label": label,
    "aria-selected": selected,
    "data-p-highlight": selected,
    "data-p-focused": focusedOptionIndex === index2,
    "data-p-disabled": disabled
  }, getPTOptions("item"));
  return /* @__PURE__ */ reactExports.createElement("li", itemProps, content, /* @__PURE__ */ reactExports.createElement(Ripple, null));
});
DropdownItem.displayName = "DropdownItem";
function ownKeys$1$3(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$1$3(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$1$3(Object(t2), true).forEach(function(r3) {
      _defineProperty$4(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1$3(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var DropdownPanel = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
  var mergeProps2 = useMergeProps();
  var ptm = props.ptm, cx = props.cx, sx = props.sx;
  var context = reactExports.useContext(PrimeReactContext);
  reactExports.useRef(null);
  var filterInputRef = reactExports.useRef(null);
  var isEmptyFilter = !(props.visibleOptions && props.visibleOptions.length) && props.hasFilter;
  var filterOptions = {
    filter: function filter2(e2) {
      return onFilterInputChange(e2);
    },
    reset: function reset() {
      return props.resetFilter();
    }
  };
  var getPTOptions = function getPTOptions2(key, options2) {
    return ptm(key, _objectSpread$1$3({
      hostName: props.hostName
    }, options2));
  };
  var onEnter = function onEnter2() {
    props.onEnter(function() {
      if (props.virtualScrollerRef.current) {
        var selectedIndex = props.getSelectedOptionIndex();
        if (selectedIndex !== -1) {
          setTimeout(function() {
            return props.virtualScrollerRef.current.scrollToIndex(selectedIndex);
          }, 0);
        }
      }
    });
  };
  var onEntered = function onEntered2() {
    props.onEntered(function() {
      if (props.filter && props.filterInputAutoFocus) {
        DomHandler.focus(filterInputRef.current, false);
      }
    });
  };
  var onFilterInputChange = function onFilterInputChange2(event) {
    props.virtualScrollerRef.current && props.virtualScrollerRef.current.scrollToIndex(0);
    props.onFilterInputChange && props.onFilterInputChange(event);
  };
  var createFooter = function createFooter2() {
    if (props.panelFooterTemplate) {
      var content = ObjectUtils.getJSXElement(props.panelFooterTemplate, props, props.onOverlayHide);
      var footerProps = mergeProps2({
        className: cx("footer")
      }, getPTOptions("footer"));
      return /* @__PURE__ */ reactExports.createElement("div", footerProps, content);
    }
    return null;
  };
  var createGroupChildren = function createGroupChildren2(optionGroup, style) {
    var groupChildren = props.getOptionGroupChildren(optionGroup);
    return groupChildren.map(function(option, j) {
      var optionLabel = props.getOptionLabel(option);
      var optionKey = j + "_" + props.getOptionRenderKey(option);
      var disabled = props.isOptionDisabled(option);
      return /* @__PURE__ */ reactExports.createElement(DropdownItem, {
        key: optionKey,
        index: j,
        focusedOptionIndex: props.focusedOptionIndex,
        label: optionLabel,
        option,
        style,
        template: props.itemTemplate,
        selected: props.isSelected(option),
        disabled,
        onClick: props.onOptionClick,
        ptm,
        cx
      });
    });
  };
  var createEmptyMessage = function createEmptyMessage2(emptyMessage, isFilter) {
    var message = ObjectUtils.getJSXElement(emptyMessage, props) || localeOption(isFilter ? "emptyFilterMessage" : "emptyMessage");
    var emptyMessageProps = mergeProps2({
      className: cx("emptyMessage")
    }, getPTOptions("emptyMessage"));
    return /* @__PURE__ */ reactExports.createElement("li", emptyMessageProps, message);
  };
  var createItem = function createItem2(option, index2) {
    var scrollerOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var style = {
      height: scrollerOptions.props ? scrollerOptions.props.itemSize : void 0
    };
    style = _objectSpread$1$3(_objectSpread$1$3({}, style), option.style);
    if (props.optionGroupLabel) {
      var optionGroupLabel = props.optionGroupLabel;
      var groupContent = props.optionGroupTemplate ? ObjectUtils.getJSXElement(props.optionGroupTemplate, option, index2) : props.getOptionGroupLabel(option);
      var groupChildrenContent = createGroupChildren(option, style);
      var key = index2 + "_" + props.getOptionGroupRenderKey(option);
      var itemGroupProps = mergeProps2({
        className: cx("itemGroup", {
          optionGroupLabel
        }),
        style,
        "data-p-highlight": props.selected
      }, getPTOptions("itemGroup"));
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, {
        key
      }, /* @__PURE__ */ reactExports.createElement("li", itemGroupProps, groupContent), groupChildrenContent);
    } else {
      var optionLabel = props.getOptionLabel(option);
      var optionKey = index2 + "_" + props.getOptionRenderKey(option);
      var disabled = props.isOptionDisabled(option);
      return /* @__PURE__ */ reactExports.createElement(DropdownItem, {
        key: optionKey,
        label: optionLabel,
        index: index2,
        focusedOptionIndex: props.focusedOptionIndex,
        option,
        style,
        template: props.itemTemplate,
        selected: props.isSelected(option),
        disabled,
        onClick: props.onOptionClick,
        ptm,
        cx
      });
    }
  };
  var createItems = function createItems2() {
    if (ObjectUtils.isNotEmpty(props.visibleOptions)) {
      return props.visibleOptions.map(createItem);
    } else if (props.hasFilter) {
      return createEmptyMessage(props.emptyFilterMessage, true);
    }
    return createEmptyMessage(props.emptyMessage);
  };
  var createFilterClearIcon = function createFilterClearIcon2() {
    if (props.showFilterClear && props.filterValue) {
      var ariaLabel2 = localeOption("clear");
      var clearIconProps = mergeProps2({
        className: cx("filterClearIcon"),
        "aria-label": ariaLabel2,
        onClick: function onClick() {
          return props.onFilterClearIconClick(function() {
            return DomHandler.focus(filterInputRef.current);
          });
        }
      }, getPTOptions("filterClearIcon"));
      var icon2 = props.filterClearIcon || /* @__PURE__ */ reactExports.createElement(TimesIcon, clearIconProps);
      var filterClearIcon = IconUtils.getJSXIcon(icon2, _objectSpread$1$3({}, clearIconProps), {
        props
      });
      return filterClearIcon;
    }
    return null;
  };
  var createFilter3 = function createFilter4() {
    if (props.filter) {
      var clearIcon = createFilterClearIcon();
      var filterIconProps = mergeProps2({
        className: cx("filterIcon")
      }, getPTOptions("filterIcon"));
      var icon2 = props.filterIcon || /* @__PURE__ */ reactExports.createElement(SearchIcon, filterIconProps);
      var filterIcon = IconUtils.getJSXIcon(icon2, _objectSpread$1$3({}, filterIconProps), {
        props
      });
      var filterContainerProps = mergeProps2({
        className: cx("filterContainer", {
          clearIcon
        })
      }, getPTOptions("filterContainer"));
      var filterInputProps = mergeProps2({
        ref: filterInputRef,
        type: "text",
        autoComplete: "off",
        className: cx("filterInput"),
        placeholder: props.filterPlaceholder,
        onKeyDown: props.onFilterInputKeyDown,
        onChange: function onChange2(e2) {
          return onFilterInputChange(e2);
        },
        value: props.filterValue
      }, getPTOptions("filterInput"));
      var content = /* @__PURE__ */ reactExports.createElement("div", filterContainerProps, /* @__PURE__ */ reactExports.createElement("input", filterInputProps), clearIcon, filterIcon);
      if (props.filterTemplate) {
        var defaultContentOptions = {
          className: classNames$1("p-dropdown-filter-container", {
            "p-dropdown-clearable-filter": !!clearIcon
          }),
          element: content,
          filterOptions,
          filterInputKeyDown: props.onFilterInputKeyDown,
          filterInputChange: onFilterInputChange,
          filterIconClassName: "p-dropdown-filter-icon",
          clearIcon,
          props
        };
        content = ObjectUtils.getJSXElement(props.filterTemplate, defaultContentOptions);
      }
      var headerProps = mergeProps2({
        className: cx("header")
      }, getPTOptions("header"));
      return /* @__PURE__ */ reactExports.createElement("div", headerProps, content);
    }
    return null;
  };
  var createContent = function createContent2() {
    if (props.virtualScrollerOptions) {
      var virtualScrollerProps = _objectSpread$1$3(_objectSpread$1$3({}, props.virtualScrollerOptions), {
        style: _objectSpread$1$3(_objectSpread$1$3({}, props.virtualScrollerOptions.style), {
          height: props.scrollHeight
        }),
        className: classNames$1("p-dropdown-items-wrapper", props.virtualScrollerOptions.className),
        items: props.visibleOptions,
        autoSize: true,
        onLazyLoad: function onLazyLoad(event) {
          return props.virtualScrollerOptions.onLazyLoad(_objectSpread$1$3(_objectSpread$1$3({}, event), {
            filter: props.filterValue
          }));
        },
        itemTemplate: function itemTemplate(item2, options2) {
          return item2 && createItem(item2, options2.index, options2);
        },
        contentTemplate: function contentTemplate(options2) {
          var emptyMessage = props.hasFilter ? props.emptyFilterMessage : props.emptyMessage;
          var content = isEmptyFilter ? createEmptyMessage(emptyMessage) : options2.children;
          var listProps2 = mergeProps2({
            ref: options2.contentRef,
            style: options2.style,
            className: classNames$1(options2.className, cx("list", {
              virtualScrollerProps: props.virtualScrollerOptions
            })),
            role: "listbox"
          }, getPTOptions("list"));
          return /* @__PURE__ */ reactExports.createElement("ul", listProps2, content);
        }
      });
      return /* @__PURE__ */ reactExports.createElement(VirtualScroller, _extends$c({
        ref: props.virtualScrollerRef
      }, virtualScrollerProps, {
        pt: ptm("virtualScroller")
      }));
    } else {
      var items = createItems();
      var wrapperProps = mergeProps2({
        className: cx("wrapper"),
        style: sx("wrapper")
      }, getPTOptions("wrapper"));
      var listProps = mergeProps2({
        className: cx("list"),
        role: "listbox"
      }, getPTOptions("list"));
      return /* @__PURE__ */ reactExports.createElement("div", wrapperProps, /* @__PURE__ */ reactExports.createElement("ul", listProps, items));
    }
  };
  var createElement = function createElement2() {
    var filter2 = createFilter3();
    var content = createContent();
    var footer = createFooter();
    var panelProps = mergeProps2({
      className: classNames$1(props.panelClassName, cx("panel", {
        context
      })),
      style: sx("panel"),
      onClick: props.onClick
    }, getPTOptions("panel"));
    var transitionProps = mergeProps2({
      classNames: cx("transition"),
      "in": props["in"],
      timeout: {
        enter: 120,
        exit: 100
      },
      options: props.transitionOptions,
      unmountOnExit: true,
      onEnter,
      onEntered,
      onExit: props.onExit,
      onExited: props.onExited
    }, getPTOptions("transition"));
    return /* @__PURE__ */ reactExports.createElement(CSSTransition, _extends$c({
      nodeRef: ref
    }, transitionProps), /* @__PURE__ */ reactExports.createElement("div", _extends$c({
      ref
    }, panelProps), props.firstFocusableElement, filter2, content, footer, props.lastFocusableElement));
  };
  var element = createElement();
  return /* @__PURE__ */ reactExports.createElement(Portal, {
    element,
    appendTo: props.appendTo
  });
}));
DropdownPanel.displayName = "DropdownPanel";
function _createForOfIteratorHelper$1(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F2 = function F3() {
      };
      return { s: F2, n: function n2() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it = it.call(o);
  }, n: function n2() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it["return"] != null)
        it["return"]();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$4(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$4(o, minLen);
}
function _arrayLikeToArray$4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function ownKeys$g(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$f(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$g(Object(t2), true).forEach(function(r3) {
      _defineProperty$4(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$g(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var Dropdown = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = DropdownBase.getProps(inProps, context);
  var _React$useState = reactExports.useState(""), _React$useState2 = _slicedToArray$3(_React$useState, 2), filterState = _React$useState2[0], setFilterState = _React$useState2[1];
  var _React$useState3 = reactExports.useState(false), _React$useState4 = _slicedToArray$3(_React$useState3, 2), clicked = _React$useState4[0], setClicked = _React$useState4[1];
  var _React$useState5 = reactExports.useState(false), _React$useState6 = _slicedToArray$3(_React$useState5, 2), focusedState = _React$useState6[0], setFocusedState = _React$useState6[1];
  var _React$useState7 = reactExports.useState(-1), _React$useState8 = _slicedToArray$3(_React$useState7, 2), focusedOptionIndex = _React$useState8[0], setFocusedOptionIndex = _React$useState8[1];
  var _React$useState9 = reactExports.useState(false), _React$useState10 = _slicedToArray$3(_React$useState9, 2), overlayVisibleState = _React$useState10[0], setOverlayVisibleState = _React$useState10[1];
  var elementRef = reactExports.useRef(null);
  var overlayRef = reactExports.useRef(null);
  var firstHiddenFocusableElementOnOverlay = reactExports.useRef(null);
  var lastHiddenFocusableElementOnOverlay = reactExports.useRef(null);
  var inputRef = reactExports.useRef(props.inputRef);
  var focusInputRef = reactExports.useRef(props.focusInputRef);
  var virtualScrollerRef = reactExports.useRef(null);
  var searchTimeout = reactExports.useRef(null);
  var searchValue = reactExports.useRef(null);
  reactExports.useRef(null);
  var isLazy = props.virtualScrollerOptions && props.virtualScrollerOptions.lazy;
  var hasFilter = ObjectUtils.isNotEmpty(filterState);
  var appendTo = props.appendTo || context && context.appendTo || PrimeReact$2.appendTo;
  var _DropdownBase$setMeta = DropdownBase.setMetaData(_objectSpread$f(_objectSpread$f({
    props
  }, props.__parentMetadata), {}, {
    state: {
      filter: filterState,
      focused: focusedState,
      overlayVisible: overlayVisibleState
    }
  })), ptm = _DropdownBase$setMeta.ptm, cx = _DropdownBase$setMeta.cx, sx = _DropdownBase$setMeta.sx, isUnstyled = _DropdownBase$setMeta.isUnstyled;
  useHandleStyle(DropdownBase.css.styles, isUnstyled, {
    name: "dropdown"
  });
  var _useOverlayListener = useOverlayListener({
    target: elementRef,
    overlay: overlayRef,
    listener: function listener(event, _ref3) {
      var type = _ref3.type, valid = _ref3.valid;
      if (valid) {
        type === "outside" ? !isClearClicked(event) && hide() : hide();
      }
    },
    when: overlayVisibleState
  }), _useOverlayListener2 = _slicedToArray$3(_useOverlayListener, 2), bindOverlayListener = _useOverlayListener2[0], unbindOverlayListener = _useOverlayListener2[1];
  var getVisibleOptions = function getVisibleOptions2() {
    if (hasFilter && !isLazy) {
      var filterValue = filterState.trim().toLocaleLowerCase(props.filterLocale);
      var searchFields = props.filterBy ? props.filterBy.split(",") : [props.optionLabel || "label"];
      if (props.optionGroupLabel) {
        var filteredGroups = [];
        var _iterator = _createForOfIteratorHelper$1(props.options), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var optgroup = _step.value;
            var filteredSubOptions = FilterService.filter(getOptionGroupChildren(optgroup), searchFields, filterValue, props.filterMatchMode, props.filterLocale);
            if (filteredSubOptions && filteredSubOptions.length) {
              filteredGroups.push(_objectSpread$f(_objectSpread$f({}, optgroup), _defineProperty$4({}, "".concat(props.optionGroupChildren), filteredSubOptions)));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return filteredGroups;
      } else {
        return FilterService.filter(props.options, searchFields, filterValue, props.filterMatchMode, props.filterLocale);
      }
    } else {
      return props.options;
    }
  };
  var onFirstHiddenFocus = function onFirstHiddenFocus2(event) {
    var focusableEl = event.relatedTarget === focusInputRef.current ? DomHandler.getFirstFocusableElement(overlayRef.current, ':not([data-p-hidden-focusable="true"])') : focusInputRef.current;
    DomHandler.focus(focusableEl);
  };
  var onLastHiddenFocus = function onLastHiddenFocus2(event) {
    var focusableEl = event.relatedTarget === focusInputRef.current ? DomHandler.getLastFocusableElement(overlayRef.current, ':not([data-p-hidden-focusable="true"])') : focusInputRef.current;
    DomHandler.focus(focusableEl);
  };
  var isClearClicked = function isClearClicked2(event) {
    return DomHandler.isAttributeEquals(event.target, "data-pc-section", "clearicon") || DomHandler.isAttributeEquals(event.target.parentElement || event.target, "data-pc-section", "filterclearicon");
  };
  var _onClick = function onClick(event) {
    if (props.disabled || props.loading) {
      return;
    }
    props.onClick && props.onClick(event);
    if (event.defaultPrevented) {
      return;
    }
    if (isClearClicked(event) || event.target.tagName === "INPUT") {
      return;
    } else if (!overlayRef.current || !(overlayRef.current && overlayRef.current.contains(event.target))) {
      DomHandler.focus(focusInputRef.current);
      overlayVisibleState ? hide() : show();
    }
    setClicked(true);
  };
  var onInputFocus = function onInputFocus2(event) {
    if (props.showOnFocus && !overlayVisibleState) {
      show();
    }
    setFocusedState(true);
    props.onFocus && props.onFocus(event);
  };
  var onInputBlur = function onInputBlur2(event) {
    setFocusedState(false);
    if (props.onBlur) {
      setTimeout(function() {
        var currentValue = inputRef.current ? inputRef.current.value : void 0;
        props.onBlur({
          originalEvent: event.originalEvent,
          value: currentValue,
          stopPropagation: function stopPropagation() {
            event.originalEvent.stopPropagation();
          },
          preventDefault: function preventDefault() {
            event.originalEvent.preventDefault();
          },
          target: {
            name: props.name,
            id: props.id,
            value: currentValue
          }
        });
      }, 200);
    }
  };
  var onOptionSelect = function onOptionSelect2(event, option) {
    var isHide = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var value = getOptionValue4(option);
    selectItem({
      originalEvent: event,
      option: value
    });
    isHide && hide();
  };
  var onPanelClick = function onPanelClick2(event) {
    OverlayService.emit("overlay-click", {
      originalEvent: event,
      target: elementRef.current
    });
  };
  var onInputKeyDown = function onInputKeyDown2(event) {
    if (props.disabled || DomHandler.isAndroid()) {
      event.preventDefault();
      return;
    }
    var metaKey = event.metaKey || event.ctrlKey;
    switch (event.code) {
      case "ArrowDown":
        onArrowDownKey(event);
        break;
      case "ArrowUp":
        onArrowUpKey(event);
        break;
      case "ArrowLeft":
      case "ArrowRight":
        onArrowLeftKey(event, props.editable);
        break;
      case "Home":
        onHomeKey(event);
        break;
      case "End":
        onEndKey(event);
        break;
      case "PageDown":
        onPageDownKey(event);
        break;
      case "PageUp":
        onPageUpKey(event);
        break;
      case "Space":
        onSpaceKey(event, props.editable);
        break;
      case "NumpadEnter":
      case "Enter":
        onEnterKey(event);
        break;
      case "Escape":
        onEscapeKey(event);
        break;
      case "Tab":
        onTabKey(event);
        break;
      case "Backspace":
        onBackspaceKey(event, props.editable);
        break;
      case "ShiftLeft":
      case "ShiftRight":
        break;
      default:
        if (!metaKey && ObjectUtils.isPrintableCharacter(event.key)) {
          !overlayVisibleState && show();
          !props.editable && searchOptions(event, event.key);
        }
        break;
    }
    setClicked(false);
  };
  var onFilterInputKeyDown = function onFilterInputKeyDown2(event) {
    switch (event.code) {
      case "ArrowDown":
        onArrowDownKey(event);
        break;
      case "ArrowUp":
        onArrowUpKey(event);
        break;
      case "ArrowLeft":
      case "ArrowRight":
        onArrowLeftKey(event, true);
        break;
      case "Escape":
      case "Enter":
        onEnterKey(event);
        event.preventDefault();
        break;
    }
  };
  var hasFocusableElements = function hasFocusableElements2() {
    return DomHandler.getFocusableElements(overlayRef.current, ':not([data-p-hidden-focusable="true"])').length > 0;
  };
  var isOptionMatched = function isOptionMatched2(option) {
    var _getOptionLabel;
    return isValidOption(option) && ((_getOptionLabel = getOptionLabel4(option)) === null || _getOptionLabel === void 0 ? void 0 : _getOptionLabel.toLocaleLowerCase(props.filterLocale).startsWith(searchValue.current.toLocaleLowerCase(props.filterLocale)));
  };
  var isValidOption = function isValidOption2(option) {
    return ObjectUtils.isNotEmpty(option) && !(isOptionDisabled3(option) || isOptionGroup(option));
  };
  var hasSelectedOption = function hasSelectedOption2() {
    return ObjectUtils.isNotEmpty(props.value);
  };
  var isValidSelectedOption = function isValidSelectedOption2(option) {
    return isValidOption(option) && isSelected(option);
  };
  var findSelectedOptionIndex = function findSelectedOptionIndex2() {
    return hasSelectedOption ? visibleOptions.findIndex(function(option) {
      return isValidSelectedOption(option);
    }) : -1;
  };
  var findFirstFocusedOptionIndex = function findFirstFocusedOptionIndex2() {
    var selectedIndex = findSelectedOptionIndex();
    return selectedIndex < 0 ? findFirstOptionIndex() : selectedIndex;
  };
  var searchOptions = function searchOptions2(event, _char) {
    searchValue.current = (searchValue.current || "") + _char;
    var optionIndex = -1;
    var matched = false;
    if (ObjectUtils.isNotEmpty(searchValue.current)) {
      if (focusedOptionIndex !== -1) {
        optionIndex = visibleOptions.slice(focusedOptionIndex).findIndex(function(option) {
          return isOptionMatched(option);
        });
        optionIndex = optionIndex === -1 ? visibleOptions.slice(0, focusedOptionIndex).findIndex(function(option) {
          return isOptionMatched(option);
        }) : optionIndex + focusedOptionIndex;
      } else {
        optionIndex = visibleOptions.findIndex(function(option) {
          return isOptionMatched(option);
        });
      }
      if (optionIndex !== -1) {
        matched = true;
      }
      if (optionIndex === -1 && focusedOptionIndex === -1) {
        optionIndex = findFirstFocusedOptionIndex();
      }
      if (optionIndex !== -1) {
        changeFocusedOptionIndex(event, optionIndex);
      }
    }
    if (searchTimeout.current) {
      clearTimeout(searchTimeout.current);
    }
    searchTimeout.current = setTimeout(function() {
      searchValue.current = "";
      searchTimeout.current = null;
    }, 500);
    return matched;
  };
  var findLastFocusedOptionIndex = function findLastFocusedOptionIndex2() {
    var selectedIndex = findSelectedOptionIndex();
    return selectedIndex < 0 ? findLastOptionIndex() : selectedIndex;
  };
  var findFirstOptionIndex = function findFirstOptionIndex2() {
    return visibleOptions.findIndex(function(option) {
      return isValidOption(option);
    });
  };
  var findLastOptionIndex = function findLastOptionIndex2() {
    return ObjectUtils.findLastIndex(visibleOptions, function(option) {
      return isValidOption(option);
    });
  };
  var findNextOptionIndex = function findNextOptionIndex2(index2) {
    var matchedOptionIndex = index2 < visibleOptions.length - 1 ? visibleOptions.slice(index2 + 1).findIndex(function(option) {
      return isValidOption(option);
    }) : -1;
    return matchedOptionIndex > -1 ? matchedOptionIndex + index2 + 1 : index2;
  };
  var findPrevOptionIndex = function findPrevOptionIndex2(index2) {
    var matchedOptionIndex = index2 > 0 ? ObjectUtils.findLastIndex(visibleOptions.slice(0, index2), function(option) {
      return isValidOption(option);
    }) : -1;
    return matchedOptionIndex > -1 ? matchedOptionIndex : index2;
  };
  var changeFocusedOptionIndex = function changeFocusedOptionIndex2(event, index2) {
    if (focusedOptionIndex !== index2) {
      setFocusedOptionIndex(index2);
      if (props.selectOnFocus) {
        onOptionSelect(event, visibleOptions[index2], false);
      }
    }
  };
  var onArrowDownKey = function onArrowDownKey2(event) {
    if (!overlayVisibleState) {
      show();
      props.editable && changeFocusedOptionIndex(event, findSelectedOptionIndex());
    } else {
      var optionIndex = focusedOptionIndex !== -1 ? findNextOptionIndex(focusedOptionIndex) : clicked ? findFirstOptionIndex() : findFirstFocusedOptionIndex();
      changeFocusedOptionIndex(event, optionIndex);
    }
    event.preventDefault();
  };
  var onArrowUpKey = function onArrowUpKey2(event) {
    var pressedInInputText = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (event.altKey && !pressedInInputText) {
      if (focusedOptionIndex !== -1) {
        onOptionSelect(event, visibleOptions[focusedOptionIndex]);
      }
      state.overlayVisible && hide();
      event.preventDefault();
    } else {
      var optionIndex = focusedOptionIndex !== -1 ? findPrevOptionIndex(focusedOptionIndex) : clicked ? findLastOptionIndex() : findLastFocusedOptionIndex();
      changeFocusedOptionIndex(event, optionIndex);
      !overlayVisibleState && show();
      event.preventDefault();
    }
  };
  var onArrowLeftKey = function onArrowLeftKey2(event) {
    var pressedInInputText = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    pressedInInputText && setFocusedOptionIndex(-1);
  };
  var onHomeKey = function onHomeKey2(event) {
    var pressedInInputText = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (pressedInInputText) {
      event.currentTarget.setSelectionRange(0, 0);
      setFocusedOptionIndex(-1);
    } else {
      changeFocusedOptionIndex(event, findFirstOptionIndex());
      !overlayVisibleState && show();
    }
    event.preventDefault();
  };
  var onEndKey = function onEndKey2(event) {
    var pressedInInputText = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (pressedInInputText) {
      var target = event.currentTarget;
      var len = target.value.length;
      target.setSelectionRange(len, len);
      setFocusedOptionIndex(-1);
    } else {
      changeFocusedOptionIndex(event, findLastOptionIndex());
      !overlayVisibleState && show();
    }
    event.preventDefault();
  };
  var onPageUpKey = function onPageUpKey2(event) {
    event.preventDefault();
  };
  var onPageDownKey = function onPageDownKey2(event) {
    event.preventDefault();
  };
  var onSpaceKey = function onSpaceKey2(event) {
    var pressedInInputText = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    !pressedInInputText && onEnterKey(event);
  };
  var onEnterKey = function onEnterKey2(event) {
    if (!overlayVisibleState) {
      setFocusedOptionIndex(-1);
      onArrowDownKey(event);
    } else {
      if (focusedOptionIndex !== -1) {
        onOptionSelect(event, visibleOptions[focusedOptionIndex]);
      }
      hide();
    }
    event.preventDefault();
  };
  var onEscapeKey = function onEscapeKey2(event) {
    overlayVisibleState && hide();
    event.preventDefault();
  };
  var onTabKey = function onTabKey2(event) {
    var pressedInInputText = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (!pressedInInputText) {
      if (overlayVisibleState && !hasFocusableElements()) {
        DomHandler.focus(firstHiddenFocusableElementOnOverlay.current);
        event.preventDefault();
      } else {
        if (focusedOptionIndex !== -1) {
          onOptionSelect(event, visibleOptions[focusedOptionIndex]);
        }
        overlayVisibleState && hide();
      }
    }
  };
  var onBackspaceKey = function onBackspaceKey2(event) {
    var pressedInInputText = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (pressedInInputText) {
      !overlayVisibleState && show();
    }
  };
  var onEditableInputChange = function onEditableInputChange2(event) {
    !overlayVisibleState && show();
    var searchIndex = null;
    if (event.target.value) {
      searchIndex = visibleOptions.findIndex(function(item2) {
        return item2.name.toLocaleLowerCase().startsWith(event.target.value.toLocaleLowerCase());
      });
    }
    setFocusedOptionIndex(searchIndex);
    if (props.onChange) {
      props.onChange({
        originalEvent: event.originalEvent,
        value: event.target.value,
        stopPropagation: function stopPropagation() {
          event.originalEvent.stopPropagation();
        },
        preventDefault: function preventDefault() {
          event.originalEvent.preventDefault();
        },
        target: {
          name: props.name,
          id: props.id,
          value: event.target.value
        }
      });
    }
  };
  var onEditableInputFocus = function onEditableInputFocus2(event) {
    setFocusedState(true);
    hide();
    props.onFocus && props.onFocus(event);
  };
  var onOptionClick = function onOptionClick2(event) {
    var option = event.option;
    if (!option.disabled) {
      selectItem(event);
      DomHandler.focus(focusInputRef.current);
    }
    hide();
  };
  var onFilterInputChange = function onFilterInputChange2(event) {
    var filter2 = event.target.value;
    setFilterState(filter2);
    if (props.onFilter) {
      props.onFilter({
        originalEvent: event,
        filter: filter2
      });
    }
  };
  var onFilterClearIconClick = function onFilterClearIconClick2(callback2) {
    resetFilter(callback2);
  };
  var resetFilter = function resetFilter2(callback2) {
    setFilterState("");
    props.onFilter && props.onFilter({
      filter: ""
    });
    callback2 && callback2();
  };
  var clear = function clear2(event) {
    if (props.onChange) {
      props.onChange({
        originalEvent: event,
        value: void 0,
        stopPropagation: function stopPropagation() {
          event.stopPropagation();
        },
        preventDefault: function preventDefault() {
          event.preventDefault();
        },
        target: {
          name: props.name,
          id: props.id,
          value: void 0
        }
      });
    }
    if (props.filter) {
      resetFilter();
    }
    updateEditableLabel();
  };
  var selectItem = function selectItem2(event) {
    if (selectedOption !== event.option) {
      updateEditableLabel(event.option);
      var optionValue = getOptionValue4(event.option);
      if (props.onChange) {
        props.onChange({
          originalEvent: event.originalEvent,
          value: optionValue,
          stopPropagation: function stopPropagation() {
            event.originalEvent.stopPropagation();
          },
          preventDefault: function preventDefault() {
            event.originalEvent.preventDefault();
          },
          target: {
            name: props.name,
            id: props.id,
            value: optionValue
          }
        });
      }
    }
  };
  var getSelectedOptionIndex = function getSelectedOptionIndex2(options2) {
    options2 = options2 || visibleOptions;
    if (props.value != null && options2) {
      if (props.optionGroupLabel) {
        for (var i = 0; i < options2.length; i++) {
          var selectedOptionIndex = findOptionIndexInList(props.value, getOptionGroupChildren(options2[i]));
          if (selectedOptionIndex !== -1) {
            return {
              group: i,
              option: selectedOptionIndex
            };
          }
        }
      } else {
        return findOptionIndexInList(props.value, options2);
      }
    }
    return -1;
  };
  var equalityKey = function equalityKey2() {
    return props.optionValue ? null : props.dataKey;
  };
  var findOptionIndexInList = function findOptionIndexInList2(value, list2) {
    var key = equalityKey();
    return list2.findIndex(function(item2) {
      return ObjectUtils.equals(value, getOptionValue4(item2), key);
    });
  };
  var isSelected = function isSelected2(option) {
    return ObjectUtils.equals(props.value, getOptionValue4(option), equalityKey());
  };
  var show = function show2() {
    setFocusedOptionIndex(focusedOptionIndex !== -1 ? focusedOptionIndex : props.autoOptionFocus ? findFirstFocusedOptionIndex() : props.editable ? -1 : findSelectedOptionIndex());
    setOverlayVisibleState(true);
  };
  var hide = function hide2() {
    setOverlayVisibleState(false);
    setClicked(false);
  };
  var onFocus2 = function onFocus3() {
    if (props.editable) {
      DomHandler.focus(inputRef.current);
    }
  };
  var onOverlayEnter = function onOverlayEnter2(callback2) {
    ZIndexUtils.set("overlay", overlayRef.current, context && context.autoZIndex || PrimeReact$2.autoZIndex, context && context.zIndex["overlay"] || PrimeReact$2.zIndex["overlay"]);
    DomHandler.addStyles(overlayRef.current, {
      position: "absolute",
      top: "0",
      left: "0"
    });
    alignOverlay();
    callback2 && callback2();
  };
  var onOverlayEntered = function onOverlayEntered2(callback2) {
    callback2 && callback2();
    bindOverlayListener();
    props.onShow && props.onShow();
  };
  var onOverlayExit = function onOverlayExit2() {
    unbindOverlayListener();
  };
  var onOverlayExited = function onOverlayExited2() {
    if (props.filter && props.resetFilterOnHide) {
      resetFilter();
    }
    ZIndexUtils.clear(overlayRef.current);
    props.onHide && props.onHide();
  };
  var alignOverlay = function alignOverlay2() {
    DomHandler.alignOverlay(overlayRef.current, inputRef.current.parentElement, props.appendTo || context && context.appendTo || PrimeReact$2.appendTo);
  };
  var scrollInView = function scrollInView2() {
    var highlightItem = DomHandler.findSingle(overlayRef.current, 'li[data-p-highlight="true"]');
    if (highlightItem && highlightItem.scrollIntoView) {
      highlightItem.scrollIntoView({
        block: "nearest",
        inline: "nearest"
      });
    }
  };
  var updateEditableLabel = function updateEditableLabel2(option) {
    if (inputRef.current) {
      inputRef.current.value = option ? getOptionLabel4(option) : props.value || "";
    }
  };
  var getOptionLabel4 = function getOptionLabel5(option) {
    return props.optionLabel ? ObjectUtils.resolveFieldData(option, props.optionLabel) : option && option["label"] !== void 0 ? option["label"] : option;
  };
  var getOptionValue4 = function getOptionValue5(option) {
    return props.optionValue ? ObjectUtils.resolveFieldData(option, props.optionValue) : option && option["value"] !== void 0 ? option["value"] : option;
  };
  var getOptionRenderKey = function getOptionRenderKey2(option) {
    return props.dataKey ? ObjectUtils.resolveFieldData(option, props.dataKey) : getOptionLabel4(option);
  };
  var isOptionGroup = function isOptionGroup2(option) {
    return props.optionGroupLabel && option.optionGroup && option.group;
  };
  var isOptionDisabled3 = function isOptionDisabled4(option) {
    if (props.optionDisabled) {
      return ObjectUtils.isFunction(props.optionDisabled) ? props.optionDisabled(option) : ObjectUtils.resolveFieldData(option, props.optionDisabled);
    }
    return option && option["disabled"] !== void 0 ? option["disabled"] : false;
  };
  var getOptionGroupRenderKey = function getOptionGroupRenderKey2(optionGroup) {
    return ObjectUtils.resolveFieldData(optionGroup, props.optionGroupLabel);
  };
  var getOptionGroupLabel = function getOptionGroupLabel2(optionGroup) {
    return ObjectUtils.resolveFieldData(optionGroup, props.optionGroupLabel);
  };
  var getOptionGroupChildren = function getOptionGroupChildren2(optionGroup) {
    return ObjectUtils.resolveFieldData(optionGroup, props.optionGroupChildren);
  };
  var updateInputField = function updateInputField2() {
    if (props.editable && inputRef.current) {
      var label = selectedOption ? getOptionLabel4(selectedOption) : null;
      var value = label || props.value || "";
      inputRef.current.value = value;
    }
  };
  var getSelectedOption = function getSelectedOption2() {
    var index2 = getSelectedOptionIndex(props.options);
    return index2 !== -1 ? props.optionGroupLabel ? getOptionGroupChildren(props.options[index2.group])[index2.option] : props.options[index2] : null;
  };
  reactExports.useImperativeHandle(ref, function() {
    return {
      props,
      show,
      hide,
      clear,
      focus: function focus() {
        return DomHandler.focus(focusInputRef.current);
      },
      getElement: function getElement() {
        return elementRef.current;
      },
      getOverlay: function getOverlay() {
        return overlayRef.current;
      },
      getInput: function getInput() {
        return inputRef.current;
      },
      getFocusInput: function getFocusInput() {
        return focusInputRef.current;
      },
      getVirtualScroller: function getVirtualScroller() {
        return virtualScrollerRef.current;
      }
    };
  });
  reactExports.useEffect(function() {
    ObjectUtils.combinedRefs(inputRef, props.inputRef);
    ObjectUtils.combinedRefs(focusInputRef, props.focusInputRef);
  }, [inputRef, props.inputRef, focusInputRef, props.focusInputRef]);
  useMountEffect(function() {
    if (props.autoFocus) {
      DomHandler.focus(focusInputRef.current, props.autoFocus);
    }
    alignOverlay();
  });
  useUpdateEffect(function() {
    if (overlayVisibleState && props.value) {
      scrollInView();
    }
  }, [overlayVisibleState, props.value]);
  useUpdateEffect(function() {
    if (overlayVisibleState && filterState && props.filter) {
      alignOverlay();
    }
  }, [overlayVisibleState, filterState, props.filter]);
  useUpdateEffect(function() {
    if (filterState && (!props.options || props.options.length === 0)) {
      setFilterState("");
    }
    updateInputField();
    if (inputRef.current) {
      inputRef.current.selectedIndex = 1;
    }
  });
  useUnmountEffect(function() {
    ZIndexUtils.clear(overlayRef.current);
  });
  var createHiddenSelect = function createHiddenSelect2() {
    var option = {
      value: "",
      label: props.placeholder
    };
    if (selectedOption) {
      var optionValue = getOptionValue4(selectedOption);
      option = {
        value: _typeof$4(optionValue) === "object" ? props.options.findIndex(function(o) {
          return o === optionValue;
        }) : optionValue,
        label: getOptionLabel4(selectedOption)
      };
    }
    var hiddenSelectedMessageProps = mergeProps2({
      className: "p-hidden-accessible p-dropdown-hidden-select"
    }, ptm("hiddenSelectedMessage"));
    var selectProps = mergeProps2({
      ref: inputRef,
      required: props.required,
      defaultValue: option.value,
      name: props.name,
      tabIndex: -1,
      "aria-hidden": "true"
    }, ptm("select"));
    var optionProps = mergeProps2({
      value: option.value
    }, ptm("option"));
    return /* @__PURE__ */ reactExports.createElement("div", hiddenSelectedMessageProps, /* @__PURE__ */ reactExports.createElement("select", selectProps, /* @__PURE__ */ reactExports.createElement("option", optionProps, option.label)));
  };
  var createKeyboardHelper = function createKeyboardHelper2() {
    var hiddenSelectedMessageProps = mergeProps2({
      className: "p-hidden-accessible"
    }, ptm("hiddenSelectedMessage"));
    var inputProps = mergeProps2(_objectSpread$f({
      ref: focusInputRef,
      id: props.inputId,
      type: "text",
      readOnly: true,
      "aria-haspopup": "listbox",
      onFocus: onInputFocus,
      onBlur: onInputBlur,
      onKeyDown: onInputKeyDown,
      disabled: props.disabled,
      tabIndex: !props.disabled ? props.tabIndex || 0 : -1
    }, ariaProps), ptm("input"));
    return /* @__PURE__ */ reactExports.createElement("div", hiddenSelectedMessageProps, /* @__PURE__ */ reactExports.createElement("input", inputProps));
  };
  var createLabel = function createLabel2() {
    var label = ObjectUtils.isNotEmpty(selectedOption) ? getOptionLabel4(selectedOption) : null;
    if (props.editable) {
      var value = label || props.value || "";
      var inputProps = mergeProps2(_objectSpread$f({
        ref: inputRef,
        type: "text",
        defaultValue: value,
        className: cx("input", {
          label
        }),
        disabled: props.disabled,
        placeholder: props.placeholder,
        maxLength: props.maxLength,
        onInput: onEditableInputChange,
        onFocus: onEditableInputFocus,
        onKeyDown: onInputKeyDown,
        onBlur: onInputBlur,
        tabIndex: !props.disabled ? props.tabIndex || 0 : -1,
        "aria-haspopup": "listbox"
      }, ariaProps), ptm("input"));
      return /* @__PURE__ */ reactExports.createElement("input", inputProps);
    } else {
      var content = props.valueTemplate ? ObjectUtils.getJSXElement(props.valueTemplate, selectedOption, props) : label || props.placeholder || "empty";
      var _inputProps = mergeProps2({
        ref: inputRef,
        className: cx("input", {
          label
        }),
        tabIndex: "-1"
      }, ptm("input"));
      return /* @__PURE__ */ reactExports.createElement("span", _inputProps, content);
    }
  };
  var createClearIcon = function createClearIcon2() {
    if (props.value != null && props.showClear && !props.disabled) {
      var clearIconProps = mergeProps2({
        className: cx("clearIcon"),
        onPointerUp: clear
      }, ptm("clearIcon"));
      var icon2 = props.clearIcon || /* @__PURE__ */ reactExports.createElement(TimesIcon, clearIconProps);
      return IconUtils.getJSXIcon(icon2, _objectSpread$f({}, clearIconProps), {
        props
      });
    }
    return null;
  };
  var createLoadingIcon = function createLoadingIcon2() {
    var loadingIconProps = mergeProps2({
      className: cx("loadingIcon"),
      "data-pr-overlay-visible": overlayVisibleState
    }, ptm("loadingIcon"));
    var icon2 = props.loadingIcon || /* @__PURE__ */ reactExports.createElement(SpinnerIcon, {
      spin: true
    });
    var loadingIcon2 = IconUtils.getJSXIcon(icon2, _objectSpread$f({}, loadingIconProps), {
      props
    });
    var ariaLabel2 = props.placeholder || props.ariaLabel;
    var loadingButtonProps = mergeProps2({
      className: cx("trigger"),
      role: "button",
      "aria-haspopup": "listbox",
      "aria-expanded": overlayVisibleState,
      "aria-label": ariaLabel2
    }, ptm("trigger"));
    return /* @__PURE__ */ reactExports.createElement("div", loadingButtonProps, loadingIcon2);
  };
  var createDropdownIcon = function createDropdownIcon2() {
    var dropdownIconProps = mergeProps2({
      className: cx("dropdownIcon"),
      "data-pr-overlay-visible": overlayVisibleState
    }, ptm("dropdownIcon"));
    var icon2 = props.dropdownIcon || /* @__PURE__ */ reactExports.createElement(ChevronDownIcon, dropdownIconProps);
    var dropdownIcon2 = IconUtils.getJSXIcon(icon2, _objectSpread$f({}, dropdownIconProps), {
      props
    });
    var ariaLabel2 = props.placeholder || props.ariaLabel;
    var triggerProps = mergeProps2({
      className: cx("trigger"),
      role: "button",
      "aria-haspopup": "listbox",
      "aria-expanded": overlayVisibleState,
      "aria-label": ariaLabel2
    }, ptm("trigger"));
    return /* @__PURE__ */ reactExports.createElement("div", triggerProps, dropdownIcon2);
  };
  var visibleOptions = getVisibleOptions();
  var selectedOption = getSelectedOption();
  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip);
  var otherProps = DropdownBase.getOtherProps(props);
  var ariaProps = ObjectUtils.reduceKeys(otherProps, DomHandler.ARIA_PROPS);
  var hiddenSelect = createHiddenSelect();
  var keyboardHelper = createKeyboardHelper();
  var labelElement = createLabel();
  var dropdownIcon = props.loading ? createLoadingIcon() : createDropdownIcon();
  var clearIcon = createClearIcon();
  var rootProps = mergeProps2({
    id: props.id,
    ref: elementRef,
    className: classNames$1(props.className, cx("root", {
      focusedState,
      overlayVisibleState
    })),
    style: props.style,
    onClick: function onClick(e2) {
      return _onClick(e2);
    },
    onMouseDown: props.onMouseDown,
    onContextMenu: props.onContextMenu,
    onFocus: onFocus2,
    "data-p-disabled": props.disabled,
    "data-p-focus": focusedState
  }, otherProps, ptm("root"));
  var firstHiddenFocusableElementProps = mergeProps2({
    ref: firstHiddenFocusableElementOnOverlay,
    role: "presentation",
    "aria-hidden": "true",
    className: "p-hidden-accessible p-hidden-focusable",
    tabIndex: "0",
    onFocus: onFirstHiddenFocus,
    "data-p-hidden-accessible": true,
    "data-p-hidden-focusable": true
  }, ptm("hiddenFirstFocusableEl"));
  var lastHiddenFocusableElementProps = mergeProps2({
    ref: lastHiddenFocusableElementOnOverlay,
    role: "presentation",
    "aria-hidden": "true",
    className: "p-hidden-accessible p-hidden-focusable",
    tabIndex: "0",
    onFocus: onLastHiddenFocus,
    "data-p-hidden-accessible": true,
    "data-p-hidden-focusable": true
  }, ptm("hiddenLastFocusableEl"));
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("div", rootProps, keyboardHelper, hiddenSelect, labelElement, clearIcon, dropdownIcon, /* @__PURE__ */ reactExports.createElement(DropdownPanel, _extends$c({
    hostName: "Dropdown",
    ref: overlayRef,
    visibleOptions,
    virtualScrollerRef
  }, props, {
    appendTo,
    cx,
    filterValue: filterState,
    focusedOptionIndex,
    getOptionGroupChildren,
    getOptionGroupLabel,
    getOptionGroupRenderKey,
    getOptionLabel: getOptionLabel4,
    getOptionRenderKey,
    getSelectedOptionIndex,
    hasFilter,
    "in": overlayVisibleState,
    isOptionDisabled: isOptionDisabled3,
    isSelected,
    onClick: onPanelClick,
    onEnter: onOverlayEnter,
    onEntered: onOverlayEntered,
    onExit: onOverlayExit,
    onExited: onOverlayExited,
    onFilterClearIconClick,
    onFilterInputChange,
    onFilterInputKeyDown,
    onOptionClick,
    ptm,
    resetFilter,
    setFocusedOptionIndex,
    firstFocusableElement: /* @__PURE__ */ reactExports.createElement("span", firstHiddenFocusableElementProps),
    lastFocusableElement: /* @__PURE__ */ reactExports.createElement("span", lastHiddenFocusableElementProps),
    sx
  }))), hasTooltip && /* @__PURE__ */ reactExports.createElement(Tooltip, _extends$c({
    target: elementRef,
    content: props.tooltip,
    pt: ptm("tooltip")
  }, props.tooltipOptions)));
}));
Dropdown.displayName = "Dropdown";
function _arrayWithHoles$2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$2(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _arrayLikeToArray$3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray$3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$3(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$3(o, minLen);
}
function _nonIterableRest$2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$2(arr, i) {
  return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _unsupportedIterableToArray$3(arr, i) || _nonIterableRest$2();
}
function _typeof$3(o) {
  "@babel/helpers - typeof";
  return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$3(o);
}
function _toPrimitive$2(input2, hint) {
  if (_typeof$3(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$3(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$2(arg) {
  var key = _toPrimitive$2(arg, "string");
  return _typeof$3(key) === "symbol" ? key : String(key);
}
function _defineProperty$3(obj, key, value) {
  key = _toPropertyKey$2(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var classes$3 = {
  root: "p-paginator p-component",
  left: "p-paginator-left-content",
  end: "p-paginator-right-content",
  firstPageIcon: "p-paginator-icon",
  firstPageButton: function firstPageButton(_ref3) {
    var disabled = _ref3.disabled;
    return classNames$1("p-paginator-first p-paginator-element p-link", {
      "p-disabled": disabled
    });
  },
  prevPageIcon: "p-paginator-icon",
  prevPageButton: function prevPageButton(_ref22) {
    var disabled = _ref22.disabled;
    return classNames$1("p-paginator-prev p-paginator-element p-link", {
      "p-disabled": disabled
    });
  },
  nextPageIcon: "p-paginator-icon",
  nextPageButton: function nextPageButton(_ref3) {
    var disabled = _ref3.disabled;
    return classNames$1("p-paginator-next p-paginator-element p-link", {
      "p-disabled": disabled
    });
  },
  lastPageIcon: "p-paginator-icon",
  lastPageButton: function lastPageButton(_ref4) {
    var disabled = _ref4.disabled;
    return classNames$1("p-paginator-last p-paginator-element p-link", {
      "p-disabled": disabled
    });
  },
  pageButton: function pageButton(_ref5) {
    var pageLink = _ref5.pageLink, startPageInView = _ref5.startPageInView, endPageInView = _ref5.endPageInView, page = _ref5.page;
    return classNames$1("p-paginator-page p-paginator-element p-link", {
      "p-paginator-page-start": pageLink === startPageInView,
      "p-paginator-page-end": pageLink === endPageInView,
      "p-highlight": pageLink - 1 === page
    });
  },
  pages: "p-paginator-pages"
};
var styles$3 = "\n@layer primereact {\n    .p-paginator {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-wrap: wrap;\n    }\n    \n    .p-paginator-left-content {\n        margin-right: auto;\n    }\n    \n    .p-paginator-right-content {\n        margin-left: auto;\n    }\n    \n    .p-paginator-page,\n    .p-paginator-next,\n    .p-paginator-last,\n    .p-paginator-first,\n    .p-paginator-prev,\n    .p-paginator-current {\n        cursor: pointer;\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        line-height: 1;\n        user-select: none;\n        overflow: hidden;\n        position: relative;\n    }\n    \n    .p-paginator-element:focus {\n        z-index: 1;\n        position: relative;\n    }\n}\n";
var PaginatorBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Paginator",
    __parentMetadata: null,
    totalRecords: 0,
    rows: 0,
    first: 0,
    pageLinkSize: 5,
    rowsPerPageOptions: null,
    alwaysShow: true,
    style: null,
    className: null,
    template: "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
    onPageChange: null,
    leftContent: null,
    rightContent: null,
    dropdownAppendTo: null,
    currentPageReportTemplate: "({currentPage} of {totalPages})",
    children: void 0
  },
  css: {
    classes: classes$3,
    styles: styles$3
  }
});
var CurrentPageReportBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "CurrentPageReport",
    pageCount: null,
    page: null,
    first: null,
    rows: null,
    totalRecords: null,
    reportTemplate: "({currentPage} of {totalPages})",
    template: null,
    children: void 0
  }
});
var FirstPageLinkBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "FirstPageLink",
    disabled: false,
    onClick: null,
    template: null,
    firstPageLinkIcon: null,
    children: void 0
  }
});
var JumpToPageInputBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "JumpToPageInput",
    page: null,
    rows: null,
    pageCount: null,
    disabled: false,
    template: null,
    onChange: null,
    children: void 0,
    metaData: null,
    ptm: null
  }
});
var LastPageLinkBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "LastPageLink",
    disabled: false,
    onClick: null,
    template: null,
    lastPageLinkIcon: null,
    children: void 0
  }
});
var NextPageLinkBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "NextPageLink",
    disabled: false,
    onClick: null,
    template: null,
    nextPageLinkIcon: null,
    children: void 0
  }
});
var PageLinksBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "PageLinks",
    value: null,
    page: null,
    rows: null,
    pageCount: null,
    links: null,
    template: null,
    children: void 0
  }
});
var PrevPageLinkBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "PrevPageLink",
    disabled: false,
    onClick: null,
    template: null,
    prevPageLinkIcon: null,
    children: void 0
  }
});
var RowsPerPageDropdownBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "RowsPerPageDropdown",
    options: null,
    value: null,
    page: null,
    pageCount: null,
    totalRecords: 0,
    appendTo: null,
    onChange: null,
    template: null,
    disabled: false,
    children: void 0
  }
});
function ownKeys$5$1(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$5$1(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$5$1(Object(t2), true).forEach(function(r3) {
      _defineProperty$3(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$5$1(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var CurrentPageReport = /* @__PURE__ */ reactExports.memo(function(inProps) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = CurrentPageReportBase.getProps(inProps, context);
  var report = {
    currentPage: props.page + 1,
    totalPages: props.pageCount,
    first: Math.min(props.first + 1, props.totalRecords),
    last: Math.min(props.first + props.rows, props.totalRecords),
    rows: props.rows,
    totalRecords: props.totalRecords
  };
  var text = props.reportTemplate.replace("{currentPage}", report.currentPage).replace("{totalPages}", report.totalPages).replace("{first}", report.first).replace("{last}", report.last).replace("{rows}", report.rows).replace("{totalRecords}", report.totalRecords);
  var currentProps = mergeProps2({
    "aria-live": "polite",
    className: "p-paginator-current"
  }, props.ptm("current", {
    hostName: props.hostName
  }));
  var element = /* @__PURE__ */ reactExports.createElement("span", currentProps, text);
  if (props.template) {
    var defaultOptions = _objectSpread$5$1(_objectSpread$5$1({}, report), {
      ariaLive: "polite",
      className: "p-paginator-current",
      element,
      props
    });
    return ObjectUtils.getJSXElement(props.template, defaultOptions);
  }
  return element;
});
CurrentPageReport.displayName = "CurrentPageReport";
function ownKeys$4$1(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$4$1(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$4$1(Object(t2), true).forEach(function(r3) {
      _defineProperty$3(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$4$1(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var FirstPageLink = /* @__PURE__ */ reactExports.memo(function(inProps) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = FirstPageLinkBase.getProps(inProps, context);
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(key) {
    return ptm(key, {
      hostName: props.hostName,
      context: {
        disabled: props.disabled
      }
    });
  };
  var className = classNames$1("p-paginator-first p-paginator-element p-link", {
    "p-disabled": props.disabled
  });
  var iconClassName = "p-paginator-icon";
  var firstPageIconProps = mergeProps2({
    className: cx("firstPageIcon")
  }, getPTOptions("firstPageIcon"));
  var icon2 = props.firstPageLinkIcon || /* @__PURE__ */ reactExports.createElement(AngleDoubleLeftIcon, firstPageIconProps);
  var firstPageLinkIcon = IconUtils.getJSXIcon(icon2, _objectSpread$4$1({}, firstPageIconProps), {
    props
  });
  var firstPageButtonProps = mergeProps2({
    type: "button",
    className: cx("firstPageButton", {
      disabled: props.disabled
    }),
    onClick: props.onClick,
    disabled: props.disabled,
    "aria-label": ariaLabel$2("firstPageLabel")
  }, getPTOptions("firstPageButton"));
  var element = /* @__PURE__ */ reactExports.createElement("button", firstPageButtonProps, firstPageLinkIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null));
  if (props.template) {
    var defaultOptions = {
      onClick: props.onClick,
      className,
      iconClassName,
      disabled: props.disabled,
      element,
      props
    };
    return ObjectUtils.getJSXElement(props.template, defaultOptions);
  }
  return element;
});
FirstPageLink.displayName = "FirstPageLink";
function _defineProperties$2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey$2(descriptor.key), descriptor);
  }
}
function _createClass$2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _classCallCheck$2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var FilterMatchMode$1 = Object.freeze({
  STARTS_WITH: "startsWith",
  CONTAINS: "contains",
  NOT_CONTAINS: "notContains",
  ENDS_WITH: "endsWith",
  EQUALS: "equals",
  NOT_EQUALS: "notEquals",
  IN: "in",
  LESS_THAN: "lt",
  LESS_THAN_OR_EQUAL_TO: "lte",
  GREATER_THAN: "gt",
  GREATER_THAN_OR_EQUAL_TO: "gte",
  BETWEEN: "between",
  DATE_IS: "dateIs",
  DATE_IS_NOT: "dateIsNot",
  DATE_BEFORE: "dateBefore",
  DATE_AFTER: "dateAfter",
  CUSTOM: "custom"
});
var PrimeReact$1 = /* @__PURE__ */ _createClass$2(function PrimeReact2() {
  _classCallCheck$2(this, PrimeReact2);
});
_defineProperty$3(PrimeReact$1, "ripple", false);
_defineProperty$3(PrimeReact$1, "inputStyle", "outlined");
_defineProperty$3(PrimeReact$1, "locale", "en");
_defineProperty$3(PrimeReact$1, "appendTo", null);
_defineProperty$3(PrimeReact$1, "cssTransition", true);
_defineProperty$3(PrimeReact$1, "autoZIndex", true);
_defineProperty$3(PrimeReact$1, "hideOverlaysOnDocumentScrolling", false);
_defineProperty$3(PrimeReact$1, "nonce", null);
_defineProperty$3(PrimeReact$1, "nullSortOrder", 1);
_defineProperty$3(PrimeReact$1, "zIndex", {
  modal: 1100,
  overlay: 1e3,
  menu: 1e3,
  tooltip: 1100,
  toast: 1200
});
_defineProperty$3(PrimeReact$1, "pt", void 0);
_defineProperty$3(PrimeReact$1, "filterMatchModeOptions", {
  text: [FilterMatchMode$1.STARTS_WITH, FilterMatchMode$1.CONTAINS, FilterMatchMode$1.NOT_CONTAINS, FilterMatchMode$1.ENDS_WITH, FilterMatchMode$1.EQUALS, FilterMatchMode$1.NOT_EQUALS],
  numeric: [FilterMatchMode$1.EQUALS, FilterMatchMode$1.NOT_EQUALS, FilterMatchMode$1.LESS_THAN, FilterMatchMode$1.LESS_THAN_OR_EQUAL_TO, FilterMatchMode$1.GREATER_THAN, FilterMatchMode$1.GREATER_THAN_OR_EQUAL_TO],
  date: [FilterMatchMode$1.DATE_IS, FilterMatchMode$1.DATE_IS_NOT, FilterMatchMode$1.DATE_BEFORE, FilterMatchMode$1.DATE_AFTER]
});
_defineProperty$3(PrimeReact$1, "changeTheme", function(currentTheme, newTheme, linkElementId, callback2) {
  var _linkElement$parentNo;
  var linkElement = document.getElementById(linkElementId);
  var cloneLinkElement = linkElement.cloneNode(true);
  var newThemeUrl = linkElement.getAttribute("href").replace(currentTheme, newTheme);
  cloneLinkElement.setAttribute("id", linkElementId + "-clone");
  cloneLinkElement.setAttribute("href", newThemeUrl);
  cloneLinkElement.addEventListener("load", function() {
    linkElement.remove();
    cloneLinkElement.setAttribute("id", linkElementId);
    if (callback2) {
      callback2();
    }
  });
  (_linkElement$parentNo = linkElement.parentNode) === null || _linkElement$parentNo === void 0 || _linkElement$parentNo.insertBefore(cloneLinkElement, linkElement.nextSibling);
});
var locales$1 = {
  en: {
    startsWith: "Starts with",
    contains: "Contains",
    notContains: "Not contains",
    endsWith: "Ends with",
    equals: "Equals",
    notEquals: "Not equals",
    noFilter: "No Filter",
    filter: "Filter",
    lt: "Less than",
    lte: "Less than or equal to",
    gt: "Greater than",
    gte: "Greater than or equal to",
    dateIs: "Date is",
    dateIsNot: "Date is not",
    dateBefore: "Date is before",
    dateAfter: "Date is after",
    custom: "Custom",
    clear: "Clear",
    close: "Close",
    apply: "Apply",
    matchAll: "Match All",
    matchAny: "Match Any",
    addRule: "Add Rule",
    removeRule: "Remove Rule",
    accept: "Yes",
    reject: "No",
    choose: "Choose",
    upload: "Upload",
    cancel: "Cancel",
    completed: "Completed",
    pending: "Pending",
    fileSizeTypes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
    dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    chooseYear: "Choose Year",
    chooseMonth: "Choose Month",
    chooseDate: "Choose Date",
    prevDecade: "Previous Decade",
    nextDecade: "Next Decade",
    prevYear: "Previous Year",
    nextYear: "Next Year",
    prevMonth: "Previous Month",
    nextMonth: "Next Month",
    prevHour: "Previous Hour",
    nextHour: "Next Hour",
    prevMinute: "Previous Minute",
    nextMinute: "Next Minute",
    prevSecond: "Previous Second",
    nextSecond: "Next Second",
    prevMilliSecond: "Previous Second",
    nextMilliSecond: "Next Second",
    am: "am",
    pm: "pm",
    today: "Today",
    now: "Now",
    weekHeader: "Wk",
    firstDayOfWeek: 0,
    showMonthAfterYear: false,
    dateFormat: "mm/dd/yy",
    weak: "Weak",
    medium: "Medium",
    strong: "Strong",
    passwordPrompt: "Enter a password",
    emptyFilterMessage: "No available options",
    emptyMessage: "No results found",
    aria: {
      trueLabel: "True",
      falseLabel: "False",
      nullLabel: "Not Selected",
      star: "1 star",
      stars: "{star} stars",
      selectAll: "All items selected",
      unselectAll: "All items unselected",
      close: "Close",
      previous: "Previous",
      next: "Next",
      navigation: "Navigation",
      scrollTop: "Scroll Top",
      moveTop: "Move Top",
      moveUp: "Move Up",
      moveDown: "Move Down",
      moveBottom: "Move Bottom",
      moveToTarget: "Move to Target",
      moveToSource: "Move to Source",
      moveAllToTarget: "Move All to Target",
      moveAllToSource: "Move All to Source",
      pageLabel: "Page {page}",
      firstPageLabel: "First Page",
      lastPageLabel: "Last Page",
      nextPageLabel: "Next Page",
      previousPageLabel: "Previous Page",
      rowsPerPageLabel: "Rows per page",
      jumpToPageDropdownLabel: "Jump to Page Dropdown",
      jumpToPageInputLabel: "Jump to Page Input",
      selectRow: "Row Selected",
      unselectRow: "Row Unselected",
      expandRow: "Row Expanded",
      collapseRow: "Row Collapsed",
      showFilterMenu: "Show Filter Menu",
      hideFilterMenu: "Hide Filter Menu",
      filterOperator: "Filter Operator",
      filterConstraint: "Filter Constraint",
      editRow: "Row Edit",
      saveEdit: "Save Edit",
      cancelEdit: "Cancel Edit",
      listView: "List View",
      gridView: "Grid View",
      slide: "Slide",
      slideNumber: "{slideNumber}",
      zoomImage: "Zoom Image",
      zoomIn: "Zoom In",
      zoomOut: "Zoom Out",
      rotateRight: "Rotate Right",
      rotateLeft: "Rotate Left",
      selectLabel: "Select",
      unselectLabel: "Unselect",
      expandLabel: "Expand",
      collapseLabel: "Collapse"
    }
  }
};
function ariaLabel$1(ariaKey, options2) {
  var _locale = PrimeReact$1.locale;
  try {
    var _ariaLabel = localeOptions$1(_locale)["aria"][ariaKey];
    if (_ariaLabel) {
      for (var key in options2) {
        if (options2.hasOwnProperty(key)) {
          _ariaLabel = _ariaLabel.replace("{".concat(key, "}"), options2[key]);
        }
      }
    }
    return _ariaLabel;
  } catch (error) {
    throw new Error("The ".concat(ariaKey, " option is not found in the current locale('").concat(_locale, "')."));
  }
}
function localeOptions$1(locale) {
  var _locale = locale || PrimeReact$1.locale;
  return locales$1[_locale];
}
var JumpToPageInput = /* @__PURE__ */ reactExports.memo(function(inProps) {
  useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = JumpToPageInputBase.getProps(inProps, context);
  var ariaLabelValue = ariaLabel$1("jumpToPageInputLabel");
  var onChange2 = function onChange3(event) {
    if (props.onChange) {
      props.onChange(props.rows * (event.value - 1), props.rows);
    }
  };
  var value = props.pageCount > 0 ? props.page + 1 : 0;
  var element = /* @__PURE__ */ reactExports.createElement(InputNumber, {
    value,
    onChange: onChange2,
    className: "p-paginator-page-input",
    disabled: props.disabled,
    pt: props.ptm("JTPInput"),
    unstyled: props.unstyled,
    __parentMetadata: {
      parent: props.metaData
    },
    "aria-label": ariaLabelValue
  });
  if (props.template) {
    var defaultOptions = {
      value,
      onChange: onChange2,
      disabled: props.disabled,
      className: "p-paginator-page-input",
      "aria-label": ariaLabelValue,
      element,
      props
    };
    return ObjectUtils.getJSXElement(props.template, defaultOptions);
  }
  return element;
});
JumpToPageInput.displayName = "JumpToPageInput";
function ownKeys$3$1(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$3$1(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$3$1(Object(t2), true).forEach(function(r3) {
      _defineProperty$3(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$3$1(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var LastPageLink = /* @__PURE__ */ reactExports.memo(function(inProps) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = LastPageLinkBase.getProps(inProps, context);
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(key) {
    return ptm(key, {
      hostName: props.hostName,
      context: {
        disabled: props.disabled
      }
    });
  };
  var className = classNames$1("p-paginator-last p-paginator-element p-link", {
    "p-disabled": props.disabled
  });
  var iconClassName = "p-paginator-icon";
  var lastPageIconProps = mergeProps2({
    className: cx("lastPageIcon")
  }, getPTOptions("lastPageIcon"));
  var icon2 = props.lastPageLinkIcon || /* @__PURE__ */ reactExports.createElement(AngleDoubleRightIcon, lastPageIconProps);
  var lastPageLinkIcon = IconUtils.getJSXIcon(icon2, _objectSpread$3$1({}, lastPageIconProps), {
    props
  });
  var lastPageButtonProps = mergeProps2({
    type: "button",
    className: cx("lastPageButton", {
      disabled: props.disabled
    }),
    onClick: props.onClick,
    disabled: props.disabled,
    "aria-label": ariaLabel$2("lastPageLabel")
  }, getPTOptions("lastPageButton"));
  var element = /* @__PURE__ */ reactExports.createElement("button", lastPageButtonProps, lastPageLinkIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null));
  if (props.template) {
    var defaultOptions = {
      onClick: props.onClick,
      className,
      iconClassName,
      disabled: props.disabled,
      element,
      props
    };
    return ObjectUtils.getJSXElement(props.template, defaultOptions);
  }
  return element;
});
LastPageLink.displayName = "LastPageLink";
function ownKeys$2$1(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$2$1(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$2$1(Object(t2), true).forEach(function(r3) {
      _defineProperty$3(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$2$1(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var NextPageLink = /* @__PURE__ */ reactExports.memo(function(inProps) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = NextPageLinkBase.getProps(inProps, context);
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(key) {
    return ptm(key, {
      hostName: props.hostName,
      context: {
        disabled: props.disabled
      }
    });
  };
  var className = classNames$1("p-paginator-next p-paginator-element p-link", {
    "p-disabled": props.disabled
  });
  var iconClassName = "p-paginator-icon";
  var nextPageIconProps = mergeProps2({
    className: cx("nextPageIcon")
  }, getPTOptions("nextPageIcon"));
  var icon2 = props.nextPageLinkIcon || /* @__PURE__ */ reactExports.createElement(AngleRightIcon, nextPageIconProps);
  var nextPageLinkIcon = IconUtils.getJSXIcon(icon2, _objectSpread$2$1({}, nextPageIconProps), {
    props
  });
  var nextPageButtonProps = mergeProps2({
    type: "button",
    className: cx("nextPageButton", {
      disabled: props.disabled
    }),
    onClick: props.onClick,
    disabled: props.disabled,
    "aria-label": ariaLabel$2("nextPageLabel")
  }, getPTOptions("nextPageButton"));
  var element = /* @__PURE__ */ reactExports.createElement("button", nextPageButtonProps, nextPageLinkIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null));
  if (props.template) {
    var defaultOptions = {
      onClick: props.onClick,
      className,
      iconClassName,
      disabled: props.disabled,
      element,
      nextPageLinkIcon,
      props
    };
    return ObjectUtils.getJSXElement(props.template, defaultOptions);
  }
  return element;
});
NextPageLink.displayName = "NextPageLink";
var PageLinks = /* @__PURE__ */ reactExports.memo(function(inProps) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = PageLinksBase.getProps(inProps, context);
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(pageLink, key) {
    return ptm(key, {
      hostName: props.hostName,
      context: {
        active: pageLink - 1 === props.page
      }
    });
  };
  var onPageLinkClick = function onPageLinkClick2(event, pageLink) {
    if (props.onClick) {
      props.onClick({
        originalEvent: event,
        value: pageLink
      });
    }
    event.preventDefault();
  };
  var elements;
  if (props.value) {
    var startPageInView = props.value[0];
    var endPageInView = props.value[props.value.length - 1];
    elements = props.value.map(function(pageLink) {
      var className = classNames$1("p-paginator-page p-paginator-element p-link", {
        "p-paginator-page-start": pageLink === startPageInView,
        "p-paginator-page-end": pageLink === endPageInView,
        "p-highlight": pageLink - 1 === props.page
      });
      var pageButtonProps = mergeProps2({
        type: "button",
        onClick: function onClick(e2) {
          return onPageLinkClick(e2, pageLink);
        },
        className: cx("pageButton", {
          pageLink,
          startPageInView,
          endPageInView,
          page: props.page
        }),
        disabled: props.disabled,
        "aria-label": ariaLabel$2("pageLabel", {
          page: pageLink
        }),
        "aria-current": pageLink - 1 === props.page ? "true" : void 0
      }, getPTOptions(pageLink, "pageButton"));
      var element = /* @__PURE__ */ reactExports.createElement("button", pageButtonProps, pageLink, /* @__PURE__ */ reactExports.createElement(Ripple, null));
      if (props.template) {
        var defaultOptions = {
          onClick: function onClick(e2) {
            return onPageLinkClick(e2, pageLink);
          },
          className,
          view: {
            startPage: startPageInView - 1,
            endPage: endPageInView - 1
          },
          page: pageLink - 1,
          currentPage: props.page,
          totalPages: props.pageCount,
          ariaLabel: ariaLabel$2("pageLabel", {
            page: pageLink
          }),
          ariaCurrent: pageLink - 1 === props.page ? "true" : void 0,
          element,
          props
        };
        element = ObjectUtils.getJSXElement(props.template, defaultOptions);
      }
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, {
        key: pageLink
      }, element);
    });
  }
  var pagesProps = mergeProps2({
    className: cx("pages")
  }, ptm("pages", {
    hostName: props.hostName
  }));
  return /* @__PURE__ */ reactExports.createElement("span", pagesProps, elements);
});
PageLinks.displayName = "PageLinks";
function ownKeys$1$2(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$1$2(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$1$2(Object(t2), true).forEach(function(r3) {
      _defineProperty$3(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1$2(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var PrevPageLink = /* @__PURE__ */ reactExports.memo(function(inProps) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = PrevPageLinkBase.getProps(inProps, context);
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(key) {
    return ptm(key, {
      hostName: props.hostName,
      context: {
        disabled: props.disabled
      }
    });
  };
  var className = classNames$1("p-paginator-prev p-paginator-element p-link", {
    "p-disabled": props.disabled
  });
  var iconClassName = "p-paginator-icon";
  var prevPageIconProps = mergeProps2({
    className: cx("prevPageIcon")
  }, getPTOptions("prevPageIcon"));
  var icon2 = props.prevPageLinkIcon || /* @__PURE__ */ reactExports.createElement(AngleLeftIcon, prevPageIconProps);
  var prevPageLinkIcon = IconUtils.getJSXIcon(icon2, _objectSpread$1$2({}, prevPageIconProps), {
    props
  });
  var prevPageButtonProps = mergeProps2({
    type: "button",
    className: cx("prevPageButton", {
      disabled: props.disabled
    }),
    onClick: props.onClick,
    disabled: props.disabled,
    "aria-label": ariaLabel$2("previousPageLabel")
  }, getPTOptions("prevPageButton"));
  var element = /* @__PURE__ */ reactExports.createElement("button", prevPageButtonProps, prevPageLinkIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null));
  if (props.template) {
    var defaultOptions = {
      onClick: props.onClick,
      className,
      iconClassName,
      disabled: props.disabled,
      element,
      props
    };
    return ObjectUtils.getJSXElement(props.template, defaultOptions);
  }
  return element;
});
PrevPageLink.displayName = "PrevPageLink";
var RowsPerPageDropdown = /* @__PURE__ */ reactExports.memo(function(inProps) {
  useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = RowsPerPageDropdownBase.getProps(inProps, context);
  var hasOptions = props.options && props.options.length > 0;
  var options2 = hasOptions ? props.options.map(function(opt) {
    return {
      label: String(opt),
      value: opt
    };
  }) : [];
  var placeholderValue = localeOption("choose");
  var ariaLabelValue = ariaLabel$1("jumpToPageDropdownLabel");
  var element = hasOptions ? /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Dropdown, {
    value: props.value,
    options: options2,
    onChange: props.onChange,
    appendTo: props.appendTo,
    disabled: props.disabled,
    placeholder: placeholderValue,
    "aria-label": ariaLabelValue,
    pt: props.ptm("RPPDropdown"),
    unstyled: props.unstyled,
    __parentMetadata: {
      parent: props.metaData
    }
  })) : null;
  if (props.template) {
    var defaultOptions = {
      value: props.value,
      options: options2,
      onChange: props.onChange,
      appendTo: props.appendTo,
      currentPage: props.page,
      totalPages: props.pageCount,
      totalRecords: props.totalRecords,
      disabled: props.disabled,
      ariaLabel: ariaLabelValue,
      element,
      props
    };
    return ObjectUtils.getJSXElement(props.template, defaultOptions);
  }
  return element;
});
RowsPerPageDropdown.displayName = "RowsPerPageDropdown";
function ownKeys$f(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$e(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$f(Object(t2), true).forEach(function(r3) {
      _defineProperty$3(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$f(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var Paginator = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = PaginatorBase.getProps(inProps, context);
  var metaData = _objectSpread$e({
    props
  }, props.__parentMetadata);
  var _PaginatorBase$setMet = PaginatorBase.setMetaData(metaData), ptm = _PaginatorBase$setMet.ptm, cx = _PaginatorBase$setMet.cx, isUnstyled = _PaginatorBase$setMet.isUnstyled;
  useHandleStyle(PaginatorBase.css.styles, isUnstyled, {
    name: "paginator"
  });
  var elementRef = reactExports.useRef(null);
  var page = Math.floor(props.first / props.rows);
  var pageCount = Math.ceil(props.totalRecords / props.rows);
  var isFirstPage = page === 0;
  var isLastPage = page === pageCount - 1;
  var isEmpty = pageCount === 0;
  var calculatePageLinkBoundaries = function calculatePageLinkBoundaries2() {
    var numberOfPages = pageCount;
    var visiblePages = Math.min(props.pageLinkSize, numberOfPages);
    var start = Math.max(0, Math.ceil(page - visiblePages / 2));
    var end = Math.min(numberOfPages - 1, start + visiblePages - 1);
    var delta = props.pageLinkSize - (end - start + 1);
    start = Math.max(0, start - delta);
    return [start, end];
  };
  var updatePageLinks = function updatePageLinks2() {
    var pageLinks = [];
    var boundaries = calculatePageLinkBoundaries();
    var start = boundaries[0];
    var end = boundaries[1];
    for (var i = start; i <= end; i++) {
      pageLinks.push(i + 1);
    }
    return pageLinks;
  };
  var changePage = function changePage2(first, rows) {
    var pc2 = pageCount;
    var p2 = Math.floor(first / rows);
    if (p2 >= 0 && p2 < pc2) {
      var newPageState = {
        first,
        rows,
        page: p2,
        pageCount: pc2
      };
      if (props.onPageChange) {
        props.onPageChange(newPageState);
      }
    }
  };
  var changePageToFirst = function changePageToFirst2(event) {
    changePage(0, props.rows);
    event.preventDefault();
  };
  var changePageToPrev = function changePageToPrev2(event) {
    changePage(props.first - props.rows, props.rows);
    event.preventDefault();
  };
  var onPageLinkClick = function onPageLinkClick2(event) {
    changePage((event.value - 1) * props.rows, props.rows);
  };
  var changePageToNext = function changePageToNext2(event) {
    changePage(props.first + props.rows, props.rows);
    event.preventDefault();
  };
  var changePageToLast = function changePageToLast2(event) {
    changePage((pageCount - 1) * props.rows, props.rows);
    event.preventDefault();
  };
  var onRowsChange = function onRowsChange2(event) {
    var rows = event.value;
    changePage(0, rows);
  };
  reactExports.useImperativeHandle(ref, function() {
    return {
      props,
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  useUpdateEffect(function() {
    if (page > 0 && props.first >= props.totalRecords) {
      changePage((pageCount - 1) * props.rows, props.rows);
    }
  }, [props.totalRecords]);
  var createElement = function createElement2(key, template) {
    var element;
    switch (key) {
      case "FirstPageLink":
        element = /* @__PURE__ */ reactExports.createElement(FirstPageLink, {
          hostName: "Paginator",
          key,
          onClick: changePageToFirst,
          disabled: isFirstPage || isEmpty,
          template,
          firstPageLinkIcon: props.firstPageLinkIcon,
          ptm,
          cx
        });
        break;
      case "PrevPageLink":
        element = /* @__PURE__ */ reactExports.createElement(PrevPageLink, {
          hostName: "Paginator",
          key,
          onClick: changePageToPrev,
          disabled: isFirstPage || isEmpty,
          template,
          prevPageLinkIcon: props.prevPageLinkIcon,
          ptm,
          cx
        });
        break;
      case "NextPageLink":
        element = /* @__PURE__ */ reactExports.createElement(NextPageLink, {
          hostName: "Paginator",
          key,
          onClick: changePageToNext,
          disabled: isLastPage || isEmpty,
          template,
          nextPageLinkIcon: props.nextPageLinkIcon,
          ptm,
          cx
        });
        break;
      case "LastPageLink":
        element = /* @__PURE__ */ reactExports.createElement(LastPageLink, {
          hostName: "Paginator",
          key,
          onClick: changePageToLast,
          disabled: isLastPage || isEmpty,
          template,
          lastPageLinkIcon: props.lastPageLinkIcon,
          ptm,
          cx
        });
        break;
      case "PageLinks":
        element = /* @__PURE__ */ reactExports.createElement(PageLinks, {
          hostName: "Paginator",
          key,
          value: updatePageLinks(),
          page,
          rows: props.rows,
          pageCount,
          onClick: onPageLinkClick,
          template,
          ptm,
          cx
        });
        break;
      case "RowsPerPageDropdown":
        element = /* @__PURE__ */ reactExports.createElement(RowsPerPageDropdown, {
          hostName: "Paginator",
          key,
          value: props.rows,
          page,
          pageCount,
          totalRecords: props.totalRecords,
          options: props.rowsPerPageOptions,
          onChange: onRowsChange,
          appendTo: props.dropdownAppendTo,
          template,
          disabled: isEmpty,
          unstyled: props.unstyled,
          ptm,
          cx,
          metaData
        });
        break;
      case "CurrentPageReport":
        element = /* @__PURE__ */ reactExports.createElement(CurrentPageReport, {
          hostName: "Paginator",
          reportTemplate: props.currentPageReportTemplate,
          key,
          page,
          pageCount,
          first: props.first,
          rows: props.rows,
          totalRecords: props.totalRecords,
          template,
          ptm
        });
        break;
      case "JumpToPageInput":
        element = /* @__PURE__ */ reactExports.createElement(JumpToPageInput, {
          hostName: "Paginator",
          key,
          rows: props.rows,
          page,
          pageCount,
          onChange: changePage,
          disabled: isEmpty,
          template,
          ptm,
          unstyled: props.unstyled,
          metaData
        });
        break;
      default:
        element = null;
        break;
    }
    return element;
  };
  var createElements = function createElements2() {
    var template = props.template;
    if (template) {
      if (_typeof$3(template) === "object") {
        return template.layout ? template.layout.split(" ").map(function(value) {
          var key = value.trim();
          return createElement(key, template[key]);
        }) : Object.entries(template).map(function(_ref3) {
          var _ref22 = _slicedToArray$2(_ref3, 2), key = _ref22[0], _template = _ref22[1];
          return createElement(key, _template);
        });
      }
      return template.split(" ").map(function(value) {
        return createElement(value.trim());
      });
    }
    return null;
  };
  if (!props.alwaysShow && pageCount <= 1) {
    return null;
  } else {
    var leftContent = ObjectUtils.getJSXElement(props.leftContent, props);
    var rightContent = ObjectUtils.getJSXElement(props.rightContent, props);
    var elements = createElements();
    var leftProps = mergeProps2({
      className: cx("left")
    }, ptm("left"));
    var leftElement = leftContent && /* @__PURE__ */ reactExports.createElement("div", leftProps, leftContent);
    var endProps = mergeProps2({
      className: cx("end")
    }, ptm("end"));
    var rightElement = rightContent && /* @__PURE__ */ reactExports.createElement("div", endProps, rightContent);
    var rootProps = mergeProps2({
      ref: elementRef,
      className: classNames$1(props.className, cx("root")),
      style: props.style
    }, PaginatorBase.getOtherProps(props), ptm("root"));
    return /* @__PURE__ */ reactExports.createElement("div", rootProps, leftElement, elements, rightElement);
  }
}));
Paginator.displayName = "Paginator";
function _extends$b() {
  _extends$b = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$b.apply(this, arguments);
}
var CheckIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$b({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M4.86199 11.5948C4.78717 11.5923 4.71366 11.5745 4.64596 11.5426C4.57826 11.5107 4.51779 11.4652 4.46827 11.4091L0.753985 7.69483C0.683167 7.64891 0.623706 7.58751 0.580092 7.51525C0.536478 7.44299 0.509851 7.36177 0.502221 7.27771C0.49459 7.19366 0.506156 7.10897 0.536046 7.03004C0.565935 6.95111 0.613367 6.88 0.674759 6.82208C0.736151 6.76416 0.8099 6.72095 0.890436 6.69571C0.970973 6.67046 1.05619 6.66385 1.13966 6.67635C1.22313 6.68886 1.30266 6.72017 1.37226 6.76792C1.44186 6.81567 1.4997 6.8786 1.54141 6.95197L4.86199 10.2503L12.6397 2.49483C12.7444 2.42694 12.8689 2.39617 12.9932 2.40745C13.1174 2.41873 13.2343 2.47141 13.3251 2.55705C13.4159 2.64268 13.4753 2.75632 13.4938 2.87973C13.5123 3.00315 13.4888 3.1292 13.4271 3.23768L5.2557 11.4091C5.20618 11.4652 5.14571 11.5107 5.07801 11.5426C5.01031 11.5745 4.9368 11.5923 4.86199 11.5948Z",
    fill: "currentColor"
  }));
}));
CheckIcon.displayName = "CheckIcon";
function _extends$a() {
  _extends$a = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$a.apply(this, arguments);
}
var ChevronRightIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$a({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M4.38708 13C4.28408 13.0005 4.18203 12.9804 4.08691 12.9409C3.99178 12.9014 3.9055 12.8433 3.83313 12.7701C3.68634 12.6231 3.60388 12.4238 3.60388 12.2161C3.60388 12.0084 3.68634 11.8091 3.83313 11.6622L8.50507 6.99022L3.83313 2.31827C3.69467 2.16968 3.61928 1.97313 3.62287 1.77005C3.62645 1.56698 3.70872 1.37322 3.85234 1.22959C3.99596 1.08597 4.18972 1.00371 4.3928 1.00012C4.59588 0.996539 4.79242 1.07192 4.94102 1.21039L10.1669 6.43628C10.3137 6.58325 10.3962 6.78249 10.3962 6.99022C10.3962 7.19795 10.3137 7.39718 10.1669 7.54416L4.94102 12.7701C4.86865 12.8433 4.78237 12.9014 4.68724 12.9409C4.59212 12.9804 4.49007 13.0005 4.38708 13Z",
    fill: "currentColor"
  }));
}));
ChevronRightIcon.displayName = "ChevronRightIcon";
function _extends$9() {
  _extends$9 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$9.apply(this, arguments);
}
var PencilIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$9({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M0.609628 13.959C0.530658 13.9599 0.452305 13.9451 0.379077 13.9156C0.305849 13.8861 0.239191 13.8424 0.18294 13.787C0.118447 13.7234 0.0688234 13.6464 0.0376166 13.5614C0.00640987 13.4765 -0.00560954 13.3857 0.00241768 13.2956L0.25679 10.1501C0.267698 10.0041 0.331934 9.86709 0.437312 9.76516L9.51265 0.705715C10.0183 0.233014 10.6911 -0.0203041 11.3835 0.00127367C12.0714 0.00660201 12.7315 0.27311 13.2298 0.746671C13.7076 1.23651 13.9824 1.88848 13.9992 2.57201C14.0159 3.25554 13.7733 3.92015 13.32 4.4327L4.23648 13.5331C4.13482 13.6342 4.0017 13.6978 3.85903 13.7133L0.667067 14L0.609628 13.959ZM1.43018 10.4696L1.25787 12.714L3.50619 12.5092L12.4502 3.56444C12.6246 3.35841 12.7361 3.10674 12.7714 2.83933C12.8067 2.57193 12.7644 2.30002 12.6495 2.05591C12.5346 1.8118 12.3519 1.60575 12.1231 1.46224C11.8943 1.31873 11.6291 1.2438 11.3589 1.24633C11.1813 1.23508 11.0033 1.25975 10.8355 1.31887C10.6677 1.37798 10.5136 1.47033 10.3824 1.59036L1.43018 10.4696Z",
    fill: "currentColor"
  }));
}));
PencilIcon.displayName = "PencilIcon";
function _extends$8() {
  _extends$8 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$8.apply(this, arguments);
}
function _typeof$2(o) {
  "@babel/helpers - typeof";
  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$2(o);
}
function _toPrimitive$1(input2, hint) {
  if (_typeof$2(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$2(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey$1(arg) {
  var key = _toPrimitive$1(arg, "string");
  return _typeof$2(key) === "symbol" ? key : String(key);
}
function _defineProperty$2(obj, key, value) {
  key = _toPropertyKey$1(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var classes$1 = {
  root: function root6(_ref3) {
    var props = _ref3.props;
    return classNames$1("p-badge p-component", _defineProperty$2({
      "p-badge-no-gutter": ObjectUtils.isNotEmpty(props.value) && String(props.value).length === 1,
      "p-badge-dot": ObjectUtils.isEmpty(props.value),
      "p-badge-lg": props.size === "large",
      "p-badge-xl": props.size === "xlarge"
    }, "p-badge-".concat(props.severity), props.severity !== null));
  }
};
var styles$2 = "\n@layer primereact {\n    .p-badge {\n        display: inline-block;\n        border-radius: 10px;\n        text-align: center;\n        padding: 0 .5rem;\n    }\n    \n    .p-overlay-badge {\n        position: relative;\n    }\n    \n    .p-overlay-badge .p-badge {\n        position: absolute;\n        top: 0;\n        right: 0;\n        transform: translate(50%,-50%);\n        transform-origin: 100% 0;\n        margin: 0;\n    }\n    \n    .p-badge-dot {\n        width: .5rem;\n        min-width: .5rem;\n        height: .5rem;\n        border-radius: 50%;\n        padding: 0;\n    }\n    \n    .p-badge-no-gutter {\n        padding: 0;\n        border-radius: 50%;\n    }\n}\n";
var BadgeBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Badge",
    __parentMetadata: null,
    value: null,
    severity: null,
    size: null,
    style: null,
    className: null,
    children: void 0
  },
  css: {
    classes: classes$1,
    styles: styles$2
  }
});
function ownKeys$1$1(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$1$1(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$1$1(Object(t2), true).forEach(function(r3) {
      _defineProperty$2(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1$1(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var Badge = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = BadgeBase.getProps(inProps, context);
  var _BadgeBase$setMetaDat = BadgeBase.setMetaData(_objectSpread$1$1({
    props
  }, props.__parentMetadata)), ptm = _BadgeBase$setMetaDat.ptm, cx = _BadgeBase$setMetaDat.cx, isUnstyled = _BadgeBase$setMetaDat.isUnstyled;
  useHandleStyle(BadgeBase.css.styles, isUnstyled, {
    name: "badge"
  });
  var elementRef = reactExports.useRef(null);
  reactExports.useImperativeHandle(ref, function() {
    return {
      props,
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  var rootProps = mergeProps2({
    ref: elementRef,
    style: props.style,
    className: classNames$1(props.className, cx("root"))
  }, BadgeBase.getOtherProps(props), ptm("root"));
  return /* @__PURE__ */ reactExports.createElement("span", rootProps, props.value);
}));
Badge.displayName = "Badge";
var classes$2 = {
  icon: function icon(_ref3) {
    var props = _ref3.props;
    return classNames$1("p-button-icon p-c", _defineProperty$2({}, "p-button-icon-".concat(props.iconPos), props.label));
  },
  loadingIcon: function loadingIcon(_ref22) {
    var props = _ref22.props, className = _ref22.className;
    return classNames$1(className, {
      "p-button-loading-icon": props.loading
    });
  },
  label: "p-button-label p-c",
  root: function root7(_ref3) {
    var props = _ref3.props, size = _ref3.size, disabled = _ref3.disabled;
    return classNames$1("p-button p-component", _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({
      "p-button-icon-only": (props.icon || props.loading) && !props.label && !props.children,
      "p-button-vertical": (props.iconPos === "top" || props.iconPos === "bottom") && props.label,
      "p-disabled": disabled,
      "p-button-loading": props.loading,
      "p-button-outlined": props.outlined,
      "p-button-raised": props.raised,
      "p-button-link": props.link,
      "p-button-text": props.text,
      "p-button-rounded": props.rounded,
      "p-button-loading-label-only": props.loading && !props.icon && props.label
    }, "p-button-loading-".concat(props.iconPos), props.loading && props.label), "p-button-".concat(size), size), "p-button-".concat(props.severity), props.severity), "p-button-plain", props.plain));
  }
};
var ButtonBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Button",
    __parentMetadata: null,
    badge: null,
    badgeClassName: null,
    className: null,
    children: void 0,
    disabled: false,
    icon: null,
    iconPos: "left",
    label: null,
    link: false,
    loading: false,
    loadingIcon: null,
    outlined: false,
    plain: false,
    raised: false,
    rounded: false,
    severity: null,
    size: null,
    text: false,
    tooltip: null,
    tooltipOptions: null,
    visible: true
  },
  css: {
    classes: classes$2
  }
});
function ownKeys$e(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$d(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$e(Object(t2), true).forEach(function(r3) {
      _defineProperty$2(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$e(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var Button = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var mergeProps2 = useMergeProps();
  var context = reactExports.useContext(PrimeReactContext);
  var props = ButtonBase.getProps(inProps, context);
  var disabled = props.disabled || props.loading;
  var metaData = _objectSpread$d(_objectSpread$d({
    props
  }, props.__parentMetadata), {}, {
    context: {
      disabled
    }
  });
  var _ButtonBase$setMetaDa = ButtonBase.setMetaData(metaData), ptm = _ButtonBase$setMetaDa.ptm, cx = _ButtonBase$setMetaDa.cx, isUnstyled = _ButtonBase$setMetaDa.isUnstyled;
  useHandleStyle(ButtonBase.css.styles, isUnstyled, {
    name: "button",
    styled: true
  });
  var elementRef = reactExports.useRef(ref);
  reactExports.useEffect(function() {
    ObjectUtils.combinedRefs(elementRef, ref);
  }, [elementRef, ref]);
  if (props.visible === false) {
    return null;
  }
  var createIcon = function createIcon2() {
    var className = classNames$1("p-button-icon p-c", _defineProperty$2({}, "p-button-icon-".concat(props.iconPos), props.label));
    var iconsProps = mergeProps2({
      className: cx("icon")
    }, ptm("icon"));
    className = classNames$1(className, {
      "p-button-loading-icon": props.loading
    });
    var loadingIconProps = mergeProps2({
      className: cx("loadingIcon", {
        className
      })
    }, ptm("loadingIcon"));
    var icon3 = props.loading ? props.loadingIcon || /* @__PURE__ */ reactExports.createElement(SpinnerIcon, _extends$8({}, loadingIconProps, {
      spin: true
    })) : props.icon;
    return IconUtils.getJSXIcon(icon3, _objectSpread$d({}, iconsProps), {
      props
    });
  };
  var createLabel = function createLabel2() {
    var labelProps = mergeProps2({
      className: cx("label")
    }, ptm("label"));
    if (props.label) {
      return /* @__PURE__ */ reactExports.createElement("span", labelProps, props.label);
    }
    return !props.children && !props.label && /* @__PURE__ */ reactExports.createElement("span", _extends$8({}, labelProps, {
      dangerouslySetInnerHTML: {
        __html: "&nbsp;"
      }
    }));
  };
  var createBadge = function createBadge2() {
    if (props.badge) {
      var badgeProps = mergeProps2({
        className: classNames$1(props.badgeClassName),
        value: props.badge,
        unstyled: props.unstyled,
        __parentMetadata: {
          parent: metaData
        }
      }, ptm("badge"));
      return /* @__PURE__ */ reactExports.createElement(Badge, badgeProps, props.badge);
    }
    return null;
  };
  var showTooltip = !disabled || props.tooltipOptions && props.tooltipOptions.showOnDisabled;
  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip) && showTooltip;
  var sizeMapping = {
    large: "lg",
    small: "sm"
  };
  var size = sizeMapping[props.size];
  var icon2 = createIcon();
  var label = createLabel();
  var badge = createBadge();
  var defaultAriaLabel = props.label ? props.label + (props.badge ? " " + props.badge : "") : props["aria-label"];
  var rootProps = mergeProps2({
    ref: elementRef,
    "aria-label": defaultAriaLabel,
    className: classNames$1(props.className, cx("root", {
      size,
      disabled
    })),
    disabled
  }, ButtonBase.getOtherProps(props), ptm("root"));
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("button", rootProps, icon2, label, props.children, badge, /* @__PURE__ */ reactExports.createElement(Ripple, null)), hasTooltip && /* @__PURE__ */ reactExports.createElement(Tooltip, _extends$8({
    target: elementRef,
    content: props.tooltip,
    pt: ptm("tooltip")
  }, props.tooltipOptions)));
}));
Button.displayName = "Button";
function _extends$7() {
  _extends$7 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$7.apply(this, arguments);
}
var FilterIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$7({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M8.64708 14H5.35296C5.18981 13.9979 5.03395 13.9321 4.91858 13.8167C4.8032 13.7014 4.73745 13.5455 4.73531 13.3824V7L0.329431 0.98C0.259794 0.889466 0.217389 0.780968 0.20718 0.667208C0.19697 0.553448 0.219379 0.439133 0.271783 0.337647C0.324282 0.236453 0.403423 0.151519 0.500663 0.0920138C0.597903 0.0325088 0.709548 0.000692754 0.823548 0H13.1765C13.2905 0.000692754 13.4021 0.0325088 13.4994 0.0920138C13.5966 0.151519 13.6758 0.236453 13.7283 0.337647C13.7807 0.439133 13.8031 0.553448 13.7929 0.667208C13.7826 0.780968 13.7402 0.889466 13.6706 0.98L9.26472 7V13.3824C9.26259 13.5455 9.19683 13.7014 9.08146 13.8167C8.96609 13.9321 8.81022 13.9979 8.64708 14ZM5.97061 12.7647H8.02943V6.79412C8.02878 6.66289 8.07229 6.53527 8.15296 6.43177L11.9412 1.23529H2.05884L5.86355 6.43177C5.94422 6.53527 5.98773 6.66289 5.98708 6.79412L5.97061 12.7647Z",
    fill: "currentColor"
  }));
}));
FilterIcon.displayName = "FilterIcon";
function _extends$6() {
  _extends$6 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$6.apply(this, arguments);
}
var FilterSlashIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$6({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M13.4994 0.0920138C13.5967 0.151519 13.6758 0.236453 13.7283 0.337647C13.7807 0.439133 13.8031 0.553448 13.7929 0.667208C13.7827 0.780968 13.7403 0.889466 13.6707 0.98L11.406 4.06823C11.3099 4.19928 11.1656 4.28679 11.005 4.3115C10.8444 4.33621 10.6805 4.2961 10.5495 4.2C10.4184 4.1039 10.3309 3.95967 10.3062 3.79905C10.2815 3.63843 10.3216 3.47458 10.4177 3.34353L11.9412 1.23529H7.41184C7.24803 1.23529 7.09093 1.17022 6.97509 1.05439C6.85926 0.938558 6.79419 0.781457 6.79419 0.617647C6.79419 0.453837 6.85926 0.296736 6.97509 0.180905C7.09093 0.0650733 7.24803 0 7.41184 0H13.1765C13.2905 0.000692754 13.4022 0.0325088 13.4994 0.0920138ZM4.20008 0.181168H4.24126L13.2013 9.03411C13.3169 9.14992 13.3819 9.3069 13.3819 9.47058C13.3819 9.63426 13.3169 9.79124 13.2013 9.90705C13.1445 9.96517 13.0766 10.0112 13.0016 10.0423C12.9266 10.0735 12.846 10.0891 12.7648 10.0882C12.6836 10.0886 12.6032 10.0728 12.5283 10.0417C12.4533 10.0106 12.3853 9.96479 12.3283 9.90705L9.3142 6.92587L9.26479 6.99999V13.3823C9.26265 13.5455 9.19689 13.7014 9.08152 13.8167C8.96615 13.9321 8.81029 13.9979 8.64714 14H5.35302C5.18987 13.9979 5.03401 13.9321 4.91864 13.8167C4.80327 13.7014 4.73751 13.5455 4.73537 13.3823V6.99999L0.329492 1.02117C0.259855 0.930634 0.21745 0.822137 0.207241 0.708376C0.197031 0.594616 0.21944 0.480301 0.271844 0.378815C0.324343 0.277621 0.403484 0.192687 0.500724 0.133182C0.597964 0.073677 0.709609 0.041861 0.823609 0.0411682H3.86243C3.92448 0.0461551 3.9855 0.060022 4.04361 0.0823446C4.10037 0.10735 4.15311 0.140655 4.20008 0.181168ZM8.02949 6.79411C8.02884 6.66289 8.07235 6.53526 8.15302 6.43176L8.42478 6.05293L3.55773 1.23529H2.0589L5.84714 6.43176C5.92781 6.53526 5.97132 6.66289 5.97067 6.79411V12.7647H8.02949V6.79411Z",
    fill: "currentColor"
  }));
}));
FilterSlashIcon.displayName = "FilterSlashIcon";
function _extends$5() {
  _extends$5 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$5.apply(this, arguments);
}
var PlusIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$5({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M7.67742 6.32258V0.677419C7.67742 0.497757 7.60605 0.325452 7.47901 0.198411C7.35197 0.0713707 7.17966 0 7 0C6.82034 0 6.64803 0.0713707 6.52099 0.198411C6.39395 0.325452 6.32258 0.497757 6.32258 0.677419V6.32258H0.677419C0.497757 6.32258 0.325452 6.39395 0.198411 6.52099C0.0713707 6.64803 0 6.82034 0 7C0 7.17966 0.0713707 7.35197 0.198411 7.47901C0.325452 7.60605 0.497757 7.67742 0.677419 7.67742H6.32258V13.3226C6.32492 13.5015 6.39704 13.6725 6.52358 13.799C6.65012 13.9255 6.82106 13.9977 7 14C7.17966 14 7.35197 13.9286 7.47901 13.8016C7.60605 13.6745 7.67742 13.5022 7.67742 13.3226V7.67742H13.3226C13.5022 7.67742 13.6745 7.60605 13.8016 7.47901C13.9286 7.35197 14 7.17966 14 7C13.9977 6.82106 13.9255 6.65012 13.799 6.52358C13.6725 6.39704 13.5015 6.32492 13.3226 6.32258H7.67742Z",
    fill: "currentColor"
  }));
}));
PlusIcon.displayName = "PlusIcon";
function _extends$4() {
  _extends$4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$4.apply(this, arguments);
}
var TrashIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$4({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M3.44802 13.9955H10.552C10.8056 14.0129 11.06 13.9797 11.3006 13.898C11.5412 13.8163 11.7632 13.6877 11.9537 13.5196C12.1442 13.3515 12.2995 13.1473 12.4104 12.9188C12.5213 12.6903 12.5858 12.442 12.6 12.1884V4.36041H13.4C13.5591 4.36041 13.7117 4.29722 13.8243 4.18476C13.9368 4.07229 14 3.91976 14 3.76071C14 3.60166 13.9368 3.44912 13.8243 3.33666C13.7117 3.22419 13.5591 3.16101 13.4 3.16101H12.0537C12.0203 3.1557 11.9863 3.15299 11.952 3.15299C11.9178 3.15299 11.8838 3.1557 11.8503 3.16101H11.2285C11.2421 3.10893 11.2487 3.05513 11.248 3.00106V1.80966C11.2171 1.30262 10.9871 0.828306 10.608 0.48989C10.229 0.151475 9.73159 -0.0236625 9.22402 0.00257442H4.77602C4.27251 -0.0171866 3.78126 0.160868 3.40746 0.498617C3.03365 0.836366 2.807 1.30697 2.77602 1.80966V3.00106C2.77602 3.0556 2.78346 3.10936 2.79776 3.16101H0.6C0.521207 3.16101 0.443185 3.17652 0.37039 3.20666C0.297595 3.2368 0.231451 3.28097 0.175736 3.33666C0.120021 3.39235 0.0758251 3.45846 0.0456722 3.53121C0.0155194 3.60397 0 3.68196 0 3.76071C0 3.83946 0.0155194 3.91744 0.0456722 3.9902C0.0758251 4.06296 0.120021 4.12907 0.175736 4.18476C0.231451 4.24045 0.297595 4.28462 0.37039 4.31476C0.443185 4.3449 0.521207 4.36041 0.6 4.36041H1.40002V12.1884C1.41426 12.442 1.47871 12.6903 1.58965 12.9188C1.7006 13.1473 1.85582 13.3515 2.04633 13.5196C2.23683 13.6877 2.45882 13.8163 2.69944 13.898C2.94005 13.9797 3.1945 14.0129 3.44802 13.9955ZM2.60002 4.36041H11.304V12.1884C11.304 12.5163 10.952 12.7961 10.504 12.7961H3.40002C2.97602 12.7961 2.60002 12.5163 2.60002 12.1884V4.36041ZM3.95429 3.16101C3.96859 3.10936 3.97602 3.0556 3.97602 3.00106V1.80966C3.97602 1.48183 4.33602 1.20197 4.77602 1.20197H9.24802C9.66403 1.20197 10.048 1.48183 10.048 1.80966V3.00106C10.0473 3.05515 10.054 3.10896 10.0678 3.16101H3.95429ZM5.57571 10.997C5.41731 10.995 5.26597 10.9311 5.15395 10.8191C5.04193 10.7071 4.97808 10.5558 4.97601 10.3973V6.77517C4.97601 6.61612 5.0392 6.46359 5.15166 6.35112C5.26413 6.23866 5.41666 6.17548 5.57571 6.17548C5.73476 6.17548 5.8873 6.23866 5.99976 6.35112C6.11223 6.46359 6.17541 6.61612 6.17541 6.77517V10.3894C6.17647 10.4688 6.16174 10.5476 6.13208 10.6213C6.10241 10.695 6.05841 10.762 6.00261 10.8186C5.94682 10.8751 5.88035 10.92 5.80707 10.9506C5.73378 10.9813 5.65514 10.9971 5.57571 10.997ZM7.99968 10.8214C8.11215 10.9339 8.26468 10.997 8.42373 10.997C8.58351 10.9949 8.73604 10.93 8.84828 10.8163C8.96052 10.7025 9.02345 10.5491 9.02343 10.3894V6.77517C9.02343 6.61612 8.96025 6.46359 8.84778 6.35112C8.73532 6.23866 8.58278 6.17548 8.42373 6.17548C8.26468 6.17548 8.11215 6.23866 7.99968 6.35112C7.88722 6.46359 7.82404 6.61612 7.82404 6.77517V10.3973C7.82404 10.5564 7.88722 10.7089 7.99968 10.8214Z",
    fill: "currentColor"
  }));
}));
TrashIcon.displayName = "TrashIcon";
function _extends$3() {
  _extends$3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$3.apply(this, arguments);
}
var SortAltIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$3({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M5.64515 3.61291C5.47353 3.61291 5.30192 3.54968 5.16644 3.4142L3.38708 1.63484L1.60773 3.4142C1.34579 3.67613 0.912244 3.67613 0.650309 3.4142C0.388374 3.15226 0.388374 2.71871 0.650309 2.45678L2.90837 0.198712C3.17031 -0.0632236 3.60386 -0.0632236 3.86579 0.198712L6.12386 2.45678C6.38579 2.71871 6.38579 3.15226 6.12386 3.4142C5.98837 3.54968 5.81676 3.61291 5.64515 3.61291Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M3.38714 14C3.01681 14 2.70972 13.6929 2.70972 13.3226V0.677419C2.70972 0.307097 3.01681 0 3.38714 0C3.75746 0 4.06456 0.307097 4.06456 0.677419V13.3226C4.06456 13.6929 3.75746 14 3.38714 14Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M10.6129 14C10.4413 14 10.2697 13.9368 10.1342 13.8013L7.87611 11.5432C7.61418 11.2813 7.61418 10.8477 7.87611 10.5858C8.13805 10.3239 8.5716 10.3239 8.83353 10.5858L10.6129 12.3652L12.3922 10.5858C12.6542 10.3239 13.0877 10.3239 13.3497 10.5858C13.6116 10.8477 13.6116 11.2813 13.3497 11.5432L11.0916 13.8013C10.9561 13.9368 10.7845 14 10.6129 14Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M10.6129 14C10.2426 14 9.93552 13.6929 9.93552 13.3226V0.677419C9.93552 0.307097 10.2426 0 10.6129 0C10.9833 0 11.2904 0.307097 11.2904 0.677419V13.3226C11.2904 13.6929 10.9832 14 10.6129 14Z",
    fill: "currentColor"
  }));
}));
SortAltIcon.displayName = "SortAltIcon";
function _extends$2() {
  _extends$2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
var SortAmountDownIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$2({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M2.59836 13.2009C2.44634 13.2009 2.29432 13.1449 2.1743 13.0248L0.174024 11.0246C-0.0580081 10.7925 -0.0580081 10.4085 0.174024 10.1764C0.406057 9.94441 0.79011 9.94441 1.02214 10.1764L2.59836 11.7527L4.17458 10.1764C4.40662 9.94441 4.79067 9.94441 5.0227 10.1764C5.25473 10.4085 5.25473 10.7925 5.0227 11.0246L3.02242 13.0248C2.90241 13.1449 2.75038 13.2009 2.59836 13.2009Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M2.59836 13.2009C2.27032 13.2009 1.99833 12.9288 1.99833 12.6008V1.39922C1.99833 1.07117 2.27036 0.799133 2.59841 0.799133C2.92646 0.799133 3.19849 1.07117 3.19849 1.39922V12.6008C3.19849 12.9288 2.92641 13.2009 2.59836 13.2009Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M13.3999 11.2006H6.99902C6.67098 11.2006 6.39894 10.9285 6.39894 10.6005C6.39894 10.2725 6.67098 10.0004 6.99902 10.0004H13.3999C13.728 10.0004 14 10.2725 14 10.6005C14 10.9285 13.728 11.2006 13.3999 11.2006Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M10.1995 6.39991H6.99902C6.67098 6.39991 6.39894 6.12788 6.39894 5.79983C6.39894 5.47179 6.67098 5.19975 6.99902 5.19975H10.1995C10.5275 5.19975 10.7996 5.47179 10.7996 5.79983C10.7996 6.12788 10.5275 6.39991 10.1995 6.39991Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M8.59925 3.99958H6.99902C6.67098 3.99958 6.39894 3.72754 6.39894 3.3995C6.39894 3.07145 6.67098 2.79941 6.99902 2.79941H8.59925C8.92729 2.79941 9.19933 3.07145 9.19933 3.3995C9.19933 3.72754 8.92729 3.99958 8.59925 3.99958Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M11.7997 8.80025H6.99902C6.67098 8.80025 6.39894 8.52821 6.39894 8.20017C6.39894 7.87212 6.67098 7.60008 6.99902 7.60008H11.7997C12.1277 7.60008 12.3998 7.87212 12.3998 8.20017C12.3998 8.52821 12.1277 8.80025 11.7997 8.80025Z",
    fill: "currentColor"
  }));
}));
SortAmountDownIcon.displayName = "SortAmountDownIcon";
function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
var SortAmountUpAltIcon = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return /* @__PURE__ */ reactExports.createElement("svg", _extends$1({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M4.59864 3.99958C4.44662 3.99958 4.2946 3.94357 4.17458 3.82356L2.59836 2.24734L1.02214 3.82356C0.79011 4.05559 0.406057 4.05559 0.174024 3.82356C-0.0580081 3.59152 -0.0580081 3.20747 0.174024 2.97544L2.1743 0.97516C2.40634 0.743127 2.79039 0.743127 3.02242 0.97516L5.0227 2.97544C5.25473 3.20747 5.25473 3.59152 5.0227 3.82356C4.90268 3.94357 4.75066 3.99958 4.59864 3.99958Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M2.59841 13.2009C2.27036 13.2009 1.99833 12.9288 1.99833 12.6008V1.39922C1.99833 1.07117 2.27036 0.799133 2.59841 0.799133C2.92646 0.799133 3.19849 1.07117 3.19849 1.39922V12.6008C3.19849 12.9288 2.92646 13.2009 2.59841 13.2009Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M13.3999 11.2006H6.99902C6.67098 11.2006 6.39894 10.9285 6.39894 10.6005C6.39894 10.2725 6.67098 10.0004 6.99902 10.0004H13.3999C13.728 10.0004 14 10.2725 14 10.6005C14 10.9285 13.728 11.2006 13.3999 11.2006Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M10.1995 6.39991H6.99902C6.67098 6.39991 6.39894 6.12788 6.39894 5.79983C6.39894 5.47179 6.67098 5.19975 6.99902 5.19975H10.1995C10.5275 5.19975 10.7996 5.47179 10.7996 5.79983C10.7996 6.12788 10.5275 6.39991 10.1995 6.39991Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M8.59925 3.99958H6.99902C6.67098 3.99958 6.39894 3.72754 6.39894 3.3995C6.39894 3.07145 6.67098 2.79941 6.99902 2.79941H8.59925C8.92729 2.79941 9.19933 3.07145 9.19933 3.3995C9.19933 3.72754 8.92729 3.99958 8.59925 3.99958Z",
    fill: "currentColor"
  }), /* @__PURE__ */ reactExports.createElement("path", {
    d: "M11.7997 8.80025H6.99902C6.67098 8.80025 6.39894 8.52821 6.39894 8.20017C6.39894 7.87212 6.67098 7.60008 6.99902 7.60008H11.7997C12.1277 7.60008 12.3998 7.87212 12.3998 8.20017C12.3998 8.52821 12.1277 8.80025 11.7997 8.80025Z",
    fill: "currentColor"
  }));
}));
SortAmountUpAltIcon.displayName = "SortAmountUpAltIcon";
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _typeof$1(o) {
  "@babel/helpers - typeof";
  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$1(o);
}
function _toPrimitive(input2, hint) {
  if (_typeof$1(input2) !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$1(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof$1(key) === "symbol" ? key : String(key);
}
function _defineProperty$1(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles$1(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$1(arr);
}
function _iterableToArray$1(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$1(o, minLen);
}
function _nonIterableSpread$1() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray$1(arr) {
  return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
}
function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$1(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$1(arr, i) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$1();
}
var ColumnBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Column",
    align: null,
    alignFrozen: "left",
    alignHeader: null,
    body: null,
    bodyClassName: null,
    bodyStyle: null,
    cellEditValidator: null,
    cellEditValidatorEvent: "click",
    className: null,
    colSpan: null,
    columnKey: null,
    dataType: "text",
    editor: null,
    excludeGlobalFilter: false,
    expander: false,
    exportField: null,
    exportable: true,
    field: null,
    filter: false,
    filterApply: null,
    filterClear: null,
    filterElement: null,
    filterField: null,
    filterFooter: null,
    filterFunction: null,
    filterHeader: null,
    filterHeaderClassName: null,
    filterHeaderStyle: null,
    filterMatchMode: null,
    filterMatchModeOptions: null,
    filterMaxLength: null,
    filterMenuClassName: null,
    filterMenuStyle: null,
    filterPlaceholder: null,
    filterType: "text",
    footer: null,
    footerClassName: null,
    footerStyle: null,
    frozen: false,
    header: null,
    headerClassName: null,
    headerStyle: null,
    headerTooltip: null,
    headerTooltipOptions: null,
    hidden: false,
    maxConstraints: 2,
    onBeforeCellEditHide: null,
    onBeforeCellEditShow: null,
    onCellEditCancel: null,
    onCellEditComplete: null,
    onCellEditInit: null,
    onFilterApplyClick: null,
    onFilterClear: null,
    onFilterConstraintAdd: null,
    onFilterConstraintRemove: null,
    onFilterMatchModeChange: null,
    onFilterOperatorChange: null,
    reorderable: true,
    resizeable: true,
    rowEditor: false,
    rowReorder: false,
    rowReorderIcon: null,
    rowSpan: null,
    selectionMode: null,
    showAddButton: true,
    showApplyButton: true,
    showClearButton: true,
    showFilterMatchModes: true,
    showFilterMenu: true,
    showFilterMenuOptions: true,
    showFilterOperator: true,
    sortField: null,
    sortFunction: null,
    sortable: false,
    sortableDisabled: false,
    style: null,
    children: void 0
  },
  getCProp: function getCProp(column2, name) {
    return ObjectUtils.getComponentProp(column2, name, ColumnBase.defaultProps);
  },
  getCProps: function getCProps(column2) {
    return ObjectUtils.getComponentProps(column2, ColumnBase.defaultProps);
  },
  getCOtherProps: function getCOtherProps(column2) {
    return ObjectUtils.getComponentDiffProps(column2, ColumnBase.defaultProps);
  }
});
function ownKeys$c(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$c(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$c(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$c(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var styles$1 = "\n@layer primereact {\n    .p-datatable {\n        position: relative;\n    }\n\n    .p-datatable > .p-datatable-wrapper {\n        overflow: auto;\n    }\n\n    .p-datatable-table {\n        border-spacing: 0px;\n        width: 100%;\n    }\n\n    .p-datatable .p-sortable-disabled {\n        cursor: auto;\n    }\n\n    .p-datatable .p-sortable-column {\n        cursor: pointer;\n        user-select: none;\n    }\n\n    .p-datatable .p-sortable-column .p-column-title,\n    .p-datatable .p-sortable-column .p-sortable-column-icon,\n    .p-datatable .p-sortable-column .p-sortable-column-badge {\n        vertical-align: middle;\n    }\n\n    .p-datatable .p-sortable-column .p-sortable-column-badge {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .p-datatable-selectable .p-selectable-row,\n    .p-datatable-selectable-cell .p-selectable-cell {\n        cursor: pointer;\n    }\n\n    .p-datatable-drag-selection-helper {\n        position: absolute;\n        z-index: 99999999;\n    }\n\n    /* Scrollable */\n    .p-datatable-scrollable > .p-datatable-wrapper {\n        position: relative;\n    }\n\n    .p-datatable-scrollable-table > .p-datatable-thead {\n        position: sticky;\n        top: 0;\n        z-index: 1;\n    }\n\n    .p-datatable-scrollable-table > .p-datatable-frozen-tbody {\n        position: sticky;\n        z-index: 1;\n    }\n\n    .p-datatable-scrollable-table > .p-datatable-tfoot {\n        position: sticky;\n        bottom: 0;\n        z-index: 1;\n    }\n\n    .p-datatable-scrollable .p-frozen-column {\n        position: sticky;\n        background: inherit;\n    }\n\n    .p-datatable-scrollable th.p-frozen-column {\n        z-index: 1;\n    }\n\n    .p-datatable-flex-scrollable {\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n    }\n\n    .p-datatable-flex-scrollable > .p-datatable-wrapper {\n        display: flex;\n        flex-direction: column;\n        flex: 1;\n        height: 100%;\n    }\n\n    .p-datatable-scrollable-table > .p-datatable-tbody > .p-rowgroup-header {\n        position: sticky;\n        z-index: 1;\n    }\n\n    /* Resizable */\n    .p-datatable-resizable-table > .p-datatable-thead > tr > th,\n    .p-datatable-resizable-table > .p-datatable-tfoot > tr > td,\n    .p-datatable-resizable-table > .p-datatable-tbody > tr > td {\n        overflow: hidden;\n        white-space: nowrap;\n    }\n\n    .p-datatable-resizable-table > .p-datatable-thead > tr > th.p-resizable-column:not(.p-frozen-column) {\n        background-clip: padding-box;\n        position: relative;\n    }\n\n    .p-datatable-resizable-table-fit > .p-datatable-thead > tr > th.p-resizable-column:last-child .p-column-resizer {\n        display: none;\n    }\n\n    .p-datatable .p-column-resizer {\n        display: block;\n        position: absolute;\n        top: 0;\n        right: 0;\n        margin: 0;\n        width: 0.5rem;\n        height: 100%;\n        padding: 0px;\n        cursor: col-resize;\n        border: 1px solid transparent;\n    }\n\n    .p-datatable .p-column-header-content {\n        display: flex;\n        align-items: center;\n    }\n\n    .p-datatable .p-column-resizer-helper {\n        width: 1px;\n        position: absolute;\n        z-index: 10;\n        display: none;\n    }\n\n    .p-datatable .p-row-editor-init,\n    .p-datatable .p-row-editor-save,\n    .p-datatable .p-row-editor-cancel {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        position: relative;\n    }\n\n    /* Expand */\n    .p-datatable .p-row-toggler {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        position: relative;\n    }\n\n    /* Reorder */\n    .p-datatable-reorder-indicator-up,\n    .p-datatable-reorder-indicator-down {\n        position: absolute;\n        display: none;\n    }\n\n    .p-reorderable-column,\n    .p-datatable-reorderablerow-handle {\n        cursor: move;\n    }\n\n    /* Loader */\n    .p-datatable .p-datatable-loading-overlay {\n        position: absolute;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: 2;\n    }\n\n    /* Filter */\n    .p-column-filter-row {\n        display: flex;\n        align-items: center;\n        width: 100%;\n    }\n\n    .p-column-filter-menu {\n        display: inline-flex;\n        margin-left: auto;\n    }\n\n    .p-column-filter-row .p-column-filter-element {\n        flex: 1 1 auto;\n        width: 1%;\n    }\n\n    .p-column-filter-menu-button,\n    .p-column-filter-clear-button {\n        display: inline-flex;\n        justify-content: center;\n        align-items: center;\n        cursor: pointer;\n        text-decoration: none;\n        overflow: hidden;\n        position: relative;\n    }\n\n    .p-column-filter-overlay {\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n\n    .p-column-filter-row-items {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n    }\n\n    .p-column-filter-row-item {\n        cursor: pointer;\n    }\n\n    .p-column-filter-add-button,\n    .p-column-filter-remove-button {\n        justify-content: center;\n    }\n\n    .p-column-filter-add-button .p-button-label,\n    .p-column-filter-remove-button .p-button-label {\n        flex-grow: 0;\n    }\n\n    .p-column-filter-buttonbar {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    }\n\n    .p-column-filter-buttonbar .p-button:not(.p-button-icon-only) {\n        width: auto;\n    }\n\n    /* Responsive */\n    .p-datatable .p-datatable-tbody > tr > td > .p-column-title {\n        display: none;\n    }\n\n    /* VirtualScroller */\n    .p-datatable-virtualscroller-spacer {\n        display: flex;\n    }\n\n    .p-datatable .p-virtualscroller .p-virtualscroller-loading {\n        transform: none;\n        min-height: 0;\n        position: sticky;\n        top: 0;\n        left: 0;\n    }\n\n    /* Alignment */\n    .p-datatable .p-datatable-thead > tr > th.p-align-left > .p-column-header-content,\n    .p-datatable .p-datatable-tbody > tr > td.p-align-left,\n    .p-datatable .p-datatable-tfoot > tr > td.p-align-left {\n        text-align: left;\n        justify-content: flex-start;\n    }\n\n    .p-datatable .p-datatable-thead > tr > th.p-align-right > .p-column-header-content,\n    .p-datatable .p-datatable-tbody > tr > td.p-align-right,\n    .p-datatable .p-datatable-tfoot > tr > td.p-align-right {\n        text-align: right;\n        justify-content: flex-end;\n    }\n\n    .p-datatable .p-datatable-thead > tr > th.p-align-center > .p-column-header-content,\n    .p-datatable .p-datatable-tbody > tr > td.p-align-center,\n    .p-datatable .p-datatable-tfoot > tr > td.p-align-center {\n        text-align: center;\n        justify-content: center;\n    }\n}\n";
var classes = {
  root: function root8(_ref3) {
    var props = _ref3.props, selectable = _ref3.selectable;
    return classNames$1("p-datatable p-component", {
      "p-datatable-hoverable-rows": props.rowHover,
      "p-datatable-selectable": selectable && !props.cellSelection,
      "p-datatable-selectable-cell": selectable && props.cellSelection,
      "p-datatable-resizable": props.resizableColumns,
      "p-datatable-resizable-fit": props.resizableColumns && props.columnResizeMode === "fit",
      "p-datatable-scrollable": props.scrollable,
      "p-datatable-flex-scrollable": props.scrollable && props.scrollHeight === "flex",
      "p-datatable-responsive-stack": props.responsiveLayout === "stack",
      "p-datatable-responsive-scroll": props.responsiveLayout === "scroll",
      "p-datatable-striped": props.stripedRows,
      "p-datatable-gridlines": props.showGridlines,
      "p-datatable-grouped-header": props.headerColumnGroup != null,
      "p-datatable-grouped-footer": props.footerColumnGroup != null,
      "p-datatable-sm": props.size === "small",
      "p-datatable-lg": props.size === "large"
    });
  },
  loadingIcon: "p-datatable-loading-icon",
  loadingOverlay: "p-datatable-loading-overlay p-component-overlay",
  header: "p-datatable-header",
  wrapper: "p-datatable-wrapper",
  table: function table(_ref22) {
    var props = _ref22.props;
    return classNames$1("p-datatable-table", {
      "p-datatable-scrollable-table": props.scrollable,
      "p-datatable-resizable-table": props.resizableColumns,
      "p-datatable-resizable-table-fit": props.resizableColumns && props.columnResizeMode === "fit"
    });
  },
  thead: "p-datatable-thead",
  tfoot: "p-datatable-tfoot",
  footer: "p-datatable-footer",
  resizeHelper: "p-column-resizer-helper",
  reorderIndicatorUp: "p-datatable-reorder-indicator-up",
  reorderIndicatorDown: "p-datatable-reorder-indicator-down",
  paginator: function paginator(_ref3) {
    var position2 = _ref3.position;
    return classNames$1("p-paginator-" + position2);
  },
  bodyCell: function bodyCell(_ref4) {
    var selectionMode = _ref4.selectionMode, editor = _ref4.editor, editingState = _ref4.editingState, frozen = _ref4.frozen, cellSelected = _ref4.cellSelected, align = _ref4.align, props = _ref4.bodyProps, getCellParams = _ref4.getCellParams;
    return classNames$1(_defineProperty$1({
      "p-selection-column": selectionMode !== null,
      "p-editable-column": editor,
      "p-cell-editing": editor && editingState,
      "p-frozen-column": frozen,
      "p-selectable-cell": props.allowCellSelection && props.isSelectable({
        data: getCellParams(),
        index: props.rowIndex
      }),
      "p-highlight": cellSelected
    }, "p-align-".concat(align), !!align));
  },
  columnTitle: "p-column-title",
  bodyRow: function bodyRow(_ref5) {
    var props = _ref5.rowProps;
    return classNames$1({
      "p-highlight": !props.allowCellSelection && props.selected || props.contextMenuSelected,
      "p-highlight-contextmenu": props.contextMenuSelected,
      "p-selectable-row": props.allowRowSelection && props.isSelectable({
        data: props.rowData,
        index: props.rowIndex
      }),
      "p-row-odd": props.rowIndex % 2 !== 0
    });
  },
  rowGroupTogglerIcon: "p-row-toggler-icon",
  rowGroupToggler: "p-row-toggler p-link",
  rowGroupHeader: "p-rowgroup-header",
  rowGroupHeaderName: "p-rowgroup-header-name",
  rowGroupFooter: "p-rowgroup-footer",
  rowReorderIcon: "p-datatable-reorderablerow-handle",
  rowTogglerIcon: "p-row-toggler-icon",
  rowToggler: "p-row-toggler p-link",
  rowEditorSaveIcon: "p-row-editor-save-icon",
  rowEditorSaveButton: "p-row-editor-save p-link",
  rowEditorCancelIcon: "p-row-editor-cancel-icon",
  rowEditorCancelButton: "p-row-editor-cancel p-link",
  rowEditorInitIcon: "p-row-editor-init-icon",
  rowEditorInitButton: "p-row-editor-init p-link",
  rowExpansion: "p-datatable-row-expansion",
  virtualScrollerSpacer: function virtualScrollerSpacer(_ref6) {
    var className = _ref6.className;
    return className;
  },
  tbody: function tbody(_ref7) {
    var className = _ref7.className;
    return className;
  },
  filterInput: "p-fluid p-column-filter-element",
  filterMenuButton: function filterMenuButton(_ref8) {
    var overlayVisibleState = _ref8.overlayVisibleState, hasFilter = _ref8.hasFilter;
    return classNames$1("p-column-filter-menu-button p-link", {
      "p-column-filter-menu-button-open": overlayVisibleState,
      "p-column-filter-menu-button-active": hasFilter()
    });
  },
  headerFilterClearButton: function headerFilterClearButton(_ref9) {
    var hasRowFilter = _ref9.hasRowFilter;
    return classNames$1("p-column-filter-clear-button p-link", {
      "p-hidden-space": !hasRowFilter()
    });
  },
  filterSeparator: "p-column-filter-separator",
  filterRowItem: function filterRowItem(_ref10) {
    var isRowMatchModeSelected = _ref10.isRowMatchModeSelected, isShowMatchModes = _ref10.isShowMatchModes, value = _ref10.value;
    return isShowMatchModes() ? classNames$1("p-column-filter-row-item", {
      "p-highlight": value && isRowMatchModeSelected(value)
    }) : void 0;
  },
  filterRowItems: "p-column-filter-row-items",
  filterOperator: "p-column-filter-operator",
  filterConstraints: "p-column-filter-constraints",
  filterConstraint: "p-column-filter-constraint",
  filterAddRule: "p-column-filter-add-rule",
  filterButtonBar: "p-column-filter-buttonbar",
  filterOverlay: function filterOverlay(_ref11) {
    var props = _ref11.columnFilterProps, context = _ref11.context, getColumnProp = _ref11.getColumnProp;
    return classNames$1("p-column-filter-overlay p-component p-fluid", getColumnProp("filterMenuClassName"), {
      "p-column-filter-overlay-menu": props.display === "menu",
      "p-input-filled": context && context.inputStyle === "filled" || PrimeReact$2.inputStyle === "filled",
      "p-ripple-disabled": context && context.ripple === false || PrimeReact$2.ripple === false
    });
  },
  columnFilter: function columnFilter(_ref12) {
    var props = _ref12.columnFilterProps;
    return classNames$1("p-column-filter p-fluid", {
      "p-column-filter-row": props.display === "row",
      "p-column-filter-menu": props.display === "menu"
    });
  },
  columnResizer: "p-column-resizer",
  emptyMessage: "p-datatable-emptymessage",
  sortBadge: "p-sortable-column-badge",
  sortIcon: "p-sortable-column-icon",
  checkboxWrapper: function checkboxWrapper(_ref13) {
    var props = _ref13.rowProps, focusedState = _ref13.focusedState;
    return classNames$1("p-checkbox p-component", {
      "p-checkbox-focused": focusedState,
      "p-disabled": props.disabled
    });
  },
  checkbox: function checkbox(_ref14) {
    var props = _ref14.rowProps, focusedState = _ref14.focusedState;
    return classNames$1("p-checkbox-box p-component", {
      "p-highlight": props.checked,
      "p-focus": focusedState
    });
  },
  checkboxIcon: "p-checkbox-icon",
  radiobuttonWrapper: function radiobuttonWrapper(_ref15) {
    var props = _ref15.rowProps, focusedState = _ref15.focusedState;
    return classNames$1("p-radiobutton p-component", {
      "p-radiobutton-focused": focusedState,
      "p-disabled": props.disabled
    });
  },
  radiobutton: function radiobutton(_ref16) {
    var props = _ref16.rowProps, focusedState = _ref16.focusedState;
    return classNames$1("p-radiobutton-box p-component", {
      "p-highlight": props.checked,
      "p-focus": focusedState
    });
  },
  radiobuttonIcon: "p-radiobutton-icon",
  headerTitle: "p-column-title",
  headerCheckboxWrapper: "p-checkbox p-component",
  headerCheckbox: function headerCheckbox(_ref17) {
    var props = _ref17.headerProps, focusedState = _ref17.focusedState;
    return classNames$1("p-checkbox-box p-component", {
      "p-highlight": props.checked,
      "p-disabled": props.disabled,
      "p-focus": focusedState
    });
  },
  headerCheckboxIcon: "p-checkbox-icon",
  headerContent: "p-column-header-content",
  headerCell: function headerCell(_ref18) {
    var props = _ref18.headerProps, frozen = _ref18.frozen, sortMeta = _ref18.sortMeta, align = _ref18.align, _isSortableDisabled = _ref18._isSortableDisabled, getColumnProp = _ref18.getColumnProp;
    return ObjectUtils.isEmpty(props) ? classNames$1("p-filter-column", {
      "p-frozen-column": frozen
    }) : classNames$1(_defineProperty$1({
      "p-filter-column": !props.headerColumnGroup && props.filterDisplay === "row",
      "p-sortable-column": getColumnProp("sortable"),
      "p-resizable-column": props.resizableColumns && getColumnProp("resizeable"),
      "p-highlight": sortMeta.sorted,
      "p-frozen-column": frozen,
      "p-selection-column": getColumnProp("selectionMode"),
      "p-sortable-disabled": getColumnProp("sortable") && _isSortableDisabled,
      "p-reorderable-column": props.reorderableColumns && getColumnProp("reorderable") && !frozen
    }, "p-align-".concat(align), !!align));
  },
  footerCell: function footerCell(_ref19) {
    var getColumnProp = _ref19.getColumnProp, align = _ref19.align;
    return classNames$1(_defineProperty$1({
      "p-frozen-column": getColumnProp("frozen")
    }, "p-align-".concat(align), !!align));
  },
  transition: "p-connected-overlay"
};
var inlineStyles = {
  wrapper: {
    overflow: "auto"
  },
  resizeHelper: {
    display: "none"
  },
  reorderIndicatorUp: function reorderIndicatorUp(_ref20) {
    var style = _ref20.style;
    return _objectSpread$c({}, style);
  },
  reorderIndicatorDown: function reorderIndicatorDown(_ref21) {
    var style = _ref21.style;
    return _objectSpread$c({}, style);
  }
};
var DataTableBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "DataTable",
    alwaysShowPaginator: true,
    breakpoint: "960px",
    cellClassName: null,
    cellSelection: false,
    checkIcon: null,
    className: null,
    collapsedRowIcon: null,
    columnResizeMode: "fit",
    compareSelectionBy: "deepEquals",
    contextMenuSelection: null,
    csvSeparator: ",",
    currentPageReportTemplate: "({currentPage} of {totalPages})",
    customRestoreState: null,
    customSaveState: null,
    dataKey: null,
    defaultSortOrder: 1,
    dragSelection: false,
    editMode: null,
    editingRows: null,
    emptyMessage: null,
    expandableRowGroups: false,
    expandedRowIcon: null,
    expandedRows: null,
    exportFilename: "download",
    exportFunction: null,
    filterClearIcon: null,
    filterDelay: 300,
    filterDisplay: "menu",
    filterIcon: null,
    filterLocale: void 0,
    filters: null,
    first: 0,
    footer: null,
    footerColumnGroup: null,
    frozenRow: false,
    frozenValue: null,
    frozenWidth: null,
    globalFilter: null,
    globalFilterFields: null,
    globalFilterMatchMode: FilterMatchMode$2.CONTAINS,
    groupRowsBy: null,
    header: null,
    headerColumnGroup: null,
    id: null,
    isDataSelectable: null,
    lazy: false,
    loading: false,
    loadingIcon: null,
    metaKeySelection: false,
    multiSortMeta: null,
    onAllRowsSelect: null,
    onAllRowsUnselect: null,
    onCellClick: null,
    onCellSelect: null,
    onCellUnselect: null,
    onColReorder: null,
    onColumnResizeEnd: null,
    onColumnResizerClick: null,
    onColumnResizerDoubleClick: null,
    onContextMenu: null,
    onContextMenuSelectionChange: null,
    onFilter: null,
    onPage: null,
    onRowClick: null,
    onRowCollapse: null,
    onRowDoubleClick: null,
    onRowEditCancel: null,
    onRowEditChange: null,
    onRowEditComplete: null,
    onRowEditInit: null,
    onRowEditSave: null,
    onRowExpand: null,
    onRowMouseEnter: null,
    onRowMouseLeave: null,
    onRowPointerDown: null,
    onRowPointerUp: null,
    onRowReorder: null,
    onRowSelect: null,
    onRowToggle: null,
    onRowUnselect: null,
    onSelectAllChange: null,
    onSelectionChange: null,
    onSort: null,
    onStateRestore: null,
    onStateSave: null,
    onValueChange: null,
    pageLinkSize: 5,
    paginator: false,
    paginatorClassName: null,
    paginatorDropdownAppendTo: null,
    paginatorLeft: null,
    paginatorPosition: "bottom",
    paginatorRight: null,
    paginatorTemplate: "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
    removableSort: false,
    reorderIndicatorDownIcon: null,
    reorderIndicatorUpIcon: null,
    reorderableColumns: false,
    reorderableRows: false,
    resizableColumns: false,
    responsiveLayout: "scroll",
    rowClassName: null,
    rowEditValidator: null,
    rowEditorCancelIcon: null,
    rowEditorInitIcon: null,
    rowEditorSaveIcon: null,
    rowExpansionTemplate: null,
    rowGroupFooterTemplate: null,
    rowGroupHeaderTemplate: null,
    rowGroupMode: null,
    rowHover: false,
    rows: null,
    rowsPerPageOptions: null,
    scrollHeight: null,
    scrollable: false,
    selectAll: false,
    selectOnEdit: true,
    selection: null,
    selectionAriaLabel: null,
    selectionAutoFocus: true,
    selectionMode: null,
    selectionPageOnly: false,
    showGridlines: false,
    showHeaders: true,
    showRowReorderElement: null,
    showSelectAll: true,
    showSelectionElement: null,
    size: "normal",
    sortField: null,
    sortIcon: null,
    sortMode: "single",
    sortOrder: null,
    stateKey: null,
    stateStorage: "session",
    stripedRows: false,
    style: null,
    tabIndex: 0,
    tableClassName: null,
    tableStyle: null,
    totalRecords: null,
    value: null,
    virtualScrollerOptions: null,
    children: void 0
  },
  css: {
    styles: styles$1,
    classes,
    inlineStyles
  }
});
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties$1(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function ownKeys$b(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$b(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$b(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$b(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var RowCheckbox = /* @__PURE__ */ reactExports.memo(function(props) {
  var _React$useState = reactExports.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), focusedState = _React$useState2[0], setFocusedState = _React$useState2[1];
  var mergeProps2 = useMergeProps();
  var getColumnProps = function getColumnProps2() {
    return ColumnBase.getCProps(props.column);
  };
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx;
  var getColumnPTOptions = function getColumnPTOptions2(key) {
    var columnMetaData = {
      props: getColumnProps(),
      parent: props.metaData,
      hostName: props.hostName,
      state: {
        focused: focusedState
      },
      context: {
        index: props.tabIndex,
        checked: props.checked,
        disabled: props.disabled
      }
    };
    return mergeProps2(ptm("column.".concat(key), {
      column: columnMetaData
    }), ptm("column.".concat(key), columnMetaData), ptmo(getColumnProps(), key, columnMetaData));
  };
  var _onFocus = function onFocus2() {
    setFocusedState(true);
  };
  var _onBlur = function onBlur() {
    setFocusedState(false);
  };
  var _onClick = function onClick(event) {
    if (!props.disabled) {
      setFocusedState(true);
      props.onChange(event);
      event.preventDefault();
    }
  };
  var _onKeyDown = function onKeyDown(event) {
    if (event.code === "Space" || event.key === " ") {
      _onClick(event);
      event.preventDefault();
    }
  };
  var checkboxIconProps = mergeProps2({
    className: cx("checkboxIcon")
  }, getColumnPTOptions("checkboxIcon"));
  var icon2 = props.checked ? props.checkIcon || /* @__PURE__ */ reactExports.createElement(CheckIcon, checkboxIconProps) : null;
  var checkIcon = IconUtils.getJSXIcon(icon2, _objectSpread$b({}, checkboxIconProps), {
    props
  });
  var tabIndex = props.disabled ? null : "0";
  var checkboxWrapperProps = mergeProps2({
    className: cx("checkboxWrapper", {
      rowProps: props,
      focusedState
    }),
    onClick: function onClick(e2) {
      return _onClick(e2);
    }
  }, getColumnPTOptions("checkboxWrapper"));
  var checkboxProps = mergeProps2({
    className: cx("checkbox", {
      rowProps: props,
      focusedState
    }),
    role: "checkbox",
    "aria-checked": props.checked,
    tabIndex,
    onKeyDown: function onKeyDown(e2) {
      return _onKeyDown(e2);
    },
    onFocus: function onFocus2(e2) {
      return _onFocus();
    },
    onBlur: function onBlur(e2) {
      return _onBlur();
    },
    "aria-label": props.ariaLabel
  }, getColumnPTOptions("checkbox"));
  return /* @__PURE__ */ reactExports.createElement("div", checkboxWrapperProps, /* @__PURE__ */ reactExports.createElement("div", checkboxProps, checkIcon));
});
RowCheckbox.displayName = "RowCheckbox";
var RowRadioButton = /* @__PURE__ */ reactExports.memo(function(props) {
  var _React$useState = reactExports.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), focusedState = _React$useState2[0], setFocusedState = _React$useState2[1];
  var inputRef = reactExports.useRef(null);
  var mergeProps2 = useMergeProps();
  var getColumnProps = function getColumnProps2() {
    return ColumnBase.getCProps(props.column);
  };
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx;
  var getColumnPTOptions = function getColumnPTOptions2(key) {
    var columnMetaData = {
      props: getColumnProps(),
      parent: props.metaData,
      hostName: props.hostName,
      state: {
        focused: focusedState
      },
      context: {
        index: props.tabIndex,
        checked: props.checked,
        disabled: props.disabled
      }
    };
    return mergeProps2(ptm("column.".concat(key), {
      column: columnMetaData
    }), ptm("column.".concat(key), columnMetaData), ptmo(getColumnProps(), key, columnMetaData));
  };
  var _onFocus = function onFocus2() {
    setFocusedState(true);
  };
  var _onBlur = function onBlur() {
    setFocusedState(false);
  };
  var _onClick = function onClick(event) {
    if (!props.disabled) {
      props.onChange(event);
      DomHandler.focus(inputRef.current);
    }
  };
  var _onKeyDown = function onKeyDown(event) {
    if (event.code === "Space" || event.key === " ") {
      _onClick(event);
      event.preventDefault();
    }
  };
  var _onChange = function onChange2(event) {
    _onClick(event);
  };
  var name = "".concat(props.tableSelector, "_dt_radio");
  var radiobuttonWrapperProps = mergeProps2({
    className: cx("radiobuttonWrapper", {
      rowProps: props,
      focusedState
    })
  }, getColumnPTOptions("radiobuttonWrapper"));
  var hiddenInputWrapperProps = mergeProps2({
    className: "p-hidden-accessible"
  }, getColumnPTOptions("hiddenInputWrapper"));
  var hiddenInputProps = mergeProps2({
    name,
    type: "radio",
    checked: props.checked,
    onFocus: function onFocus2(e2) {
      return _onFocus();
    },
    onBlur: function onBlur(e2) {
      return _onBlur();
    },
    onChange: function onChange2(e2) {
      return _onChange(e2);
    },
    onKeyDown: function onKeyDown(e2) {
      return _onKeyDown(e2);
    },
    "aria-label": props.ariaLabel
  }, getColumnPTOptions("hiddenInput"));
  var radiobuttonProps = mergeProps2({
    className: cx("radiobutton", {
      rowProps: props,
      focusedState
    }),
    onClick: function onClick(e2) {
      return _onClick(e2);
    },
    role: "radio",
    "aria-checked": props.checked
  }, getColumnPTOptions("radiobutton"));
  var radiobuttonIconProps = mergeProps2({
    className: cx("radiobuttonIcon")
  }, getColumnPTOptions("radiobuttonIcon"));
  return /* @__PURE__ */ reactExports.createElement("div", radiobuttonWrapperProps, /* @__PURE__ */ reactExports.createElement("div", hiddenInputWrapperProps, /* @__PURE__ */ reactExports.createElement("input", _extends({
    ref: inputRef
  }, hiddenInputProps))), /* @__PURE__ */ reactExports.createElement("div", radiobuttonProps, /* @__PURE__ */ reactExports.createElement("div", radiobuttonIconProps)));
});
RowRadioButton.displayName = "RowRadioButton";
function ownKeys$a(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$a(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$a(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$a(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var BodyCell = /* @__PURE__ */ reactExports.memo(function(props) {
  var mergeProps2 = useMergeProps();
  var _React$useState = reactExports.useState(props.editing), _React$useState2 = _slicedToArray$1(_React$useState, 2), editingState = _React$useState2[0], setEditingState = _React$useState2[1];
  var _React$useState3 = reactExports.useState(props.rowData), _React$useState4 = _slicedToArray$1(_React$useState3, 2), editingRowDataState = _React$useState4[0], setEditingRowDataState = _React$useState4[1];
  var _React$useState5 = reactExports.useState({}), _React$useState6 = _slicedToArray$1(_React$useState5, 2), styleObjectState = _React$useState6[0], setStyleObjectState = _React$useState6[1];
  var elementRef = reactExports.useRef(null);
  var keyHelperRef = reactExports.useRef(null);
  var overlayEventListener = reactExports.useRef(null);
  var selfClick = reactExports.useRef(false);
  var tabindexTimeout = reactExports.useRef(null);
  var initFocusTimeout = reactExports.useRef(null);
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx;
  var getColumnProp = function getColumnProp2(name) {
    return ColumnBase.getCProp(props.column, name);
  };
  var getColumnProps = function getColumnProps2() {
    return ColumnBase.getCProps(props.column);
  };
  var getColumnPTOptions = function getColumnPTOptions2(key) {
    var cProps = getColumnProps();
    var columnMetaData = {
      props: cProps,
      parent: props.metaData,
      hostName: props.hostName,
      state: {
        styleObject: styleObjectState,
        editing: editingState,
        editingRowData: editingRowDataState
      },
      context: {
        index: props.index,
        size: props.metaData.props.size,
        showGridlines: props.metaData.props.showGridlines
      }
    };
    return mergeProps2(ptm("column.".concat(key), {
      column: columnMetaData
    }), ptm("column.".concat(key), columnMetaData), ptmo(cProps, key, columnMetaData));
  };
  var field = getColumnProp("field") || "field_".concat(props.index);
  var editingKey = props.dataKey ? props.rowData && props.rowData[props.dataKey] || props.rowIndex : props.rowIndex;
  var _useEventListener = useEventListener({
    type: "click",
    listener: function listener(e2) {
      if (!selfClick.current && isOutsideClicked(e2.target)) {
        setTimeout(function() {
          switchCellToViewMode(e2, true);
        }, 0);
      }
      selfClick.current = false;
    },
    options: true
  }), _useEventListener2 = _slicedToArray$1(_useEventListener, 2), bindDocumentClickListener = _useEventListener2[0], unbindDocumentClickListener = _useEventListener2[1];
  var isEditable = function isEditable2() {
    return getColumnProp("editor");
  };
  var isSelected = function isSelected2() {
    return props.selection ? props.selection instanceof Array ? findIndex(props.selection) > -1 : equals2(props.selection) : false;
  };
  var equalsData = function equalsData2(data) {
    return props.compareSelectionBy === "equals" ? data === props.rowData : ObjectUtils.equals(data, props.rowData, props.dataKey);
  };
  var equals2 = function equals3(selectedCell) {
    return selectedCell && (selectedCell.rowIndex === props.rowIndex || equalsData(selectedCell.rowData)) && (selectedCell.field === field || selectedCell.cellIndex === props.index);
  };
  var isOutsideClicked = function isOutsideClicked2(target) {
    return elementRef.current && !(elementRef.current.isSameNode(target) || elementRef.current.contains(target));
  };
  var getVirtualScrollerOption = function getVirtualScrollerOption2(option) {
    return props.virtualScrollerOptions ? props.virtualScrollerOptions[option] : null;
  };
  var getStyle2 = function getStyle3() {
    var bodyStyle = getColumnProp("bodyStyle");
    var columnStyle = getColumnProp("style");
    return getColumnProp("frozen") ? Object.assign({}, columnStyle, bodyStyle, styleObjectState) : Object.assign({}, columnStyle, bodyStyle);
  };
  var getCellParams = function getCellParams2() {
    return {
      value: resolveFieldData(),
      field,
      rowData: props.rowData,
      rowIndex: props.rowIndex,
      cellIndex: props.index,
      selected: isSelected(),
      column: props.column,
      props
    };
  };
  var getCellCallbackParams = function getCellCallbackParams2(event) {
    var params = getCellParams();
    return _objectSpread$a({
      originalEvent: event
    }, params);
  };
  var resolveFieldData = function resolveFieldData2(data) {
    return ObjectUtils.resolveFieldData(data || props.rowData, field);
  };
  var getEditingRowData = function getEditingRowData2() {
    return props.editingMeta && props.editingMeta[editingKey] ? props.editingMeta[editingKey].data : props.rowData;
  };
  var getTabIndex = function getTabIndex2(cellSelected) {
    return props.allowCellSelection ? cellSelected ? 0 : props.rowIndex === 0 && props.index === 0 ? props.tabIndex : -1 : null;
  };
  var findIndex = function findIndex2(collection) {
    return (collection || []).findIndex(function(data) {
      return equals2(data);
    });
  };
  var closeCell = function closeCell2(event) {
    var params = getCellCallbackParams(event);
    var onBeforeCellEditHide = getColumnProp("onBeforeCellEditHide");
    if (onBeforeCellEditHide) {
      onBeforeCellEditHide(params);
    }
    setTimeout(function() {
      setEditingState(false);
      unbindDocumentClickListener();
      OverlayService.off("overlay-click", overlayEventListener.current);
      overlayEventListener.current = null;
      selfClick.current = false;
    }, 1);
  };
  var switchCellToViewMode = function switchCellToViewMode2(event, submit) {
    var callbackParams = getCellCallbackParams(event);
    setEditingRowDataState(function(prev2) {
      var newRowData = prev2;
      var newValue = resolveFieldData(newRowData);
      var params = _objectSpread$a(_objectSpread$a({}, callbackParams), {}, {
        newRowData,
        newValue
      });
      var onCellEditCancel = getColumnProp("onCellEditCancel");
      var cellEditValidator = getColumnProp("cellEditValidator");
      var onCellEditComplete = getColumnProp("onCellEditComplete");
      if (!submit && onCellEditCancel) {
        onCellEditCancel(params);
      }
      var valid = true;
      if (!submit && cellEditValidator) {
        valid = cellEditValidator(params);
      }
      if (valid) {
        if (submit && onCellEditComplete) {
          setTimeout(function() {
            return onCellEditComplete(params);
          });
        }
        closeCell(event);
      } else {
        event.preventDefault();
      }
      return newRowData;
    });
  };
  var findNextSelectableCell = function findNextSelectableCell2(cell) {
    var nextCell = cell.nextElementSibling;
    return nextCell ? DomHandler.getAttribute(nextCell, "data-p-selectable-cell") ? nextCell : findNextSelectableCell2(nextCell) : null;
  };
  var findPrevSelectableCell = function findPrevSelectableCell2(cell) {
    var prevCell = cell.previousElementSibling;
    return prevCell ? DomHandler.getAttribute(prevCell, "data-p-selectable-cell") ? prevCell : findPrevSelectableCell2(prevCell) : null;
  };
  var findDownSelectableCell = function findDownSelectableCell2(cell) {
    var downRow = cell.parentElement.nextElementSibling;
    var downCell = downRow ? downRow.children[props.index] : null;
    return downRow && downCell ? DomHandler.getAttribute(downRow, "data-p-selectable-row") && DomHandler.getAttribute(downCell, "data-p-selectable-cell") ? downCell : findDownSelectableCell2(downCell) : null;
  };
  var findUpSelectableCell = function findUpSelectableCell2(cell) {
    var upRow = cell.parentElement.previousElementSibling;
    var upCell = upRow ? upRow.children[props.index] : null;
    return upRow && upCell ? DomHandler.getAttribute(upRow, "data-p-selectable-row") && DomHandler.getAttribute(upCell, "data-p-selectable-cell") ? upCell : findUpSelectableCell2(upCell) : null;
  };
  var changeTabIndex = function changeTabIndex2(currentCell, nextCell) {
    if (currentCell && nextCell) {
      currentCell.tabIndex = -1;
      nextCell.tabIndex = props.tabIndex;
    }
  };
  var focusOnElement = function focusOnElement2() {
    clearTimeout(tabindexTimeout.current);
    tabindexTimeout.current = setTimeout(function() {
      if (editingState) {
        var focusableEl = props.editMode === "cell" ? DomHandler.getFirstFocusableElement(elementRef.current, ':not([data-pc-section="editorkeyhelperlabel"])') : DomHandler.findSingle(elementRef.current, '[data-p-row-editor-save="true"]');
        focusableEl && focusableEl.focus();
      }
      keyHelperRef.current && (keyHelperRef.current.tabIndex = editingState ? -1 : 0);
    }, 1);
  };
  var focusOnInit = function focusOnInit2() {
    clearTimeout(initFocusTimeout.current);
    initFocusTimeout.current = setTimeout(function() {
      var focusableEl = props.editMode === "row" ? DomHandler.findSingle(elementRef.current, '[data-p-row-editor-init="true"]') : null;
      focusableEl && focusableEl.focus();
    }, 1);
  };
  var updateStickyPosition = function updateStickyPosition2() {
    if (getColumnProp("frozen")) {
      var styleObject = _objectSpread$a({}, styleObjectState);
      var align = getColumnProp("alignFrozen");
      if (align === "right") {
        var right = 0;
        var next2 = elementRef.current && elementRef.current.nextElementSibling;
        if (next2) {
          right = DomHandler.getOuterWidth(next2) + parseFloat(next2.style.right || 0);
        }
        styleObject["right"] = right + "px";
      } else {
        var left = 0;
        var prev2 = elementRef.current && elementRef.current.previousElementSibling;
        if (prev2) {
          left = DomHandler.getOuterWidth(prev2) + parseFloat(prev2.style.left || 0);
        }
        styleObject["left"] = left + "px";
      }
      var isSameStyle = styleObjectState["left"] === styleObject["left"] && styleObjectState["right"] === styleObject["right"];
      !isSameStyle && setStyleObjectState(styleObject);
    }
  };
  var editorCallback = function editorCallback2(val) {
    var editingRowData = _objectSpread$a({}, editingRowDataState);
    ObjectUtils.mutateFieldData(editingRowData, field, val);
    setEditingRowDataState(editingRowData);
    var currentData = getEditingRowData();
    if (currentData) {
      ObjectUtils.mutateFieldData(currentData, field, val);
    }
  };
  var _onClick = function onClick(event) {
    var params = getCellCallbackParams(event);
    if (props.editMode !== "row" && isEditable() && !editingState && (props.selectOnEdit || !props.selectOnEdit && props.selected)) {
      selfClick.current = true;
      var onBeforeCellEditShow = getColumnProp("onBeforeCellEditShow");
      var onCellEditInit = getColumnProp("onCellEditInit");
      var cellEditValidatorEvent = getColumnProp("cellEditValidatorEvent");
      if (onBeforeCellEditShow) {
        if (onBeforeCellEditShow(params) === false) {
          return;
        }
        if (event && event.defaultPrevented) {
          return;
        }
      }
      setTimeout(function() {
        setEditingState(true);
        if (onCellEditInit) {
          if (onCellEditInit(params) === false) {
            return;
          }
          if (event && event.defaultPrevented) {
            return;
          }
        }
        if (cellEditValidatorEvent === "click") {
          bindDocumentClickListener();
          overlayEventListener.current = function(e2) {
            if (!isOutsideClicked(e2.target)) {
              selfClick.current = true;
            }
          };
          OverlayService.on("overlay-click", overlayEventListener.current);
        }
      }, 1);
    }
    if (props.allowCellSelection && props.onClick) {
      props.onClick(params);
    }
  };
  var _onMouseDown = function onMouseDown(event) {
    var params = getCellCallbackParams(event);
    props.onMouseDown && props.onMouseDown(params);
  };
  var _onMouseUp = function onMouseUp(event) {
    var params = getCellCallbackParams(event);
    props.onMouseUp && props.onMouseUp(params);
  };
  var _onKeyDown = function onKeyDown(event) {
    if (props.editMode !== "row") {
      if (event.code === "Enter" || event.code === "Tab") {
        switchCellToViewMode(event, true);
      }
      if (event.code === "Escape") {
        switchCellToViewMode(event, false);
      }
    }
    if (props.allowCellSelection) {
      var target = event.target, cell = event.currentTarget;
      switch (event.code) {
        case "ArrowLeft":
          var prevCell = findPrevSelectableCell(cell);
          if (prevCell) {
            changeTabIndex(cell, prevCell);
            prevCell.focus();
          }
          event.preventDefault();
          break;
        case "ArrowRight":
          var nextCell = findNextSelectableCell(cell);
          if (nextCell) {
            changeTabIndex(cell, nextCell);
            nextCell.focus();
          }
          event.preventDefault();
          break;
        case "ArrowUp":
          var upCell = findUpSelectableCell(cell);
          if (upCell) {
            changeTabIndex(cell, upCell);
            upCell.focus();
          }
          event.preventDefault();
          break;
        case "ArrowDown":
          var downCell = findDownSelectableCell(cell);
          if (downCell) {
            changeTabIndex(cell, downCell);
            downCell.focus();
          }
          event.preventDefault();
          break;
        case "Enter":
        case "NumpadEnter":
          if (event.shiftKey || event.ctrlKey)
            ;
          else if (!DomHandler.isClickable(target)) {
            _onClick(event);
            event.preventDefault();
          }
          break;
        case "Space":
          if (!DomHandler.isClickable(target) && !target.readOnly) {
            _onClick(event);
            event.preventDefault();
          }
          break;
      }
    }
  };
  var _onBlur = function onBlur(event) {
    selfClick.current = false;
    if (props.editMode !== "row" && editingState && getColumnProp("cellEditValidatorEvent") === "blur") {
      switchCellToViewMode(event, true);
    }
  };
  var onEditorFocus = function onEditorFocus2(event) {
    _onClick(event);
  };
  var onRadioChange = function onRadioChange2(event) {
    props.onRadioChange({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var onCheckboxChange = function onCheckboxChange2(event) {
    props.onCheckboxChange({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var onRowToggle = function onRowToggle2(event) {
    props.onRowToggle({
      originalEvent: event,
      data: props.rowData
    });
    event.preventDefault();
    event.stopPropagation();
  };
  var onRowEditInit = function onRowEditInit2(event) {
    props.onRowEditInit({
      originalEvent: event,
      data: props.rowData,
      newData: getEditingRowData(),
      field,
      index: props.rowIndex
    });
  };
  var onRowEditSave = function onRowEditSave2(event) {
    props.onRowEditSave({
      originalEvent: event,
      data: props.rowData,
      newData: getEditingRowData(),
      field,
      index: props.rowIndex
    });
    focusOnInit();
  };
  var onRowEditCancel = function onRowEditCancel2(event) {
    props.onRowEditCancel({
      originalEvent: event,
      data: props.rowData,
      newData: getEditingRowData(),
      field,
      index: props.rowIndex
    });
    focusOnInit();
  };
  reactExports.useEffect(function() {
    if (getColumnProp("frozen")) {
      updateStickyPosition();
    }
    if (props.editMode === "cell" || props.editMode === "row") {
      focusOnElement();
    }
  });
  reactExports.useEffect(function() {
    if (props.editMode === "row" && props.editing !== editingState) {
      setEditingState(props.editing);
    }
  }, [props.editMode, props.editing, editingState]);
  useUpdateEffect(function() {
    if (props.editMode === "cell" || props.editMode === "row") {
      setEditingRowDataState(getEditingRowData());
    }
  }, [props.editingMeta]);
  reactExports.useEffect(function() {
    if (props.editMode === "cell" || props.editMode === "row") {
      var callbackParams = getCellCallbackParams();
      var params = _objectSpread$a(_objectSpread$a({}, callbackParams), {}, {
        editing: editingState,
        editingKey
      });
      props.onEditingMetaChange(params);
    }
  }, [editingState]);
  useUnmountEffect(function() {
    if (overlayEventListener.current) {
      OverlayService.off("overlay-click", overlayEventListener.current);
      overlayEventListener.current = null;
    }
  });
  var createLoading = function createLoading2() {
    var options2 = getVirtualScrollerOption("getLoaderOptions")(props.rowIndex, {
      cellIndex: props.index,
      cellFirst: props.index === 0,
      cellLast: props.index === getVirtualScrollerOption("columns").length - 1,
      cellEven: props.index % 2 === 0,
      cellOdd: props.index % 2 !== 0,
      column: props.column,
      field
    });
    var content = ObjectUtils.getJSXElement(getVirtualScrollerOption("loadingTemplate"), options2);
    var bodyCellProps = mergeProps2(getColumnPTOptions("bodyCell"), {
      role: "cell"
    });
    return /* @__PURE__ */ reactExports.createElement("td", bodyCellProps, content);
  };
  var createElement = function createElement2() {
    var content, editorKeyHelper;
    var cellSelected = props.allowCellSelection && isSelected();
    var isRowEditor = props.editMode === "row";
    var tabIndex = getTabIndex(cellSelected);
    var selectionMode = getColumnProp("selectionMode");
    var rowReorder = getColumnProp("rowReorder");
    var header = getColumnProp("header");
    var body = getColumnProp("body");
    var editor = getColumnProp("editor");
    var frozen = getColumnProp("frozen");
    var align = getColumnProp("align");
    var value = resolveFieldData();
    var columnBodyOptions = {
      column: props.column,
      field,
      rowIndex: props.rowIndex,
      frozenRow: props.frozenRow,
      props: props.tableProps
    };
    var rowEditor = ObjectUtils.getPropValue(getColumnProp("rowEditor"), props.rowData, columnBodyOptions);
    var expander = ObjectUtils.getPropValue(getColumnProp("expander"), props.rowData, columnBodyOptions);
    var cellClassName = ObjectUtils.getPropValue(props.cellClassName, value, columnBodyOptions);
    var bodyClassName = ObjectUtils.getPropValue(getColumnProp("bodyClassName"), props.rowData, columnBodyOptions);
    var style = getStyle2();
    var columnTitleProps = mergeProps2({
      className: cx("columnTitle")
    }, getColumnPTOptions("columnTitle"));
    var title = props.responsiveLayout === "stack" && /* @__PURE__ */ reactExports.createElement("span", columnTitleProps, ObjectUtils.getJSXElement(header, {
      props: props.tableProps
    }));
    if (selectionMode) {
      var showSelection = props.showSelectionElement ? props.showSelectionElement(props.rowData, {
        rowIndex: props.rowIndex,
        props: props.tableProps
      }) : true;
      var label;
      if (showSelection) {
        var ariaLabelField = props.selectionAriaLabel || props.tableProps.dataKey;
        var ariaLabelText = ObjectUtils.resolveFieldData(props.rowData, ariaLabelField);
        label = "".concat(props.selected ? ariaLabel$2("unselectLabel") : ariaLabel$2("selectLabel"), " ").concat(ariaLabelText);
      }
      content = showSelection && /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, selectionMode === "single" && /* @__PURE__ */ reactExports.createElement(RowRadioButton, {
        hostName: props.hostName,
        column: props.column,
        checked: props.selected,
        disabled: !props.isSelectable({
          data: props.rowData,
          index: props.rowIndex
        }),
        onChange: onRadioChange,
        tabIndex: props.tabIndex,
        tableSelector: props.tableSelector,
        ariaLabel: label,
        ptCallbacks: props.ptCallbacks,
        metaData: props.metaData
      }), selectionMode === "multiple" && /* @__PURE__ */ reactExports.createElement(RowCheckbox, {
        hostName: props.hostName,
        column: props.column,
        checked: props.selected,
        disabled: !props.isSelectable({
          data: props.rowData,
          index: props.rowIndex
        }),
        onChange: onCheckboxChange,
        tabIndex: props.tabIndex,
        ariaLabel: label,
        checkIcon: props.checkIcon,
        ptCallbacks: props.ptCallbacks,
        metaData: props.metaData
      }));
    } else if (rowReorder) {
      var showReorder = props.showRowReorderElement ? props.showRowReorderElement(props.rowData, {
        rowIndex: props.rowIndex,
        props: props.tableProps
      }) : true;
      var rowReorderIconProps = mergeProps2({
        className: cx("rowReorderIcon")
      }, getColumnPTOptions("rowReorderIcon"));
      var rowReorderIcon = getColumnProp("rowReorderIcon") || /* @__PURE__ */ reactExports.createElement(BarsIcon, rowReorderIconProps);
      content = showReorder ? IconUtils.getJSXIcon(rowReorderIcon, _objectSpread$a({}, rowReorderIconProps), {
        props
      }) : null;
    } else if (expander) {
      var rowTogglerIconProps = mergeProps2({
        className: cx("rowTogglerIcon"),
        "aria-hidden": true
      }, getColumnPTOptions("rowTogglerIcon"));
      var icon2 = props.expanded ? props.expandedRowIcon || /* @__PURE__ */ reactExports.createElement(ChevronDownIcon, rowTogglerIconProps) : props.collapsedRowIcon || /* @__PURE__ */ reactExports.createElement(ChevronRightIcon, rowTogglerIconProps);
      var togglerIcon = IconUtils.getJSXIcon(icon2, _objectSpread$a({}, rowTogglerIconProps), {
        props
      });
      var ariaControls = "".concat(props.tableSelector, "_content_").concat(props.rowIndex, "_expanded");
      var _ariaLabelField = props.selectionAriaLabel || props.tableProps.dataKey;
      var _ariaLabelText = ObjectUtils.resolveFieldData(props.rowData, _ariaLabelField);
      var _label = "".concat(props.expanded ? ariaLabel$2("collapseLabel") : ariaLabel$2("expandLabel"), " ").concat(_ariaLabelText);
      var expanderProps = {
        onClick: onRowToggle,
        className: cx("rowToggler")
      };
      var rowTogglerProps = mergeProps2(_objectSpread$a(_objectSpread$a({}, expanderProps), {}, {
        type: "button",
        "aria-expanded": props.expanded,
        "aria-controls": ariaControls,
        tabIndex: props.tabIndex,
        "aria-label": _label
      }), getColumnPTOptions("rowToggler"));
      content = /* @__PURE__ */ reactExports.createElement("button", rowTogglerProps, togglerIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null));
      if (body) {
        expanderProps["element"] = content;
        content = ObjectUtils.getJSXElement(body, props.rowData, {
          column: props.column,
          field,
          rowIndex: props.rowIndex,
          frozenRow: props.frozenRow,
          props: props.tableProps,
          expander: expanderProps
        });
      }
    } else if (isRowEditor && rowEditor) {
      var rowEditorProps = {};
      var rowEditorSaveIconProps = mergeProps2({
        className: cx("rowEditorSaveIcon")
      }, getColumnPTOptions("rowEditorSaveIcon"));
      var rowEditorCancelIconProps = mergeProps2({
        className: cx("rowEditorCancelIcon")
      }, getColumnPTOptions("rowEditorCancelIcon"));
      var rowEditorInitIconProps = mergeProps2({
        className: cx("rowEditorInitIcon")
      }, getColumnPTOptions("rowEditorInitIcon"));
      var rowEditorSaveIcon = IconUtils.getJSXIcon(props.rowEditorSaveIcon || /* @__PURE__ */ reactExports.createElement(CheckIcon, rowEditorSaveIconProps), _objectSpread$a({}, rowEditorSaveIconProps), {
        props
      });
      var rowEditorCancelIcon = IconUtils.getJSXIcon(props.rowEditorCancelIcon || /* @__PURE__ */ reactExports.createElement(TimesIcon, rowEditorCancelIconProps), _objectSpread$a({}, rowEditorCancelIconProps), {
        props
      });
      var rowEditorInitIcon = IconUtils.getJSXIcon(props.rowEditorInitIcon || /* @__PURE__ */ reactExports.createElement(PencilIcon, rowEditorInitIconProps), _objectSpread$a({}, rowEditorInitIconProps), {
        props
      });
      if (editingState) {
        rowEditorProps = {
          editing: true,
          onSaveClick: onRowEditSave,
          saveClassName: cx("rowEditorSaveButton"),
          onCancelClick: onRowEditCancel,
          cancelClassName: cx("rowEditorCancelButton")
        };
        var rowEditorSaveButtonProps = mergeProps2(_defineProperty$1(_defineProperty$1({
          type: "button",
          name: "row-save",
          "aria-label": ariaLabel$2("saveEdit"),
          onClick: rowEditorProps.onSaveClick,
          className: rowEditorProps.saveClassName,
          tabIndex: props.tabIndex
        }, "aria-label", ariaLabel$2("saveEdit")), "data-p-row-editor-save", true), getColumnPTOptions("rowEditorSaveButton"));
        var rowEditorCancelButtonProps = mergeProps2(_defineProperty$1({
          type: "button",
          name: "row-cancel",
          "aria-label": ariaLabel$2("cancelEdit"),
          onClick: rowEditorProps.onCancelClick,
          className: rowEditorProps.cancelClassName,
          tabIndex: props.tabIndex
        }, "aria-label", ariaLabel$2("cancelEdit")), getColumnPTOptions("rowEditorCancelButton"));
        content = /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("button", rowEditorSaveButtonProps, rowEditorSaveIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null)), /* @__PURE__ */ reactExports.createElement("button", rowEditorCancelButtonProps, rowEditorCancelIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null)));
      } else {
        rowEditorProps = {
          editing: false,
          onInitClick: onRowEditInit,
          initClassName: cx("rowEditorInitButton")
        };
        var rowEditorInitButtonProps = mergeProps2(_defineProperty$1(_defineProperty$1({
          type: "button",
          name: "row-edit",
          "aria-label": ariaLabel$2("editRow"),
          onClick: rowEditorProps.onInitClick,
          className: rowEditorProps.initClassName,
          tabIndex: props.tabIndex
        }, "aria-label", ariaLabel$2("editRow")), "data-p-row-editor-init", true), getColumnPTOptions("rowEditorInitButton"));
        content = /* @__PURE__ */ reactExports.createElement("button", rowEditorInitButtonProps, rowEditorInitIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null));
      }
      if (body) {
        rowEditorProps["element"] = content;
        content = ObjectUtils.getJSXElement(body, props.rowData, {
          column: props.column,
          field,
          rowIndex: props.rowIndex,
          frozenRow: props.frozenRow,
          props: props.tableProps,
          rowEditor: rowEditorProps
        });
      }
    } else if (body && (!editingState || !editor)) {
      content = body ? ObjectUtils.getJSXElement(body, props.rowData, {
        column: props.column,
        field,
        rowIndex: props.rowIndex,
        frozenRow: props.frozenRow,
        props: props.tableProps
      }) : value;
    } else if (editor && editingState) {
      content = ObjectUtils.getJSXElement(editor, {
        rowData: editingRowDataState,
        value: resolveFieldData(editingRowDataState),
        column: props.column,
        field,
        rowIndex: props.rowIndex,
        frozenRow: props.frozenRow,
        props: props.tableProps,
        editorCallback
      });
    } else {
      content = value;
    }
    content = typeof content == "boolean" ? content.toString() : content;
    if (!isRowEditor && editor) {
      var editorKeyHelperProps = mergeProps2({
        tabIndex: "0",
        className: "p-cell-editor-key-helper p-hidden-accessible",
        onFocus: function onFocus2(e2) {
          return onEditorFocus(e2);
        }
      }, getColumnPTOptions("editorKeyHelperLabel"));
      var editorKeyHelperLabelProps = mergeProps2(getColumnPTOptions("editorKeyHelper"));
      editorKeyHelper = /* @__PURE__ */ reactExports.createElement("a", _extends({
        ref: keyHelperRef
      }, editorKeyHelperProps), /* @__PURE__ */ reactExports.createElement("span", editorKeyHelperLabelProps));
    }
    var bodyCellProps = mergeProps2({
      style,
      className: classNames$1(bodyClassName, getColumnProp("className"), cellClassName, cx("bodyCell", {
        selectionMode,
        editor,
        editingState,
        frozen,
        cellSelected,
        align,
        bodyProps: props,
        getCellParams
      })),
      rowSpan: props.rowSpan,
      tabIndex,
      role: "cell",
      onClick: function onClick(e2) {
        return _onClick(e2);
      },
      onKeyDown: function onKeyDown(e2) {
        return _onKeyDown(e2);
      },
      onBlur: function onBlur(e2) {
        return _onBlur(e2);
      },
      onMouseDown: function onMouseDown(e2) {
        return _onMouseDown(e2);
      },
      onMouseUp: function onMouseUp(e2) {
        return _onMouseUp(e2);
      },
      "data-p-selectable-cell": props.allowCellSelection && props.isSelectable({
        data: getCellParams(),
        index: props.rowIndex
      }),
      "data-p-selection-column": getColumnProp("selectionMode") != null,
      "data-p-editable-column": isEditable() != null,
      "data-p-cell-editing": editingState,
      "data-p-frozen-column": frozen
    }, getColumnPTOptions("root"), getColumnPTOptions("bodyCell"));
    return /* @__PURE__ */ reactExports.createElement("td", _extends({
      ref: elementRef
    }, bodyCellProps), editorKeyHelper, title, content);
  };
  return getVirtualScrollerOption("loading") ? createLoading() : createElement();
});
BodyCell.displayName = "BodyCell";
function ownKeys$9(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$9(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$9(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$9(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var BodyRow = /* @__PURE__ */ reactExports.memo(function(props) {
  var mergeProps2 = useMergeProps();
  var _React$useState = reactExports.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), editingState = _React$useState2[0], setEditingState = _React$useState2[1];
  var editing = props.onRowEditChange ? props.editing : editingState;
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, cx = _props$ptCallbacks.cx;
  var getBodyRowPTOptions = function getBodyRowPTOptions2(key) {
    return ptm(key, {
      parent: props.metaData,
      hostName: props.hostName,
      state: {
        editing
      },
      context: {
        index: props.index,
        selectable: props.allowRowSelection && props.isSelectable({
          data: props.rowData,
          index: props.rowIndex
        }),
        selected: !props.allowCellSelection && props.selected || props.contextMenuSelected,
        stripedRows: props.metaData.props.stripedRows
      }
    });
  };
  var getColumnProp = function getColumnProp2(column2, name) {
    return ColumnBase.getCProp(column2, name);
  };
  var isFocusable2 = function isFocusable3() {
    return props.selectionMode && props.selectionModeInColumn !== "single" && props.selectionModeInColumn !== "multiple";
  };
  var isGrouped = function isGrouped2(column2) {
    var columnField = getColumnProp(column2, "field");
    if (props.groupRowsBy && columnField) {
      return Array.isArray(props.groupRowsBy) ? props.groupRowsBy.indexOf(columnField) > -1 : props.groupRowsBy === columnField;
    }
    return false;
  };
  var equals2 = function equals3(data1, data2) {
    return props.compareSelectionBy === "equals" ? data1 === data2 : ObjectUtils.equals(data1, data2, props.dataKey);
  };
  var getTabIndex = function getTabIndex2() {
    return isFocusable2() && !props.allowCellSelection ? props.rowIndex === 0 ? props.tabIndex : -1 : null;
  };
  var findIndex = function findIndex2(collection, rowData) {
    return (collection || []).findIndex(function(data) {
      return equals2(rowData, data);
    });
  };
  var changeTabIndex = function changeTabIndex2(currentRow, nextRow) {
    if (currentRow && nextRow) {
      currentRow.tabIndex = -1;
      nextRow.tabIndex = props.tabIndex;
    }
  };
  var findFirstSelectableRow = function findFirstSelectableRow2(row) {
    var firstRow = DomHandler.findSingle(row.parentNode, "tr[data-p-selectable-row]");
    return firstRow ? firstRow : null;
  };
  var findNextSelectableRow = function findNextSelectableRow2(row) {
    var nextRow = row.nextElementSibling;
    return nextRow ? DomHandler.getAttribute(nextRow, "data-p-selectable-row") === true ? nextRow : findNextSelectableRow2(nextRow) : null;
  };
  var findPrevSelectableRow = function findPrevSelectableRow2(row) {
    var prevRow = row.previousElementSibling;
    return prevRow ? DomHandler.getAttribute(prevRow, "data-p-selectable-row") === true ? prevRow : findPrevSelectableRow2(prevRow) : null;
  };
  var findLastSelectableRow = function findLastSelectableRow2(row) {
    var lastRow = DomHandler.findSingle(row.parentNode, "tr[data-p-selectable-row]:last-child");
    return lastRow ? lastRow : null;
  };
  var shouldRenderBodyCell = function shouldRenderBodyCell2(value, column2, i) {
    if (getColumnProp(column2, "hidden")) {
      return false;
    } else if (props.rowGroupMode && props.rowGroupMode === "rowspan" && isGrouped(column2)) {
      var prevRowData = value[i - 1];
      if (prevRowData) {
        var currentRowFieldData = ObjectUtils.resolveFieldData(value[i], getColumnProp(column2, "field"));
        var previousRowFieldData = ObjectUtils.resolveFieldData(prevRowData, getColumnProp(column2, "field"));
        return currentRowFieldData !== previousRowFieldData;
      }
    }
    return true;
  };
  var calculateRowGroupSize = function calculateRowGroupSize2(value, column2, index2) {
    if (isGrouped(column2)) {
      var currentRowFieldData = ObjectUtils.resolveFieldData(value[index2], getColumnProp(column2, "field"));
      var nextRowFieldData = currentRowFieldData;
      var groupRowSpan = 0;
      while (currentRowFieldData === nextRowFieldData) {
        groupRowSpan++;
        var nextRowData = value[++index2];
        if (nextRowData) {
          nextRowFieldData = ObjectUtils.resolveFieldData(nextRowData, getColumnProp(column2, "field"));
        } else {
          break;
        }
      }
      return groupRowSpan === 1 ? null : groupRowSpan;
    } else {
      return null;
    }
  };
  var _onClick = function onClick(event) {
    props.onRowClick({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onDoubleClick = function onDoubleClick(event) {
    props.onRowDoubleClick({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onPointerDown = function onPointerDown(event) {
    props.onRowPointerDown({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onPointerUp = function onPointerUp(event) {
    props.onRowPointerUp({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var onRightClick = function onRightClick2(event) {
    props.onRowRightClick({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onMouseEnter = function onMouseEnter(event) {
    props.onRowMouseEnter({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onMouseLeave = function onMouseLeave(event) {
    props.onRowMouseLeave({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onTouchEnd = function onTouchEnd(event) {
    props.onRowTouchEnd(event);
  };
  var _onKeyDown = function onKeyDown(event) {
    if (isFocusable2() && !props.allowCellSelection) {
      var target = event.target, row = event.currentTarget;
      switch (event.code) {
        case "ArrowDown":
          onArrowDownKey(row, event);
          break;
        case "ArrowUp":
          onArrowUpKey(row, event);
          break;
        case "Home":
          onHomeKey(row, event);
          break;
        case "End":
          onEndKey(row, event);
          break;
        case "Enter":
          onEnterKey(row, event, target);
          break;
        case "Space":
          onSpaceKey(row, event, target);
          break;
        case "Tab":
          onTabKey(row, event);
          break;
      }
    }
  };
  var onArrowDownKey = function onArrowDownKey2(row, event) {
    var nextRow = findNextSelectableRow(row);
    if (nextRow) {
      changeTabIndex(row, nextRow);
      nextRow.focus();
    }
    event.preventDefault();
  };
  var onArrowUpKey = function onArrowUpKey2(row, event) {
    var prevRow = findPrevSelectableRow(row);
    if (prevRow) {
      changeTabIndex(row, prevRow);
      prevRow.focus();
    }
    event.preventDefault();
  };
  var onHomeKey = function onHomeKey2(row, event) {
    var firstRow = findFirstSelectableRow(row);
    if (firstRow) {
      changeTabIndex(row, firstRow);
      firstRow.focus();
    }
    event.preventDefault();
  };
  var onEndKey = function onEndKey2(row, event) {
    var lastRow = findLastSelectableRow(row);
    if (lastRow) {
      changeTabIndex(row, lastRow);
      lastRow.focus();
    }
    event.preventDefault();
  };
  var onEnterKey = function onEnterKey2(row, event, target) {
    if (!DomHandler.isClickable(target)) {
      _onClick(event);
      event.preventDefault();
    }
  };
  var onSpaceKey = function onSpaceKey2(row, event, target) {
    if (!DomHandler.isClickable(target) && !target.readOnly) {
      _onClick(event);
      event.preventDefault();
    }
  };
  var onTabKey = function onTabKey2(row, event) {
    var parent = row.parentNode;
    var rows = DomHandler.find(parent, 'tr[data-p-selectable-row="true"]');
    if (event.code === "Tab" && rows && rows.length > 0) {
      var firstSelectedRow = DomHandler.findSingle(parent, 'tr[data-p-highlight="true"]');
      var focusedItem = DomHandler.findSingle(parent, 'tr[data-p-selectable-row="true"][tabindex="0"]');
      if (firstSelectedRow) {
        firstSelectedRow.tabIndex = "0";
        focusedItem && focusedItem !== firstSelectedRow && (focusedItem.tabIndex = "-1");
      } else {
        rows[0].tabIndex = "0";
        focusedItem !== rows[0] && (rows[rowIndex].tabIndex = "-1");
      }
    }
  };
  var _onMouseDown = function onMouseDown(event) {
    props.onRowMouseDown({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onMouseUp = function onMouseUp(event) {
    props.onRowMouseUp({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onDragStart = function onDragStart(event) {
    props.onRowDragStart({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onDragOver = function onDragOver(event) {
    props.onRowDragOver({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onDragLeave = function onDragLeave(event) {
    props.onRowDragLeave({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onDragEnd = function onDragEnd(event) {
    props.onRowDragEnd({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var _onDrop = function onDrop(event) {
    props.onRowDrop({
      originalEvent: event,
      data: props.rowData,
      index: props.rowIndex
    });
  };
  var onEditChange = function onEditChange2(e2, isEditing) {
    if (props.onRowEditChange) {
      var editingRows;
      var dataKey = props.dataKey;
      var originalEvent = e2.originalEvent, data = e2.data, index2 = e2.index, newData = e2.newData;
      if (dataKey) {
        var dataKeyValue = String(ObjectUtils.resolveFieldData(data, dataKey));
        editingRows = props.editingRows ? _objectSpread$9({}, props.editingRows) : {};
        if (!isEditing) {
          delete editingRows[dataKeyValue];
          var newDataKeyValue = String(ObjectUtils.resolveFieldData(newData, dataKey));
          delete editingRows[newDataKeyValue];
        } else {
          editingRows[dataKeyValue] = true;
        }
      } else {
        var editingRowIndex = findIndex(props.editingRows, data);
        editingRows = props.editingRows ? _toConsumableArray$1(props.editingRows) : [];
        if (editingRowIndex !== -1)
          editingRows = editingRows.filter(function(val, i) {
            return i !== editingRowIndex;
          });
        else
          editingRows.push(data);
      }
      props.onRowEditChange({
        originalEvent,
        data: editingRows,
        index: index2
      });
    } else {
      setEditingState(isEditing);
    }
  };
  var onEditInit = function onEditInit2(e2) {
    var event = e2.originalEvent;
    if (props.onRowEditInit) {
      props.onRowEditInit({
        originalEvent: event,
        data: props.rowData,
        index: props.rowIndex
      });
    }
    onEditChange(e2, true);
    event.preventDefault();
  };
  var onEditSave = function onEditSave2(e2) {
    var event = e2.originalEvent, newData = e2.newData;
    var valid = props.rowEditValidator ? props.rowEditValidator(newData, {
      props: props.tableProps,
      rowIndex: props.rowIndex
    }) : true;
    if (props.onRowEditSave) {
      props.onRowEditSave({
        originalEvent: event,
        data: props.rowData,
        index: props.rowIndex,
        newData,
        valid
      });
    }
    if (valid) {
      if (props.onRowEditComplete) {
        props.onRowEditComplete(e2);
      }
      onEditChange(e2, false);
    }
    event.preventDefault();
  };
  var onEditCancel = function onEditCancel2(e2) {
    var event = e2.originalEvent;
    if (props.onRowEditCancel) {
      props.onRowEditCancel({
        originalEvent: event,
        data: props.rowData,
        index: props.rowIndex
      });
    }
    onEditChange(e2, false);
    event.preventDefault();
  };
  var createContent = function createContent2() {
    return props.columns.map(function(col, i) {
      if (shouldRenderBodyCell(props.value, col, props.index)) {
        var key = "".concat(props.rowIndex, "_").concat(getColumnProp(col, "columnKey") || getColumnProp(col, "field"), "_").concat(i);
        var rowSpan = props.rowGroupMode === "rowspan" ? calculateRowGroupSize(props.value, col, props.index) : null;
        return /* @__PURE__ */ reactExports.createElement(BodyCell, {
          hostName: props.hostName,
          key,
          allowCellSelection: props.allowCellSelection,
          cellClassName: props.cellClassName,
          checkIcon: props.checkIcon,
          collapsedRowIcon: props.collapsedRowIcon,
          column: col,
          compareSelectionBy: props.compareSelectionBy,
          dataKey: props.dataKey,
          editMode: props.editMode,
          editing,
          editingMeta: props.editingMeta,
          expanded: props.expanded,
          expandedRowIcon: props.expandedRowIcon,
          frozenRow: props.frozenRow,
          index: i,
          isSelectable: props.isSelectable,
          onCheckboxChange: props.onCheckboxChange,
          onClick: props.onCellClick,
          onEditingMetaChange: props.onEditingMetaChange,
          onMouseDown: props.onCellMouseDown,
          onMouseUp: props.onCellMouseUp,
          onRadioChange: props.onRadioChange,
          onRowEditCancel: onEditCancel,
          onRowEditInit: onEditInit,
          onRowEditSave: onEditSave,
          onRowToggle: props.onRowToggle,
          responsiveLayout: props.responsiveLayout,
          rowData: props.rowData,
          rowEditorCancelIcon: props.rowEditorCancelIcon,
          rowEditorInitIcon: props.rowEditorInitIcon,
          rowEditorSaveIcon: props.rowEditorSaveIcon,
          rowIndex: props.rowIndex,
          rowSpan,
          selectOnEdit: props.selectOnEdit,
          selected: props.selected,
          selection: props.selection,
          selectionAriaLabel: props.tableProps.selectionAriaLabel,
          showRowReorderElement: props.showRowReorderElement,
          showSelectionElement: props.showSelectionElement,
          tabIndex: props.tabIndex,
          tableProps: props.tableProps,
          tableSelector: props.tableSelector,
          value: props.value,
          virtualScrollerOptions: props.virtualScrollerOptions,
          ptCallbacks: props.ptCallbacks,
          metaData: props.metaData
        });
      }
      return null;
    });
  };
  var rowClassName = ObjectUtils.getPropValue(props.rowClassName, props.rowData, {
    props: props.tableProps
  });
  var style = {
    height: props.virtualScrollerOptions ? props.virtualScrollerOptions.itemSize : void 0
  };
  var content = createContent();
  var tabIndex = getTabIndex();
  var rowProps = mergeProps2({
    role: "row",
    tabIndex,
    className: classNames$1(rowClassName, cx("bodyRow", {
      rowProps: props
    })),
    style,
    onMouseDown: function onMouseDown(e2) {
      return _onMouseDown(e2);
    },
    onMouseUp: function onMouseUp(e2) {
      return _onMouseUp(e2);
    },
    onMouseEnter: function onMouseEnter(e2) {
      return _onMouseEnter(e2);
    },
    onMouseLeave: function onMouseLeave(e2) {
      return _onMouseLeave(e2);
    },
    onClick: function onClick(e2) {
      return _onClick(e2);
    },
    onDoubleClick: function onDoubleClick(e2) {
      return _onDoubleClick(e2);
    },
    onPointerDown: function onPointerDown(e2) {
      return _onPointerDown(e2);
    },
    onPointerUp: function onPointerUp(e2) {
      return _onPointerUp(e2);
    },
    onContextMenu: function onContextMenu(e2) {
      return onRightClick(e2);
    },
    onTouchEnd: function onTouchEnd(e2) {
      return _onTouchEnd(e2);
    },
    onKeyDown: function onKeyDown(e2) {
      return _onKeyDown(e2);
    },
    onDragStart: function onDragStart(e2) {
      return _onDragStart(e2);
    },
    onDragOver: function onDragOver(e2) {
      return _onDragOver(e2);
    },
    onDragLeave: function onDragLeave(e2) {
      return _onDragLeave(e2);
    },
    onDragEnd: function onDragEnd(e2) {
      return _onDragEnd(e2);
    },
    onDrop: function onDrop(e2) {
      return _onDrop(e2);
    },
    "aria-selected": props !== null && props !== void 0 && props.selectionMode ? props.selected : null,
    "data-p-selectable-row": props.allowRowSelection && props.isSelectable({
      data: props.rowData,
      index: props.rowIndex
    }),
    "data-p-highlight": props.selected,
    "data-p-highlight-contextmenu": props.contextMenuSelected
  }, getBodyRowPTOptions("bodyRow"));
  return /* @__PURE__ */ reactExports.createElement("tr", rowProps, content);
});
BodyRow.displayName = "BodyRow";
function ownKeys$8(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$8(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$8(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$8(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var RowTogglerButton = /* @__PURE__ */ reactExports.memo(function(props) {
  var mergeProps2 = useMergeProps();
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx;
  var _onClick = function onClick(event) {
    props.onClick({
      originalEvent: event,
      data: props.rowData
    });
  };
  var getColumnProps = function getColumnProps2() {
    return ColumnBase.getCProps(props.column);
  };
  var getColumnPTOptions = function getColumnPTOptions2(key) {
    var cProps = getColumnProps();
    var columnMetaData = {
      props: getColumnProps(),
      parent: props.metaData,
      hostName: props.hostName
    };
    return mergeProps2(ptm("column.".concat(key), {
      column: columnMetaData
    }), ptm("column.".concat(key), columnMetaData), ptmo(cProps, key, columnMetaData));
  };
  var rowGroupTogglerIconProps = mergeProps2({
    className: cx("rowGroupTogglerIcon"),
    "aria-hidden": true
  }, getColumnPTOptions("rowGroupTogglerIcon"));
  var icon2 = props.expanded ? props.expandedRowIcon || /* @__PURE__ */ reactExports.createElement(ChevronDownIcon, rowGroupTogglerIconProps) : props.collapsedRowIcon || /* @__PURE__ */ reactExports.createElement(ChevronRightIcon, rowGroupTogglerIconProps);
  var togglerIcon = IconUtils.getJSXIcon(icon2, _objectSpread$8({}, rowGroupTogglerIconProps), {
    props
  });
  var label = props.expanded ? ariaLabel$2("collapseLabel") : ariaLabel$2("expandLabel");
  var rowGroupTogglerProps = mergeProps2({
    type: "button",
    onClick: function onClick(e2) {
      return _onClick(e2);
    },
    className: cx("rowGroupToggler"),
    tabIndex: props.tabIndex,
    "aria-label": label
  }, getColumnPTOptions("rowGroupToggler"));
  return /* @__PURE__ */ reactExports.createElement("button", rowGroupTogglerProps, togglerIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null));
});
RowTogglerButton.displayName = "RowTogglerButton";
var _excluded$7 = ["originalEvent"];
function ownKeys$7(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$7(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$7(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$7(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var TableBody = /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
  var mergeProps2 = useMergeProps();
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx, isUnsyled = _props$ptCallbacks.isUnsyled;
  var _React$useState = reactExports.useState({}), _React$useState2 = _slicedToArray$1(_React$useState, 2), rowGroupHeaderStyleObjectState = _React$useState2[0], setRowGroupHeaderStyleObjectState = _React$useState2[1];
  var getColumnProps = function getColumnProps2(column2) {
    return ColumnBase.getCProps(column2);
  };
  var getColumnPTOptions = function getColumnPTOptions2(key) {
    var cProps = getColumnProps(props.column);
    var columnMetaData = {
      props: cProps,
      parent: props.metaData,
      hostName: props.hostName,
      state: {
        rowGroupHeaderStyleObject: rowGroupHeaderStyleObjectState
      }
    };
    return mergeProps2(ptm("column.".concat(key), {
      column: columnMetaData
    }), ptm("column.".concat(key), columnMetaData), ptmo(cProps, key, columnMetaData));
  };
  var elementRef = reactExports.useRef(null);
  var refCallback = reactExports.useCallback(function(el2) {
    elementRef.current = el2;
    props.virtualScrollerContentRef && props.virtualScrollerContentRef(el2);
  }, [props]);
  var dragSelectionHelper = reactExports.useRef(null);
  var initialDragPosition = reactExports.useRef(null);
  var anchorRowIndex = reactExports.useRef(null);
  var anchorCellIndex = reactExports.useRef(null);
  var rangeRowIndex = reactExports.useRef(null);
  var anchorRowFirst = reactExports.useRef(null);
  var rowTouched = reactExports.useRef(false);
  var rowDragging = reactExports.useRef(false);
  var draggedRowIndex = reactExports.useRef(null);
  var droppedRowIndex = reactExports.useRef(null);
  var isSubheaderGrouping = props.rowGroupMode && props.rowGroupMode === "subheader";
  var isRadioSelectionMode = props.selectionMode === "radiobutton";
  var isCheckboxSelectionMode = props.selectionMode === "checkbox";
  var isRadioSelectionModeInColumn = props.selectionModeInColumn === "single";
  var isCheckboxSelectionModeInColumn = props.selectionModeInColumn === "multiple";
  var equals2 = function equals3(data1, data2) {
    if (allowCellSelection())
      return (data1.rowIndex === data2.rowIndex || data1.rowData === data2.rowData) && (data1.field === data2.field || data1.cellIndex === data2.cellIndex);
    else
      return props.compareSelectionBy === "equals" ? data1 === data2 : ObjectUtils.equals(data1, data2, props.dataKey);
  };
  var isSelectionEnabled = function isSelectionEnabled2() {
    return props.selectionMode || props.selectionModeInColumn !== null || props.columns && props.columns.some(function(col) {
      return col && !!getColumnProp(col, "selectionMode");
    });
  };
  var isSingleSelection = function isSingleSelection2() {
    return props.selectionMode === "single" && !isCheckboxSelectionModeInColumn || !isRadioSelectionMode && isRadioSelectionModeInColumn;
  };
  var isMultipleSelection = function isMultipleSelection2() {
    return props.selectionMode === "multiple" && !isRadioSelectionModeInColumn || isCheckboxSelectionModeInColumn;
  };
  var isRadioOnlySelection = function isRadioOnlySelection2() {
    return isRadioSelectionMode && isRadioSelectionModeInColumn;
  };
  var isCheckboxOnlySelection = function isCheckboxOnlySelection2() {
    return isCheckboxSelectionMode && isCheckboxSelectionModeInColumn;
  };
  var isSelected = function isSelected2(rowData) {
    if (rowData && props.selection) {
      return props.selection instanceof Array ? findIndex(props.selection, rowData) > -1 : equals2(rowData, props.selection);
    }
    return false;
  };
  var isContextMenuSelected = function isContextMenuSelected2(rowData) {
    if (rowData && props.contextMenuSelection) {
      return equals2(rowData, props.contextMenuSelection);
    }
    return false;
  };
  var isSelectable = function isSelectable2(options2) {
    return props.isDataSelectable ? props.isDataSelectable(options2) : true;
  };
  var isRowExpanded = function isRowExpanded2(rowData) {
    if (rowData && props.expandedRows) {
      if (isSubheaderGrouping && props.expandableRowGroups) {
        return isRowGroupExpanded(rowData);
      } else {
        if (props.dataKey) {
          var rowId = ObjectUtils.resolveFieldData(rowData, props.dataKey);
          var expanded = false;
          if (props.expandedRows) {
            if (Array.isArray(props.expandedRows)) {
              expanded = props.expandedRows.some(function(row) {
                return ObjectUtils.resolveFieldData(row, props.dataKey) === rowId;
              });
            } else {
              expanded = props.expandedRows[rowId] !== void 0;
            }
          }
          return expanded;
        } else {
          return findIndex(props.expandedRows, rowData) !== -1;
        }
      }
    }
    return false;
  };
  var isRowGroupExpanded = function isRowGroupExpanded2(rowData) {
    if (props.dataKey === props.groupRowsBy)
      return Object.keys(props.expandedRows).some(function(data) {
        return ObjectUtils.equals(data, ObjectUtils.resolveFieldData(rowData, props.dataKey));
      });
    else
      return props.expandedRows.some(function(data) {
        return ObjectUtils.equals(data, rowData, props.groupRowsBy);
      });
  };
  var isRowEditing = function isRowEditing2(rowData) {
    if (props.editMode === "row" && rowData && props.editingRows) {
      if (props.dataKey)
        return props.editingRows ? props.editingRows[ObjectUtils.resolveFieldData(rowData, props.dataKey)] !== void 0 : false;
      else
        return findIndex(props.editingRows, rowData) !== -1;
    }
    return false;
  };
  var allowDrag = function allowDrag2(event) {
    return props.dragSelection && isMultipleSelection() && !event.originalEvent.shiftKey;
  };
  var allowRowDrag = function allowRowDrag2(event) {
    return !allowCellSelection() && allowDrag(event) || props.reorderableRows;
  };
  var allowCellDrag = function allowCellDrag2(event) {
    return allowCellSelection() && allowDrag(event);
  };
  var allowSelection = function allowSelection2(event) {
    return !DomHandler.isClickable(event.originalEvent.target);
  };
  var allowMetaKeySelection = function allowMetaKeySelection2(event) {
    return !rowTouched.current && (!props.metaKeySelection || props.metaKeySelection && (event.originalEvent.metaKey || event.originalEvent.ctrlKey));
  };
  var allowRangeSelection = function allowRangeSelection2(event) {
    return isMultipleSelection() && event.originalEvent.shiftKey && anchorRowIndex.current !== null;
  };
  var allowRowSelection = function allowRowSelection2() {
    return (props.selectionMode || props.selectionModeInColumn) && !isRadioOnlySelection() && !isCheckboxOnlySelection();
  };
  var allowCellSelection = function allowCellSelection2() {
    return props.cellSelection && !isRadioSelectionModeInColumn && !isCheckboxSelectionModeInColumn;
  };
  var getColumnsLength = function getColumnsLength2() {
    return props.columns ? props.columns.length : 0;
  };
  var getColumnProp = function getColumnProp2(column2, name) {
    return ColumnBase.getCProp(column2, name);
  };
  var getVirtualScrollerOption = function getVirtualScrollerOption2(option, options2) {
    options2 = options2 || props.virtualScrollerOptions;
    return options2 ? options2[option] : null;
  };
  var findIndex = function findIndex2(collection, rowData) {
    return (collection || []).findIndex(function(data) {
      return equals2(rowData, data);
    });
  };
  var rowGroupHeaderStyle = function rowGroupHeaderStyle2() {
    if (props.scrollable) {
      return {
        top: rowGroupHeaderStyleObjectState["top"]
      };
    }
    return null;
  };
  var getRowKey = function getRowKey2(rowData, index2) {
    return props.dataKey ? ObjectUtils.resolveFieldData(rowData, props.dataKey) : index2;
  };
  var shouldRenderRowGroupHeader = function shouldRenderRowGroupHeader2(value, rowData, i) {
    var currentRowFieldData = ObjectUtils.resolveFieldData(rowData, props.groupRowsBy);
    var prevRowData = value[i - 1];
    if (prevRowData) {
      var previousRowFieldData = ObjectUtils.resolveFieldData(prevRowData, props.groupRowsBy);
      return !ObjectUtils.deepEquals(currentRowFieldData, previousRowFieldData);
    } else {
      return true;
    }
  };
  var shouldRenderRowGroupFooter = function shouldRenderRowGroupFooter2(value, rowData, i, expanded) {
    if (props.expandableRowGroups && !expanded) {
      return false;
    } else {
      var currentRowFieldData = ObjectUtils.resolveFieldData(rowData, props.groupRowsBy);
      var nextRowData = value[i + 1];
      if (nextRowData) {
        var nextRowFieldData = ObjectUtils.resolveFieldData(nextRowData, props.groupRowsBy);
        return !ObjectUtils.deepEquals(currentRowFieldData, nextRowFieldData);
      } else {
        return true;
      }
    }
  };
  var updateFrozenRowStickyPosition = function updateFrozenRowStickyPosition2() {
    elementRef.current.style.top = DomHandler.getOuterHeight(elementRef.current.previousElementSibling) + "px";
  };
  var updateFrozenRowGroupHeaderStickyPosition = function updateFrozenRowGroupHeaderStickyPosition2() {
    var tableHeaderHeight = DomHandler.getOuterHeight(elementRef.current.previousElementSibling);
    var top = tableHeaderHeight + "px";
    if (rowGroupHeaderStyleObjectState.top !== top) {
      setRowGroupHeaderStyleObjectState({
        top
      });
    }
  };
  var onSingleSelection = function onSingleSelection2(_ref3) {
    var originalEvent = _ref3.originalEvent, data = _ref3.data, index2 = _ref3.index, toggleable = _ref3.toggleable, type = _ref3.type;
    if (!isSelectable({
      data,
      index: index2
    })) {
      return;
    }
    var selected = isSelected(data);
    var selection = props.selection;
    if (selected) {
      if (toggleable) {
        selection = null;
        onUnselect({
          originalEvent,
          data,
          type
        });
      }
    } else {
      selection = data;
      onSelect({
        originalEvent,
        data,
        type
      });
    }
    focusOnElement(originalEvent, true);
    if (props.onSelectionChange && selection !== props.selection) {
      props.onSelectionChange({
        originalEvent,
        value: selection,
        type
      });
    }
  };
  var onMultipleSelection = function onMultipleSelection2(_ref22) {
    var originalEvent = _ref22.originalEvent, data = _ref22.data, index2 = _ref22.index, toggleable = _ref22.toggleable, type = _ref22.type;
    if (!isSelectable({
      data,
      index: index2
    })) {
      return;
    }
    var selected = isSelected(data);
    var selection = props.selection || [];
    if (selected) {
      if (toggleable) {
        var selectionIndex = findIndex(selection, data);
        selection = props.selection.filter(function(val, i) {
          return i !== selectionIndex;
        });
        onUnselect({
          originalEvent,
          data,
          type
        });
      } else if (selection.length) {
        props.selection.forEach(function(d2) {
          return onUnselect({
            originalEvent,
            data: d2,
            type
          });
        });
        selection = [data];
        onSelect({
          originalEvent,
          data,
          type
        });
      }
    } else {
      selection = ObjectUtils.isObject(selection) ? [selection] : selection;
      selection = toggleable && isMultipleSelection() ? [].concat(_toConsumableArray$1(selection), [data]) : [data];
      onSelect({
        originalEvent,
        data,
        type
      });
    }
    focusOnElement(originalEvent, true);
    if (props.onSelectionChange && selection !== props.selection) {
      props.onSelectionChange({
        originalEvent,
        value: selection,
        type
      });
    }
  };
  var onRangeSelection = function onRangeSelection2(event, type) {
    DomHandler.clearSelection();
    rangeRowIndex.current = allowCellSelection() ? event.rowIndex : event.index;
    var selection = selectRange(event);
    if (props.onSelectionChange && selection !== props.selection) {
      props.onSelectionChange({
        originalEvent: event.originalEvent,
        value: selection,
        type
      });
    }
    anchorRowIndex.current = rangeRowIndex.current;
    anchorCellIndex.current = event.cellIndex;
    focusOnElement(event.originalEvent, false);
  };
  var selectRange = function selectRange2(event) {
    var rangeStart, rangeEnd;
    if (rangeRowIndex.current > anchorRowIndex.current) {
      rangeStart = anchorRowIndex.current;
      rangeEnd = rangeRowIndex.current;
    } else if (rangeRowIndex.current < anchorRowIndex.current) {
      rangeStart = rangeRowIndex.current;
      rangeEnd = anchorRowIndex.current;
    } else {
      rangeStart = rangeEnd = rangeRowIndex.current;
    }
    if (props.paginator) {
      rangeStart = Math.max(rangeStart - props.first, 0);
      rangeEnd -= props.first;
    }
    return allowCellSelection() ? selectRangeOnCell(event, rangeStart, rangeEnd) : selectRangeOnRow(event, rangeStart, rangeEnd);
  };
  var selectRangeOnRow = function selectRangeOnRow2(event, rowRangeStart, rowRangeEnd) {
    var value = props.value;
    var selection = [];
    for (var i = rowRangeStart; i <= rowRangeEnd; i++) {
      var rangeRowData = value[i];
      if (!isSelectable({
        data: rangeRowData,
        index: i
      })) {
        continue;
      }
      selection.push(rangeRowData);
      onSelect({
        originalEvent: event.originalEvent,
        data: rangeRowData,
        type: "row"
      });
    }
    return selection;
  };
  var selectRangeOnCell = function selectRangeOnCell2(event, rowRangeStart, rowRangeEnd) {
    var cellRangeStart, cellRangeEnd, cellIndex = event.cellIndex;
    if (cellIndex > anchorCellIndex.current) {
      cellRangeStart = anchorCellIndex.current;
      cellRangeEnd = cellIndex;
    } else if (cellIndex < anchorCellIndex.current) {
      cellRangeStart = cellIndex;
      cellRangeEnd = anchorCellIndex.current;
    } else {
      cellRangeStart = cellRangeEnd = cellIndex;
    }
    var value = props.value;
    var selection = [];
    for (var i = rowRangeStart; i <= rowRangeEnd; i++) {
      var rowData = value[i];
      var columns = props.columns;
      var rowIndex2 = props.paginator ? i + props.first : i;
      for (var j = cellRangeStart; j <= cellRangeEnd; j++) {
        var field = getColumnProp(columns[j], "field");
        var _value = ObjectUtils.resolveFieldData(rowData, field);
        var rangeRowData = {
          value: _value,
          field,
          rowData,
          rowIndex: rowIndex2,
          cellIndex: j,
          selected: true
        };
        if (!isSelectable({
          data: rangeRowData,
          index: i
        })) {
          continue;
        }
        selection.push(rangeRowData);
        onSelect({
          originalEvent: event.originalEvent,
          data: rangeRowData,
          type: "cell"
        });
      }
    }
    return selection;
  };
  var onSelect = function onSelect2(event) {
    if (allowCellSelection())
      props.onCellSelect && props.onCellSelect(_objectSpread$7(_objectSpread$7({
        originalEvent: event.originalEvent
      }, event.data), {}, {
        type: event.type
      }));
    else
      props.onRowSelect && props.onRowSelect(event);
  };
  var onUnselect = function onUnselect2(event) {
    if (allowCellSelection())
      props.onCellUnselect && props.onCellUnselect(_objectSpread$7(_objectSpread$7({
        originalEvent: event.originalEvent
      }, event.data), {}, {
        type: event.type
      }));
    else
      props.onRowUnselect && props.onRowUnselect(event);
  };
  var enableDragSelection = function enableDragSelection2(event) {
    if (props.dragSelection && !dragSelectionHelper.current) {
      dragSelectionHelper.current = document.createElement("div");
      dragSelectionHelper.current.setAttribute("p-datatable-drag-selection-helper", "true");
      !isUnsyled && DomHandler.addClass(dragSelectionHelper.current, "p-datatable-drag-selection-helper");
      initialDragPosition.current = {
        x: event.clientX,
        y: event.clientY
      };
      dragSelectionHelper.current.style.top = "".concat(event.pageY, "px");
      dragSelectionHelper.current.style.left = "".concat(event.pageX, "px");
      bindDragSelectionEvents();
    }
  };
  var focusOnElement = function focusOnElement2(event, isFocused) {
    var target = event.currentTarget;
    if (!allowCellSelection() && props.selectionAutoFocus) {
      if (isCheckboxSelectionModeInColumn) {
        var checkbox2 = DomHandler.findSingle(target, 'td[data-p-selection-column="true"] [data-pc-section="checkbox"]');
        checkbox2 && checkbox2.focus();
      } else if (isRadioSelectionModeInColumn) {
        var radio = DomHandler.findSingle(target, 'td[data-p-selection-column="true"] input[type="radio"]');
        radio && radio.focus();
      }
    }
    !isFocused && target && target.focus();
  };
  var changeTabIndex = function changeTabIndex2(event, type) {
    var target = event.currentTarget;
    var isSelectable2 = DomHandler.getAttribute(target, type === "cell" ? "data-p-selectable-cell" : "data-p-selectable-row") === true;
    if (isSelectable2) {
      var selector = type === "cell" ? "tr > td" : "tr";
      var tabbableEl = DomHandler.findSingle(elementRef.current, "".concat(selector, '[tabindex="').concat(props.tabIndex, '"]'));
      if (tabbableEl && target) {
        tabbableEl.tabIndex = -1;
        target.tabIndex = props.tabIndex;
      }
    }
  };
  var onRowClick = function onRowClick2(event) {
    if (event.defaultPrevented || event.originalEvent && event.originalEvent.defaultPrevented || allowCellSelection() || !allowSelection(event)) {
      return;
    }
    props.onRowClick && props.onRowClick(event);
    if (allowRowSelection()) {
      if (allowRangeSelection(event)) {
        onRangeSelection(event, "row");
      } else {
        var toggleable = isRadioSelectionModeInColumn || isCheckboxSelectionModeInColumn || allowMetaKeySelection(event);
        anchorRowIndex.current = event.index;
        rangeRowIndex.current = event.index;
        anchorRowFirst.current = props.first;
        if (isSingleSelection()) {
          onSingleSelection(_objectSpread$7(_objectSpread$7({}, event), {}, {
            toggleable,
            type: "row"
          }));
        } else {
          onMultipleSelection(_objectSpread$7(_objectSpread$7({}, event), {}, {
            toggleable,
            type: "row"
          }));
        }
      }
      changeTabIndex(event.originalEvent, "row");
    } else {
      focusOnElement(event.originalEvent);
    }
    rowTouched.current = false;
  };
  var onRowDoubleClick = function onRowDoubleClick2(e2) {
    var event = e2.originalEvent;
    if (DomHandler.isClickable(event.target)) {
      return;
    }
    if (props.onRowDoubleClick) {
      props.onRowDoubleClick(e2);
    }
  };
  var onRowPointerDown = function onRowPointerDown2(e2) {
    var event = e2.originalEvent;
    if (DomHandler.isClickable(event.target)) {
      return;
    }
    if (props.onRowPointerDown) {
      props.onRowPointerDown(e2);
    }
  };
  var onRowPointerUp = function onRowPointerUp2(e2) {
    var event = e2.originalEvent;
    if (DomHandler.isClickable(event.target)) {
      return;
    }
    if (props.onRowPointerUp) {
      props.onRowPointerUp(e2);
    }
  };
  var onRowRightClick = function onRowRightClick2(event) {
    if (props.onContextMenu || props.onContextMenuSelectionChange) {
      var hasSelection = ObjectUtils.isNotEmpty(props.selection);
      var data = hasSelection ? props.selection : event.data;
      if (hasSelection)
        DomHandler.clearSelection();
      if (props.onContextMenuSelectionChange) {
        props.onContextMenuSelectionChange({
          originalEvent: event.originalEvent,
          value: data
        });
      }
      if (props.onContextMenu) {
        props.onContextMenu({
          originalEvent: event.originalEvent,
          data
        });
      }
      event.originalEvent.preventDefault();
    }
  };
  var onRowMouseEnter = function onRowMouseEnter2(event) {
    props.onRowMouseEnter && props.onRowMouseEnter(event);
  };
  var onRowMouseLeave = function onRowMouseLeave2(event) {
    props.onRowMouseLeave && props.onRowMouseLeave(event);
  };
  var onRowTouchEnd = function onRowTouchEnd2() {
    rowTouched.current = true;
  };
  var onRowMouseDown = function onRowMouseDown2(e2) {
    var event = e2.originalEvent;
    if (!isUnsyled && DomHandler.hasClass(event.target, "p-datatable-reorderablerow-handle"))
      event.currentTarget.draggable = true;
    else
      event.currentTarget.draggable = false;
    if (allowRowDrag(e2)) {
      enableDragSelection(event);
      anchorRowIndex.current = e2.index;
      rangeRowIndex.current = e2.index;
      anchorRowFirst.current = props.first;
    }
  };
  var onRowMouseUp = function onRowMouseUp2(event) {
    var isSameRow = event.index === anchorRowIndex.current;
    if (allowRowDrag(event) && !isSameRow) {
      onRangeSelection(event, "row");
    }
  };
  var onRowToggle = function onRowToggle2(event) {
    var expandedRows;
    var dataKey = props.dataKey;
    var hasDataKey = props.groupRowsBy ? dataKey === props.groupRowsBy : !!dataKey;
    if (hasDataKey) {
      var dataKeyValue = String(ObjectUtils.resolveFieldData(event.data, dataKey));
      expandedRows = props.expandedRows ? _objectSpread$7({}, props.expandedRows) : {};
      if (expandedRows[dataKeyValue] != null) {
        delete expandedRows[dataKeyValue];
        if (props.onRowCollapse) {
          props.onRowCollapse({
            originalEvent: event,
            data: event.data
          });
        }
      } else {
        expandedRows[dataKeyValue] = true;
        if (props.onRowExpand) {
          props.onRowExpand({
            originalEvent: event,
            data: event.data
          });
        }
      }
    } else {
      var expandedRowIndex = findIndex(props.expandedRows, event.data);
      expandedRows = props.expandedRows ? _toConsumableArray$1(props.expandedRows) : [];
      if (expandedRowIndex !== -1) {
        expandedRows = expandedRows.filter(function(_, i) {
          return i !== expandedRowIndex;
        });
        if (props.onRowCollapse) {
          props.onRowCollapse({
            originalEvent: event,
            data: event.data
          });
        }
      } else {
        expandedRows.push(event.data);
        if (props.onRowExpand) {
          props.onRowExpand({
            originalEvent: event,
            data: event.data
          });
        }
      }
    }
    if (props.onRowToggle) {
      props.onRowToggle({
        data: expandedRows
      });
    }
  };
  var onRowDragStart = function onRowDragStart2(e2) {
    var event = e2.originalEvent, index2 = e2.index;
    if (allowRowDrag(event)) {
      rowDragging.current = true;
      draggedRowIndex.current = index2;
      event.dataTransfer.setData("text", "b");
    }
  };
  var onRowDragOver = function onRowDragOver2(e2) {
    var event = e2.originalEvent, index2 = e2.index;
    if (rowDragging.current && draggedRowIndex.current !== index2) {
      var rowElement = event.currentTarget;
      var rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();
      var pageY = event.pageY + window.scrollY;
      var rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;
      var prevRowElement = rowElement.previousElementSibling;
      if (pageY < rowMidY) {
        rowElement.setAttribute("data-p-datatable-dragpoint-bottom", "false");
        !isUnsyled && DomHandler.removeClass(rowElement, "p-datatable-dragpoint-bottom");
        droppedRowIndex.current = index2;
        if (prevRowElement) {
          prevRowElement.setAttribute("data-p-datatable-dragpoint-bottom", "true");
          !isUnsyled && DomHandler.addClass(prevRowElement, "p-datatable-dragpoint-bottom");
        } else {
          rowElement.setAttribute("data-p-datatable-dragpoint-top", "true");
          !isUnsyled && DomHandler.addClass(rowElement, "p-datatable-dragpoint-top");
        }
      } else {
        if (prevRowElement) {
          prevRowElement.setAttribute("data-p-datatable-dragpoint-bottom", "false");
          !isUnsyled && DomHandler.removeClass(prevRowElement, "p-datatable-dragpoint-bottom");
        } else {
          rowElement.setAttribute("data-p-datatable-dragpoint-top", "true");
          !isUnsyled && DomHandler.addClass(rowElement, "p-datatable-dragpoint-top");
        }
        droppedRowIndex.current = index2 + 1;
        rowElement.setAttribute("data-p-datatable-dragpoint-bottom", "true");
        !isUnsyled && DomHandler.addClass(rowElement, "p-datatable-dragpoint-bottom");
      }
    }
    event.preventDefault();
  };
  var onRowDragLeave = function onRowDragLeave2(e2) {
    var event = e2.originalEvent;
    var rowElement = event.currentTarget;
    var prevRowElement = rowElement.previousElementSibling;
    if (prevRowElement) {
      prevRowElement.setAttribute("data-p-datatable-dragpoint-bottom", "false");
      !isUnsyled && DomHandler.removeClass(prevRowElement, "p-datatable-dragpoint-bottom");
    }
    rowElement.setAttribute("data-p-datatable-dragpoint-bottom", "false");
    !isUnsyled && DomHandler.removeClass(rowElement, "p-datatable-dragpoint-bottom");
    rowElement.setAttribute("data-p-datatable-dragpoint-top", "false");
    !isUnsyled && DomHandler.removeClass(rowElement, "p-datatable-dragpoint-top");
  };
  var onRowDragEnd = function onRowDragEnd2(e2) {
    var event = e2.originalEvent;
    rowDragging.current = false;
    draggedRowIndex.current = null;
    droppedRowIndex.current = null;
    event.currentTarget.draggable = false;
  };
  var onRowDrop = function onRowDrop2(e2) {
    var event = e2.originalEvent;
    if (droppedRowIndex.current != null) {
      var dropIndex = draggedRowIndex.current > droppedRowIndex.current ? droppedRowIndex.current : droppedRowIndex.current === 0 ? 0 : droppedRowIndex.current - 1;
      var val = _toConsumableArray$1(props.tableProps.value);
      ObjectUtils.reorderArray(val, draggedRowIndex.current, dropIndex);
      if (props.onRowReorder) {
        props.onRowReorder({
          originalEvent: event,
          value: val,
          dragIndex: draggedRowIndex.current,
          dropIndex
        });
      }
    }
    onRowDragLeave(e2);
    onRowDragEnd(e2);
    event.preventDefault();
  };
  var onRadioChange = function onRadioChange2(event) {
    onSingleSelection(_objectSpread$7(_objectSpread$7({}, event), {}, {
      toggleable: true,
      type: "radio"
    }));
  };
  var onCheckboxChange = function onCheckboxChange2(event) {
    onMultipleSelection(_objectSpread$7(_objectSpread$7({}, event), {}, {
      toggleable: true,
      type: "checkbox"
    }));
  };
  var onDragSelectionMouseMove = function onDragSelectionMouseMove2(event) {
    var _initialDragPosition$ = initialDragPosition.current, x2 = _initialDragPosition$.x, y2 = _initialDragPosition$.y;
    var dx = event.clientX - x2;
    var dy = event.clientY - y2;
    if (dy < 0)
      dragSelectionHelper.current.style.top = "".concat(event.pageY + 5, "px");
    if (dx < 0)
      dragSelectionHelper.current.style.left = "".concat(event.pageX + 5, "px");
    dragSelectionHelper.current.style.height = "".concat(Math.abs(dy), "px");
    dragSelectionHelper.current.style.width = "".concat(Math.abs(dx), "px");
    event.preventDefault();
  };
  var onDragSelectionMouseUp = function onDragSelectionMouseUp2() {
    if (dragSelectionHelper.current) {
      dragSelectionHelper.current.remove();
      dragSelectionHelper.current = null;
    }
    document.removeEventListener("mousemove", onDragSelectionMouseMove);
    document.removeEventListener("mouseup", onDragSelectionMouseUp2);
  };
  var onCellClick = function onCellClick2(event) {
    if (!allowSelection(event)) {
      return;
    }
    props.onCellClick && props.onCellClick(event);
    if (allowCellSelection()) {
      if (allowRangeSelection(event)) {
        onRangeSelection(event, "cell");
      } else {
        var toggleable = allowMetaKeySelection(event);
        var originalEvent = event.originalEvent, data = _objectWithoutProperties$1(event, _excluded$7);
        anchorRowIndex.current = event.rowIndex;
        rangeRowIndex.current = event.rowIndex;
        anchorRowFirst.current = props.first;
        anchorCellIndex.current = event.cellIndex;
        if (isSingleSelection()) {
          onSingleSelection({
            originalEvent,
            data,
            index: event.rowIndex,
            toggleable,
            type: "cell"
          });
        } else {
          onMultipleSelection({
            originalEvent,
            data,
            index: event.rowIndex,
            toggleable,
            type: "cell"
          });
        }
      }
      changeTabIndex(event.originalEvent, "cell");
    }
    rowTouched.current = false;
  };
  var onCellMouseDown = function onCellMouseDown2(event) {
    if (allowCellDrag(event)) {
      enableDragSelection(event.originalEvent);
      anchorRowIndex.current = event.rowIndex;
      rangeRowIndex.current = event.rowIndex;
      anchorRowFirst.current = props.first;
      anchorCellIndex.current = event.cellIndex;
    }
  };
  var onCellMouseUp = function onCellMouseUp2(event) {
    var isSameCell = event.rowIndex === anchorRowIndex.current && event.cellIndex === anchorCellIndex.current;
    if (allowCellDrag(event) && !isSameCell) {
      onRangeSelection(event, "cell");
    }
  };
  var bindDragSelectionEvents = function bindDragSelectionEvents2() {
    document.addEventListener("mousemove", onDragSelectionMouseMove);
    document.addEventListener("mouseup", onDragSelectionMouseUp);
    document.body.appendChild(dragSelectionHelper.current);
  };
  var unbindDragSelectionEvents = function unbindDragSelectionEvents2() {
    onDragSelectionMouseUp();
  };
  reactExports.useEffect(function() {
    if (props.frozenRow) {
      updateFrozenRowStickyPosition();
    }
    if (props.scrollable && props.rowGroupMode === "subheader") {
      updateFrozenRowGroupHeaderStickyPosition();
    }
  });
  useUpdateEffect(function() {
    if (props.paginator && isMultipleSelection()) {
      anchorRowIndex.current = null;
    }
  }, [props.first]);
  useUnmountEffect(function() {
    if (props.dragSelection) {
      unbindDragSelectionEvents();
    }
  });
  var createEmptyContent = function createEmptyContent2() {
    if (!props.loading) {
      var colSpan = getColumnsLength();
      var _content = ObjectUtils.getJSXElement(props.emptyMessage, {
        props: props.tableProps,
        frozen: props.frozenRow
      }) || localeOption("emptyMessage");
      var emptyMessageProps = mergeProps2({
        className: cx("emptyMessage"),
        role: "row"
      }, getColumnPTOptions("emptyMessage"));
      var bodyCellProps = mergeProps2({
        colSpan,
        role: "cell"
      }, getColumnPTOptions("root"), getColumnPTOptions("bodyCell"));
      return /* @__PURE__ */ reactExports.createElement("tr", emptyMessageProps, /* @__PURE__ */ reactExports.createElement("td", bodyCellProps, _content));
    }
    return null;
  };
  var createGroupHeader = function createGroupHeader2(rowData, rowIndex2, expanded, colSpan) {
    if (isSubheaderGrouping && shouldRenderRowGroupHeader(props.value, rowData, rowIndex2 - props.first)) {
      var style = rowGroupHeaderStyle();
      var toggler = props.expandableRowGroups && /* @__PURE__ */ reactExports.createElement(RowTogglerButton, {
        hostName: props.hostName,
        onClick: onRowToggle,
        rowData,
        expanded,
        expandedRowIcon: props.expandedRowIcon,
        collapsedRowIcon: props.collapsedRowIcon,
        ptCallbacks: props.ptCallbacks,
        metaData: props.metaData
      });
      var options2 = {
        index: rowIndex2,
        props: props.tableProps,
        customRendering: false
      };
      var _content2 = ObjectUtils.getJSXElement(props.rowGroupHeaderTemplate, rowData, options2);
      if (!options2.customRendering) {
        var bodyCellProps = mergeProps2({
          colSpan
        }, getColumnPTOptions("root"), getColumnPTOptions("bodyCell"));
        var rowGroupHeaderNameProps = mergeProps2({
          className: cx("rowGroupHeaderName")
        }, getColumnPTOptions("rowGroupHeaderName"));
        _content2 = /* @__PURE__ */ reactExports.createElement("td", bodyCellProps, toggler, /* @__PURE__ */ reactExports.createElement("span", rowGroupHeaderNameProps, _content2));
      }
      var rowGroupHeaderProps = mergeProps2({
        className: cx("rowGroupHeader"),
        style,
        role: "row"
      }, getColumnPTOptions("rowGroupHeader"));
      return /* @__PURE__ */ reactExports.createElement("tr", rowGroupHeaderProps, _content2);
    }
    return null;
  };
  var createRow = function createRow2(rowData, rowIndex2, index2, expanded) {
    if (!props.expandableRowGroups || expanded) {
      var selected = isSelectionEnabled() ? isSelected(rowData) : false;
      var contextMenuSelected = isContextMenuSelected(rowData);
      var _allowRowSelection = allowRowSelection();
      var _allowCellSelection = allowCellSelection();
      var editing = isRowEditing(rowData);
      return /* @__PURE__ */ reactExports.createElement(BodyRow, {
        hostName: props.hostName,
        allowCellSelection: _allowCellSelection,
        allowRowSelection: _allowRowSelection,
        cellClassName: props.cellClassName,
        checkIcon: props.checkIcon,
        collapsedRowIcon: props.collapsedRowIcon,
        columns: props.columns,
        compareSelectionBy: props.compareSelectionBy,
        contextMenuSelected,
        dataKey: props.dataKey,
        editMode: props.editMode,
        editing,
        editingMeta: props.editingMeta,
        editingRows: props.editingRows,
        expanded,
        expandedRowIcon: props.expandedRowIcon,
        frozenRow: props.frozenRow,
        groupRowsBy: props.groupRowsBy,
        index: index2,
        isSelectable,
        onCellClick,
        onCellMouseDown,
        onCellMouseUp,
        onCheckboxChange,
        onEditingMetaChange: props.onEditingMetaChange,
        onRadioChange,
        onRowClick,
        onRowDoubleClick,
        onRowPointerDown,
        onRowPointerUp,
        onRowDragEnd,
        onRowDragLeave,
        onRowDragOver,
        onRowDragStart,
        onRowDrop,
        onRowEditCancel: props.onRowEditCancel,
        onRowEditChange: props.onRowEditChange,
        onRowEditComplete: props.onRowEditComplete,
        onRowEditInit: props.onRowEditInit,
        onRowEditSave: props.onRowEditSave,
        onRowMouseDown,
        onRowMouseEnter,
        onRowMouseLeave,
        onRowMouseUp,
        onRowRightClick,
        onRowToggle,
        onRowTouchEnd,
        responsiveLayout: props.responsiveLayout,
        rowClassName: props.rowClassName,
        rowData,
        rowEditValidator: props.rowEditValidator,
        rowEditorCancelIcon: props.rowEditorCancelIcon,
        rowEditorInitIcon: props.rowEditorInitIcon,
        rowEditorSaveIcon: props.rowEditorSaveIcon,
        rowGroupMode: props.rowGroupMode,
        rowIndex: rowIndex2,
        selectOnEdit: props.selectOnEdit,
        selected,
        selection: props.selection,
        selectionMode: props.selectionMode,
        selectionModeInColumn: props.selectionModeInColumn,
        showRowReorderElement: props.showRowReorderElement,
        showSelectionElement: props.showSelectionElement,
        tabIndex: props.tabIndex,
        tableProps: props.tableProps,
        tableSelector: props.tableSelector,
        value: props.value,
        virtualScrollerOptions: props.virtualScrollerOptions,
        ptCallbacks: props.ptCallbacks,
        metaData: props.metaData
      });
    }
  };
  var createExpansion = function createExpansion2(rowData, rowIndex2, expanded, colSpan) {
    if (expanded && !(isSubheaderGrouping && props.expandableRowGroups)) {
      var id2 = "".concat(props.tableSelector, "_content_").concat(rowIndex2, "_expanded");
      var options2 = {
        index: rowIndex2,
        customRendering: false
      };
      var _content3 = ObjectUtils.getJSXElement(props.rowExpansionTemplate, rowData, options2);
      if (!options2.customRendering) {
        var bodyCellProps = mergeProps2({
          colSpan,
          role: "cell"
        }, getColumnPTOptions("root"), getColumnPTOptions("bodyCell"));
        _content3 = /* @__PURE__ */ reactExports.createElement("td", bodyCellProps, _content3);
      }
      var rowExpansionProps = mergeProps2({
        id: id2,
        className: cx("rowExpansion"),
        role: "row"
      }, getColumnPTOptions("rowExpansion"));
      return /* @__PURE__ */ reactExports.createElement("tr", rowExpansionProps, _content3);
    }
    return null;
  };
  var createGroupFooter = function createGroupFooter2(rowData, rowIndex2, expanded, colSpan) {
    if (isSubheaderGrouping && shouldRenderRowGroupFooter(props.value, rowData, rowIndex2 - props.first, expanded)) {
      var _content4 = ObjectUtils.getJSXElement(props.rowGroupFooterTemplate, rowData, {
        index: rowIndex2,
        colSpan,
        props: props.tableProps
      });
      var rowGroupFooterProps = mergeProps2({
        className: cx("rowGroupFooter"),
        role: "row"
      }, getColumnPTOptions("rowGroupFooter"));
      return /* @__PURE__ */ reactExports.createElement("tr", rowGroupFooterProps, _content4);
    }
    return null;
  };
  var createContent = function createContent2() {
    return props.value && props.value.map(function(rowData, index2) {
      var rowIndex2 = getVirtualScrollerOption("getItemOptions") ? getVirtualScrollerOption("getItemOptions")(index2).index : props.first + index2;
      var key = getRowKey(rowData, rowIndex2);
      var expanded = isRowExpanded(rowData);
      var colSpan = getColumnsLength();
      var groupHeader = createGroupHeader(rowData, rowIndex2, expanded, colSpan);
      var row = createRow(rowData, rowIndex2, index2, expanded);
      var expansion = createExpansion(rowData, rowIndex2, expanded, colSpan);
      var groupFooter = createGroupFooter(rowData, rowIndex2, expanded, colSpan);
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, {
        key
      }, groupHeader, row, expansion, groupFooter);
    });
  };
  var content = props.empty ? createEmptyContent() : createContent();
  var ptKey = props.className === "p-datatable-virtualscroller-spacer" ? "virtualScrollerSpacer" : "tbody";
  var tbodyProps = mergeProps2({
    style: props.style,
    className: cx(ptKey, {
      className: props.className
    }),
    role: " rowgroup"
  }, ptm(ptKey, {
    hostName: props.hostName
  }));
  return /* @__PURE__ */ reactExports.createElement("tbody", _extends({
    ref: refCallback
  }, tbodyProps), content);
}));
TableBody.displayName = "TableBody";
var ColumnGroupBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "ColumnGroup",
    children: void 0
  },
  getCProp: function getCProp2(group, name) {
    return ObjectUtils.getComponentProp(group, name, ColumnGroupBase.defaultProps);
  },
  getCProps: function getCProps2(group) {
    return ObjectUtils.getComponentProps(group, ColumnGroupBase.defaultProps);
  }
});
var RowBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Row",
    style: null,
    className: null,
    children: void 0
  },
  getCProp: function getCProp3(row, name) {
    return ObjectUtils.getComponentProp(row, name, RowBase.defaultProps);
  }
});
function ownKeys$6(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$6(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$6(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$6(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var FooterCell = /* @__PURE__ */ reactExports.memo(function(props) {
  var _React$useState = reactExports.useState({}), _React$useState2 = _slicedToArray$1(_React$useState, 2), styleObjectState = _React$useState2[0], setStyleObjectState = _React$useState2[1];
  var elementRef = reactExports.useRef(null);
  var mergeProps2 = useMergeProps();
  var getColumnProps = function getColumnProps2() {
    return ColumnBase.getCProps(props.column);
  };
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx;
  var getColumnPTOptions = function getColumnPTOptions2(key) {
    var cProps = getColumnProps();
    var columnMetaData = {
      props: cProps,
      parent: props.metaData,
      hostName: props.hostName,
      state: {
        styleObject: styleObjectState
      },
      context: {
        index: props.index,
        size: props.metaData.props.size,
        showGridlines: props.metaData.props.showGridlines
      }
    };
    return mergeProps2(ptm("column.".concat(key), {
      column: columnMetaData
    }), ptm("column.".concat(key), columnMetaData), ptmo(cProps, key, columnMetaData));
  };
  var getColumnProp = function getColumnProp2(name) {
    return ColumnBase.getCProp(props.column, name);
  };
  var getStyle2 = function getStyle3() {
    var footerStyle = getColumnProp("footerStyle");
    var columnStyle = getColumnProp("style");
    return getColumnProp("frozen") ? Object.assign({}, columnStyle, footerStyle, styleObjectState) : Object.assign({}, columnStyle, footerStyle);
  };
  var updateStickyPosition = function updateStickyPosition2() {
    if (getColumnProp("frozen")) {
      var styleObject = _objectSpread$6({}, styleObjectState);
      var _align = getColumnProp("alignFrozen");
      if (_align === "right") {
        var right = 0;
        var next2 = elementRef.current.nextElementSibling;
        if (next2) {
          right = DomHandler.getOuterWidth(next2) + parseFloat(next2.style.right || 0);
        }
        styleObject["right"] = right + "px";
      } else {
        var left = 0;
        var prev2 = elementRef.current.previousElementSibling;
        if (prev2) {
          left = DomHandler.getOuterWidth(prev2) + parseFloat(prev2.style.left || 0);
        }
        styleObject["left"] = left + "px";
      }
      var isSameStyle = styleObjectState["left"] === styleObject["left"] && styleObjectState["right"] === styleObject["right"];
      !isSameStyle && setStyleObjectState(styleObject);
    }
  };
  reactExports.useEffect(function() {
    if (getColumnProp("frozen")) {
      updateStickyPosition();
    }
  });
  var style = getStyle2();
  var align = getColumnProp("align");
  var colSpan = getColumnProp("colSpan");
  var rowSpan = getColumnProp("rowSpan");
  var content = ObjectUtils.getJSXElement(getColumnProp("footer"), {
    props: props.tableProps
  });
  var footerCellProps = mergeProps2({
    style,
    className: classNames$1(getColumnProp("footerClassName"), getColumnProp("className"), cx("footerCell", {
      getColumnProp,
      align
    })),
    role: "cell",
    colSpan,
    rowSpan
  }, getColumnPTOptions("root"), getColumnPTOptions("footerCell"));
  return /* @__PURE__ */ reactExports.createElement("td", _extends({
    ref: elementRef
  }, footerCellProps), content);
});
FooterCell.displayName = "FooterCell";
var TableFooter = /* @__PURE__ */ reactExports.memo(function(props) {
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx;
  var mergeProps2 = useMergeProps();
  var getRowProps = function getRowProps2(row) {
    return ColumnGroupBase.getCProps(row);
  };
  var getColumnGroupProps = function getColumnGroupProps2() {
    return props.footerColumnGroup ? ColumnGroupBase.getCProps(props.footerColumnGroup) : void 0;
  };
  var getRowPTOptions = function getRowPTOptions2(row, key) {
    var rProps = getRowProps(row);
    var rowMetaData = {
      props: rProps,
      parent: props.metaData,
      hostName: props.hostName
    };
    return mergeProps2(ptm("row.".concat(key), {
      row: rowMetaData
    }), ptm("row.".concat(key), rowMetaData), ptmo(rProps, key, rowMetaData));
  };
  var getColumnGroupPTOptions = function getColumnGroupPTOptions2(key) {
    var cGProps = getColumnGroupProps();
    var columnGroupMetaData = {
      props: getColumnGroupProps(),
      parent: props.metaData,
      hostName: props.hostName
    };
    return mergeProps2(ptm("columnGroup.".concat(key), {
      columnGroup: columnGroupMetaData
    }), ptm("columnGroup.".concat(key), columnGroupMetaData), ptmo(cGProps, key, columnGroupMetaData));
  };
  var hasFooter = function hasFooter2() {
    return props.footerColumnGroup ? true : props.columns ? props.columns.some(function(col) {
      return col && getColumnProp(col, "footer");
    }) : false;
  };
  var getColumnProp = function getColumnProp2(column2, name) {
    return ColumnBase.getCProp(column2, name);
  };
  var createGroupFooterCells = function createGroupFooterCells2(row) {
    var columns = reactExports.Children.toArray(RowBase.getCProp(row, "children"));
    return createFooterCells(columns);
  };
  var createFooterCells = function createFooterCells2(columns) {
    return reactExports.Children.map(columns, function(col, i) {
      var isVisible = col ? !getColumnProp(col, "hidden") : true;
      var key = col ? getColumnProp(col, "columnKey") || getColumnProp(col, "field") || i : i;
      return isVisible && /* @__PURE__ */ reactExports.createElement(FooterCell, {
        hostName: props.hostName,
        key,
        tableProps: props.tableProps,
        column: col,
        ptCallbacks: props.ptCallbacks,
        metaData: props.metaData
      });
    });
  };
  var createContent = function createContent2() {
    if (props.footerColumnGroup) {
      var rows = reactExports.Children.toArray(ColumnGroupBase.getCProp(props.footerColumnGroup, "children"));
      return rows.map(function(row, i) {
        var rootProps = mergeProps2({
          role: "row"
        }, getRowPTOptions(row, "root"));
        return /* @__PURE__ */ reactExports.createElement("tr", _extends({}, rootProps, {
          key: i
        }), createGroupFooterCells(row));
      });
    }
    var footerRowProps = mergeProps2({
      role: "row"
    }, ptm("footerRow", {
      hostName: props.hostName
    }));
    return /* @__PURE__ */ reactExports.createElement("tr", footerRowProps, createFooterCells(props.columns));
  };
  if (hasFooter()) {
    var content = createContent();
    var tfootProps = mergeProps2({
      className: cx("tfoot"),
      role: "rowgroup"
    }, getColumnGroupPTOptions("root"), ptm("tfoot", {
      hostName: props.hostName
    }));
    return /* @__PURE__ */ reactExports.createElement("tfoot", tfootProps, content);
  }
  return null;
});
TableFooter.displayName = "TableFooter";
function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var FilterMatchMode = Object.freeze({
  STARTS_WITH: "startsWith",
  CONTAINS: "contains",
  NOT_CONTAINS: "notContains",
  ENDS_WITH: "endsWith",
  EQUALS: "equals",
  NOT_EQUALS: "notEquals",
  IN: "in",
  LESS_THAN: "lt",
  LESS_THAN_OR_EQUAL_TO: "lte",
  GREATER_THAN: "gt",
  GREATER_THAN_OR_EQUAL_TO: "gte",
  BETWEEN: "between",
  DATE_IS: "dateIs",
  DATE_IS_NOT: "dateIsNot",
  DATE_BEFORE: "dateBefore",
  DATE_AFTER: "dateAfter",
  CUSTOM: "custom"
});
var PrimeReact3 = /* @__PURE__ */ _createClass$1(function PrimeReact4() {
  _classCallCheck$1(this, PrimeReact4);
});
_defineProperty$1(PrimeReact3, "ripple", false);
_defineProperty$1(PrimeReact3, "inputStyle", "outlined");
_defineProperty$1(PrimeReact3, "locale", "en");
_defineProperty$1(PrimeReact3, "appendTo", null);
_defineProperty$1(PrimeReact3, "cssTransition", true);
_defineProperty$1(PrimeReact3, "autoZIndex", true);
_defineProperty$1(PrimeReact3, "hideOverlaysOnDocumentScrolling", false);
_defineProperty$1(PrimeReact3, "nonce", null);
_defineProperty$1(PrimeReact3, "nullSortOrder", 1);
_defineProperty$1(PrimeReact3, "zIndex", {
  modal: 1100,
  overlay: 1e3,
  menu: 1e3,
  tooltip: 1100,
  toast: 1200
});
_defineProperty$1(PrimeReact3, "pt", void 0);
_defineProperty$1(PrimeReact3, "filterMatchModeOptions", {
  text: [FilterMatchMode.STARTS_WITH, FilterMatchMode.CONTAINS, FilterMatchMode.NOT_CONTAINS, FilterMatchMode.ENDS_WITH, FilterMatchMode.EQUALS, FilterMatchMode.NOT_EQUALS],
  numeric: [FilterMatchMode.EQUALS, FilterMatchMode.NOT_EQUALS, FilterMatchMode.LESS_THAN, FilterMatchMode.LESS_THAN_OR_EQUAL_TO, FilterMatchMode.GREATER_THAN, FilterMatchMode.GREATER_THAN_OR_EQUAL_TO],
  date: [FilterMatchMode.DATE_IS, FilterMatchMode.DATE_IS_NOT, FilterMatchMode.DATE_BEFORE, FilterMatchMode.DATE_AFTER]
});
_defineProperty$1(PrimeReact3, "changeTheme", function(currentTheme, newTheme, linkElementId, callback2) {
  var _linkElement$parentNo;
  var linkElement = document.getElementById(linkElementId);
  var cloneLinkElement = linkElement.cloneNode(true);
  var newThemeUrl = linkElement.getAttribute("href").replace(currentTheme, newTheme);
  cloneLinkElement.setAttribute("id", linkElementId + "-clone");
  cloneLinkElement.setAttribute("href", newThemeUrl);
  cloneLinkElement.addEventListener("load", function() {
    linkElement.remove();
    cloneLinkElement.setAttribute("id", linkElementId);
    if (callback2) {
      callback2();
    }
  });
  (_linkElement$parentNo = linkElement.parentNode) === null || _linkElement$parentNo === void 0 || _linkElement$parentNo.insertBefore(cloneLinkElement, linkElement.nextSibling);
});
var locales = {
  en: {
    startsWith: "Starts with",
    contains: "Contains",
    notContains: "Not contains",
    endsWith: "Ends with",
    equals: "Equals",
    notEquals: "Not equals",
    noFilter: "No Filter",
    filter: "Filter",
    lt: "Less than",
    lte: "Less than or equal to",
    gt: "Greater than",
    gte: "Greater than or equal to",
    dateIs: "Date is",
    dateIsNot: "Date is not",
    dateBefore: "Date is before",
    dateAfter: "Date is after",
    custom: "Custom",
    clear: "Clear",
    close: "Close",
    apply: "Apply",
    matchAll: "Match All",
    matchAny: "Match Any",
    addRule: "Add Rule",
    removeRule: "Remove Rule",
    accept: "Yes",
    reject: "No",
    choose: "Choose",
    upload: "Upload",
    cancel: "Cancel",
    completed: "Completed",
    pending: "Pending",
    fileSizeTypes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
    dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    chooseYear: "Choose Year",
    chooseMonth: "Choose Month",
    chooseDate: "Choose Date",
    prevDecade: "Previous Decade",
    nextDecade: "Next Decade",
    prevYear: "Previous Year",
    nextYear: "Next Year",
    prevMonth: "Previous Month",
    nextMonth: "Next Month",
    prevHour: "Previous Hour",
    nextHour: "Next Hour",
    prevMinute: "Previous Minute",
    nextMinute: "Next Minute",
    prevSecond: "Previous Second",
    nextSecond: "Next Second",
    prevMilliSecond: "Previous Second",
    nextMilliSecond: "Next Second",
    am: "am",
    pm: "pm",
    today: "Today",
    now: "Now",
    weekHeader: "Wk",
    firstDayOfWeek: 0,
    showMonthAfterYear: false,
    dateFormat: "mm/dd/yy",
    weak: "Weak",
    medium: "Medium",
    strong: "Strong",
    passwordPrompt: "Enter a password",
    emptyFilterMessage: "No available options",
    emptyMessage: "No results found",
    aria: {
      trueLabel: "True",
      falseLabel: "False",
      nullLabel: "Not Selected",
      star: "1 star",
      stars: "{star} stars",
      selectAll: "All items selected",
      unselectAll: "All items unselected",
      close: "Close",
      previous: "Previous",
      next: "Next",
      navigation: "Navigation",
      scrollTop: "Scroll Top",
      moveTop: "Move Top",
      moveUp: "Move Up",
      moveDown: "Move Down",
      moveBottom: "Move Bottom",
      moveToTarget: "Move to Target",
      moveToSource: "Move to Source",
      moveAllToTarget: "Move All to Target",
      moveAllToSource: "Move All to Source",
      pageLabel: "Page {page}",
      firstPageLabel: "First Page",
      lastPageLabel: "Last Page",
      nextPageLabel: "Next Page",
      previousPageLabel: "Previous Page",
      rowsPerPageLabel: "Rows per page",
      jumpToPageDropdownLabel: "Jump to Page Dropdown",
      jumpToPageInputLabel: "Jump to Page Input",
      selectRow: "Row Selected",
      unselectRow: "Row Unselected",
      expandRow: "Row Expanded",
      collapseRow: "Row Collapsed",
      showFilterMenu: "Show Filter Menu",
      hideFilterMenu: "Hide Filter Menu",
      filterOperator: "Filter Operator",
      filterConstraint: "Filter Constraint",
      editRow: "Row Edit",
      saveEdit: "Save Edit",
      cancelEdit: "Cancel Edit",
      listView: "List View",
      gridView: "Grid View",
      slide: "Slide",
      slideNumber: "{slideNumber}",
      zoomImage: "Zoom Image",
      zoomIn: "Zoom In",
      zoomOut: "Zoom Out",
      rotateRight: "Rotate Right",
      rotateLeft: "Rotate Left",
      selectLabel: "Select",
      unselectLabel: "Unselect",
      expandLabel: "Expand",
      collapseLabel: "Collapse"
    }
  }
};
function ariaLabel(ariaKey, options2) {
  var _locale = PrimeReact3.locale;
  try {
    var _ariaLabel = localeOptions(_locale)["aria"][ariaKey];
    if (_ariaLabel) {
      for (var key in options2) {
        if (options2.hasOwnProperty(key)) {
          _ariaLabel = _ariaLabel.replace("{".concat(key, "}"), options2[key]);
        }
      }
    }
    return _ariaLabel;
  } catch (error) {
    throw new Error("The ".concat(ariaKey, " option is not found in the current locale('").concat(_locale, "')."));
  }
}
function localeOptions(locale) {
  var _locale = locale || PrimeReact3.locale;
  return locales[_locale];
}
var styles = "";
var FocusTrapBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "FocusTrap",
    children: void 0
  },
  css: {
    styles
  },
  getProps: function getProps5(props) {
    return ObjectUtils.getMergedProps(props, FocusTrapBase.defaultProps);
  },
  getOtherProps: function getOtherProps5(props) {
    return ObjectUtils.getDiffProps(props, FocusTrapBase.defaultProps);
  }
});
function ownKeys$5(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$5(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$5(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$5(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var FocusTrap = /* @__PURE__ */ React.memo(/* @__PURE__ */ React.forwardRef(function(inProps, ref) {
  var targetRef = React.useRef(null);
  var firstFocusableElementRef = React.useRef(null);
  var lastFocusableElementRef = React.useRef(null);
  var context = React.useContext(PrimeReactContext);
  var props = FocusTrapBase.getProps(inProps, context);
  var metaData = {
    props
  };
  useStyle(FocusTrapBase.css.styles, {
    name: "focustrap"
  });
  var _FocusTrapBase$setMet = FocusTrapBase.setMetaData(_objectSpread$5({}, metaData));
  _FocusTrapBase$setMet.ptm;
  React.useImperativeHandle(ref, function() {
    return {
      props,
      getInk: function getInk() {
        return firstFocusableElementRef.current;
      },
      getTarget: function getTarget2() {
        return targetRef.current;
      }
    };
  });
  useMountEffect(function() {
    if (!props.disabled) {
      targetRef.current = getTarget();
      setAutoFocus(targetRef.current);
    }
  });
  var getTarget = function getTarget2() {
    return firstFocusableElementRef.current && firstFocusableElementRef.current.parentElement;
  };
  var setAutoFocus = function setAutoFocus2(target) {
    var _ref3 = props || {}, _ref$autoFocusSelecto = _ref3.autoFocusSelector, autoFocusSelector = _ref$autoFocusSelecto === void 0 ? "" : _ref$autoFocusSelecto, _ref$firstFocusableSe = _ref3.firstFocusableSelector, firstFocusableSelector = _ref$firstFocusableSe === void 0 ? "" : _ref$firstFocusableSe, _ref$autoFocus = _ref3.autoFocus, autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus;
    var focusableElement = DomHandler.getFirstFocusableElement(target, "[autofocus]".concat(getComputedSelector(autoFocusSelector)));
    autoFocus && !focusableElement && (focusableElement = DomHandler.getFirstFocusableElement(target, getComputedSelector(firstFocusableSelector)));
    DomHandler.focus(focusableElement);
  };
  var getComputedSelector = function getComputedSelector2(selector) {
    return ':not(.p-hidden-focusable):not([data-p-hidden-focusable="true"])'.concat(selector !== null && selector !== void 0 ? selector : "");
  };
  var onFirstHiddenElementFocus = function onFirstHiddenElementFocus2(event) {
    var _targetRef$current;
    var currentTarget = event.currentTarget, relatedTarget = event.relatedTarget;
    var focusableElement = relatedTarget === currentTarget.$_pfocustrap_lasthiddenfocusableelement || !((_targetRef$current = targetRef.current) !== null && _targetRef$current !== void 0 && _targetRef$current.contains(relatedTarget)) ? DomHandler.getFirstFocusableElement(currentTarget.parentElement, getComputedSelector(currentTarget.$_pfocustrap_focusableselector)) : currentTarget.$_pfocustrap_lasthiddenfocusableelement;
    DomHandler.focus(focusableElement);
  };
  var onLastHiddenElementFocus = function onLastHiddenElementFocus2(event) {
    var _targetRef$current2;
    var currentTarget = event.currentTarget, relatedTarget = event.relatedTarget;
    var focusableElement = relatedTarget === currentTarget.$_pfocustrap_firsthiddenfocusableelement || !((_targetRef$current2 = targetRef.current) !== null && _targetRef$current2 !== void 0 && _targetRef$current2.contains(relatedTarget)) ? DomHandler.getLastFocusableElement(currentTarget.parentElement, getComputedSelector(currentTarget.$_pfocustrap_focusableselector)) : currentTarget.$_pfocustrap_firsthiddenfocusableelement;
    DomHandler.focus(focusableElement);
  };
  var createHiddenFocusableElements = function createHiddenFocusableElements2() {
    var _ref22 = props || {}, _ref2$tabIndex = _ref22.tabIndex, tabIndex = _ref2$tabIndex === void 0 ? 0 : _ref2$tabIndex;
    var createFocusableElement = function createFocusableElement2(onFocus2, section) {
      return /* @__PURE__ */ React.createElement("span", {
        ref: section === "firstfocusableelement" ? firstFocusableElementRef : lastFocusableElementRef,
        className: "p-hidden-accessible p-hidden-focusable",
        tabIndex,
        role: "presentation",
        "aria-hidden": true,
        "data-p-hidden-accessible": true,
        "data-p-hidden-focusable": true,
        onFocus: onFocus2,
        "data-pc-section": section
      });
    };
    var firstFocusableElement = createFocusableElement(onFirstHiddenElementFocus, "firstfocusableelement");
    var lastFocusableElement = createFocusableElement(onLastHiddenElementFocus, "lastfocusableelement");
    if (firstFocusableElement.ref.current && lastFocusableElement.ref.current) {
      firstFocusableElement.ref.current.$_pfocustrap_lasthiddenfocusableelement = lastFocusableElement.ref.current;
      lastFocusableElement.ref.current.$_pfocustrap_firsthiddenfocusableelement = firstFocusableElement.ref.current;
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, firstFocusableElement, props.children, lastFocusableElement);
  };
  return createHiddenFocusableElements();
}));
var FocusTrap$1 = FocusTrap;
function ownKeys$4(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$4(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$4(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$4(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var ColumnFilter = /* @__PURE__ */ reactExports.memo(function(props) {
  var _React$useState = reactExports.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), overlayVisibleState = _React$useState2[0], setOverlayVisibleState = _React$useState2[1];
  var overlayRef = reactExports.useRef(null);
  var overlayId = reactExports.useRef(UniqueComponentId());
  var iconRef = reactExports.useRef(null);
  var selfClick = reactExports.useRef(false);
  var overlayEventListener = reactExports.useRef(null);
  var mergeProps2 = useMergeProps();
  var getColumnProp = function getColumnProp2(name) {
    return ColumnBase.getCProp(props.column, name);
  };
  var getColumnProps = function getColumnProps2() {
    return ColumnBase.getCProps(props.column);
  };
  var context = reactExports.useContext(PrimeReactContext);
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx;
  var getColumnPTOptions = function getColumnPTOptions2(key, params) {
    var cProps = getColumnProps();
    var columnMetadata = _objectSpread$4({
      props: cProps,
      parent: props.metaData,
      hostName: props.hostName,
      state: {
        overlayVisible: overlayVisibleState
      }
    }, params);
    return mergeProps2(ptm("column.".concat(key), {
      column: columnMetadata
    }), ptm("column.".concat(key), columnMetadata), ptmo(cProps, key, columnMetadata));
  };
  var field = getColumnProp("filterField") || getColumnProp("field");
  var filterModel = props.filters[field];
  var filterStoreModel = props.filtersStore && props.filtersStore[field];
  var _useOverlayListener = useOverlayListener({
    target: iconRef,
    overlay: overlayRef,
    listener: function listener(event, _ref3) {
      var type = _ref3.type, valid = _ref3.valid;
      if (valid) {
        type === "outside" ? !selfClick.current && !isTargetClicked(event.target) && hide() : hide();
      }
      selfClick.current = false;
    },
    when: overlayVisibleState
  }), _useOverlayListener2 = _slicedToArray$1(_useOverlayListener, 2), bindOverlayListener = _useOverlayListener2[0], unbindOverlayListener = _useOverlayListener2[1];
  var hasFilter = function hasFilter2() {
    if (!filterStoreModel || !filterModel)
      return false;
    return filterStoreModel.operator ? !isFilterBlank(filterModel.constraints[0].value) : !isFilterBlank(filterModel.value);
  };
  var hasRowFilter = function hasRowFilter2() {
    return filterModel && !isFilterBlank(filterModel.value);
  };
  var isFilterBlank = function isFilterBlank2(filter2) {
    return ObjectUtils.isEmpty(filter2);
  };
  var isRowMatchModeSelected = function isRowMatchModeSelected2(matchMode) {
    return filterModel && filterModel.matchMode === matchMode;
  };
  var matchModes = function matchModes2() {
    return getColumnProp("filterMatchModeOptions") || context && context.filterMatchModeOptions[findDataType()].map(function(key) {
      return {
        label: localeOption(key),
        value: key
      };
    }) || PrimeReact$2.filterMatchModeOptions[findDataType()].map(function(key) {
      return {
        label: localeOption(key),
        value: key
      };
    });
  };
  var isShowMenuButton = function isShowMenuButton2() {
    return getColumnProp("showFilterMenu") && (props.display === "row" ? getColumnProp("dataType") !== "boolean" : true);
  };
  var isShowClearButton = function isShowClearButton2() {
    return getColumnProp("showClearButton") && props.display === "row";
  };
  var isShowMatchModes = function isShowMatchModes2() {
    return getColumnProp("dataType") !== "boolean" && getColumnProp("showFilterMatchModes") && matchModes() && getColumnProp("showFilterMenuOptions");
  };
  var isShowOperator = function isShowOperator2() {
    return getColumnProp("showFilterOperator") && filterModel && filterModel.operator && getColumnProp("showFilterMenuOptions");
  };
  var showRemoveIcon = function showRemoveIcon2() {
    return fieldConstraints().length > 1;
  };
  var isShowAddConstraint = function isShowAddConstraint2() {
    return getColumnProp("showAddButton") && filterModel && filterModel.operator && fieldConstraints() && fieldConstraints().length < getColumnProp("maxConstraints") && getColumnProp("showFilterMenuOptions");
  };
  var isOutsideClicked = function isOutsideClicked2(target) {
    return !isTargetClicked(target) && overlayRef.current && !(overlayRef.current.isSameNode(target) || overlayRef.current.contains(target));
  };
  var isTargetClicked = function isTargetClicked2(target) {
    return iconRef.current && (iconRef.current.isSameNode(target) || iconRef.current.contains(target));
  };
  var getDefaultConstraint = function getDefaultConstraint2() {
    if (filterStoreModel) {
      if (filterStoreModel.operator) {
        return {
          matchMode: filterStoreModel.constraints[0].matchMode,
          operator: filterStoreModel.operator
        };
      } else {
        return {
          matchMode: filterStoreModel.matchMode
        };
      }
    }
  };
  var findDataType = function findDataType2() {
    var dataType = getColumnProp("dataType");
    var matchMode = getColumnProp("filterMatchMode");
    var hasMatchMode = function hasMatchMode2(key) {
      return context && context.filterMatchModeOptions[key].some(function(mode) {
        return mode === matchMode;
      }) || PrimeReact$2.filterMatchModeOptions[key].some(function(mode) {
        return mode === matchMode;
      });
    };
    if (matchMode === "custom" && !hasMatchMode(dataType)) {
      context && context.filterMatchModeOptions[dataType].push(FilterMatchMode$2.CUSTOM) || PrimeReact$2.filterMatchModeOptions[dataType].push(FilterMatchMode$2.CUSTOM);
      return dataType;
    } else if (matchMode) {
      return Object.keys(context && context.filterMatchModeOptions || PrimeReact$2.filterMatchModeOptions).find(function(key) {
        return hasMatchMode(key);
      }) || dataType;
    }
    return dataType;
  };
  var clearFilter = function clearFilter2() {
    var filterClearCallback = getColumnProp("onFilterClear");
    var defaultConstraint = getDefaultConstraint();
    var filters = _objectSpread$4({}, props.filters);
    if (filters[field].operator) {
      filters[field].constraints.splice(1);
      filters[field].operator = defaultConstraint.operator;
      filters[field].constraints[0] = {
        value: null,
        matchMode: defaultConstraint.matchMode
      };
    } else {
      filters[field].value = null;
      filters[field].matchMode = defaultConstraint.matchMode;
    }
    filterClearCallback && filterClearCallback();
    props.onFilterChange(filters);
    props.onFilterApply();
    hide();
  };
  var applyFilter = function applyFilter2() {
    var filterApplyClickCallback = getColumnProp("onFilterApplyClick");
    filterApplyClickCallback && filterApplyClickCallback({
      field,
      constraints: filterModel
    });
    props.onFilterApply();
    hide();
  };
  var toggleMenu = function toggleMenu2() {
    setOverlayVisibleState(function(prevVisible) {
      return !prevVisible;
    });
  };
  var onToggleButtonKeyDown = function onToggleButtonKeyDown2(event) {
    switch (event.key) {
      case "Escape":
      case "Tab":
        hide();
        break;
      case "ArrowDown":
        if (overlayVisibleState) {
          var focusable = DomHandler.getFirstFocusableElement(overlayRef.current);
          focusable && focusable.focus();
          event.preventDefault();
        } else if (event.altKey) {
          setOverlayVisibleState(true);
          event.preventDefault();
        }
        break;
    }
  };
  var onContentKeyDown = function onContentKeyDown2(event) {
    if (event.key === "Escape") {
      hide();
      iconRef.current && iconRef.current.focus();
    }
  };
  var onInputChange = function onInputChange2(event, index2) {
    var filters = _objectSpread$4({}, props.filters);
    var value = event.target.value;
    var filterField = filters[field];
    if (props.display === "menu" && ObjectUtils.isNotEmpty(filterField.constraints)) {
      filterField.constraints[index2].value = value;
    } else {
      filterField.value = value;
    }
    props.onFilterChange(filters);
    if (!getColumnProp("showApplyButton") || props.display === "row") {
      props.onFilterApply();
    }
  };
  var onInputKeydown = function onInputKeydown2(event, _index) {
    if (event.key === "Enter") {
      if (!getColumnProp("showApplyButton") || props.display === "menu") {
        applyFilter();
      }
    }
  };
  var onRowMatchModeChange = function onRowMatchModeChange2(matchMode) {
    var filterMatchModeChangeCallback = getColumnProp("onFilterMatchModeChange");
    var filters = _objectSpread$4({}, props.filters);
    filters[field].matchMode = matchMode;
    filterMatchModeChangeCallback && filterMatchModeChangeCallback({
      field,
      matchMode
    });
    props.onFilterChange(filters);
    props.onFilterApply();
    hide();
  };
  var onRowMatchModeKeyDown = function onRowMatchModeKeyDown2(event, matchMode, clear) {
    var item2 = event.target;
    switch (event.key) {
      case "ArrowDown":
        var nextItem = findNextItem(item2);
        if (nextItem) {
          item2.removeAttribute("tabindex");
          nextItem.tabIndex = 0;
          nextItem.focus();
        }
        event.preventDefault();
        break;
      case "ArrowUp":
        var prevItem = findPrevItem(item2);
        if (prevItem) {
          item2.removeAttribute("tabindex");
          prevItem.tabIndex = 0;
          prevItem.focus();
        }
        event.preventDefault();
        break;
      case "Enter":
        clear ? clearFilter() : onRowMatchModeChange(matchMode.value);
        event.preventDefault();
        break;
    }
  };
  var onOperatorChange = function onOperatorChange2(e2) {
    var filterOperationChangeCallback = getColumnProp("onFilterOperatorChange");
    var value = e2.value;
    var filters = _objectSpread$4({}, props.filters);
    filters[field].operator = value;
    props.onFilterChange(filters);
    filterOperationChangeCallback && filterOperationChangeCallback({
      field,
      operator: value
    });
    if (!getColumnProp("showApplyButton")) {
      props.onFilterApply();
    }
  };
  var onMenuMatchModeChange = function onMenuMatchModeChange2(value, index2) {
    var filterMatchModeChangeCallback = getColumnProp("onFilterMatchModeChange");
    var filters = _objectSpread$4({}, props.filters);
    var filterField = filters[field];
    if (props.display === "menu" && ObjectUtils.isNotEmpty(filterField.constraints)) {
      filterField.constraints[index2].matchMode = value;
    } else {
      filterField.matchMode = value;
    }
    props.onFilterChange(filters);
    filterMatchModeChangeCallback && filterMatchModeChangeCallback({
      field,
      matchMode: value,
      index: index2
    });
    if (!getColumnProp("showApplyButton")) {
      props.onFilterApply();
    }
  };
  var addConstraint = function addConstraint2() {
    var filterConstraintAddCallback = getColumnProp("onFilterConstraintAdd");
    var defaultConstraint = getDefaultConstraint();
    var filters = _objectSpread$4({}, props.filters);
    var newConstraint = {
      value: null,
      matchMode: defaultConstraint.matchMode
    };
    filters[field].constraints.push(newConstraint);
    filterConstraintAddCallback && filterConstraintAddCallback({
      field,
      constraint: newConstraint
    });
    props.onFilterChange(filters);
    if (!getColumnProp("showApplyButton")) {
      props.onFilterApply();
    }
  };
  var removeConstraint = function removeConstraint2(index2) {
    var filterConstraintRemoveCallback = getColumnProp("onFilterConstraintRemove");
    var filters = _objectSpread$4({}, props.filters);
    var removedConstraint = filters[field].constraints.splice(index2, 1);
    filterConstraintRemoveCallback && filterConstraintRemoveCallback({
      field,
      constraint: removedConstraint
    });
    props.onFilterChange(filters);
    if (!getColumnProp("showApplyButton")) {
      props.onFilterApply();
    }
  };
  var findNextItem = function findNextItem2(item2) {
    var nextItem = item2.nextElementSibling;
    return nextItem ? DomHandler.getAttribute(nextItem, "data-p-column-filter-separator") === true ? findNextItem2(nextItem) : nextItem : item2.parentElement.firstElementChild;
  };
  var findPrevItem = function findPrevItem2(item2) {
    var prevItem = item2.previousElementSibling;
    return prevItem ? DomHandler.getAttribute(prevItem, "data-p-column-filter-separator") === true ? findPrevItem2(prevItem) : prevItem : item2.parentElement.lastElementChild;
  };
  var hide = function hide2() {
    setOverlayVisibleState(false);
  };
  var onContentClick = function onContentClick2(event) {
    selfClick.current = true;
    OverlayService.emit("overlay-click", {
      originalEvent: event,
      target: overlayRef.current
    });
  };
  var onContentMouseDown = function onContentMouseDown2() {
    selfClick.current = true;
  };
  var onOverlayEnter = function onOverlayEnter2() {
    ZIndexUtils.set("overlay", overlayRef.current, context && context.autoZIndex || PrimeReact$2.autoZIndex, context && context.zIndex["overlay"] || PrimeReact$2.zIndex["overlay"]);
    DomHandler.addStyles(overlayRef.current, {
      position: "absolute",
      top: "0",
      left: "0"
    });
    DomHandler.alignOverlay(overlayRef.current, iconRef.current, context && context.appendTo || PrimeReact$2.appendTo, false);
    overlayEventListener.current = function(e2) {
      if (!isOutsideClicked(e2.target)) {
        selfClick.current = true;
      }
    };
    OverlayService.on("overlay-click", overlayEventListener.current);
  };
  var onOverlayEntered = function onOverlayEntered2() {
    bindOverlayListener();
  };
  var onOverlayExit = function onOverlayExit2() {
    onOverlayHide();
  };
  var onOverlayExited = function onOverlayExited2() {
    ZIndexUtils.clear(overlayRef.current);
  };
  var onOverlayHide = function onOverlayHide2() {
    unbindOverlayListener();
    OverlayService.off("overlay-click", overlayEventListener.current);
    overlayEventListener.current = null;
    selfClick.current = false;
  };
  var fieldConstraints = function fieldConstraints2() {
    return filterModel ? filterModel.constraints || [filterModel] : [];
  };
  var operator = function operator2() {
    return filterModel.operator;
  };
  var operatorOptions = function operatorOptions2() {
    return [{
      label: localeOption("matchAll"),
      value: FilterOperator.AND
    }, {
      label: localeOption("matchAny"),
      value: FilterOperator.OR
    }];
  };
  var noFilterLabel = function noFilterLabel2() {
    return localeOption("noFilter");
  };
  var removeRuleButtonLabel = function removeRuleButtonLabel2() {
    return localeOption("removeRule");
  };
  var addRuleButtonLabel = function addRuleButtonLabel2() {
    return localeOption("addRule");
  };
  var clearButtonLabel = function clearButtonLabel2() {
    return localeOption("clear");
  };
  var applyButtonLabel = function applyButtonLabel2() {
    return localeOption("apply");
  };
  var filterCallback = function filterCallback2(value) {
    var index2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var filters = _objectSpread$4({}, props.filters);
    var meta = filters[field];
    props.display === "menu" && meta && meta.operator ? filters[field].constraints[index2].value = value : filters[field].value = value;
    props.onFilterChange(filters);
  };
  var filterApplyCallback = function filterApplyCallback2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    args && filterCallback(args[0], args[1]);
    props.onFilterApply();
  };
  useUpdateEffect(function() {
    if (props.display === "menu" && overlayVisibleState) {
      DomHandler.alignOverlay(overlayRef.current, iconRef.current, context && context.appendTo || PrimeReact$2.appendTo, false);
    }
  });
  useUnmountEffect(function() {
    if (overlayEventListener.current) {
      OverlayService.off("overlay-click", overlayEventListener.current);
      overlayEventListener.current = null;
    }
    if (overlayRef.current) {
      ZIndexUtils.clear(overlayRef.current);
      onOverlayHide();
    }
  });
  var createFilterElement = function createFilterElement2(model, index2) {
    var value = model ? model.value : null;
    return getColumnProp("filterElement") ? ObjectUtils.getJSXElement(getColumnProp("filterElement"), {
      field,
      index: index2,
      filterModel: model,
      value,
      filterApplyCallback,
      filterCallback
    }) : /* @__PURE__ */ reactExports.createElement(InputText, {
      type: getColumnProp("filterType"),
      value: value || "",
      onChange: function onChange2(e2) {
        return onInputChange(e2, index2);
      },
      onKeyDown: function onKeyDown(e2) {
        return onInputKeydown(e2);
      },
      className: "p-column-filter",
      placeholder: getColumnProp("filterPlaceholder"),
      maxLength: getColumnProp("filterMaxLength"),
      "aria-label": getColumnProp("filterPlaceholder"),
      unstyled: props.unstyled,
      __parentMetadata: {
        parent: props.metaData
      }
    });
  };
  var createRowFilterElement = function createRowFilterElement2() {
    if (props.display === "row") {
      var content = createFilterElement(filterModel, 0);
      var filterInputProps = mergeProps2({
        className: cx("filterInput")
      }, getColumnPTOptions("filterInput"));
      return /* @__PURE__ */ reactExports.createElement("div", filterInputProps, content);
    }
    return null;
  };
  var createMenuFilterElement = function createMenuFilterElement2(fieldConstraint, index2) {
    return props.display === "menu" ? createFilterElement(fieldConstraint, index2) : null;
  };
  var createMenuButton = function createMenuButton2() {
    if (!isShowMenuButton()) {
      return null;
    }
    var filterIconProps = mergeProps2({
      "aria-hidden": true
    }, getColumnPTOptions("filterIcon"));
    var icon2 = props.filterIcon || /* @__PURE__ */ reactExports.createElement(FilterIcon, filterIconProps);
    var columnFilterIcon = IconUtils.getJSXIcon(icon2, _objectSpread$4({}, filterIconProps), {
      props
    });
    var label = overlayVisibleState ? ariaLabel("hideFilterMenu") : ariaLabel("showFilterMenu");
    var filterMenuButtonProps = mergeProps2({
      type: "button",
      className: cx("filterMenuButton", {
        overlayVisibleState,
        hasFilter
      }),
      "aria-haspopup": true,
      "aria-expanded": overlayVisibleState,
      "aria-label": label,
      "aria-controls": overlayId.current,
      onClick: function onClick(e2) {
        return toggleMenu();
      },
      onKeyDown: function onKeyDown(e2) {
        return onToggleButtonKeyDown(e2);
      }
    }, getColumnPTOptions("filterMenuButton", {
      context: {
        active: hasFilter()
      }
    }));
    return /* @__PURE__ */ reactExports.createElement("button", _extends({
      ref: iconRef
    }, filterMenuButtonProps), columnFilterIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null));
  };
  var createClearButton = function createClearButton2() {
    if (!isShowClearButton()) {
      return null;
    }
    var filterClearIconProps = mergeProps2({
      "aria-hidden": true
    }, getColumnPTOptions("filterClearIcon"));
    var icon2 = props.filterClearIcon || /* @__PURE__ */ reactExports.createElement(FilterSlashIcon, filterClearIconProps);
    var filterClearIcon = IconUtils.getJSXIcon(icon2, _objectSpread$4({}, filterClearIconProps), {
      props
    });
    var clearLabel = clearButtonLabel();
    var headerFilterClearButtonProps = mergeProps2({
      className: cx("headerFilterClearButton", {
        hasRowFilter
      }),
      type: "button",
      onClick: function onClick(e2) {
        return clearFilter();
      },
      "aria-label": clearLabel
    }, getColumnPTOptions("headerFilterClearButton", {
      context: {
        hidden: hasRowFilter()
      }
    }));
    return /* @__PURE__ */ reactExports.createElement("button", headerFilterClearButtonProps, filterClearIcon, /* @__PURE__ */ reactExports.createElement(Ripple, null));
  };
  var createRowItems = function createRowItems2() {
    if (isShowMatchModes()) {
      var _matchModes = matchModes();
      var _noFilterLabel = noFilterLabel();
      var filterSeparatorProps = mergeProps2({
        className: cx("filterSeparator"),
        "data-p-column-filter-separator": true
      }, getColumnPTOptions("filterSeparator"));
      var filterRowItemProps = mergeProps2({
        className: cx("filterRowItem", {
          isRowMatchModeSelected,
          isShowMatchModes
        }),
        onClick: function onClick(e2) {
          return clearFilter();
        },
        onKeyDown: function onKeyDown(e2) {
          return onRowMatchModeKeyDown(e2, null, true);
        }
      }, getColumnPTOptions("filterRowItem"));
      var filterRowItemsProps = mergeProps2({
        className: cx("filterRowItems")
      }, getColumnPTOptions("filterRowItems"));
      return /* @__PURE__ */ reactExports.createElement("ul", filterRowItemsProps, _matchModes.map(function(matchMode, i) {
        var value = matchMode.value, label = matchMode.label;
        var tabIndex = i === 0 ? 0 : null;
        var filterRowItemProps2 = mergeProps2({
          className: cx("filterRowItem", {
            isRowMatchModeSelected,
            isShowMatchModes,
            value
          }),
          onClick: function onClick() {
            return onRowMatchModeChange(value);
          },
          onKeyDown: function onKeyDown(e2) {
            return onRowMatchModeKeyDown(e2, matchMode);
          },
          tabIndex
        }, getColumnPTOptions("filterRowItem", {
          context: {
            highlighted: matchMode && isRowMatchModeSelected(value)
          }
        }));
        return /* @__PURE__ */ reactExports.createElement("li", _extends({}, filterRowItemProps2, {
          key: label
        }), label);
      }), /* @__PURE__ */ reactExports.createElement("li", filterSeparatorProps), /* @__PURE__ */ reactExports.createElement("li", filterRowItemProps, _noFilterLabel));
    }
    return null;
  };
  var createOperator = function createOperator2() {
    if (isShowOperator()) {
      var options2 = operatorOptions();
      var value = operator();
      var filterOperatorProps = mergeProps2({
        className: cx("filterOperator")
      }, getColumnPTOptions("filterOperator"));
      return /* @__PURE__ */ reactExports.createElement("div", filterOperatorProps, /* @__PURE__ */ reactExports.createElement(Dropdown, {
        options: options2,
        value,
        onChange: onOperatorChange,
        className: "p-column-filter-operator-dropdown",
        pt: getColumnPTOptions("filterOperatorDropdown"),
        unstyled: props.unstyled,
        __parentMetadata: {
          parent: props.metaData
        },
        "aria-label": ariaLabel("filterOperator")
      }));
    }
    return null;
  };
  var createMatchModeDropdown = function createMatchModeDropdown2(constraint, index2) {
    if (isShowMatchModes()) {
      var options2 = matchModes();
      return /* @__PURE__ */ reactExports.createElement(Dropdown, {
        options: options2,
        value: constraint.matchMode,
        onChange: function onChange2(e2) {
          return onMenuMatchModeChange(e2.value, index2);
        },
        className: "p-column-filter-matchmode-dropdown",
        pt: getColumnPTOptions("filterMatchModeDropdown"),
        unstyled: props.unstyled,
        __parentMetadata: {
          parent: props.metaData
        },
        "aria-label": ariaLabel("filterConstraint")
      });
    }
    return null;
  };
  var createRemoveButton = function createRemoveButton2(index2) {
    if (showRemoveIcon()) {
      var removeRuleLabel = removeRuleButtonLabel();
      return /* @__PURE__ */ reactExports.createElement(Button, {
        type: "button",
        icon: props.filterRemoveIcon || /* @__PURE__ */ reactExports.createElement(TrashIcon, null),
        className: "p-column-filter-remove-button p-button-text p-button-danger p-button-sm",
        onClick: function onClick() {
          return removeConstraint(index2);
        },
        label: removeRuleLabel,
        pt: getColumnPTOptions("filterRemoveButton"),
        unstyled: props.unstyled,
        __parentMetadata: {
          parent: props.metaData
        }
      });
    }
    return null;
  };
  var createConstraints = function createConstraints2() {
    var _fieldConstraints = fieldConstraints();
    var filterConstraintsProps = mergeProps2({
      className: cx("filterConstraints")
    }, getColumnPTOptions("filterConstraints"));
    var filterConstraintProps = mergeProps2({
      className: cx("filterConstraint")
    }, getColumnPTOptions("filterConstraint"));
    return /* @__PURE__ */ reactExports.createElement("div", filterConstraintsProps, _fieldConstraints.map(function(fieldConstraint, i) {
      var matchModeDropdown = createMatchModeDropdown(fieldConstraint, i);
      var menuFilterElement = createMenuFilterElement(fieldConstraint, i);
      var removeButton = createRemoveButton(i);
      var filterRemoveProps = mergeProps2(getColumnPTOptions("filterRemove"));
      return /* @__PURE__ */ reactExports.createElement("div", _extends({}, filterConstraintProps, {
        key: i
      }), matchModeDropdown, menuFilterElement, /* @__PURE__ */ reactExports.createElement("div", filterRemoveProps, removeButton));
    }));
  };
  var createAddRule = function createAddRule2() {
    if (isShowAddConstraint()) {
      var addRuleLabel = addRuleButtonLabel();
      var filterAddRuleProps = mergeProps2({
        className: cx("filterAddRule")
      }, getColumnPTOptions("filterAddRule"));
      return /* @__PURE__ */ reactExports.createElement("div", filterAddRuleProps, /* @__PURE__ */ reactExports.createElement(Button, {
        type: "button",
        label: addRuleLabel,
        icon: props.filterAddIcon || /* @__PURE__ */ reactExports.createElement(PlusIcon, null),
        className: "p-column-filter-add-button p-button-text p-button-sm",
        onClick: addConstraint,
        pt: getColumnPTOptions("filterAddRuleButton"),
        unstyled: props.unstyled,
        __parentMetadata: {
          parent: props.metaData
        }
      }));
    }
    return null;
  };
  var createFilterClearButton = function createFilterClearButton2() {
    if (getColumnProp("showClearButton")) {
      if (!getColumnProp("filterClear")) {
        var clearLabel = clearButtonLabel();
        return /* @__PURE__ */ reactExports.createElement(Button, {
          type: "button",
          outlined: true,
          size: "small",
          onClick: clearFilter,
          label: clearLabel,
          pt: getColumnPTOptions("filterClearButton"),
          unstyled: props.unstyled,
          __parentMetadata: {
            parent: props.metaData
          }
        });
      }
      return ObjectUtils.getJSXElement(getColumnProp("filterClear"), {
        field,
        filterModel,
        filterClearCallback: clearFilter
      });
    }
    return null;
  };
  var createFilterApplyButton = function createFilterApplyButton2() {
    if (getColumnProp("showApplyButton")) {
      if (!getColumnProp("filterApply")) {
        var applyLabel = applyButtonLabel();
        return /* @__PURE__ */ reactExports.createElement(Button, {
          type: "button",
          size: "small",
          onClick: applyFilter,
          label: applyLabel,
          pt: getColumnPTOptions("filterApplyButton"),
          unstyled: props.unstyled,
          __parentMetadata: {
            parent: props.metaData
          }
        });
      }
      return ObjectUtils.getJSXElement(getColumnProp("filterApply"), {
        field,
        filterModel,
        filterApplyCallback: applyFilter
      });
    }
    return null;
  };
  var createButtonBar = function createButtonBar2() {
    var clearButton2 = createFilterClearButton();
    var applyButton = createFilterApplyButton();
    var filterButtonbarProps = mergeProps2({
      className: cx("filterButtonBar")
    }, getColumnPTOptions("filterButtonBar"));
    return /* @__PURE__ */ reactExports.createElement("div", filterButtonbarProps, clearButton2, applyButton);
  };
  var createItems = function createItems2() {
    var operator2 = createOperator();
    var constraints = createConstraints();
    var addRule = createAddRule();
    var buttonBar = createButtonBar();
    return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, operator2, constraints, addRule, buttonBar);
  };
  var createOverlay = function createOverlay2() {
    var style = getColumnProp("filterMenuStyle");
    var filterHeader = ObjectUtils.getJSXElement(getColumnProp("filterHeader"), {
      field,
      filterModel,
      filterApplyCallback
    });
    var filterFooter = ObjectUtils.getJSXElement(getColumnProp("filterFooter"), {
      field,
      filterModel,
      filterApplyCallback
    });
    var items = props.display === "row" ? createRowItems() : createItems();
    var filterOverlayProps = mergeProps2({
      style,
      className: cx("filterOverlay", {
        columnFilterProps: props,
        context,
        getColumnProp
      }),
      onKeyDown: function onKeyDown(e2) {
        return onContentKeyDown(e2);
      },
      onClick: function onClick(e2) {
        return onContentClick(e2);
      },
      onMouseDown: function onMouseDown(e2) {
        return onContentMouseDown();
      },
      id: overlayId.current,
      "aria-modal": overlayVisibleState,
      role: "dialog"
    }, getColumnPTOptions("filterOverlay"));
    var transitionProps = mergeProps2({
      classNames: cx("transition"),
      "in": overlayVisibleState,
      timeout: {
        enter: 120,
        exit: 100
      },
      unmountOnExit: true,
      onEnter: onOverlayEnter,
      onEntered: onOverlayEntered,
      onExit: onOverlayExit,
      onExited: onOverlayExited
    }, getColumnPTOptions("transition"));
    return /* @__PURE__ */ reactExports.createElement(Portal, null, /* @__PURE__ */ reactExports.createElement(CSSTransition, _extends({
      nodeRef: overlayRef
    }, transitionProps), /* @__PURE__ */ reactExports.createElement("div", _extends({
      ref: overlayRef
    }, filterOverlayProps), /* @__PURE__ */ reactExports.createElement(FocusTrap$1, {
      autoFocus: true
    }, filterHeader, items, filterFooter))));
  };
  var rowFilterElement = createRowFilterElement();
  var menuButton = createMenuButton();
  var clearButton = createClearButton();
  var overlay = createOverlay();
  var columnFilter2 = mergeProps2({
    className: cx("columnFilter", {
      columnFilterProps: props
    })
  }, getColumnPTOptions("columnFilter"));
  return /* @__PURE__ */ reactExports.createElement("div", columnFilter2, rowFilterElement, menuButton, clearButton, overlay);
});
ColumnFilter.displayName = "ColumnFilter";
function ownKeys$3(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$3(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$3(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$3(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var HeaderCheckbox = /* @__PURE__ */ reactExports.memo(function(props) {
  var _React$useState = reactExports.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), focusedState = _React$useState2[0], setFocusedState = _React$useState2[1];
  var mergeProps2 = useMergeProps();
  var getColumnProps = function getColumnProps2() {
    return ColumnBase.getCProps(props.column);
  };
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx;
  var getColumnPTOptions = function getColumnPTOptions2(key) {
    var cProps = getColumnProps();
    var columnMetaData = {
      props: cProps,
      parent: props.metaData,
      hostName: props.hostName,
      state: {
        focused: focusedState
      },
      context: {
        checked: props.checked,
        disabled: props.disabled
      }
    };
    return mergeProps2(ptm("column.".concat(key), {
      column: columnMetaData
    }), ptm("column.".concat(key), columnMetaData), ptmo(cProps, key, columnMetaData));
  };
  var _onFocus = function onFocus2() {
    setFocusedState(true);
  };
  var _onBlur = function onBlur() {
    setFocusedState(false);
  };
  var _onClick = function onClick(event) {
    if (!props.disabled) {
      setFocusedState(true);
      props.onChange({
        originalEvent: event,
        checked: !props.checked
      });
    }
  };
  var _onKeyDown = function onKeyDown(event) {
    if (event.code === "Space" || event.key === " ") {
      _onClick(event);
      event.preventDefault();
    }
  };
  var headerCheckboxIconProps = mergeProps2({
    className: cx("headerCheckboxIcon")
  }, getColumnPTOptions("headerCheckboxIcon"));
  var icon2 = props.checked ? props.checkIcon || /* @__PURE__ */ reactExports.createElement(CheckIcon, headerCheckboxIconProps) : null;
  var checkIcon = IconUtils.getJSXIcon(icon2, _objectSpread$3({}, headerCheckboxIconProps), {
    props
  });
  var tabIndex = props.disabled ? null : 0;
  var headerCheckboxWrapperProps = mergeProps2({
    className: cx("headerCheckboxWrapper"),
    onClick: function onClick(e2) {
      return _onClick(e2);
    }
  }, getColumnPTOptions("headerCheckboxWrapper"));
  var headerCheckboxProps = mergeProps2({
    className: cx("headerCheckbox", {
      headerProps: props,
      focusedState
    }),
    role: "checkbox",
    "aria-checked": props.checked,
    "aria-label": props.checked ? ariaLabel("selectAll") : ariaLabel("unselectAll"),
    tabIndex,
    onFocus: function onFocus2(e2) {
      return _onFocus();
    },
    onBlur: function onBlur(e2) {
      return _onBlur();
    },
    onKeyDown: function onKeyDown(e2) {
      return _onKeyDown(e2);
    }
  }, getColumnPTOptions("headerCheckbox"));
  return /* @__PURE__ */ reactExports.createElement("div", headerCheckboxWrapperProps, /* @__PURE__ */ reactExports.createElement("div", headerCheckboxProps, checkIcon));
});
HeaderCheckbox.displayName = "HeaderCheckbox";
function ownKeys$2(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$2(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$2(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$2(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var HeaderCell = /* @__PURE__ */ reactExports.memo(function(props) {
  var _React$useState = reactExports.useState({}), _React$useState2 = _slicedToArray$1(_React$useState, 2), styleObjectState = _React$useState2[0], setStyleObjectState = _React$useState2[1];
  var elementRef = reactExports.useRef(null);
  var prevColumn = usePrevious(props.column);
  var mergeProps2 = useMergeProps();
  var parentMetaData = props.metaData, ptCallbacks = props.ptCallbacks, index2 = props.index;
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx;
  var params = {
    index: index2
  };
  var parentParams = _objectSpread$2(_objectSpread$2({}, parentMetaData), params);
  var getColumnProps = function getColumnProps2() {
    return ColumnBase.getCProps(props.column);
  };
  var getColumnPTOptions = function getColumnPTOptions2(key) {
    var cProps = getColumnProps();
    var columnMetaData = {
      props: cProps,
      parent: parentParams,
      hostName: props.hostName,
      state: {
        styleObject: styleObjectState
      },
      context: {
        index: props.index,
        sorted: getSortMeta().sorted,
        resizable: props.resizableColumns,
        size: props.metaData.props.size,
        showGridlines: props.metaData.props.showGridlines
      }
    };
    return mergeProps2(ptm("column.".concat(key), {
      column: columnMetaData
    }), ptm("column.".concat(key), columnMetaData), ptmo(cProps, key, columnMetaData));
  };
  var isBadgeVisible = function isBadgeVisible2() {
    return props.multiSortMeta && props.multiSortMeta.length > 1;
  };
  var isSortableDisabled = function isSortableDisabled2() {
    return !getColumnProp("sortable") || getColumnProp("sortable") && (props.allSortableDisabled || getColumnProp("sortableDisabled"));
  };
  var getColumnProp = function getColumnProp2() {
    return props.column ? typeof (arguments.length <= 0 ? void 0 : arguments[0]) === "string" ? ColumnBase.getCProp(props.column, arguments.length <= 0 ? void 0 : arguments[0]) : ColumnBase.getCProp((arguments.length <= 0 ? void 0 : arguments[0]) || props.column, arguments.length <= 1 ? void 0 : arguments[1]) : null;
  };
  var getStyle2 = function getStyle3() {
    var headerStyle = getColumnProp("headerStyle");
    var columnStyle = getColumnProp("style");
    return getColumnProp("frozen") ? Object.assign({}, columnStyle, headerStyle, styleObjectState) : Object.assign({}, columnStyle, headerStyle);
  };
  var getMultiSortMetaIndex = function getMultiSortMetaIndex2() {
    return props.multiSortMeta.findIndex(function(meta) {
      return meta.field === getColumnProp("field") || meta.field === getColumnProp("sortField");
    });
  };
  var getSortMeta = function getSortMeta2() {
    var sorted = false;
    var sortOrder = 0;
    var metaIndex = -1;
    if (props.sortMode === "single") {
      sorted = props.sortField && (props.sortField === getColumnProp("field") || props.sortField === getColumnProp("sortField"));
      sortOrder = sorted ? props.sortOrder : 0;
    } else if (props.sortMode === "multiple") {
      metaIndex = getMultiSortMetaIndex();
      if (metaIndex > -1) {
        sorted = true;
        sortOrder = props.multiSortMeta[metaIndex].order;
      }
    }
    return {
      sorted,
      sortOrder,
      metaIndex
    };
  };
  var getAriaSort = function getAriaSort2(_ref3) {
    var sorted = _ref3.sorted, sortOrder = _ref3.sortOrder;
    if (getColumnProp("sortable")) {
      if (sorted && sortOrder < 0)
        return "descending";
      else if (sorted && sortOrder > 0)
        return "ascending";
      else
        return "none";
    }
    return null;
  };
  var updateStickyPosition = function updateStickyPosition2() {
    if (getColumnProp("frozen")) {
      var styleObject = _objectSpread$2({}, styleObjectState);
      var align = getColumnProp("alignFrozen");
      if (align === "right") {
        var right = 0;
        var next2 = elementRef.current.nextElementSibling;
        if (next2) {
          right = DomHandler.getOuterWidth(next2) + parseFloat(next2.style.right || 0);
        }
        styleObject["right"] = right + "px";
      } else {
        var left = 0;
        var prev2 = elementRef.current.previousElementSibling;
        if (prev2) {
          left = DomHandler.getOuterWidth(prev2) + parseFloat(prev2.style.left || 0);
        }
        styleObject["left"] = left + "px";
      }
      var filterRow = elementRef.current.parentElement.nextElementSibling;
      if (filterRow) {
        var _index = DomHandler.index(elementRef.current);
        filterRow.children[_index].style.left = styleObject["left"];
        filterRow.children[_index].style.right = styleObject["right"];
      }
      var isSameStyle = styleObjectState["left"] === styleObject["left"] && styleObjectState["right"] === styleObject["right"];
      !isSameStyle && setStyleObjectState(styleObject);
    }
  };
  var updateSortableDisabled = function updateSortableDisabled2(prevColumn2) {
    if (getColumnProp(prevColumn2, "sortableDisabled") !== getColumnProp("sortableDisabled") || getColumnProp(prevColumn2, "sortable") !== getColumnProp("sortable")) {
      props.onSortableChange();
    }
  };
  var _onClick = function onClick(event) {
    if (!isSortableDisabled()) {
      var targetNode = event.target;
      if (DomHandler.getAttribute(targetNode, "data-p-sortable-column") === true || DomHandler.getAttribute(targetNode, "data-pc-section") === "headertitle" || DomHandler.getAttribute(targetNode, "data-pc-section") === "headercontent" || DomHandler.getAttribute(targetNode, "data-pc-section") === "sortIcon" || DomHandler.getAttribute(targetNode.parentElement, "data-pc-section") === "sortIcon" || targetNode.closest('[data-p-sortable-column="true"]') && !targetNode.closest('[data-pc-section="filtermenubutton"]')) {
        DomHandler.clearSelection();
        props.onSortChange({
          originalEvent: event,
          column: props.column,
          sortableDisabledFields: props.sortableDisabledFields
        });
      }
    }
  };
  var _onMouseDown = function onMouseDown(event) {
    props.onColumnMouseDown({
      originalEvent: event,
      column: props.column
    });
  };
  var _onKeyDown = function onKeyDown(event) {
    if ((event.code == "Enter" || event.code == "Space") && event.currentTarget === elementRef.current && DomHandler.getAttribute(event.currentTarget, "data-p-sortable-column") === "true") {
      _onClick(event);
      event.preventDefault();
    }
  };
  var _onDragStart = function onDragStart(event) {
    props.onColumnDragStart({
      originalEvent: event,
      column: props.column
    });
  };
  var _onDragOver = function onDragOver(event) {
    props.onColumnDragOver({
      originalEvent: event,
      column: props.column
    });
  };
  var _onDragLeave = function onDragLeave(event) {
    props.onColumnDragLeave({
      originalEvent: event,
      column: props.column
    });
  };
  var _onDrop = function onDrop(event) {
    props.onColumnDrop({
      originalEvent: event,
      column: props.column
    });
  };
  var onResizerMouseDown = function onResizerMouseDown2(event) {
    props.onColumnResizeStart({
      originalEvent: event,
      column: props.column
    });
  };
  var onResizerClick = function onResizerClick2(event) {
    if (props.onColumnResizerClick) {
      props.onColumnResizerClick({
        originalEvent: event,
        element: event.currentTarget.parentElement,
        column: props.column
      });
      event.preventDefault();
    }
  };
  var onResizerDoubleClick = function onResizerDoubleClick2(event) {
    if (props.onColumnResizerDoubleClick) {
      props.onColumnResizerDoubleClick({
        originalEvent: event,
        element: event.currentTarget.parentElement,
        column: props.column
      });
      event.preventDefault();
    }
  };
  reactExports.useEffect(function() {
    if (getColumnProp("frozen")) {
      updateStickyPosition();
    }
    updateSortableDisabled(prevColumn);
  });
  var createResizer = function createResizer2() {
    if (props.resizableColumns && !getColumnProp("frozen")) {
      var columnResizerProps = mergeProps2({
        className: cx("columnResizer"),
        onMouseDown: function onMouseDown(e2) {
          return onResizerMouseDown(e2);
        },
        onClick: function onClick(e2) {
          return onResizerClick(e2);
        },
        onDoubleClick: function onDoubleClick(e2) {
          return onResizerDoubleClick(e2);
        }
      }, getColumnPTOptions("columnResizer"));
      return /* @__PURE__ */ reactExports.createElement("span", columnResizerProps);
    }
    return null;
  };
  var createTitle2 = function createTitle3() {
    var title = ObjectUtils.getJSXElement(getColumnProp("header"), {
      props: props.tableProps
    });
    var headerTitleProps = mergeProps2({
      className: cx("headerTitle")
    }, getColumnPTOptions("headerTitle"));
    return /* @__PURE__ */ reactExports.createElement("span", headerTitleProps, title);
  };
  var createSortIcon = function createSortIcon2(_ref22) {
    var sorted = _ref22.sorted, sortOrder = _ref22.sortOrder;
    if (getColumnProp("sortable")) {
      var sortIconProps = mergeProps2({
        className: cx("sortIcon")
      }, getColumnPTOptions("sortIcon"));
      var sortProps = mergeProps2(getColumnPTOptions("sort"));
      var icon2 = sorted ? sortOrder < 0 ? /* @__PURE__ */ reactExports.createElement(SortAmountDownIcon, sortIconProps) : /* @__PURE__ */ reactExports.createElement(SortAmountUpAltIcon, sortIconProps) : /* @__PURE__ */ reactExports.createElement(SortAltIcon, sortIconProps);
      var sortIcon = IconUtils.getJSXIcon(props.sortIcon || icon2, _objectSpread$2({}, sortIconProps), {
        props,
        sorted,
        sortOrder
      });
      return /* @__PURE__ */ reactExports.createElement("span", sortProps, sortIcon);
    }
    return null;
  };
  var createBadge = function createBadge2(_ref3) {
    var metaIndex = _ref3.metaIndex;
    if (metaIndex !== -1 && isBadgeVisible()) {
      var value = props.groupRowsBy && props.groupRowsBy === props.groupRowSortField ? metaIndex : metaIndex + 1;
      var sortBadgeProps = mergeProps2({
        className: cx("sortBadge")
      }, getColumnPTOptions("root"), getColumnPTOptions("sortBadge"));
      return /* @__PURE__ */ reactExports.createElement("span", sortBadgeProps, value);
    }
    return null;
  };
  var createCheckbox = function createCheckbox2() {
    if (props.showSelectAll && getColumnProp("selectionMode") === "multiple" && props.filterDisplay !== "row") {
      var allRowsSelected = props.allRowsSelected(props.value);
      return /* @__PURE__ */ reactExports.createElement(HeaderCheckbox, {
        hostName: props.hostName,
        checked: allRowsSelected,
        onChange: props.onColumnCheckboxChange,
        disabled: props.empty,
        ptCallbacks,
        metaData: parentMetaData
      });
    }
    return null;
  };
  var createFilter3 = function createFilter4() {
    if (props.filterDisplay === "menu" && getColumnProp("filter")) {
      return /* @__PURE__ */ reactExports.createElement(ColumnFilter, {
        hostName: props.hostName,
        display: "menu",
        column: props.column,
        filters: props.filters,
        onFilterChange: props.onFilterChange,
        onFilterApply: props.onFilterApply,
        filtersStore: props.filtersStore,
        filterIcon: props.filterIcon,
        filterClearIcon: props.filterClearIcon,
        ptCallbacks,
        metaData: parentMetaData,
        unstyled: props.unstyled
      });
    }
    return null;
  };
  var createHeader = function createHeader2(sortMeta) {
    var title = createTitle2();
    var sortIcon = createSortIcon(sortMeta);
    var badge = createBadge(sortMeta);
    var checkbox2 = createCheckbox();
    var filter2 = createFilter3();
    var headerContentProps = mergeProps2({
      className: cx("headerContent")
    }, getColumnPTOptions("headerContent"));
    return /* @__PURE__ */ reactExports.createElement("div", headerContentProps, title, sortIcon, badge, checkbox2, filter2);
  };
  var createElement = function createElement2() {
    var _isSortableDisabled = isSortableDisabled();
    var sortMeta = getSortMeta();
    var style = getStyle2();
    var align = getColumnProp("alignHeader") || getColumnProp("align");
    var frozen = getColumnProp("frozen");
    var tabIndex = getColumnProp("sortable") && !_isSortableDisabled ? props.tabIndex : null;
    var colSpan = getColumnProp("colSpan");
    var rowSpan = getColumnProp("rowSpan");
    var ariaSort = getAriaSort(sortMeta);
    var headerTooltip = getColumnProp("headerTooltip");
    var headerClassName = getColumnProp("headerClassName");
    var hasTooltip = ObjectUtils.isNotEmpty(headerTooltip);
    var headerTooltipOptions = getColumnProp("headerTooltipOptions");
    var resizer = createResizer();
    var header = createHeader(sortMeta);
    var headerCellProps = mergeProps2({
      className: classNames$1(headerClassName, cx("headerCell", {
        headerProps: props,
        frozen,
        sortMeta,
        align,
        _isSortableDisabled,
        getColumnProp
      })),
      style,
      role: "columnheader",
      onClick: function onClick(e2) {
        return _onClick(e2);
      },
      onKeyDown: function onKeyDown(e2) {
        return _onKeyDown(e2);
      },
      onMouseDown: function onMouseDown(e2) {
        return _onMouseDown(e2);
      },
      onDragStart: function onDragStart(e2) {
        return _onDragStart(e2);
      },
      onDragOver: function onDragOver(e2) {
        return _onDragOver(e2);
      },
      onDragLeave: function onDragLeave(e2) {
        return _onDragLeave(e2);
      },
      onDrop: function onDrop(e2) {
        return _onDrop(e2);
      },
      tabIndex,
      colSpan,
      rowSpan,
      "aria-sort": ariaSort,
      "data-p-sortable-column": getColumnProp("sortable"),
      "data-p-resizable-column": props.resizableColumns,
      "data-p-highlight": sortMeta.sorted,
      "data-p-filter-column": !props.metaData.props.headerColumnGroup && props.filterDisplay === "row",
      "data-p-frozen-column": getColumnProp("frozen"),
      "data-p-reorderable-column": props.reorderableColumns
    }, getColumnPTOptions("root"), getColumnPTOptions("headerCell"));
    return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("th", _extends({
      ref: elementRef
    }, headerCellProps), resizer, header), hasTooltip && /* @__PURE__ */ reactExports.createElement(Tooltip, _extends({
      target: elementRef,
      content: headerTooltip,
      pt: getColumnPTOptions("tooltip"),
      unstyled: props.unstyled
    }, headerTooltipOptions)));
  };
  var element = createElement();
  return element;
});
HeaderCell.displayName = "HeaderCell";
function ownKeys$1(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread$1(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$1(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var TableHeader = /* @__PURE__ */ reactExports.memo(function(props) {
  var _React$useState = reactExports.useState([]), _React$useState2 = _slicedToArray$1(_React$useState, 2), sortableDisabledFieldsState = _React$useState2[0], setSortableDisabledFieldsState = _React$useState2[1];
  var _React$useState3 = reactExports.useState(false), _React$useState4 = _slicedToArray$1(_React$useState3, 2), allSortableDisabledState = _React$useState4[0], setAllSortableDisabledState = _React$useState4[1];
  var mergeProps2 = useMergeProps();
  var isSingleSort = props.sortMode === "single";
  var isMultipleSort = props.sortMode === "multiple";
  var isAllSortableDisabled = isSingleSort && allSortableDisabledState;
  var _props$ptCallbacks = props.ptCallbacks, ptm = _props$ptCallbacks.ptm, ptmo = _props$ptCallbacks.ptmo, cx = _props$ptCallbacks.cx;
  var getColumnProp = function getColumnProp2(column2, name) {
    return ColumnBase.getCProp(column2, name);
  };
  var getColumnProps = function getColumnProps2(column2) {
    return ColumnBase.getCProps(column2);
  };
  var getRowProps = function getRowProps2(row) {
    return ColumnGroupBase.getCProps(row);
  };
  var getColumnGroupProps = function getColumnGroupProps2() {
    return props.headerColumnGroup ? ptmo(ColumnGroupBase.getCProps(props.headerColumnGroup)) : void 0;
  };
  var getColumnGroupPTOptions = function getColumnGroupPTOptions2(key) {
    var cGProps = getColumnGroupProps();
    var columnGroupMetaData = {
      props: cGProps,
      parent: props.metaData,
      hostName: props.hostName,
      state: {
        sortableDisabledFields: sortableDisabledFieldsState,
        allSortableDisabled: allSortableDisabledState
      }
    };
    return mergeProps2(ptm("columnGroup.".concat(key), {
      columnGroup: columnGroupMetaData
    }), ptm("columnGroup.".concat(key), columnGroupMetaData), ptmo(cGProps, key, columnGroupMetaData));
  };
  var getColumnPTOptions = function getColumnPTOptions2(column2, key) {
    var cProps = getColumnProps(column2);
    var columnMetaData = {
      props: cProps,
      parent: props.metaData,
      hostName: props.hostName,
      state: {
        sortableDisabledFields: sortableDisabledFieldsState,
        allSortableDisabled: allSortableDisabledState
      }
    };
    return mergeProps2(ptm("column.".concat(key), {
      column: columnMetaData
    }), ptm("column.".concat(key), columnMetaData), ptmo(cProps, key, columnMetaData));
  };
  var getRowPTOptions = function getRowPTOptions2(row, key) {
    var rProps = getRowProps(row);
    var rowMetaData = {
      props: rProps,
      parent: props.metaData,
      hostName: props.hostName
    };
    return mergeProps2(ptm("row.".concat(key), {
      row: rowMetaData
    }), ptm("row.".concat(key), rowMetaData), ptmo(rProps, key, rowMetaData));
  };
  var isColumnSorted = function isColumnSorted2(column2) {
    return props.sortField !== null ? getColumnProp(column2, "field") === props.sortField || getColumnProp(column2, "sortField") === props.sortField : false;
  };
  var updateSortableDisabled = function updateSortableDisabled2() {
    if (isSingleSort || isMultipleSort && props.onSortChange) {
      var sortableDisabledFields = [];
      var allSortableDisabled = false;
      props.columns.forEach(function(column2) {
        if (getColumnProp(column2, "sortableDisabled")) {
          sortableDisabledFields.push(getColumnProp(column2, "sortField") || getColumnProp(column2, "field"));
          if (!allSortableDisabled && isColumnSorted(column2)) {
            allSortableDisabled = true;
          }
        }
      });
      setSortableDisabledFieldsState(sortableDisabledFields);
      setAllSortableDisabledState(allSortableDisabled);
    }
  };
  var onSortableChange = function onSortableChange2() {
    updateSortableDisabled();
  };
  var onCheckboxChange = function onCheckboxChange2(e2) {
    props.onColumnCheckboxChange(e2, props.value);
  };
  useMountEffect(function() {
    updateSortableDisabled();
  });
  var createGroupHeaderCells = function createGroupHeaderCells2(row) {
    var columns = reactExports.Children.toArray(RowBase.getCProp(row, "children"));
    return createHeaderCells(columns);
  };
  var createHeaderCells = function createHeaderCells2(columns) {
    return reactExports.Children.map(columns, function(col, i) {
      var isVisible = col ? !getColumnProp(col, "hidden") : true;
      var key = col ? getColumnProp(col, "columnKey") || getColumnProp(col, "field") || i : i;
      return isVisible && /* @__PURE__ */ reactExports.createElement(HeaderCell, {
        hostName: props.hostName,
        allRowsSelected: props.allRowsSelected,
        allSortableDisabled: isAllSortableDisabled,
        column: col,
        index: i,
        empty: props.empty,
        filterClearIcon: props.filterClearIcon,
        filterDisplay: props.filterDisplay,
        filterIcon: props.filterIcon,
        filters: props.filters,
        filtersStore: props.filtersStore,
        groupRowSortField: props.groupRowSortField,
        groupRowsBy: props.groupRowsBy,
        key,
        multiSortMeta: props.multiSortMeta,
        onColumnCheckboxChange: onCheckboxChange,
        onColumnDragLeave: props.onColumnDragLeave,
        onColumnDragOver: props.onColumnDragOver,
        onColumnDragStart: props.onColumnDragStart,
        onColumnDrop: props.onColumnDrop,
        onColumnMouseDown: props.onColumnMouseDown,
        onColumnResizeStart: props.onColumnResizeStart,
        onColumnResizerClick: props.onColumnResizerClick,
        onColumnResizerDoubleClick: props.onColumnResizerDoubleClick,
        onFilterApply: props.onFilterApply,
        onFilterChange: props.onFilterChange,
        onSortChange: props.onSortChange,
        onSortableChange,
        reorderableColumns: props.reorderableColumns,
        resizableColumns: props.resizableColumns,
        showSelectAll: props.showSelectAll,
        sortField: props.sortField,
        sortIcon: props.sortIcon,
        sortMode: props.sortMode,
        sortOrder: props.sortOrder,
        sortableDisabledFields: sortableDisabledFieldsState,
        tabIndex: props.tabIndex,
        tableProps: props.tableProps,
        value: props.value,
        ptCallbacks: props.ptCallbacks,
        metaData: props.metaData,
        unstyled: props.unstyled
      });
    });
  };
  var createCheckbox = function createCheckbox2(selectionMode) {
    if (props.showSelectAll && selectionMode === "multiple") {
      var allRowsSelected = props.allRowsSelected(props.value);
      return /* @__PURE__ */ reactExports.createElement(HeaderCheckbox, {
        hostName: props.hostName,
        checked: allRowsSelected,
        onChange: onCheckboxChange,
        disabled: props.empty,
        ptCallbacks: props.ptCallbacks,
        metaData: props.metaData
      });
    }
    return null;
  };
  var createFilter3 = function createFilter4(column2, filter2) {
    if (filter2) {
      return /* @__PURE__ */ reactExports.createElement(ColumnFilter, {
        hostName: props.hostName,
        display: "row",
        column: column2,
        filterClearIcon: props.filterClearIcon,
        filterIcon: props.filterIcon,
        filters: props.filters,
        filtersStore: props.filtersStore,
        metaData: props.metaData,
        onFilterApply: props.onFilterApply,
        onFilterChange: props.onFilterChange,
        ptCallbacks: props.ptCallbacks,
        unstyled: props.unstyled
      });
    }
    return null;
  };
  var createFilterCells = function createFilterCells2() {
    return reactExports.Children.map(props.columns, function(col, i) {
      var isVisible = !getColumnProp(col, "hidden");
      if (isVisible) {
        var _ColumnBase$getCProps = ColumnBase.getCProps(col), filterHeaderStyle = _ColumnBase$getCProps.filterHeaderStyle, style = _ColumnBase$getCProps.style, filterHeaderClassName = _ColumnBase$getCProps.filterHeaderClassName, className = _ColumnBase$getCProps.className, frozen = _ColumnBase$getCProps.frozen, columnKey = _ColumnBase$getCProps.columnKey, field = _ColumnBase$getCProps.field, selectionMode = _ColumnBase$getCProps.selectionMode, filter2 = _ColumnBase$getCProps.filter;
        var colStyle = _objectSpread$1(_objectSpread$1({}, filterHeaderStyle || {}), style || {});
        var colKey = columnKey || field || i;
        var checkbox2 = createCheckbox(selectionMode);
        var filterRow = createFilter3(col, filter2);
        var headerCellProps = mergeProps2({
          style: colStyle,
          className: classNames$1(filterHeaderClassName, className, cx("headerCell", {
            frozen,
            column: col
          })),
          key: colKey
        }, getColumnPTOptions(col, "root"), getColumnPTOptions(col, "headerCell"));
        return /* @__PURE__ */ reactExports.createElement("th", headerCellProps, checkbox2, filterRow);
      }
      return null;
    });
  };
  var createContent = function createContent2() {
    if (props.headerColumnGroup) {
      var rows = reactExports.Children.toArray(ColumnGroupBase.getCProp(props.headerColumnGroup, "children"));
      return rows.map(function(row, i) {
        var headerRowProps2 = mergeProps2({
          role: "row"
        }, getRowPTOptions(row, "root"));
        return /* @__PURE__ */ reactExports.createElement("tr", _extends({}, headerRowProps2, {
          key: i
        }), createGroupHeaderCells(row));
      });
    } else {
      var headerRowProps = mergeProps2({
        role: "row"
      }, ptm("headerRow", {
        hostName: props.hostName
      }));
      var headerRow = /* @__PURE__ */ reactExports.createElement("tr", headerRowProps, createHeaderCells(props.columns));
      var filterRow = props.filterDisplay === "row" && /* @__PURE__ */ reactExports.createElement("tr", headerRowProps, createFilterCells());
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, headerRow, filterRow);
    }
  };
  var content = createContent();
  var theadProps = mergeProps2({
    className: cx("thead"),
    role: "rowgroup"
  }, getColumnGroupPTOptions("root"), ptm("thead", {
    hostName: props.hostName
  }));
  return /* @__PURE__ */ reactExports.createElement("thead", theadProps, content);
});
TableHeader.displayName = "TableHeader";
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F2 = function F3() {
      };
      return { s: F2, n: function n2() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it = it.call(o);
  }, n: function n2() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it["return"] != null)
        it["return"]();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$2(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$2(o, minLen);
}
function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function ownKeys$d(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys$d(Object(t2), true).forEach(function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$d(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var DataTable = /* @__PURE__ */ reactExports.forwardRef(function(inProps, ref) {
  var context = reactExports.useContext(PrimeReactContext);
  var mergeProps2 = useMergeProps();
  var props = DataTableBase.getProps(inProps, context);
  var _React$useState = reactExports.useState(props.first), _React$useState2 = _slicedToArray$1(_React$useState, 2), firstState = _React$useState2[0], setFirstState = _React$useState2[1];
  var _React$useState3 = reactExports.useState(props.rows), _React$useState4 = _slicedToArray$1(_React$useState3, 2), rowsState = _React$useState4[0], setRowsState = _React$useState4[1];
  var _React$useState5 = reactExports.useState(props.sortField), _React$useState6 = _slicedToArray$1(_React$useState5, 2), sortFieldState = _React$useState6[0], setSortFieldState = _React$useState6[1];
  var _React$useState7 = reactExports.useState(props.sortOrder), _React$useState8 = _slicedToArray$1(_React$useState7, 2), sortOrderState = _React$useState8[0], setSortOrderState = _React$useState8[1];
  var _React$useState9 = reactExports.useState(props.multiSortMeta), _React$useState10 = _slicedToArray$1(_React$useState9, 2), multiSortMetaState = _React$useState10[0], setMultiSortMetaState = _React$useState10[1];
  var _React$useState11 = reactExports.useState(props.filters), _React$useState12 = _slicedToArray$1(_React$useState11, 2), filtersState = _React$useState12[0], setFiltersState = _React$useState12[1];
  var _React$useState13 = reactExports.useState([]), _React$useState14 = _slicedToArray$1(_React$useState13, 2), columnOrderState = _React$useState14[0], setColumnOrderState = _React$useState14[1];
  var _React$useState15 = reactExports.useState(null), _React$useState16 = _slicedToArray$1(_React$useState15, 2), groupRowsSortMetaState = _React$useState16[0], setGroupRowsSortMetaState = _React$useState16[1];
  var _React$useState17 = reactExports.useState({}), _React$useState18 = _slicedToArray$1(_React$useState17, 2), editingMetaState = _React$useState18[0], setEditingMetaState = _React$useState18[1];
  var _React$useState19 = reactExports.useState(props.rows), _React$useState20 = _slicedToArray$1(_React$useState19, 2), d_rowsState = _React$useState20[0], setD_rowsState = _React$useState20[1];
  var _React$useState21 = reactExports.useState({}), _React$useState22 = _slicedToArray$1(_React$useState21, 2), d_filtersState = _React$useState22[0], setD_filtersState = _React$useState22[1];
  var metaData = {
    props,
    state: {
      first: firstState,
      rows: rowsState,
      sortField: sortFieldState,
      sortOrder: sortOrderState,
      multiSortMeta: multiSortMetaState,
      filters: filtersState,
      columnOrder: columnOrderState,
      groupRowsSortMeta: groupRowsSortMetaState,
      editingMeta: editingMetaState,
      d_rows: d_rowsState,
      d_filters: d_filtersState
    },
    context: {
      scrollable: props.scrollable
    }
  };
  var ptCallbacks = DataTableBase.setMetaData(metaData);
  useHandleStyle(DataTableBase.css.styles, ptCallbacks.isUnstyled, {
    name: "datatable"
  });
  var attributeSelector = reactExports.useRef("");
  var elementRef = reactExports.useRef(null);
  var tableRef = reactExports.useRef(null);
  var wrapperRef = reactExports.useRef(null);
  var bodyRef = reactExports.useRef(null);
  var frozenBodyRef = reactExports.useRef(null);
  var virtualScrollerRef = reactExports.useRef(null);
  var reorderIndicatorUpRef = reactExports.useRef(null);
  var reorderIndicatorDownRef = reactExports.useRef(null);
  var colReorderIconWidth = reactExports.useRef(null);
  var colReorderIconHeight = reactExports.useRef(null);
  var resizeHelperRef = reactExports.useRef(null);
  var draggedColumnElement = reactExports.useRef(null);
  var draggedColumn = reactExports.useRef(null);
  var dropPosition = reactExports.useRef(null);
  var styleElement = reactExports.useRef(null);
  var responsiveStyleElement = reactExports.useRef(null);
  var beforeResizeStyleElement = reactExports.useRef(null);
  var columnWidthsState = reactExports.useRef(null);
  var tableWidthState = reactExports.useRef(null);
  var resizeColumn = reactExports.useRef(null);
  var resizeColumnElement = reactExports.useRef(null);
  var columnResizing = reactExports.useRef(false);
  var lastResizeHelperX = reactExports.useRef(null);
  var columnSortable = reactExports.useRef(false);
  var columnSortFunction = reactExports.useRef(null);
  var columnField = reactExports.useRef(null);
  var filterTimeout = reactExports.useRef(null);
  if (props.rows !== d_rowsState && !props.onPage) {
    setRowsState(props.rows);
    setD_rowsState(props.rows);
  }
  var _useEventListener = useEventListener({
    type: "mousemove",
    listener: function listener(event) {
      if (columnResizing.current) {
        onColumnResize(event);
      }
    }
  }), _useEventListener2 = _slicedToArray$1(_useEventListener, 2), bindDocumentMouseMoveListener = _useEventListener2[0], unbindDocumentMouseMoveListener = _useEventListener2[1];
  var _useEventListener3 = useEventListener({
    type: "mouseup",
    listener: function listener() {
      if (columnResizing.current) {
        columnResizing.current = false;
        onColumnResizeEnd();
      }
    }
  }), _useEventListener4 = _slicedToArray$1(_useEventListener3, 2), bindDocumentMouseUpListener = _useEventListener4[0], unbindDocumentMouseUpListener = _useEventListener4[1];
  var isCustomStateStorage = function isCustomStateStorage2() {
    return props.stateStorage === "custom";
  };
  var isStateful = function isStateful2() {
    return props.stateKey != null || isCustomStateStorage();
  };
  var isVirtualScrollerDisabled = function isVirtualScrollerDisabled2() {
    return ObjectUtils.isEmpty(props.virtualScrollerOptions) || !props.scrollable;
  };
  var isEquals = function isEquals2(data1, data2) {
    return props.compareSelectionBy === "equals" ? data1 === data2 : ObjectUtils.equals(data1, data2, props.dataKey);
  };
  var hasFilter = function hasFilter2() {
    return ObjectUtils.isNotEmpty(getFilters()) || props.globalFilter;
  };
  var getFirst = function getFirst2() {
    return props.onPage ? props.first : firstState;
  };
  var getRows = function getRows2() {
    return props.onPage ? props.rows : rowsState;
  };
  var getSortField = function getSortField2() {
    return props.onSort ? props.sortField : sortFieldState;
  };
  var getSortOrder = function getSortOrder2() {
    return props.onSort ? props.sortOrder : sortOrderState;
  };
  var getMultiSortMeta = function getMultiSortMeta2() {
    return (props.onSort ? props.multiSortMeta : multiSortMetaState) || [];
  };
  var getFilters = function getFilters2() {
    return props.onFilter ? props.filters : filtersState;
  };
  var getColumnProp = function getColumnProp2(column2, name) {
    return ColumnBase.getCProp(column2, name);
  };
  var getColumns = function getColumns2(ignoreReorderable) {
    var columns2 = reactExports.Children.toArray(props.children);
    if (!columns2) {
      return null;
    }
    if (!ignoreReorderable && props.reorderableColumns && columnOrderState) {
      var orderedColumns = columnOrderState.reduce(function(arr, columnKey) {
        var column2 = findColumnByKey(columns2, columnKey);
        column2 && arr.push(column2);
        return arr;
      }, []);
      return [].concat(_toConsumableArray$1(orderedColumns), _toConsumableArray$1(columns2.filter(function(col) {
        return orderedColumns.indexOf(col) < 0;
      })));
    }
    return columns2;
  };
  var getStorage = function getStorage2() {
    switch (props.stateStorage) {
      case "local":
        return window.localStorage;
      case "session":
        return window.sessionStorage;
      case "custom":
        return null;
      default:
        throw new Error(props.stateStorage + ' is not a valid value for the state storage, supported values are "local", "session" and "custom".');
    }
  };
  var saveState = function saveState2() {
    var state2 = {};
    if (props.paginator) {
      state2.first = getFirst();
      state2.rows = getRows();
    }
    var sortField = getSortField();
    if (sortField) {
      state2.sortField = sortField;
      state2.sortOrder = getSortOrder();
    }
    var multiSortMeta = getMultiSortMeta();
    if (multiSortMeta) {
      state2.multiSortMeta = multiSortMeta;
    }
    if (hasFilter()) {
      state2.filters = getFilters();
    }
    if (props.resizableColumns) {
      saveColumnWidths(state2);
    }
    if (props.reorderableColumns) {
      state2.columnOrder = columnOrderState;
    }
    if (props.expandedRows) {
      state2.expandedRows = props.expandedRows;
    }
    if (props.selection && props.onSelectionChange) {
      state2.selection = props.selection;
    }
    if (isCustomStateStorage()) {
      if (props.customSaveState) {
        props.customSaveState(state2);
      }
    } else {
      var storage = getStorage();
      if (ObjectUtils.isNotEmpty(state2)) {
        storage.setItem(props.stateKey, JSON.stringify(state2));
      }
    }
    if (props.onStateSave) {
      props.onStateSave(state2);
    }
  };
  var clearState = function clearState2() {
    var storage = getStorage();
    if (storage && props.stateKey) {
      storage.removeItem(props.stateKey);
    }
  };
  var restoreState = function restoreState2() {
    var restoredState = {};
    if (isCustomStateStorage()) {
      if (props.customRestoreState) {
        restoredState = props.customRestoreState();
      }
    } else {
      var storage = getStorage();
      var stateString = storage.getItem(props.stateKey);
      var dateFormat = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/;
      var reviver = function reviver2(key, value) {
        return typeof value === "string" && dateFormat.test(value) ? new Date(value) : value;
      };
      if (stateString) {
        restoredState = JSON.parse(stateString, reviver);
      }
    }
    _restoreState(restoredState);
  };
  var restoreTableState = function restoreTableState2(restoredState) {
    _restoreState(restoredState);
  };
  var _restoreState = function _restoreState2() {
    var restoredState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (ObjectUtils.isNotEmpty(restoredState)) {
      if (props.paginator) {
        if (props.onPage) {
          var getOnPageParams = function getOnPageParams2(first, rows) {
            var totalRecords2 = getTotalRecords(processedData());
            var pageCount = Math.ceil(totalRecords2 / rows) || 1;
            var page = Math.floor(first / rows);
            return {
              first,
              rows,
              page,
              pageCount
            };
          };
          props.onPage(createEvent(getOnPageParams(restoredState.first, restoredState.rows)));
        } else {
          setFirstState(restoredState.first);
          setRowsState(restoredState.rows);
        }
      }
      if (restoredState.sortField) {
        if (props.onSort) {
          props.onSort(createEvent({
            sortField: restoredState.sortField,
            sortOrder: restoredState.sortOrder
          }));
        } else {
          setSortFieldState(restoredState.sortField);
          setSortOrderState(restoredState.sortOrder);
        }
      }
      if (restoredState.multiSortMeta) {
        if (props.onSort) {
          props.onSort(createEvent({
            multiSortMeta: restoredState.multiSortMeta
          }));
        } else {
          setMultiSortMetaState(restoredState.multiSortMeta);
        }
      }
      if (restoredState.filters) {
        setD_filtersState(cloneFilters(restoredState.filters));
        if (props.onFilter) {
          props.onFilter(createEvent({
            filters: restoredState.filters
          }));
        } else {
          setFiltersState(cloneFilters(restoredState.filters));
        }
      }
      if (props.resizableColumns) {
        columnWidthsState.current = restoredState.columnWidths;
        tableWidthState.current = restoredState.tableWidth;
        restoreColumnWidths();
      }
      if (props.reorderableColumns) {
        setColumnOrderState(restoredState.columnOrder);
      }
      if (restoredState.expandedRows && props.onRowToggle) {
        props.onRowToggle({
          data: restoredState.expandedRows
        });
      }
      if (restoredState.selection && props.onSelectionChange) {
        props.onSelectionChange({
          value: restoredState.selection
        });
      }
      if (props.onStateRestore) {
        props.onStateRestore(restoredState);
      }
    }
  };
  var saveColumnWidths = function saveColumnWidths2(state2) {
    var widths = [];
    var headers = DomHandler.find(elementRef.current, '[data-pc-section="thead"] > tr > th');
    headers.forEach(function(header2) {
      return widths.push(DomHandler.getOuterWidth(header2));
    });
    state2.columnWidths = widths.join(",");
    if (props.columnResizeMode === "expand") {
      state2.tableWidth = DomHandler.getOuterWidth(tableRef.current) + "px";
    }
  };
  var addColumnWidthStyles = function addColumnWidthStyles2(widths) {
    createStyleElement2();
    var innerHTML = "";
    var selector = '[data-pc-name="datatable"]['.concat(attributeSelector.current, '] > [data-pc-section="wrapper"] ').concat(isVirtualScrollerDisabled() ? "" : '> [data-pc-name="virtualscroller"]', ' > [data-pc-section="table"]');
    widths.forEach(function(width, index2) {
      var style = "width: ".concat(width, "px !important; max-width: ").concat(width, "px !important");
      innerHTML += "\n                ".concat(selector, ' > [data-pc-section="thead"] > tr > th:nth-child(').concat(index2 + 1, "),\n                ").concat(selector, ' > [data-pc-section="tbody"] > tr > td:nth-child(').concat(index2 + 1, "),\n                ").concat(selector, ' > [data-pc-section="tfoot"] > tr > td:nth-child(').concat(index2 + 1, ") {\n                    ").concat(style, "\n                }\n            ");
    });
    styleElement.current.innerHTML = innerHTML;
  };
  var restoreColumnWidths = function restoreColumnWidths2() {
    if (columnWidthsState.current) {
      var widths = columnWidthsState.current.split(",");
      if (props.columnResizeMode === "expand" && tableWidthState.current) {
        tableRef.current.style.width = tableWidthState.current;
        tableRef.current.style.minWidth = tableWidthState.current;
      }
      if (ObjectUtils.isNotEmpty(widths)) {
        addColumnWidthStyles(widths);
      }
    }
  };
  var findParentHeader = function findParentHeader2(element) {
    if (element.nodeName === "TH") {
      return element;
    } else {
      var parent = element.parentElement;
      while (parent.nodeName !== "TH") {
        parent = parent.parentElement;
        if (!parent)
          break;
      }
      return parent;
    }
  };
  var getGroupRowSortField = function getGroupRowSortField2() {
    return props.sortMode === "single" ? props.sortField : groupRowsSortMetaState ? groupRowsSortMetaState.field : null;
  };
  var getSelectableData = function getSelectableData2(val) {
    if (props.showSelectionElement || props.isDataSelectable) {
      return val.filter(function(data2, index2) {
        var isSelectable = true;
        if (props.showSelectionElement)
          isSelectable = props.showSelectionElement({
            rowIndex: index2,
            props
          });
        if (props.isDataSelectable && isSelectable)
          isSelectable = props.isDataSelectable({
            data: data2,
            index: index2
          });
        return isSelectable;
      });
    }
    return val;
  };
  var allRowsSelected = function allRowsSelected2(processedData2) {
    if (props.onSelectAllChange) {
      return props.selectAll;
    } else {
      var _data = props.selectionPageOnly ? dataToRender(processedData2) : processedData2;
      var val = ObjectUtils.isNotEmpty(props.frozenValue) ? [].concat(_toConsumableArray$1(props.frozenValue), _toConsumableArray$1(_data)) : _data;
      var selectableVal = getSelectableData(val);
      return ObjectUtils.isNotEmpty(selectableVal) && props.selection && selectableVal.every(function(sv) {
        return ObjectUtils.isArray(props.selection) && props.selection.some(function(s) {
          return isEquals(s, sv);
        });
      });
    }
  };
  var getSelectionModeInColumn = function getSelectionModeInColumn2(columns2) {
    if (columns2) {
      var col = columns2.find(function(c2) {
        return !!getColumnProp(c2, "selectionMode");
      });
      return col ? getColumnProp(col, "selectionMode") : null;
    }
    return null;
  };
  var findColumnByKey = function findColumnByKey2(columns2, key) {
    return ObjectUtils.isNotEmpty(columns2) ? columns2.find(function(col) {
      return getColumnProp(col, "columnKey") === key || getColumnProp(col, "field") === key;
    }) : null;
  };
  var getTotalRecords = function getTotalRecords2(data2) {
    return props.lazy ? props.totalRecords : data2 ? data2.length : 0;
  };
  var onEditingMetaChange = function onEditingMetaChange2(e2) {
    var rowData = e2.rowData, field = e2.field, editingKey = e2.editingKey;
    e2.rowIndex;
    var editing = e2.editing;
    var editingMeta = _objectSpread({}, editingMetaState);
    var meta = editingMeta[editingKey];
    if (editing) {
      !meta && (meta = editingMeta[editingKey] = {
        data: _objectSpread({}, rowData),
        fields: []
      });
      meta["fields"].push(field);
    } else if (meta) {
      var fields = meta["fields"].filter(function(f2) {
        return f2 !== field;
      });
      !fields.length ? delete editingMeta[editingKey] : meta["fields"] = fields;
    }
    setEditingMetaState(editingMeta);
  };
  var clearEditingMetaData = function clearEditingMetaData2() {
    if (props.editMode && ObjectUtils.isNotEmpty(editingMetaState)) {
      setEditingMetaState({});
    }
  };
  var onColumnResizeStart = function onColumnResizeStart2(e2) {
    createBeforeResizeStyleElement();
    var event = e2.originalEvent, column2 = e2.column;
    var containerLeft = DomHandler.getOffset(elementRef.current).left;
    resizeColumn.current = column2;
    resizeColumnElement.current = event.currentTarget.parentElement;
    columnResizing.current = true;
    lastResizeHelperX.current = event.pageX - containerLeft + elementRef.current.scrollLeft;
    bindColumnResizeEvents();
  };
  var onColumnResize = function onColumnResize2(event) {
    var containerLeft = DomHandler.getOffset(elementRef.current).left;
    elementRef.current.setAttribute("data-p-unselectable-text", true);
    resizeHelperRef.current.style.height = elementRef.current.offsetHeight + "px";
    resizeHelperRef.current.style.top = "0px";
    resizeHelperRef.current.style.left = event.pageX - containerLeft + elementRef.current.scrollLeft + "px";
    resizeHelperRef.current.style.display = "block";
  };
  var onColumnResizeEnd = function onColumnResizeEnd2() {
    var delta = resizeHelperRef.current.offsetLeft - lastResizeHelperX.current;
    var columnWidth = resizeColumnElement.current.offsetWidth;
    var newColumnWidth = columnWidth + delta;
    var minWidth = resizeColumnElement.current.style.minWidth || 15;
    if (columnWidth + delta > parseInt(minWidth, 10)) {
      if (props.columnResizeMode === "fit") {
        var nextColumn = resizeColumnElement.current.nextElementSibling;
        var nextColumnWidth = nextColumn.offsetWidth - delta;
        if (newColumnWidth > 15 && nextColumnWidth > 15) {
          resizeTableCells(newColumnWidth, nextColumnWidth);
        }
      } else if (props.columnResizeMode === "expand") {
        var tableWidth = tableRef.current.offsetWidth + delta + "px";
        var updateTableWidth = function updateTableWidth2(el2) {
          !!el2 && (el2.style.width = el2.style.minWidth = tableWidth);
        };
        resizeTableCells(newColumnWidth);
        updateTableWidth(tableRef.current);
        if (!isVirtualScrollerDisabled()) {
          updateTableWidth(bodyRef.current);
          updateTableWidth(frozenBodyRef.current);
          if (wrapperRef.current) {
            updateTableWidth(DomHandler.findSingle(wrapperRef.current, '[data-pc-name="virtualscroller"] > table > tbody'));
          }
        }
      }
      if (props.onColumnResizeEnd) {
        props.onColumnResizeEnd({
          element: resizeColumnElement.current,
          column: resizeColumn.current,
          delta
        });
      }
      if (isStateful()) {
        saveState();
      }
    }
    resizeHelperRef.current.style.display = "none";
    resizeColumn.current = null;
    resizeColumnElement.current = null;
    elementRef.current.setAttribute("data-p-unselectable-text", "true");
    destroyBeforeResizeStyleElement();
    unbindColumnResizeEvents();
  };
  var resizeTableCells = function resizeTableCells2(newColumnWidth, nextColumnWidth) {
    var widths = [];
    var colIndex = DomHandler.index(resizeColumnElement.current);
    var headers = DomHandler.find(tableRef.current, '[data-pc-section="thead"] > tr > th');
    headers.forEach(function(header2) {
      return widths.push(DomHandler.getOuterWidth(header2));
    });
    destroyStyleElement();
    createStyleElement2();
    var innerHTML = "";
    var selector = '[data-pc-name="datatable"]['.concat(attributeSelector.current, '] > [data-pc-section="wrapper"] ').concat(isVirtualScrollerDisabled() ? "" : '> [data-pc-name="virtualscroller"]', ' > [data-pc-section="table"]');
    widths.forEach(function(width, index2) {
      var colWidth = index2 === colIndex ? newColumnWidth : nextColumnWidth && index2 === colIndex + 1 ? nextColumnWidth : width;
      var style = "width: ".concat(colWidth, "px !important; max-width: ").concat(colWidth, "px !important");
      innerHTML += "\n                 ".concat(selector, ' > [data-pc-section="thead"] > tr > th:nth-child(').concat(index2 + 1, "),\n                ").concat(selector, ' > [data-pc-section="tbody"] > tr > td:nth-child(').concat(index2 + 1, "),\n                ").concat(selector, ' > [data-pc-section="tfoot"] > tr > td:nth-child(').concat(index2 + 1, ") {\n                    ").concat(style, "\n                }\n            ");
    });
    styleElement.current.innerHTML = innerHTML;
  };
  var bindColumnResizeEvents = function bindColumnResizeEvents2() {
    bindDocumentMouseMoveListener();
    bindDocumentMouseUpListener();
  };
  var unbindColumnResizeEvents = function unbindColumnResizeEvents2() {
    unbindDocumentMouseMoveListener();
    unbindDocumentMouseUpListener();
  };
  var onColumnHeaderMouseDown = function onColumnHeaderMouseDown2(e2) {
    DomHandler.clearSelection();
    var event = e2.originalEvent, column2 = e2.column;
    if (props.reorderableColumns && getColumnProp(column2, "reorderable") !== false && !getColumnProp(column2, "frozen")) {
      if (event.target.nodeName === "INPUT" || event.target.nodeName === "TEXTAREA" || DomHandler.getAttribute(event.target, '[data-pc-section="columnresizer"]'))
        event.currentTarget.draggable = false;
      else
        event.currentTarget.draggable = true;
    }
  };
  var onColumnHeaderCheckboxChange = function onColumnHeaderCheckboxChange2(e2, processedData2) {
    if (props.onSelectAllChange) {
      props.onSelectAllChange(e2);
    } else {
      var originalEvent = e2.originalEvent, checked = e2.checked;
      var _data2 = props.selectionPageOnly ? dataToRender(processedData2) : processedData2;
      var selection = props.selectionPageOnly && props.selection ? props.selection.filter(function(s) {
        return !_data2.some(function(d2) {
          return isEquals(s, d2);
        });
      }) : [];
      if (checked) {
        selection = ObjectUtils.isNotEmpty(props.frozenValue) ? [].concat(_toConsumableArray$1(selection), _toConsumableArray$1(props.frozenValue), _toConsumableArray$1(_data2)) : [].concat(_toConsumableArray$1(selection), _toConsumableArray$1(_data2));
        selection = getSelectableData(selection);
        props.onAllRowsSelect && props.onAllRowsSelect({
          originalEvent,
          data: selection,
          type: "all"
        });
      } else {
        props.onAllRowsUnselect && props.onAllRowsUnselect({
          originalEvent,
          data: selection,
          type: "all"
        });
      }
      if (props.onSelectionChange) {
        props.onSelectionChange({
          originalEvent,
          value: selection,
          type: "all"
        });
      }
    }
  };
  var onColumnHeaderDragStart = function onColumnHeaderDragStart2(e2) {
    var event = e2.originalEvent, column2 = e2.column;
    if (columnResizing.current) {
      event.preventDefault();
      return;
    }
    if (!props.reorderableColumns)
      return;
    colReorderIconWidth.current = DomHandler.getHiddenElementOuterWidth(reorderIndicatorUpRef.current);
    colReorderIconHeight.current = DomHandler.getHiddenElementOuterHeight(reorderIndicatorUpRef.current);
    draggedColumn.current = column2;
    draggedColumnElement.current = findParentHeader(event.currentTarget);
    event.dataTransfer.setData("text", "b");
  };
  var onColumnHeaderDragOver = function onColumnHeaderDragOver2(e2) {
    var event = e2.originalEvent, column2 = e2.column;
    var dropHeader = findParentHeader(event.currentTarget);
    if (props.reorderableColumns && draggedColumnElement.current && dropHeader && !getColumnProp(column2, "frozen")) {
      event.preventDefault();
      if (draggedColumnElement.current !== dropHeader) {
        var containerOffset = DomHandler.getOffset(elementRef.current);
        var dropHeaderOffset = DomHandler.getOffset(dropHeader);
        var targetLeft = dropHeaderOffset.left - containerOffset.left;
        var columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;
        var dragIndex = DomHandler.index(draggedColumnElement.current);
        var dropIndex = DomHandler.index(findParentHeader(event.currentTarget));
        reorderIndicatorUpRef.current.style.top = dropHeaderOffset.top - containerOffset.top - (colReorderIconHeight.current - 1) + "px";
        reorderIndicatorDownRef.current.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + "px";
        if (event.pageX > columnCenter && dragIndex < dropIndex) {
          reorderIndicatorUpRef.current.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(colReorderIconWidth.current / 2) + "px";
          reorderIndicatorDownRef.current.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(colReorderIconWidth.current / 2) + "px";
          dropPosition.current = 1;
        } else if (dragIndex > dropIndex) {
          reorderIndicatorUpRef.current.style.left = targetLeft - Math.ceil(colReorderIconWidth.current / 2) + "px";
          reorderIndicatorDownRef.current.style.left = targetLeft - Math.ceil(colReorderIconWidth.current / 2) + "px";
          dropPosition.current = -1;
        }
        reorderIndicatorUpRef.current.style.display = "block";
        reorderIndicatorDownRef.current.style.display = "block";
      }
    }
  };
  var onColumnHeaderDragLeave = function onColumnHeaderDragLeave2(e2) {
    var event = e2.originalEvent;
    if (props.reorderableColumns && draggedColumnElement.current) {
      event.preventDefault();
      reorderIndicatorUpRef.current.style.display = "none";
      reorderIndicatorDownRef.current.style.display = "none";
    }
  };
  var onColumnHeaderDrop = function onColumnHeaderDrop2(e2) {
    var event = e2.originalEvent, column2 = e2.column;
    event.preventDefault();
    if (draggedColumnElement.current) {
      var dragIndex = DomHandler.index(draggedColumnElement.current);
      var dropIndex = DomHandler.index(findParentHeader(event.currentTarget));
      var allowDrop = dragIndex !== dropIndex;
      if (allowDrop && (dropIndex - dragIndex === 1 && dropPosition.current === -1 || dragIndex - dropIndex === 1 && dropPosition.current === 1)) {
        allowDrop = false;
      }
      if (allowDrop) {
        var _columns = getColumns();
        var isSameColumn = function isSameColumn2(col1, col2) {
          return getColumnProp(col1, "columnKey") || getColumnProp(col2, "columnKey") ? ObjectUtils.equals(col1.props, col2.props, "columnKey") : ObjectUtils.equals(col1.props, col2.props, "field");
        };
        var dragColIndex = _columns.findIndex(function(child) {
          return isSameColumn(child, draggedColumn.current);
        });
        var dropColIndex = _columns.findIndex(function(child) {
          return isSameColumn(child, column2);
        });
        var widths = [];
        var headers = DomHandler.find(tableRef.current, '[data-pc-section="thead"] > tr > th');
        headers.forEach(function(header2) {
          return widths.push(DomHandler.getOuterWidth(header2));
        });
        var movedItem = widths.find(function(items, index2) {
          return index2 === dragColIndex;
        });
        var remainingItems = widths.filter(function(items, index2) {
          return index2 !== dragColIndex;
        });
        var reorderedWidths = [].concat(_toConsumableArray$1(remainingItems.slice(0, dropColIndex)), [movedItem], _toConsumableArray$1(remainingItems.slice(dropColIndex)));
        addColumnWidthStyles(reorderedWidths);
        if (dropColIndex < dragColIndex && dropPosition.current === 1) {
          dropColIndex++;
        }
        if (dropColIndex > dragColIndex && dropPosition.current === -1) {
          dropColIndex--;
        }
        ObjectUtils.reorderArray(_columns, dragColIndex, dropColIndex);
        var columnOrder = _columns.reduce(function(orders, col) {
          orders.push(getColumnProp(col, "columnKey") || getColumnProp(col, "field"));
          return orders;
        }, []);
        setColumnOrderState(columnOrder);
        if (props.onColReorder) {
          props.onColReorder({
            originalEvent: event,
            dragIndex: dragColIndex,
            dropIndex: dropColIndex,
            columns: _columns
          });
        }
      }
      reorderIndicatorUpRef.current.style.display = "none";
      reorderIndicatorDownRef.current.style.display = "none";
      draggedColumnElement.current.draggable = false;
      draggedColumnElement.current = null;
      draggedColumn.current = null;
      dropPosition.current = null;
    }
  };
  var createBeforeResizeStyleElement = function createBeforeResizeStyleElement2() {
    beforeResizeStyleElement.current = DomHandler.createInlineStyle(context && context.nonce || PrimeReact$2.nonce, context && context.styleContainer);
    var innerHTML = '\n[data-pc-name="datatable"]['.concat(attributeSelector.current, "] {\n    user-select:none;\n}\n        ");
    beforeResizeStyleElement.current.innerHTML = innerHTML;
  };
  var createStyleElement2 = function createStyleElement3() {
    styleElement.current = DomHandler.createInlineStyle(context && context.nonce || PrimeReact$2.nonce, context && context.styleContainer);
  };
  var createResponsiveStyle = function createResponsiveStyle2() {
    if (!responsiveStyleElement.current) {
      responsiveStyleElement.current = DomHandler.createInlineStyle(context && context.nonce || PrimeReact$2.nonce, context && context.styleContainer);
      var tableSelector = ".p-datatable-wrapper ".concat(isVirtualScrollerDisabled() ? "" : "> .p-virtualscroller", " > .p-datatable-table");
      var selector = ".p-datatable[".concat(attributeSelector.current, "] > ").concat(tableSelector);
      var gridLinesSelector = ".p-datatable[".concat(attributeSelector.current, "].p-datatable-gridlines > ").concat(tableSelector);
      var innerHTML = "\n@media screen and (max-width: ".concat(props.breakpoint, ") {\n    ").concat(selector, " > .p-datatable-thead > tr > th,\n    ").concat(selector, " > .p-datatable-tfoot > tr > td {\n        display: none;\n    }\n\n    ").concat(selector, " > .p-datatable-tbody > tr > td {\n        display: flex;\n        width: 100%;\n        align-items: center;\n        justify-content: space-between;\n    }\n\n    ").concat(selector, " > .p-datatable-tbody > tr > td:not(:last-child) {\n        border: 0 none;\n    }\n\n    ").concat(gridLinesSelector, " > .p-datatable-tbody > tr > td:last-child {\n        border-top: 0;\n        border-right: 0;\n        border-left: 0;\n    }\n\n    ").concat(selector, " > .p-datatable-tbody > tr > td > .p-column-title {\n        display: block;\n    }\n}\n");
      responsiveStyleElement.current.innerHTML = innerHTML;
    }
  };
  var destroyResponsiveStyle = function destroyResponsiveStyle2() {
    responsiveStyleElement.current = DomHandler.removeInlineStyle(responsiveStyleElement.current);
  };
  var destroyStyleElement = function destroyStyleElement2() {
    styleElement.current = DomHandler.removeInlineStyle(styleElement.current);
  };
  var destroyBeforeResizeStyleElement = function destroyBeforeResizeStyleElement2() {
    beforeResizeStyleElement.current = DomHandler.removeInlineStyle(beforeResizeStyleElement.current);
  };
  var onPageChange = function onPageChange2(e2) {
    clearEditingMetaData();
    if (props.onPage) {
      props.onPage(createEvent(e2));
    } else {
      setFirstState(e2.first);
      setRowsState(e2.rows);
    }
    if (props.onValueChange) {
      props.onValueChange(processedData());
    }
  };
  var onSortChange = function onSortChange2(e2) {
    clearEditingMetaData();
    var event = e2.originalEvent, column2 = e2.column, sortableDisabledFields = e2.sortableDisabledFields;
    var sortField = getColumnProp(column2, "sortField") || getColumnProp(column2, "field");
    var sortOrder = props.defaultSortOrder;
    var multiSortMeta;
    var eventMeta;
    columnSortable.current = getColumnProp(column2, "sortable");
    columnSortFunction.current = getColumnProp(column2, "sortFunction");
    columnField.current = sortField;
    if (props.sortMode === "multiple") {
      var metaKey = event.metaKey || event.ctrlKey;
      multiSortMeta = _toConsumableArray$1(getMultiSortMeta());
      var sortMeta = multiSortMeta.find(function(sortMeta2) {
        return sortMeta2.field === sortField;
      });
      sortOrder = sortMeta ? getCalculatedSortOrder(sortMeta.order) : sortOrder;
      var newMetaData = {
        field: sortField,
        order: sortOrder
      };
      if (sortOrder) {
        multiSortMeta = metaKey ? multiSortMeta : multiSortMeta.filter(function(meta) {
          return sortableDisabledFields.some(function(field) {
            return field === meta.field;
          });
        });
        addSortMeta(newMetaData, multiSortMeta);
      } else if (props.removableSort) {
        removeSortMeta(newMetaData, multiSortMeta);
      }
      eventMeta = {
        multiSortMeta
      };
    } else {
      sortOrder = getSortField() === sortField ? getCalculatedSortOrder(getSortOrder()) : sortOrder;
      if (props.removableSort) {
        sortField = sortOrder ? sortField : null;
      }
      eventMeta = {
        sortField,
        sortOrder
      };
    }
    if (props.onSort) {
      props.onSort(createEvent(eventMeta));
    } else {
      setFirstState(0);
      setSortFieldState(eventMeta.sortField);
      setSortOrderState(eventMeta.sortOrder);
      setMultiSortMetaState(eventMeta.multiSortMeta);
    }
    if (props.onValueChange) {
      props.onValueChange(processedData({
        sortField,
        sortOrder,
        multiSortMeta
      }));
    }
  };
  var getCalculatedSortOrder = function getCalculatedSortOrder2(currentOrder) {
    return props.removableSort ? props.defaultSortOrder === currentOrder ? currentOrder * -1 : 0 : currentOrder * -1;
  };
  var compareValuesOnSort = function compareValuesOnSort2(value1, value2, comparator, order) {
    return ObjectUtils.sort(value1, value2, order, comparator, context && context.nullSortOrder || PrimeReact$2.nullSortOrder);
  };
  var addSortMeta = function addSortMeta2(meta, multiSortMeta) {
    var index2 = multiSortMeta.findIndex(function(sortMeta) {
      return sortMeta.field === meta.field;
    });
    if (index2 >= 0)
      multiSortMeta[index2] = meta;
    else
      multiSortMeta.push(meta);
  };
  var removeSortMeta = function removeSortMeta2(meta, multiSortMeta) {
    var index2 = multiSortMeta.findIndex(function(sortMeta) {
      return sortMeta.field === meta.field;
    });
    if (index2 >= 0) {
      multiSortMeta.splice(index2, 1);
    }
    multiSortMeta = multiSortMeta.length > 0 ? multiSortMeta : null;
  };
  var sortSingle = function sortSingle2(data2, field, order) {
    if (props.groupRowsBy && props.groupRowsBy === props.sortField) {
      var multiSortMeta = [{
        field: props.sortField,
        order: props.sortOrder || props.defaultSortOrder
      }];
      props.sortField !== field && multiSortMeta.push({
        field,
        order
      });
      return sortMultiple(data2, multiSortMeta);
    }
    var value = _toConsumableArray$1(data2);
    if (columnSortable.current && columnSortFunction.current) {
      value = columnSortFunction.current({
        data: data2,
        field,
        order
      });
    } else {
      var lookupMap = /* @__PURE__ */ new Map();
      var comparator = ObjectUtils.localeComparator(context && context.locale || PrimeReact$2.locale);
      var _iterator = _createForOfIteratorHelper(data2), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var item2 = _step.value;
          lookupMap.set(item2, ObjectUtils.resolveFieldData(item2, field));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      value.sort(function(data1, data22) {
        var value1 = lookupMap.get(data1);
        var value2 = lookupMap.get(data22);
        return compareValuesOnSort(value1, value2, comparator, order);
      });
    }
    return value;
  };
  var sortMultiple = function sortMultiple2(data2) {
    var multiSortMeta = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    if (props.groupRowsBy && (groupRowsSortMetaState || multiSortMeta.length && props.groupRowsBy === multiSortMeta[0].field)) {
      var groupRowsSortMeta = groupRowsSortMetaState;
      var firstSortMeta = multiSortMeta[0];
      if (!groupRowsSortMeta) {
        groupRowsSortMeta = firstSortMeta;
        setGroupRowsSortMetaState(groupRowsSortMeta);
      }
      if (firstSortMeta.field !== groupRowsSortMeta.field) {
        multiSortMeta = [groupRowsSortMeta].concat(_toConsumableArray$1(multiSortMeta));
      }
    }
    var value = _toConsumableArray$1(data2);
    if (columnSortable.current && columnSortFunction.current) {
      var meta = multiSortMeta.find(function(meta2) {
        return meta2.field === columnField.current;
      });
      var field = columnField.current;
      var order = meta ? meta.order : props.defaultSortOrder;
      value = columnSortFunction.current({
        data: data2,
        field,
        order,
        multiSortMeta
      });
    } else {
      var comparator = ObjectUtils.localeComparator(context && context.locale || PrimeReact$2.locale);
      value.sort(function(data1, data22) {
        return multisortField(data1, data22, multiSortMeta, 0, comparator);
      });
    }
    return value;
  };
  var multisortField = function multisortField2(data1, data2, multiSortMeta, index2, comparator) {
    if (!multiSortMeta || !multiSortMeta[index2]) {
      return;
    }
    var value1 = ObjectUtils.resolveFieldData(data1, multiSortMeta[index2].field);
    var value2 = ObjectUtils.resolveFieldData(data2, multiSortMeta[index2].field);
    if (ObjectUtils.compare(value1, value2, comparator) === 0) {
      return multiSortMeta.length - 1 > index2 ? multisortField2(data1, data2, multiSortMeta, index2 + 1, comparator) : 0;
    }
    return compareValuesOnSort(value1, value2, comparator, multiSortMeta[index2].order);
  };
  var onFilterChange = function onFilterChange2(filters) {
    clearEditingMetaData();
    setD_filtersState(filters);
  };
  var onFilterApply = function onFilterApply2(filtersToApply) {
    clearTimeout(filterTimeout.current);
    filterTimeout.current = setTimeout(function() {
      var filters = cloneFilters(filtersToApply || d_filtersState);
      if (props.onFilter) {
        props.onFilter(createEvent({
          filters
        }));
      } else {
        setFirstState(0);
        setFiltersState(filters);
      }
      if (props.onValueChange) {
        props.onValueChange(processedData({
          filters
        }));
      }
    }, props.filterDelay);
  };
  var getActiveFilters = function getActiveFilters2(filters) {
    var removeEmptyFilters = function removeEmptyFilters2(_ref3) {
      var _ref22 = _slicedToArray$1(_ref3, 2), key = _ref22[0], value = _ref22[1];
      if (value.constraints) {
        var filteredConstraints = value.constraints.filter(function(constraint) {
          return constraint.value !== null;
        });
        if (filteredConstraints.length > 0) {
          return [key, _objectSpread(_objectSpread({}, value), {}, {
            constraints: filteredConstraints
          })];
        }
      } else if (value.value !== null) {
        return [key, value];
      }
      return void 0;
    };
    var filterValidEntries = function filterValidEntries2(entry) {
      return entry !== void 0;
    };
    var entries = Object.entries(filters).map(removeEmptyFilters).filter(filterValidEntries);
    return Object.fromEntries(entries);
  };
  var filterLocal = function filterLocal2(data2, filters) {
    if (!data2)
      return;
    var activeFilters = filters ? getActiveFilters(filters) : {};
    var columns2 = getColumns();
    var filteredValue = [];
    var isGlobalFilter = activeFilters["global"] || props.globalFilter;
    var globalFilterFieldsArray;
    if (isGlobalFilter) {
      globalFilterFieldsArray = props.globalFilterFields || columns2.filter(function(col) {
        return !getColumnProp(col, "excludeGlobalFilter");
      }).map(function(col) {
        return getColumnProp(col, "filterField") || getColumnProp(col, "field");
      });
    }
    for (var i = 0; i < data2.length; i++) {
      var localMatch = true;
      var globalMatch = false;
      var localFiltered = false;
      for (var prop in activeFilters) {
        if (prop === "null") {
          continue;
        }
        if (Object.prototype.hasOwnProperty.call(activeFilters, prop) && prop !== "global") {
          localFiltered = true;
          var filterField = prop;
          var filterMeta = activeFilters[filterField];
          if (filterMeta.operator) {
            for (var j = 0; j < filterMeta.constraints.length; j++) {
              var filterConstraint = filterMeta.constraints[j];
              localMatch = executeLocalFilter(filterField, data2[i], filterConstraint, j);
              if (filterMeta.operator === FilterOperator.OR && localMatch || filterMeta.operator === FilterOperator.AND && !localMatch) {
                break;
              }
            }
          } else {
            localMatch = executeLocalFilter(filterField, data2[i], filterMeta, 0);
          }
          if (!localMatch) {
            break;
          }
        }
      }
      if (localMatch && isGlobalFilter && !globalMatch && globalFilterFieldsArray) {
        for (var _j = 0; _j < globalFilterFieldsArray.length; _j++) {
          var globalFilterField = globalFilterFieldsArray[_j];
          var matchMode = activeFilters["global"] ? activeFilters["global"].matchMode : props.globalFilterMatchMode;
          var value = activeFilters["global"] ? activeFilters["global"].value : props.globalFilter;
          globalMatch = FilterService.filters[matchMode](ObjectUtils.resolveFieldData(data2[i], globalFilterField), value, props.filterLocale);
          if (globalMatch) {
            break;
          }
        }
      }
      var matches = void 0;
      if (isGlobalFilter) {
        matches = localFiltered ? localFiltered && localMatch && globalMatch : globalMatch;
      } else {
        matches = localFiltered && localMatch;
      }
      if (matches) {
        filteredValue.push(data2[i]);
      }
    }
    if (filteredValue.length === props.value.length || Object.keys(activeFilters).length === 0) {
      filteredValue = data2;
    }
    return filteredValue;
  };
  var executeLocalFilter = function executeLocalFilter2(field, rowData, filterMeta, index2) {
    var filterValue = filterMeta.value;
    var filterMatchMode = filterMeta.matchMode === "custom" ? "custom_".concat(field) : filterMeta.matchMode || FilterMatchMode$2.STARTS_WITH;
    var dataFieldValue = ObjectUtils.resolveFieldData(rowData, field);
    var filterConstraint = FilterService.filters[filterMatchMode];
    return ObjectUtils.isFunction(filterConstraint) && filterConstraint(dataFieldValue, filterValue, props.filterLocale, index2);
  };
  var cloneFilters = function cloneFilters2(filters) {
    filters = filters || props.filters;
    var cloned = {};
    if (filters) {
      Object.entries(filters).forEach(function(_ref3) {
        var _ref4 = _slicedToArray$1(_ref3, 2), prop = _ref4[0], value = _ref4[1];
        cloned[prop] = value.operator ? {
          operator: value.operator,
          constraints: value.constraints.map(function(constraint) {
            return _objectSpread({}, constraint);
          })
        } : _objectSpread({}, value);
      });
    } else {
      var _columns2 = getColumns();
      cloned = _columns2.reduce(function(filters2, col) {
        var field = getColumnProp(col, "filterField") || getColumnProp(col, "field");
        var filterFunction = getColumnProp(col, "filterFunction");
        var dataType = getColumnProp(col, "dataType");
        var matchMode = getColumnProp(col, "filterMatchMode") || (context && context.filterMatchModeOptions[dataType] || PrimeReact$2.filterMatchModeOptions[dataType] ? context && context.filterMatchModeOptions[dataType][0] || PrimeReact$2.filterMatchModeOptions[dataType][0] : FilterMatchMode$2.STARTS_WITH);
        var constraint = {
          value: null,
          matchMode
        };
        if (filterFunction) {
          FilterService.register("custom_".concat(field), function() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return filterFunction.apply(void 0, args.concat([{
              column: col
            }]));
          });
        }
        filters2[field] = props.filterDisplay === "menu" ? {
          operator: FilterOperator.AND,
          constraints: [constraint]
        } : constraint;
        return filters2;
      }, {});
    }
    return cloned;
  };
  var filter2 = function filter3(value, field, matchMode) {
    var index2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    var filters = _objectSpread({}, d_filtersState);
    var meta = filters[field];
    var constraint = meta && meta.operator ? meta.constraints[index2] : meta;
    constraint = meta ? {
      value,
      matchMode: matchMode || constraint.matchMode
    } : {
      value,
      matchMode
    };
    props.filterDisplay === "menu" && meta && meta.operator ? filters[field].constraints[index2] = constraint : filters[field] = constraint;
    setD_filtersState(filters);
    onFilterApply(filters);
  };
  var reset = function reset2() {
    setD_rowsState(props.rows);
    setD_filtersState(cloneFilters(props.filters));
    setGroupRowsSortMetaState(null);
    setEditingMetaState({});
    if (!props.onPage) {
      setFirstState(props.first);
      setRowsState(props.rows);
    }
    if (!props.onSort) {
      setSortFieldState(props.sortField);
      setSortOrderState(props.sortOrder);
      setMultiSortMetaState(props.multiSortMeta);
    }
    if (!props.onFilter) {
      setFiltersState(props.filters);
    }
    resetColumnOrder();
  };
  var resetScroll = function resetScroll2() {
    if (wrapperRef.current) {
      var scrollableContainer = !isVirtualScrollerDisabled() ? DomHandler.findSingle(wrapperRef.current, '[data-pc-name="virtualscroller"]') : wrapperRef.current;
      scrollableContainer.scrollTo(0, 0);
    }
  };
  var resetResizeColumnsWidth = function resetResizeColumnsWidth2() {
    destroyStyleElement();
  };
  var resetColumnOrder = function resetColumnOrder2() {
    var columns2 = getColumns(true);
    var columnOrder = [];
    if (columns2) {
      columnOrder = columns2.reduce(function(orders, col) {
        orders.push(getColumnProp(col, "columnKey") || getColumnProp(col, "field"));
        return orders;
      }, []);
    }
    setColumnOrderState(columnOrder);
  };
  var exportCSV = function exportCSV2(options2) {
    var data2;
    var csv = "\uFEFF";
    var columns2 = getColumns();
    if (options2 && options2.selectionOnly) {
      data2 = props.selection || [];
    } else {
      data2 = [].concat(_toConsumableArray$1(props.frozenValue || []), _toConsumableArray$1(processedData() || []));
    }
    columns2.forEach(function(column2, i) {
      var _ref5 = [getColumnProp(column2, "field"), getColumnProp(column2, "header"), getColumnProp(column2, "exportHeader"), getColumnProp(column2, "exportable")], field = _ref5[0], header2 = _ref5[1], exportHeader = _ref5[2], exportable = _ref5[3];
      if (exportable && field) {
        var columnHeader = String(exportHeader || header2 || field).replace(/"/g, '""').replace(/\n/g, "\u2028");
        csv += '"' + columnHeader + '"';
        if (i < columns2.length - 1) {
          csv += props.csvSeparator;
        }
      }
    });
    data2.forEach(function(record) {
      csv += "\n";
      columns2.forEach(function(column2, i) {
        var _ref6 = [getColumnProp(column2, "field"), getColumnProp(column2, "exportField"), getColumnProp(column2, "exportable")], colField = _ref6[0], exportField = _ref6[1], exportable = _ref6[2];
        var field = exportField || colField;
        if (exportable && field) {
          var cellData = ObjectUtils.resolveFieldData(record, field);
          if (cellData != null) {
            if (props.exportFunction) {
              cellData = props.exportFunction({
                data: cellData,
                field,
                rowData: record,
                column: column2
              });
            } else {
              cellData = String(cellData).replace(/"/g, '""').replace(/\n/g, "\u2028");
            }
          } else
            cellData = "";
          csv += '"' + cellData + '"';
          if (i < columns2.length - 1) {
            csv += props.csvSeparator;
          }
        }
      });
    });
    DomHandler.exportCSV(csv, props.exportFilename);
  };
  var closeEditingCell = function closeEditingCell2() {
    if (props.editMode !== "row") {
      document.body.click();
    }
  };
  var closeEditingRows = function closeEditingRows2() {
    DomHandler.find(document.body, '[data-pc-section="roweditorcancelbuttonprops"]').forEach(function(button, index2) {
      setTimeout(function() {
        button.click();
      }, index2 * 5);
    });
  };
  var createEvent = function createEvent2(event) {
    return _objectSpread({
      first: getFirst(),
      rows: getRows(),
      sortField: getSortField(),
      sortOrder: getSortOrder(),
      multiSortMeta: getMultiSortMeta(),
      filters: getFilters()
    }, event);
  };
  var processedData = function processedData2(localState) {
    var data2 = props.value || [];
    if (!props.lazy) {
      if (data2 && data2.length) {
        var filters = localState && localState.filters || getFilters();
        var sortField = localState && localState.sortField || getSortField();
        var sortOrder = localState && localState.sortOrder || getSortOrder();
        var multiSortMeta = localState && localState.multiSortMeta || getMultiSortMeta();
        var _columns3 = getColumns();
        var sortColumn = _columns3.find(function(col) {
          return getColumnProp(col, "field") === sortField;
        });
        if (sortColumn) {
          columnSortable.current = getColumnProp(sortColumn, "sortable");
          columnSortFunction.current = getColumnProp(sortColumn, "sortFunction");
        }
        if (ObjectUtils.isNotEmpty(filters) || props.globalFilter) {
          data2 = filterLocal(data2, filters);
        }
        if (sortField || ObjectUtils.isNotEmpty(multiSortMeta)) {
          if (props.sortMode === "single")
            data2 = sortSingle(data2, sortField, sortOrder);
          else if (props.sortMode === "multiple")
            data2 = sortMultiple(data2, multiSortMeta);
        }
      }
    }
    return data2;
  };
  var dataToRender = function dataToRender2(data2) {
    if (data2 && props.paginator) {
      var first = props.lazy ? 0 : getFirst();
      return data2.slice(first, first + getRows());
    }
    return data2;
  };
  useMountEffect(function() {
    if (elementRef.current) {
      attributeSelector.current = UniqueComponentId();
      elementRef.current.setAttribute(attributeSelector.current, "");
    }
    setD_filtersState(cloneFilters(props.filters));
    if (isStateful()) {
      restoreState();
      if (props.resizableColumns) {
        restoreColumnWidths();
      }
    }
  });
  useUpdateEffect(function() {
    if (props.responsiveLayout === "stack" && !props.scrollable) {
      createResponsiveStyle();
    }
    return function() {
      destroyResponsiveStyle();
    };
  }, [props.breakpoint]);
  useUpdateEffect(function() {
    var filters = cloneFilters(props.filters);
    setFiltersState(filters);
    setD_filtersState(cloneFilters(props.filters));
    if (props.onValueChange) {
      props.onValueChange(processedData({
        filters
      }));
    }
  }, [props.filters]);
  useUpdateEffect(function() {
    if (isStateful()) {
      saveState();
    }
  });
  useUpdateEffect(function() {
    destroyResponsiveStyle();
    if (props.responsiveLayout === "stack" && !props.scrollable) {
      createResponsiveStyle();
    }
  }, [props.responsiveLayout, props.scrollable]);
  useUpdateEffect(function() {
    if (props.globalFilter) {
      filter2(props.globalFilter, "global", props.globalFilterMatchMode);
    } else {
      setFiltersState(props.filters);
    }
  }, [props.globalFilter, props.globalFilterMatchMode]);
  useUnmountEffect(function() {
    unbindColumnResizeEvents();
    destroyStyleElement();
    destroyResponsiveStyle();
    destroyBeforeResizeStyleElement();
  });
  reactExports.useImperativeHandle(ref, function() {
    return {
      props,
      clearState,
      closeEditingCell,
      closeEditingRows,
      exportCSV,
      filter: filter2,
      reset,
      resetColumnOrder,
      resetScroll,
      resetResizeColumnsWidth,
      restoreColumnWidths,
      restoreState,
      restoreTableState,
      saveState,
      getElement: function getElement() {
        return elementRef.current;
      },
      getTable: function getTable() {
        return tableRef.current;
      },
      getVirtualScroller: function getVirtualScroller() {
        return virtualScrollerRef.current;
      }
    };
  });
  var createLoader = function createLoader2() {
    if (props.loading) {
      var loadingIconProps = mergeProps2({
        className: ptCallbacks.cx("loadingIcon")
      }, ptCallbacks.ptm("loadingIcon"));
      var icon2 = props.loadingIcon || /* @__PURE__ */ reactExports.createElement(SpinnerIcon, _extends({}, loadingIconProps, {
        spin: true
      }));
      var loadingIcon2 = IconUtils.getJSXIcon(icon2, _objectSpread({}, loadingIconProps), {
        props
      });
      var loadingOverlayProps = mergeProps2({
        className: ptCallbacks.cx("loadingOverlay")
      }, ptCallbacks.ptm("loadingOverlay"));
      return /* @__PURE__ */ reactExports.createElement("div", loadingOverlayProps, loadingIcon2);
    }
    return null;
  };
  var createHeader = function createHeader2() {
    if (props.header) {
      var _content = ObjectUtils.getJSXElement(props.header, {
        props
      });
      var headerProps = mergeProps2({
        className: ptCallbacks.cx("header")
      }, ptCallbacks.ptm("header"));
      return /* @__PURE__ */ reactExports.createElement("div", headerProps, _content);
    }
    return null;
  };
  var createTableHeader = function createTableHeader2(options2, empty2, _isVirtualScrollerDisabled) {
    if (props.showHeaders === false) {
      return null;
    }
    var sortField = getSortField();
    var sortOrder = getSortOrder();
    var multiSortMeta = _toConsumableArray$1(getMultiSortMeta());
    var groupRowSortField = getGroupRowSortField();
    var filters = d_filtersState;
    var filtersStore = !props.onFilter && props.filters || getFilters();
    var processedData2 = options2.items, virtualScrollerProps = options2.props, columns2 = options2.columns;
    var data2 = _isVirtualScrollerDisabled || virtualScrollerProps.lazy ? processedData2 : virtualScrollerProps.items;
    return /* @__PURE__ */ reactExports.createElement(TableHeader, {
      hostName: "DataTable",
      value: data2,
      tableProps: props,
      columns: columns2,
      tabIndex: props.tabIndex,
      empty: empty2,
      headerColumnGroup: props.headerColumnGroup,
      resizableColumns: props.resizableColumns,
      onColumnResizeStart,
      onColumnResizerClick: props.onColumnResizerClick,
      onColumnResizerDoubleClick: props.onColumnResizerDoubleClick,
      sortMode: props.sortMode,
      sortField,
      sortIcon: props.sortIcon,
      sortOrder,
      multiSortMeta,
      groupRowsBy: props.groupRowsBy,
      groupRowSortField,
      onSortChange,
      filterDisplay: props.filterDisplay,
      filters,
      filtersStore,
      filterIcon: props.filterIcon,
      filterClearIcon: props.filterClearIcon,
      onFilterChange,
      onFilterApply,
      showSelectAll: props.showSelectAll,
      allRowsSelected,
      onColumnCheckboxChange: onColumnHeaderCheckboxChange,
      onColumnMouseDown: onColumnHeaderMouseDown,
      onColumnDragStart: onColumnHeaderDragStart,
      onColumnDragOver: onColumnHeaderDragOver,
      onColumnDragLeave: onColumnHeaderDragLeave,
      onColumnDrop: onColumnHeaderDrop,
      rowGroupMode: props.rowGroupMode,
      reorderableColumns: props.reorderableColumns,
      ptCallbacks,
      metaData,
      unstyled: props.unstyled
    });
  };
  var createTableBody = function createTableBody2(options2, selectionModeInColumn2, empty2, isVirtualScrollerDisabled2) {
    var first = getFirst();
    var rows = options2.rows, columns2 = options2.columns, contentRef = options2.contentRef, style = options2.style, className = options2.className, spacerStyle = options2.spacerStyle, itemSize = options2.itemSize;
    var frozenBody = ObjectUtils.isNotEmpty(props.frozenValue) && /* @__PURE__ */ reactExports.createElement(TableBody, {
      hostName: "DataTable",
      ref: frozenBodyRef,
      cellClassName: props.cellClassName,
      cellSelection: props.cellSelection,
      checkIcon: props.checkIcon,
      className: "p-datatable-tbody p-datatable-frozen-tbody",
      collapsedRowIcon: props.collapsedRowIcon,
      columns: columns2,
      compareSelectionBy: props.compareSelectionBy,
      contextMenuSelection: props.contextMenuSelection,
      dataKey: props.dataKey,
      dragSelection: props.dragSelection,
      editMode: props.editMode,
      editingMeta: editingMetaState,
      editingRows: props.editingRows,
      emptyMessage: props.emptyMessage,
      expandableRowGroups: props.expandableRowGroups,
      expandedRowIcon: props.expandedRowIcon,
      expandedRows: props.expandedRows,
      first,
      frozenRow: true,
      groupRowsBy: props.groupRowsBy,
      isDataSelectable: props.isDataSelectable,
      isVirtualScrollerDisabled: true,
      lazy: props.lazy,
      loading: props.loading,
      metaKeySelection: props.metaKeySelection,
      onCellClick: props.onCellClick,
      onCellSelect: props.onCellSelect,
      onCellUnselect: props.onCellUnselect,
      onContextMenu: props.onContextMenu,
      onContextMenuSelectionChange: props.onContextMenuSelectionChange,
      onEditingMetaChange,
      onRowClick: props.onRowClick,
      onRowCollapse: props.onRowCollapse,
      onRowDoubleClick: props.onRowDoubleClick,
      onRowPointerDown: props.onRowPointerDown,
      onRowPointerUp: props.onRowPointerUp,
      onRowEditCancel: props.onRowEditCancel,
      onRowEditChange: props.onRowEditChange,
      onRowEditComplete: props.onRowEditComplete,
      onRowEditInit: props.onRowEditInit,
      onRowEditSave: props.onRowEditSave,
      onRowExpand: props.onRowExpand,
      onRowMouseEnter: props.onRowMouseEnter,
      onRowMouseLeave: props.onRowMouseLeave,
      onRowReorder: props.onRowReorder,
      onRowSelect: props.onRowSelect,
      onRowToggle: props.onRowToggle,
      onRowUnselect: props.onRowUnselect,
      onSelectionChange: props.onSelectionChange,
      paginator: props.paginator,
      reorderableRows: props.reorderableRows,
      responsiveLayout: props.responsiveLayout,
      rowClassName: props.rowClassName,
      rowEditValidator: props.rowEditValidator,
      rowEditorCancelIcon: props.rowEditorCancelIcon,
      rowEditorInitIcon: props.rowEditorInitIcon,
      rowEditorSaveIcon: props.rowEditorSaveIcon,
      rowExpansionTemplate: props.rowExpansionTemplate,
      rowGroupFooterTemplate: props.rowGroupFooterTemplate,
      rowGroupHeaderTemplate: props.rowGroupHeaderTemplate,
      rowGroupMode: props.rowGroupMode,
      scrollable: props.scrollable,
      selectOnEdit: props.selectOnEdit,
      selection: props.selection,
      selectionAutoFocus: props.selectionAutoFocus,
      selectionMode: props.selectionMode,
      selectionModeInColumn: selectionModeInColumn2,
      showRowReorderElement: props.showRowReorderElement,
      showSelectionElement: props.showSelectionElement,
      tabIndex: props.tabIndex,
      tableProps: props,
      tableSelector: attributeSelector.current,
      value: props.frozenValue,
      virtualScrollerOptions: options2,
      ptCallbacks,
      metaData
    });
    var body = /* @__PURE__ */ reactExports.createElement(TableBody, {
      hostName: "DataTable",
      ref: bodyRef,
      cellClassName: props.cellClassName,
      cellSelection: props.cellSelection,
      checkIcon: props.checkIcon,
      className: classNames$1("p-datatable-tbody", className),
      collapsedRowIcon: props.collapsedRowIcon,
      columns: columns2,
      compareSelectionBy: props.compareSelectionBy,
      contextMenuSelection: props.contextMenuSelection,
      dataKey: props.dataKey,
      dragSelection: props.dragSelection,
      editMode: props.editMode,
      editingMeta: editingMetaState,
      editingRows: props.editingRows,
      empty: empty2,
      emptyMessage: props.emptyMessage,
      expandableRowGroups: props.expandableRowGroups,
      expandedRowIcon: props.expandedRowIcon,
      expandedRows: props.expandedRows,
      first,
      frozenRow: false,
      groupRowsBy: props.groupRowsBy,
      isDataSelectable: props.isDataSelectable,
      isVirtualScrollerDisabled: isVirtualScrollerDisabled2,
      lazy: props.lazy,
      loading: props.loading,
      metaKeySelection: props.metaKeySelection,
      onCellClick: props.onCellClick,
      onCellSelect: props.onCellSelect,
      onCellUnselect: props.onCellUnselect,
      onContextMenu: props.onContextMenu,
      onContextMenuSelectionChange: props.onContextMenuSelectionChange,
      onEditingMetaChange,
      onRowClick: props.onRowClick,
      onRowCollapse: props.onRowCollapse,
      onRowDoubleClick: props.onRowDoubleClick,
      onRowEditCancel: props.onRowEditCancel,
      onRowEditChange: props.onRowEditChange,
      onRowEditComplete: props.onRowEditComplete,
      onRowEditInit: props.onRowEditInit,
      onRowEditSave: props.onRowEditSave,
      onRowExpand: props.onRowExpand,
      onRowMouseEnter: props.onRowMouseEnter,
      onRowMouseLeave: props.onRowMouseLeave,
      onRowPointerDown: props.onRowPointerDown,
      onRowPointerUp: props.onRowPointerUp,
      onRowReorder: props.onRowReorder,
      onRowSelect: props.onRowSelect,
      onRowToggle: props.onRowToggle,
      onRowUnselect: props.onRowUnselect,
      onSelectionChange: props.onSelectionChange,
      paginator: props.paginator,
      reorderableRows: props.reorderableRows,
      responsiveLayout: props.responsiveLayout,
      rowClassName: props.rowClassName,
      rowEditValidator: props.rowEditValidator,
      rowEditorCancelIcon: props.rowEditorCancelIcon,
      rowEditorInitIcon: props.rowEditorInitIcon,
      rowEditorSaveIcon: props.rowEditorSaveIcon,
      rowExpansionTemplate: props.rowExpansionTemplate,
      rowGroupFooterTemplate: props.rowGroupFooterTemplate,
      rowGroupHeaderTemplate: props.rowGroupHeaderTemplate,
      rowGroupMode: props.rowGroupMode,
      scrollable: props.scrollable,
      selectOnEdit: props.selectOnEdit,
      selection: props.selection,
      selectionAutoFocus: props.selectionAutoFocus,
      selectionMode: props.selectionMode,
      selectionModeInColumn: selectionModeInColumn2,
      showRowReorderElement: props.showRowReorderElement,
      showSelectionElement: props.showSelectionElement,
      style,
      tabIndex: props.tabIndex,
      tableProps: props,
      tableSelector: attributeSelector.current,
      value: dataToRender(rows),
      virtualScrollerContentRef: contentRef,
      virtualScrollerOptions: options2,
      ptCallbacks,
      metaData
    });
    var spacerBody = ObjectUtils.isNotEmpty(spacerStyle) ? /* @__PURE__ */ reactExports.createElement(TableBody, {
      hostName: "DataTable",
      style: {
        height: "calc(".concat(spacerStyle.height, " - ").concat(rows.length * itemSize, "px)")
      },
      className: "p-datatable-virtualscroller-spacer",
      ptCallbacks,
      metaData
    }) : null;
    return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, frozenBody, body, spacerBody);
  };
  var createTableFooter = function createTableFooter2(options2) {
    var columns2 = options2.columns;
    return /* @__PURE__ */ reactExports.createElement(TableFooter, {
      hostName: "DataTable",
      tableProps: props,
      columns: columns2,
      footerColumnGroup: props.footerColumnGroup,
      ptCallbacks,
      metaData
    });
  };
  var createContent = function createContent2(processedData2, columns2, selectionModeInColumn2, empty2) {
    if (!columns2)
      return;
    var _isVirtualScrollerDisabled = isVirtualScrollerDisabled();
    var virtualScrollerOptions = props.virtualScrollerOptions || {};
    var wrapperProps = mergeProps2({
      className: ptCallbacks.cx("wrapper"),
      style: _objectSpread(_objectSpread({}, ptCallbacks.sx("wrapper")), {}, {
        maxHeight: _isVirtualScrollerDisabled ? props.scrollHeight : null
      })
    }, ptCallbacks.ptm("wrapper"));
    return /* @__PURE__ */ reactExports.createElement("div", _extends({
      ref: wrapperRef
    }, wrapperProps), /* @__PURE__ */ reactExports.createElement(VirtualScroller, _extends({
      ref: virtualScrollerRef
    }, virtualScrollerOptions, {
      items: processedData2,
      columns: columns2,
      style: _objectSpread(_objectSpread({}, virtualScrollerOptions.style), {
        height: props.scrollHeight !== "flex" ? props.scrollHeight : void 0
      }),
      scrollHeight: props.scrollHeight !== "flex" ? void 0 : "100%",
      disabled: _isVirtualScrollerDisabled,
      loaderDisabled: true,
      inline: true,
      autoSize: true,
      pt: ptCallbacks.ptm("virtualScroller"),
      __parentMetadata: {
        parent: metaData
      },
      showSpacer: false,
      contentTemplate: function contentTemplate(options2) {
        var ref2 = function ref3(el2) {
          tableRef.current = el2;
          options2.spacerRef && options2.spacerRef(el2);
        };
        var tableHeader = createTableHeader(options2, empty2, _isVirtualScrollerDisabled);
        var tableBody = createTableBody(options2, selectionModeInColumn2, empty2, _isVirtualScrollerDisabled);
        var tableFooter = createTableFooter(options2);
        var tableProps = mergeProps2({
          className: classNames$1(props.tableClassName, ptCallbacks.cx("table")),
          style: props.tableStyle,
          role: "table"
        }, ptCallbacks.ptm("table"));
        return /* @__PURE__ */ reactExports.createElement("table", _extends({
          ref: ref2
        }, tableProps), tableHeader, tableBody, tableFooter);
      }
    })));
  };
  var createFooter = function createFooter2() {
    if (props.footer) {
      var _content2 = ObjectUtils.getJSXElement(props.footer, {
        props
      });
      var footerProps = mergeProps2({
        className: ptCallbacks.cx("footer")
      }, ptCallbacks.ptm("footer"));
      return /* @__PURE__ */ reactExports.createElement("div", footerProps, _content2);
    }
    return null;
  };
  var createPaginator = function createPaginator2(position2, totalRecords2) {
    return /* @__PURE__ */ reactExports.createElement(Paginator, {
      first: getFirst(),
      rows: getRows(),
      pageLinkSize: props.pageLinkSize,
      className: classNames$1(props.paginatorClassName, ptCallbacks.cx("paginator", {
        position: position2
      })),
      onPageChange,
      template: props.paginatorTemplate,
      totalRecords: totalRecords2,
      rowsPerPageOptions: props.rowsPerPageOptions,
      currentPageReportTemplate: props.currentPageReportTemplate,
      leftContent: props.paginatorLeft,
      rightContent: props.paginatorRight,
      alwaysShow: props.alwaysShowPaginator,
      dropdownAppendTo: props.paginatorDropdownAppendTo,
      pt: ptCallbacks.ptm("paginator"),
      unstyled: props.unstyled,
      __parentMetadata: {
        parent: metaData
      }
    });
  };
  var createPaginatorTop = function createPaginatorTop2(totalRecords2) {
    if (props.paginator && props.paginatorPosition !== "bottom") {
      return createPaginator("top", totalRecords2);
    }
    return null;
  };
  var createPaginatorBottom = function createPaginatorBottom2(totalRecords2) {
    if (props.paginator && props.paginatorPosition !== "top") {
      return createPaginator("bottom", totalRecords2);
    }
    return null;
  };
  var createResizeHelper = function createResizeHelper2() {
    if (props.resizableColumns) {
      var resizeHelperProps = mergeProps2({
        className: ptCallbacks.cx("resizeHelper"),
        style: ptCallbacks.sx("resizeHelper")
      }, ptCallbacks.ptm("resizeHelper"));
      return /* @__PURE__ */ reactExports.createElement("div", _extends({
        ref: resizeHelperRef
      }, resizeHelperProps));
    }
    return null;
  };
  var createReorderIndicators = function createReorderIndicators2() {
    if (props.reorderableColumns) {
      var style = {
        position: "absolute",
        display: "none"
      };
      var reorderIndicatorUpProps = mergeProps2({
        className: ptCallbacks.cx("reorderIndicatorUp"),
        style: ptCallbacks.sx("reorderIndicatorUp", {
          style
        })
      }, ptCallbacks.ptm("reorderIndicatorUp"));
      var reorderIndicatorUpIconProps = mergeProps2(ptCallbacks.ptm("reorderIndicatorUpIcon"));
      var reorderIndicatorUpIcon = IconUtils.getJSXIcon(props.reorderIndicatorUpIcon || /* @__PURE__ */ reactExports.createElement(ArrowDownIcon, reorderIndicatorUpIconProps), _objectSpread({}, reorderIndicatorUpIconProps), {
        props
      });
      var reorderIndicatorDownProps = mergeProps2({
        className: ptCallbacks.cx("reorderIndicatorDown"),
        style: ptCallbacks.sx("reorderIndicatorDown", {
          style
        })
      }, ptCallbacks.ptm("reorderIndicatorDown"));
      var reorderIndicatorDownIconProps = mergeProps2(ptCallbacks.ptm("reorderIndicatorDownIcon"));
      var reorderIndicatorDownIcon = IconUtils.getJSXIcon(props.reorderIndicatorDownIcon || /* @__PURE__ */ reactExports.createElement(ArrowUpIcon, reorderIndicatorDownIconProps), _objectSpread({}, reorderIndicatorDownIconProps), {
        props
      });
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("span", _extends({
        ref: reorderIndicatorUpRef
      }, reorderIndicatorUpProps), reorderIndicatorUpIcon), /* @__PURE__ */ reactExports.createElement("span", _extends({
        ref: reorderIndicatorDownRef
      }, reorderIndicatorDownProps), reorderIndicatorDownIcon));
    }
    return null;
  };
  var data = processedData();
  var columns = getColumns();
  var totalRecords = getTotalRecords(data);
  var empty = ObjectUtils.isEmpty(data);
  var selectionModeInColumn = getSelectionModeInColumn(columns);
  var selectable = props.selectionMode || selectionModeInColumn;
  var loader = createLoader();
  var header = createHeader();
  var paginatorTop = createPaginatorTop(totalRecords);
  var content = createContent(data, columns, selectionModeInColumn, empty);
  var paginatorBottom = createPaginatorBottom(totalRecords);
  var footer = createFooter();
  var resizeHelper = createResizeHelper();
  var reorderIndicators = createReorderIndicators();
  var rootProps = mergeProps2({
    id: props.id,
    className: classNames$1(props.className, ptCallbacks.cx("root", {
      selectable
    })),
    style: props.style,
    "data-scrollselectors": ".p-datatable-wrapper",
    "data-showgridlines": props.showGridlines
  }, DataTableBase.getOtherProps(props), ptCallbacks.ptm("root"));
  return /* @__PURE__ */ reactExports.createElement("div", _extends({
    ref: elementRef
  }, rootProps), loader, header, paginatorTop, content, paginatorBottom, footer, resizeHelper, reorderIndicators);
});
DataTable.displayName = "DataTable";
var Column = function Column2() {
};
Column.displayName = "Column";
const taxData = [
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "23200",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "94300",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "201050",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "383900",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "487450",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "731200",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "22000",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "89450",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "190750",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "364200",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "462500",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "693750",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "20550",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "83550",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "178150",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "340100",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "431900",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "647850",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "19900",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "81050",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "172750",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "329850",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "418850",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "628301",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "19750",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "80250",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "171050",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "326600",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "414700",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "622050",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "19400",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "78950",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "168400",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "321450",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "408200",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "612350",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "19050",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "77400",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "165000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "315000",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "600000",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "18650",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "75900",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "153100",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "233350",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "416700",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "470700",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "18550",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "75300",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "151900",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "231450",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "413350",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "466950",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "18451",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "74901",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "151201",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "230451",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "411501",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "464851",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "18151",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "73801",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "148851",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "226851",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "405101",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "457601",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "17850",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "72500",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "146400",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "223050",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "398350",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "450000",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "mfj",
    bracketMax: "17400",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "mfj",
    bracketMax: "70700",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "mfj",
    bracketMax: "142700",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "mfj",
    bracketMax: "217450",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "mfj",
    bracketMax: "388350",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "mfj",
    bracketMax: "17000",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "mfj",
    bracketMax: "69000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "mfj",
    bracketMax: "139350",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "mfj",
    bracketMax: "212300",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "mfj",
    bracketMax: "379150",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "mfj",
    bracketMax: "16750",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "mfj",
    bracketMax: "68000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "mfj",
    bracketMax: "137300",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "mfj",
    bracketMax: "209250",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "mfj",
    bracketMax: "373650",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "mfj",
    bracketMax: "16700",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "mfj",
    bracketMax: "67900",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "mfj",
    bracketMax: "137050",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "mfj",
    bracketMax: "208850",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "mfj",
    bracketMax: "372950",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "mfj",
    bracketMax: "16050",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "mfj",
    bracketMax: "65100",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "mfj",
    bracketMax: "131450",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "mfj",
    bracketMax: "200300",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "mfj",
    bracketMax: "357700",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "mfj",
    bracketMax: "15650",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "mfj",
    bracketMax: "63700",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "mfj",
    bracketMax: "128500",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "mfj",
    bracketMax: "195850",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "mfj",
    bracketMax: "349700",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "mfj",
    bracketMax: "15100",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "mfj",
    bracketMax: "61300",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "mfj",
    bracketMax: "123700",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "mfj",
    bracketMax: "188450",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "mfj",
    bracketMax: "336550",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "mfj",
    bracketMax: "14600",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "mfj",
    bracketMax: "59400",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "mfj",
    bracketMax: "119950",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "mfj",
    bracketMax: "182800",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "mfj",
    bracketMax: "326450",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "mfj",
    bracketMax: "14300",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "mfj",
    bracketMax: "58100",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "mfj",
    bracketMax: "117250",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "mfj",
    bracketMax: "178650",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "mfj",
    bracketMax: "319100",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "mfj",
    bracketMax: "14000",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "mfj",
    bracketMax: "56800",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "mfj",
    bracketMax: "114650",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "mfj",
    bracketMax: "174700",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "mfj",
    bracketMax: "311950",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "mfj",
    bracketMax: "46700",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "mfj",
    bracketMax: "112850",
    rate: "0.27"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "mfj",
    bracketMax: "171950",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "mfj",
    bracketMax: "307050",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.386"
  },
  {
    taxType: "federalIncome",
    year: "2001",
    filingStatus: "mfj",
    bracketMax: "45200",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2001",
    filingStatus: "mfj",
    bracketMax: "109250",
    rate: "0.275"
  },
  {
    taxType: "federalIncome",
    year: "2001",
    filingStatus: "mfj",
    bracketMax: "166500",
    rate: "0.305"
  },
  {
    taxType: "federalIncome",
    year: "2001",
    filingStatus: "mfj",
    bracketMax: "297350",
    rate: "0.355"
  },
  {
    taxType: "federalIncome",
    year: "2001",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.391"
  },
  {
    taxType: "federalIncome",
    year: "2000",
    filingStatus: "mfj",
    bracketMax: "43850",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2000",
    filingStatus: "mfj",
    bracketMax: "105950",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2000",
    filingStatus: "mfj",
    bracketMax: "161450",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "2000",
    filingStatus: "mfj",
    bracketMax: "288350",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "2000",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1999",
    filingStatus: "mfj",
    bracketMax: "43050",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1999",
    filingStatus: "mfj",
    bracketMax: "104050",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1999",
    filingStatus: "mfj",
    bracketMax: "158550",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1999",
    filingStatus: "mfj",
    bracketMax: "283150",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1999",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1998",
    filingStatus: "mfj",
    bracketMax: "42350",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1998",
    filingStatus: "mfj",
    bracketMax: "102300",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1998",
    filingStatus: "mfj",
    bracketMax: "155950",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1998",
    filingStatus: "mfj",
    bracketMax: "278450",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1998",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1997",
    filingStatus: "mfj",
    bracketMax: "41200",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1997",
    filingStatus: "mfj",
    bracketMax: "99600",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1997",
    filingStatus: "mfj",
    bracketMax: "151750",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1997",
    filingStatus: "mfj",
    bracketMax: "271050",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1997",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1996",
    filingStatus: "mfj",
    bracketMax: "40100",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1996",
    filingStatus: "mfj",
    bracketMax: "96900",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1996",
    filingStatus: "mfj",
    bracketMax: "147700",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1996",
    filingStatus: "mfj",
    bracketMax: "263750",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1996",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1995",
    filingStatus: "mfj",
    bracketMax: "39000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1995",
    filingStatus: "mfj",
    bracketMax: "94250",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1995",
    filingStatus: "mfj",
    bracketMax: "143600",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1995",
    filingStatus: "mfj",
    bracketMax: "256500",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1995",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1994",
    filingStatus: "mfj",
    bracketMax: "38000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1994",
    filingStatus: "mfj",
    bracketMax: "91850",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1994",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1994",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1994",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1993",
    filingStatus: "mfj",
    bracketMax: "36900",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1993",
    filingStatus: "mfj",
    bracketMax: "89150",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1993",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1993",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1993",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1992",
    filingStatus: "mfj",
    bracketMax: "35800",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1992",
    filingStatus: "mfj",
    bracketMax: "86500",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1992",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1991",
    filingStatus: "mfj",
    bracketMax: "34000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1991",
    filingStatus: "mfj",
    bracketMax: "82150",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1991",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1990",
    filingStatus: "mfj",
    bracketMax: "32450",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1990",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1989",
    filingStatus: "mfj",
    bracketMax: "30950",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1989",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1988",
    filingStatus: "mfj",
    bracketMax: "29750",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1988",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1987",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.11"
  },
  {
    taxType: "federalIncome",
    year: "1987",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1987",
    filingStatus: "mfj",
    bracketMax: "45000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1987",
    filingStatus: "mfj",
    bracketMax: "90000",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "1987",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.385"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "5940",
    rate: "0.11"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "8200",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "12840",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "17270",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "21800",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "26550",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "32270",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "37980",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "49420",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "64750",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "92370",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "118050",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "175250",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "5720",
    rate: "0.11"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "7910",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "12390",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "16650",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "21020",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "25600",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "31120",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "36630",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "47670",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "62450",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "89090",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "113860",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "169020",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "5500",
    rate: "0.11"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "7600",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "11900",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "20200",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "24600",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "29900",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "35200",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "45800",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "60000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "85600",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "109400",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "162400",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "5500",
    rate: "0.11"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "7600",
    rate: "0.13"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "11900",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "20200",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "24600",
    rate: "0.23"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "29900",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "35200",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "45800",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "60000",
    rate: "0.4"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "85600",
    rate: "0.44"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "109400",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "5500",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "7600",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "11900",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "20200",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "24600",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "29900",
    rate: "0.29"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "35200",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "45800",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "60000",
    rate: "0.44"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "85600",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "5500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "7600",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "11900",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.21"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "20200",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "24600",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "29900",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "35200",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "45800",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "60000",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "85600",
    rate: "0.54"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "109400",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "162400",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "215400",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "5500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "7600",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "11900",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.21"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "20200",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "24600",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "29900",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "35200",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "45800",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "60000",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "85600",
    rate: "0.54"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "109400",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "162400",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "215400",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "5500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "7600",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "11900",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.21"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "20200",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "24600",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "29900",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "35200",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "45800",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "60000",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "85600",
    rate: "0.54"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "109400",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "162400",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "215400",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "4200",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "5200",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "6200",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "7200",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "11200",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "15200",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "19200",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "23200",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "27200",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "31200",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "35200",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "39200",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "43200",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "47200",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "55200",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "67200",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "79200",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "91200",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "103200",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "123200",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "143200",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "163200",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "183200",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "203200",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "4200",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "5200",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "6200",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "7200",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "11200",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "15200",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "19200",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "23200",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "27200",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "31200",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "35200",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "39200",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "43200",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "47200",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "55200",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "67200",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "79200",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "91200",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "103200",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "123200",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "143200",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "163200",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "183200",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "203200",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "1000",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "2000",
    rate: "0.165"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.175"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.235"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.27"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.305"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.375"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.41"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.445"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.475"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.505"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.535"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.585"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.61"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.635"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.685"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.71"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.735"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.765"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.77"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.222"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.246"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.29"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.67"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.77"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.8"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.83"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.85"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.88"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.92"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.222"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.246"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.29"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.67"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.77"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.8"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.83"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.85"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.88"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.92"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.204"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.224"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.27"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.51"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.54"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.57"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.63"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.73"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.82"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "8000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "12000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "16000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "20000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "24000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "28000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "32000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "36000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "40000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "44000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "52000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "64000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "76000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "88000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "100000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "120000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "140000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "160000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "180000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "200000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "300000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "400000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "single",
    bracketMax: "11600",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "single",
    bracketMax: "47150",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "single",
    bracketMax: "100525",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "single",
    bracketMax: "191950",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "single",
    bracketMax: "243725",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "single",
    bracketMax: "609350",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2024",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "single",
    bracketMax: "11000",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "single",
    bracketMax: "44725",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "single",
    bracketMax: "95375",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "single",
    bracketMax: "182100",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "single",
    bracketMax: "231250",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "single",
    bracketMax: "578125",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2023",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "single",
    bracketMax: "10275",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "single",
    bracketMax: "41775",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "single",
    bracketMax: "89075",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "single",
    bracketMax: "170050",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "single",
    bracketMax: "215950",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "single",
    bracketMax: "539900",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2022",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "single",
    bracketMax: "9950",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "single",
    bracketMax: "40525",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "single",
    bracketMax: "86375",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "single",
    bracketMax: "164925",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "single",
    bracketMax: "209425",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "single",
    bracketMax: "523600",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2021",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "single",
    bracketMax: "9875",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "single",
    bracketMax: "40125",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "single",
    bracketMax: "85525",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "single",
    bracketMax: "163300",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "single",
    bracketMax: "207350",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "single",
    bracketMax: "518400",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2020",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "single",
    bracketMax: "9700",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "single",
    bracketMax: "39475",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "single",
    bracketMax: "84200",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "single",
    bracketMax: "160725",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "single",
    bracketMax: "204100",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "single",
    bracketMax: "510300",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2019",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "9525",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "38700",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "82500",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "157500",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "500000",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "9525",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "38700",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "82500",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "157500",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "500000",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2018",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.37"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "single",
    bracketMax: "9325",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "single",
    bracketMax: "37950",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "single",
    bracketMax: "91900",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "single",
    bracketMax: "191650",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "single",
    bracketMax: "416700",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "single",
    bracketMax: "418400",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2017",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "single",
    bracketMax: "9275",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "single",
    bracketMax: "37650",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "single",
    bracketMax: "91150",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "single",
    bracketMax: "190150",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "single",
    bracketMax: "413450",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "single",
    bracketMax: "415050",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2016",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "single",
    bracketMax: "9226",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "single",
    bracketMax: "37451",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "single",
    bracketMax: "90751",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "single",
    bracketMax: "189301",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "single",
    bracketMax: "411501",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "single",
    bracketMax: "413201",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2015",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "single",
    bracketMax: "9076",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "single",
    bracketMax: "36901",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "single",
    bracketMax: "89351",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "single",
    bracketMax: "186351",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "single",
    bracketMax: "405101",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "single",
    bracketMax: "406751",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2014",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "single",
    bracketMax: "8925",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "single",
    bracketMax: "36250",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "single",
    bracketMax: "87850",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "single",
    bracketMax: "183250",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "single",
    bracketMax: "398350",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "single",
    bracketMax: "400000",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2013",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "single",
    bracketMax: "8700",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "single",
    bracketMax: "35350",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "single",
    bracketMax: "85650",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "single",
    bracketMax: "178650",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "single",
    bracketMax: "388350",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2012",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "single",
    bracketMax: "8500",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "single",
    bracketMax: "34500",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "single",
    bracketMax: "83600",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "single",
    bracketMax: "174400",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "single",
    bracketMax: "379150",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2011",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "single",
    bracketMax: "8375",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "single",
    bracketMax: "34000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "single",
    bracketMax: "82400",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "single",
    bracketMax: "171850",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "single",
    bracketMax: "373650",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2010",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "single",
    bracketMax: "8350",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "single",
    bracketMax: "33950",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "single",
    bracketMax: "82250",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "single",
    bracketMax: "171550",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "single",
    bracketMax: "372950",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2009",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "single",
    bracketMax: "8025",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "single",
    bracketMax: "32550",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "single",
    bracketMax: "78850",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "single",
    bracketMax: "164550",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "single",
    bracketMax: "357700",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2008",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "single",
    bracketMax: "7825",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "single",
    bracketMax: "31850",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "single",
    bracketMax: "77100",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "single",
    bracketMax: "160850",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "single",
    bracketMax: "349700",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2007",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "single",
    bracketMax: "7550",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "single",
    bracketMax: "30650",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "single",
    bracketMax: "74200",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "single",
    bracketMax: "154800",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "single",
    bracketMax: "336550",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2006",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "single",
    bracketMax: "7300",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "single",
    bracketMax: "29700",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "single",
    bracketMax: "71950",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "single",
    bracketMax: "150150",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "single",
    bracketMax: "326450",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2005",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "single",
    bracketMax: "7150",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "single",
    bracketMax: "29050",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "single",
    bracketMax: "70350",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "single",
    bracketMax: "146750",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "single",
    bracketMax: "319100",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2004",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "single",
    bracketMax: "7000",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "single",
    bracketMax: "28400",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "single",
    bracketMax: "68800",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "single",
    bracketMax: "143500",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "single",
    bracketMax: "311950",
    rate: "0.33"
  },
  {
    taxType: "federalIncome",
    year: "2003",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.1"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "single",
    bracketMax: "27950",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "single",
    bracketMax: "67700",
    rate: "0.27"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "single",
    bracketMax: "141250",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "single",
    bracketMax: "307050",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "2002",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.386"
  },
  {
    taxType: "federalIncome",
    year: "2001",
    filingStatus: "single",
    bracketMax: "27050",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2001",
    filingStatus: "single",
    bracketMax: "65550",
    rate: "0.275"
  },
  {
    taxType: "federalIncome",
    year: "2001",
    filingStatus: "single",
    bracketMax: "136750",
    rate: "0.305"
  },
  {
    taxType: "federalIncome",
    year: "2001",
    filingStatus: "single",
    bracketMax: "297350",
    rate: "0.355"
  },
  {
    taxType: "federalIncome",
    year: "2001",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.391"
  },
  {
    taxType: "federalIncome",
    year: "2000",
    filingStatus: "single",
    bracketMax: "26250",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "2000",
    filingStatus: "single",
    bracketMax: "63550",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "2000",
    filingStatus: "single",
    bracketMax: "132600",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "2000",
    filingStatus: "single",
    bracketMax: "288350",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "2000",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1999",
    filingStatus: "single",
    bracketMax: "25750",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1999",
    filingStatus: "single",
    bracketMax: "62450",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1999",
    filingStatus: "single",
    bracketMax: "130250",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1999",
    filingStatus: "single",
    bracketMax: "283150",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1999",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1998",
    filingStatus: "single",
    bracketMax: "25350",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1998",
    filingStatus: "single",
    bracketMax: "61400",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1998",
    filingStatus: "single",
    bracketMax: "128100",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1998",
    filingStatus: "single",
    bracketMax: "278450",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1998",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1997",
    filingStatus: "single",
    bracketMax: "24650",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1997",
    filingStatus: "single",
    bracketMax: "59750",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1997",
    filingStatus: "single",
    bracketMax: "124650",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1997",
    filingStatus: "single",
    bracketMax: "271050",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1997",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1996",
    filingStatus: "single",
    bracketMax: "24000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1996",
    filingStatus: "single",
    bracketMax: "58150",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1996",
    filingStatus: "single",
    bracketMax: "121300",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1996",
    filingStatus: "single",
    bracketMax: "263750",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1996",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1995",
    filingStatus: "single",
    bracketMax: "23350",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1995",
    filingStatus: "single",
    bracketMax: "56550",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1995",
    filingStatus: "single",
    bracketMax: "117950",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1995",
    filingStatus: "single",
    bracketMax: "256500",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1995",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1994",
    filingStatus: "single",
    bracketMax: "22750",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1994",
    filingStatus: "single",
    bracketMax: "55100",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1994",
    filingStatus: "single",
    bracketMax: "115000",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1994",
    filingStatus: "single",
    bracketMax: "250000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1994",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1993",
    filingStatus: "single",
    bracketMax: "22100",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1993",
    filingStatus: "single",
    bracketMax: "53500",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1993",
    filingStatus: "single",
    bracketMax: "115000",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1993",
    filingStatus: "single",
    bracketMax: "250000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1993",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.396"
  },
  {
    taxType: "federalIncome",
    year: "1992",
    filingStatus: "single",
    bracketMax: "21450",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1992",
    filingStatus: "single",
    bracketMax: "51900",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1992",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1991",
    filingStatus: "single",
    bracketMax: "20350",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1991",
    filingStatus: "single",
    bracketMax: "49300",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1991",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1990",
    filingStatus: "single",
    bracketMax: "19450",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1990",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1989",
    filingStatus: "single",
    bracketMax: "18550",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1989",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1988",
    filingStatus: "single",
    bracketMax: "17850",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1988",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1987",
    filingStatus: "single",
    bracketMax: "1800",
    rate: "0.11"
  },
  {
    taxType: "federalIncome",
    year: "1987",
    filingStatus: "single",
    bracketMax: "16800",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1987",
    filingStatus: "single",
    bracketMax: "27000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1987",
    filingStatus: "single",
    bracketMax: "54000",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "1987",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.385"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "3670",
    rate: "0.11"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "4750",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "7010",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "9170",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "11650",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "13920",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "16190",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "19640",
    rate: "0.23"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "25360",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "31080",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "36800",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "44780",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "59670",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "88270",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1986",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "3540",
    rate: "0.11"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "4580",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "6760",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "8850",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "11240",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "13430",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "15610",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "18940",
    rate: "0.23"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "24460",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "29970",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "35490",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "43190",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "57550",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "85130",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1985",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "3400",
    rate: "0.11"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "4400",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "6500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "8500",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "10800",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "12900",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "15000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "18200",
    rate: "0.23"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "23500",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "28800",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "34100",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "41500",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "55300",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "81800",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1984",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "3400",
    rate: "0.11"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "4400",
    rate: "0.13"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "8500",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "10800",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "12900",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "15000",
    rate: "0.21"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "18200",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "23500",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "28800",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "34100",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "41500",
    rate: "0.4"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "55300",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1983",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "3400",
    rate: "0.12"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "4400",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "6500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "8500",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "10800",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "12900",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "15000",
    rate: "0.23"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "18200",
    rate: "0.27"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "23500",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "28800",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "34100",
    rate: "0.4"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "41500",
    rate: "0.44"
  },
  {
    taxType: "federalIncome",
    year: "1982",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "3400",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "4400",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "6500",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "8500",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "10800",
    rate: "0.21"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "12900",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "15000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "18200",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "23500",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "28800",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "34100",
    rate: "0.44"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "41500",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "55300",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "81800",
    rate: "0.63"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "108300",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1981",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "3400",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "4400",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "6500",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "8500",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "10800",
    rate: "0.21"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "12900",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "15000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "18200",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "23500",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "28800",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "34100",
    rate: "0.44"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "41500",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "55300",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "81800",
    rate: "0.63"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "108300",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1980",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "3400",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "4400",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "6500",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "8500",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "10800",
    rate: "0.21"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "12900",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "15000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "18200",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "23500",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "28800",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "34100",
    rate: "0.44"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "41500",
    rate: "0.49"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "55300",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "81800",
    rate: "0.63"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "108300",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1979",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "2700",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "3200",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "3700",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "4200",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "6200",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "8200",
    rate: "0.21"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "10200",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "12200",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "14200",
    rate: "0.27"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "16200",
    rate: "0.29"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "18200",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "20200",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "22200",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "24200",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "28200",
    rate: "0.4"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "34200",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "40200",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "46200",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "52200",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "62200",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "72200",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "82200",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "92200",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "102200",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1978",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "2700",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "3200",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "3700",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "4200",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "6200",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "8200",
    rate: "0.21"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "10200",
    rate: "0.24"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "12200",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "14200",
    rate: "0.27"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "16200",
    rate: "0.29"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "18200",
    rate: "0.31"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "20200",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "22200",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "24200",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "28200",
    rate: "0.4"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "34200",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "40200",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "46200",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "52200",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "62200",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "72200",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "82200",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "92200",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "102200",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1977",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1976",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1975",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1974",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1973",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1972",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1971",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1970",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1969",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1968",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1967",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1966",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.14"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.15"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.17"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.19"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.25"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.28"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.32"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.36"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.45"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.55"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.58"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.64"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1965",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.7"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "500",
    rate: "0.16"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "1000",
    rate: "0.165"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "1500",
    rate: "0.175"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.18"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.235"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.27"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.305"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.375"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.41"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.445"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.475"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.505"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.535"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.585"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.61"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.635"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.685"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.71"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.735"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.765"
  },
  {
    taxType: "federalIncome",
    year: "1964",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.77"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1963",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1962",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1961",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1960",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1959",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1958",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1957",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1956",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1955",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1954",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.222"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.246"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.29"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.67"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.77"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.8"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.83"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.85"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.88"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1953",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.92"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.222"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.246"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.29"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.42"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.67"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.68"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.77"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.8"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.83"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.85"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.88"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1952",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.92"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.204"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.224"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.27"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.35"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.39"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.48"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.51"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.54"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.57"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.6"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.63"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.66"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.73"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.82"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1951",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "2000",
    rate: "0.2"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "4000",
    rate: "0.22"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "6000",
    rate: "0.26"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "8000",
    rate: "0.3"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "10000",
    rate: "0.34"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "12000",
    rate: "0.38"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "14000",
    rate: "0.43"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "16000",
    rate: "0.47"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "18000",
    rate: "0.5"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "20000",
    rate: "0.53"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "22000",
    rate: "0.56"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "26000",
    rate: "0.59"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "32000",
    rate: "0.62"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "38000",
    rate: "0.65"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "44000",
    rate: "0.69"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "50000",
    rate: "0.72"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "60000",
    rate: "0.75"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "70000",
    rate: "0.78"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "80000",
    rate: "0.81"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.84"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "100000",
    rate: "0.87"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "150000",
    rate: "0.89"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.9"
  },
  {
    taxType: "federalIncome",
    year: "1950",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.91"
  },
  {
    taxType: "socialSecurity",
    year: "1950",
    filingStatus: "single",
    bracketMax: "3000",
    rate: "0.015"
  },
  {
    taxType: "socialSecurity",
    year: "1950",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1951",
    filingStatus: "single",
    bracketMax: "3600",
    rate: "0.015"
  },
  {
    taxType: "socialSecurity",
    year: "1951",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1952",
    filingStatus: "single",
    bracketMax: "3600",
    rate: "0.015"
  },
  {
    taxType: "socialSecurity",
    year: "1952",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1953",
    filingStatus: "single",
    bracketMax: "3600",
    rate: "0.015"
  },
  {
    taxType: "socialSecurity",
    year: "1953",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1954",
    filingStatus: "single",
    bracketMax: "3600",
    rate: "0.02"
  },
  {
    taxType: "socialSecurity",
    year: "1954",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1955",
    filingStatus: "single",
    bracketMax: "4200",
    rate: "0.02"
  },
  {
    taxType: "socialSecurity",
    year: "1955",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1956",
    filingStatus: "single",
    bracketMax: "4200",
    rate: "0.02"
  },
  {
    taxType: "socialSecurity",
    year: "1956",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1957",
    filingStatus: "single",
    bracketMax: "4200",
    rate: "0.025"
  },
  {
    taxType: "socialSecurity",
    year: "1957",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1958",
    filingStatus: "single",
    bracketMax: "4200",
    rate: "0.025"
  },
  {
    taxType: "socialSecurity",
    year: "1958",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1959",
    filingStatus: "single",
    bracketMax: "4800",
    rate: "0.025"
  },
  {
    taxType: "socialSecurity",
    year: "1959",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1960",
    filingStatus: "single",
    bracketMax: "4800",
    rate: "0.03"
  },
  {
    taxType: "socialSecurity",
    year: "1960",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1961",
    filingStatus: "single",
    bracketMax: "4800",
    rate: "0.03"
  },
  {
    taxType: "socialSecurity",
    year: "1961",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1962",
    filingStatus: "single",
    bracketMax: "4800",
    rate: "0.03125"
  },
  {
    taxType: "socialSecurity",
    year: "1962",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1963",
    filingStatus: "single",
    bracketMax: "4800",
    rate: "0.03625"
  },
  {
    taxType: "socialSecurity",
    year: "1963",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1964",
    filingStatus: "single",
    bracketMax: "4800",
    rate: "0.03625"
  },
  {
    taxType: "socialSecurity",
    year: "1964",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1965",
    filingStatus: "single",
    bracketMax: "4800",
    rate: "0.03625"
  },
  {
    taxType: "socialSecurity",
    year: "1965",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1966",
    filingStatus: "single",
    bracketMax: "6600",
    rate: "0.0385"
  },
  {
    taxType: "socialSecurity",
    year: "1966",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1967",
    filingStatus: "single",
    bracketMax: "6600",
    rate: "0.039"
  },
  {
    taxType: "socialSecurity",
    year: "1967",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1968",
    filingStatus: "single",
    bracketMax: "7800",
    rate: "0.038"
  },
  {
    taxType: "socialSecurity",
    year: "1968",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1969",
    filingStatus: "single",
    bracketMax: "7800",
    rate: "0.042"
  },
  {
    taxType: "socialSecurity",
    year: "1969",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1970",
    filingStatus: "single",
    bracketMax: "7800",
    rate: "0.042"
  },
  {
    taxType: "socialSecurity",
    year: "1970",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1971",
    filingStatus: "single",
    bracketMax: "7800",
    rate: "0.046"
  },
  {
    taxType: "socialSecurity",
    year: "1971",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1972",
    filingStatus: "single",
    bracketMax: "9000",
    rate: "0.046"
  },
  {
    taxType: "socialSecurity",
    year: "1972",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1973",
    filingStatus: "single",
    bracketMax: "10800",
    rate: "0.0485"
  },
  {
    taxType: "socialSecurity",
    year: "1973",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1974",
    filingStatus: "single",
    bracketMax: "13200",
    rate: "0.0495"
  },
  {
    taxType: "socialSecurity",
    year: "1974",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1975",
    filingStatus: "single",
    bracketMax: "14100",
    rate: "0.0495"
  },
  {
    taxType: "socialSecurity",
    year: "1975",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1976",
    filingStatus: "single",
    bracketMax: "15300",
    rate: "0.0495"
  },
  {
    taxType: "socialSecurity",
    year: "1976",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1977",
    filingStatus: "single",
    bracketMax: "16500",
    rate: "0.0495"
  },
  {
    taxType: "socialSecurity",
    year: "1977",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1978",
    filingStatus: "single",
    bracketMax: "17700",
    rate: "0.0505"
  },
  {
    taxType: "socialSecurity",
    year: "1978",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1979",
    filingStatus: "single",
    bracketMax: "22900",
    rate: "0.0508"
  },
  {
    taxType: "socialSecurity",
    year: "1979",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1980",
    filingStatus: "single",
    bracketMax: "25900",
    rate: "0.0508"
  },
  {
    taxType: "socialSecurity",
    year: "1980",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1981",
    filingStatus: "single",
    bracketMax: "29700",
    rate: "0.0535"
  },
  {
    taxType: "socialSecurity",
    year: "1981",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1982",
    filingStatus: "single",
    bracketMax: "32400",
    rate: "0.054"
  },
  {
    taxType: "socialSecurity",
    year: "1982",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1983",
    filingStatus: "single",
    bracketMax: "35700",
    rate: "0.054"
  },
  {
    taxType: "socialSecurity",
    year: "1983",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1984",
    filingStatus: "single",
    bracketMax: "37800",
    rate: "0.057"
  },
  {
    taxType: "socialSecurity",
    year: "1984",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1985",
    filingStatus: "single",
    bracketMax: "39600",
    rate: "0.057"
  },
  {
    taxType: "socialSecurity",
    year: "1985",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1986",
    filingStatus: "single",
    bracketMax: "42000",
    rate: "0.057"
  },
  {
    taxType: "socialSecurity",
    year: "1986",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1987",
    filingStatus: "single",
    bracketMax: "43800",
    rate: "0.057"
  },
  {
    taxType: "socialSecurity",
    year: "1987",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1988",
    filingStatus: "single",
    bracketMax: "45000",
    rate: "0.060"
  },
  {
    taxType: "socialSecurity",
    year: "1988",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1989",
    filingStatus: "single",
    bracketMax: "48000",
    rate: "0.060"
  },
  {
    taxType: "socialSecurity",
    year: "1989",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1990",
    filingStatus: "single",
    bracketMax: "51300",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1990",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1991",
    filingStatus: "single",
    bracketMax: "53400",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1991",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1992",
    filingStatus: "single",
    bracketMax: "55500",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1992",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1993",
    filingStatus: "single",
    bracketMax: "57600",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1993",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1994",
    filingStatus: "single",
    bracketMax: "60600",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1994",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1995",
    filingStatus: "single",
    bracketMax: "61200",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1995",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1996",
    filingStatus: "single",
    bracketMax: "62700",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1996",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1997",
    filingStatus: "single",
    bracketMax: "65400",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1997",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1998",
    filingStatus: "single",
    bracketMax: "68400",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1998",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1999",
    filingStatus: "single",
    bracketMax: "72600",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1999",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2000",
    filingStatus: "single",
    bracketMax: "76200",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2000",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2001",
    filingStatus: "single",
    bracketMax: "80400",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2001",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2002",
    filingStatus: "single",
    bracketMax: "84900",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2002",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2003",
    filingStatus: "single",
    bracketMax: "87000",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2003",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2004",
    filingStatus: "single",
    bracketMax: "87900",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2004",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2005",
    filingStatus: "single",
    bracketMax: "90000",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2005",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2006",
    filingStatus: "single",
    bracketMax: "94200",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2006",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2007",
    filingStatus: "single",
    bracketMax: "97500",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2007",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2008",
    filingStatus: "single",
    bracketMax: "102000",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2008",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2009",
    filingStatus: "single",
    bracketMax: "106800",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2009",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2010",
    filingStatus: "single",
    bracketMax: "106800",
    rate: "0.042"
  },
  {
    taxType: "socialSecurity",
    year: "2010",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2011",
    filingStatus: "single",
    bracketMax: "106800",
    rate: "0.042"
  },
  {
    taxType: "socialSecurity",
    year: "2011",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2012",
    filingStatus: "single",
    bracketMax: "110100",
    rate: "0.042"
  },
  {
    taxType: "socialSecurity",
    year: "2012",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2013",
    filingStatus: "single",
    bracketMax: "113700",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2013",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2014",
    filingStatus: "single",
    bracketMax: "117000",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2014",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2015",
    filingStatus: "single",
    bracketMax: "118500",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2015",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2016",
    filingStatus: "single",
    bracketMax: "118500",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2016",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2017",
    filingStatus: "single",
    bracketMax: "127200",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2017",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2018",
    filingStatus: "single",
    bracketMax: "128400",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2018",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2019",
    filingStatus: "single",
    bracketMax: "132900",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2019",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2020",
    filingStatus: "single",
    bracketMax: "137700",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2020",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2021",
    filingStatus: "single",
    bracketMax: "142800",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2021",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2022",
    filingStatus: "single",
    bracketMax: "147000",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2022",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2023",
    filingStatus: "single",
    bracketMax: "160200",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2023",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2024",
    filingStatus: "single",
    bracketMax: "168600",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2024",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "3000",
    rate: "0.015"
  },
  {
    taxType: "socialSecurity",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "3600",
    rate: "0.015"
  },
  {
    taxType: "socialSecurity",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "3600",
    rate: "0.015"
  },
  {
    taxType: "socialSecurity",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "3600",
    rate: "0.015"
  },
  {
    taxType: "socialSecurity",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "3600",
    rate: "0.02"
  },
  {
    taxType: "socialSecurity",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "4200",
    rate: "0.02"
  },
  {
    taxType: "socialSecurity",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "4200",
    rate: "0.02"
  },
  {
    taxType: "socialSecurity",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "4200",
    rate: "0.025"
  },
  {
    taxType: "socialSecurity",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "4200",
    rate: "0.025"
  },
  {
    taxType: "socialSecurity",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "4800",
    rate: "0.025"
  },
  {
    taxType: "socialSecurity",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "4800",
    rate: "0.03"
  },
  {
    taxType: "socialSecurity",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "4800",
    rate: "0.03"
  },
  {
    taxType: "socialSecurity",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "4800",
    rate: "0.03125"
  },
  {
    taxType: "socialSecurity",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "4800",
    rate: "0.03625"
  },
  {
    taxType: "socialSecurity",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "4800",
    rate: "0.03625"
  },
  {
    taxType: "socialSecurity",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "4800",
    rate: "0.03625"
  },
  {
    taxType: "socialSecurity",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "6600",
    rate: "0.0385"
  },
  {
    taxType: "socialSecurity",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "6600",
    rate: "0.039"
  },
  {
    taxType: "socialSecurity",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "7800",
    rate: "0.038"
  },
  {
    taxType: "socialSecurity",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "7800",
    rate: "0.042"
  },
  {
    taxType: "socialSecurity",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "7800",
    rate: "0.042"
  },
  {
    taxType: "socialSecurity",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "7800",
    rate: "0.046"
  },
  {
    taxType: "socialSecurity",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "9000",
    rate: "0.046"
  },
  {
    taxType: "socialSecurity",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "10800",
    rate: "0.0485"
  },
  {
    taxType: "socialSecurity",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "13200",
    rate: "0.0495"
  },
  {
    taxType: "socialSecurity",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "14100",
    rate: "0.0495"
  },
  {
    taxType: "socialSecurity",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "15300",
    rate: "0.0495"
  },
  {
    taxType: "socialSecurity",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "16500",
    rate: "0.0495"
  },
  {
    taxType: "socialSecurity",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "17700",
    rate: "0.0505"
  },
  {
    taxType: "socialSecurity",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "22900",
    rate: "0.0508"
  },
  {
    taxType: "socialSecurity",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "25900",
    rate: "0.0508"
  },
  {
    taxType: "socialSecurity",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "29700",
    rate: "0.0535"
  },
  {
    taxType: "socialSecurity",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "32400",
    rate: "0.054"
  },
  {
    taxType: "socialSecurity",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "35700",
    rate: "0.054"
  },
  {
    taxType: "socialSecurity",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "37800",
    rate: "0.057"
  },
  {
    taxType: "socialSecurity",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "39600",
    rate: "0.057"
  },
  {
    taxType: "socialSecurity",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "42000",
    rate: "0.057"
  },
  {
    taxType: "socialSecurity",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1987",
    filingStatus: "mfj",
    bracketMax: "43800",
    rate: "0.057"
  },
  {
    taxType: "socialSecurity",
    year: "1987",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1988",
    filingStatus: "mfj",
    bracketMax: "45000",
    rate: "0.060"
  },
  {
    taxType: "socialSecurity",
    year: "1988",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1989",
    filingStatus: "mfj",
    bracketMax: "48000",
    rate: "0.060"
  },
  {
    taxType: "socialSecurity",
    year: "1989",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1990",
    filingStatus: "mfj",
    bracketMax: "51300",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1990",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1991",
    filingStatus: "mfj",
    bracketMax: "53400",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1991",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1992",
    filingStatus: "mfj",
    bracketMax: "55500",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1992",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1993",
    filingStatus: "mfj",
    bracketMax: "57600",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1993",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1994",
    filingStatus: "mfj",
    bracketMax: "60600",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1994",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1995",
    filingStatus: "mfj",
    bracketMax: "61200",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1995",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1996",
    filingStatus: "mfj",
    bracketMax: "62700",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1996",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1997",
    filingStatus: "mfj",
    bracketMax: "65400",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1997",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1998",
    filingStatus: "mfj",
    bracketMax: "68400",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1998",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "1999",
    filingStatus: "mfj",
    bracketMax: "72600",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "1999",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2000",
    filingStatus: "mfj",
    bracketMax: "76200",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2000",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2001",
    filingStatus: "mfj",
    bracketMax: "80400",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2001",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2002",
    filingStatus: "mfj",
    bracketMax: "84900",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2002",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2003",
    filingStatus: "mfj",
    bracketMax: "87000",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2003",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2004",
    filingStatus: "mfj",
    bracketMax: "87900",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2004",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2005",
    filingStatus: "mfj",
    bracketMax: "90000",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2005",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2006",
    filingStatus: "mfj",
    bracketMax: "94200",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2006",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2007",
    filingStatus: "mfj",
    bracketMax: "97500",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2007",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2008",
    filingStatus: "mfj",
    bracketMax: "102000",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2008",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2009",
    filingStatus: "mfj",
    bracketMax: "106800",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2009",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2010",
    filingStatus: "mfj",
    bracketMax: "106800",
    rate: "0.042"
  },
  {
    taxType: "socialSecurity",
    year: "2010",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2011",
    filingStatus: "mfj",
    bracketMax: "106800",
    rate: "0.042"
  },
  {
    taxType: "socialSecurity",
    year: "2011",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2012",
    filingStatus: "mfj",
    bracketMax: "110100",
    rate: "0.042"
  },
  {
    taxType: "socialSecurity",
    year: "2012",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "113700",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "117000",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "118500",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "118500",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "127200",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "128400",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "132900",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "137700",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "142800",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "147000",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "160200",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "socialSecurity",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "168600",
    rate: "0.062"
  },
  {
    taxType: "socialSecurity",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "2024",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2024",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2023",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2023",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2022",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2022",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2021",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2021",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2020",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2020",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2019",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2019",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2018",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2018",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2017",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2017",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2016",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2016",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2015",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2015",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2014",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2014",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2013",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2013",
    filingStatus: "single",
    bracketMax: "200000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2012",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2011",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2010",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2009",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2008",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2007",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2006",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2005",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2004",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2003",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2002",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2001",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2000",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1999",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1998",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1997",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1996",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1995",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1994",
    filingStatus: "single",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1993",
    filingStatus: "single",
    bracketMax: "135000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1993",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1992",
    filingStatus: "single",
    bracketMax: "130200",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1992",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1991",
    filingStatus: "single",
    bracketMax: "125000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1991",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1990",
    filingStatus: "single",
    bracketMax: "51300",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1990",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1989",
    filingStatus: "single",
    bracketMax: "48000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1989",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1988",
    filingStatus: "single",
    bracketMax: "45000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1988",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1987",
    filingStatus: "single",
    bracketMax: "43800",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1987",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1986",
    filingStatus: "single",
    bracketMax: "42000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1986",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1985",
    filingStatus: "single",
    bracketMax: "39600",
    rate: "0.0135"
  },
  {
    taxType: "medicare",
    year: "1985",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1984",
    filingStatus: "single",
    bracketMax: "37800",
    rate: "0.013"
  },
  {
    taxType: "medicare",
    year: "1984",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1983",
    filingStatus: "single",
    bracketMax: "35700",
    rate: "0.013"
  },
  {
    taxType: "medicare",
    year: "1983",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1982",
    filingStatus: "single",
    bracketMax: "32400",
    rate: "0.013"
  },
  {
    taxType: "medicare",
    year: "1982",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1981",
    filingStatus: "single",
    bracketMax: "29700",
    rate: "0.013"
  },
  {
    taxType: "medicare",
    year: "1981",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1980",
    filingStatus: "single",
    bracketMax: "25900",
    rate: "0.0105"
  },
  {
    taxType: "medicare",
    year: "1980",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1979",
    filingStatus: "single",
    bracketMax: "22900",
    rate: "0.0105"
  },
  {
    taxType: "medicare",
    year: "1979",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1978",
    filingStatus: "single",
    bracketMax: "17700",
    rate: "0.01"
  },
  {
    taxType: "medicare",
    year: "1978",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1977",
    filingStatus: "single",
    bracketMax: "16500",
    rate: "0.009"
  },
  {
    taxType: "medicare",
    year: "1977",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1976",
    filingStatus: "single",
    bracketMax: "15300",
    rate: "0.009"
  },
  {
    taxType: "medicare",
    year: "1976",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1975",
    filingStatus: "single",
    bracketMax: "14100",
    rate: "0.009"
  },
  {
    taxType: "medicare",
    year: "1975",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1974",
    filingStatus: "single",
    bracketMax: "13200",
    rate: "0.009"
  },
  {
    taxType: "medicare",
    year: "1974",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1973",
    filingStatus: "single",
    bracketMax: "10800",
    rate: "0.01"
  },
  {
    taxType: "medicare",
    year: "1973",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1972",
    filingStatus: "single",
    bracketMax: "9000",
    rate: "0.006"
  },
  {
    taxType: "medicare",
    year: "1972",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1971",
    filingStatus: "single",
    bracketMax: "7800",
    rate: "0.006"
  },
  {
    taxType: "medicare",
    year: "1971",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1970",
    filingStatus: "single",
    bracketMax: "7800",
    rate: "0.006"
  },
  {
    taxType: "medicare",
    year: "1970",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1969",
    filingStatus: "single",
    bracketMax: "7800",
    rate: "0.006"
  },
  {
    taxType: "medicare",
    year: "1969",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1968",
    filingStatus: "single",
    bracketMax: "7800",
    rate: "0.006"
  },
  {
    taxType: "medicare",
    year: "1968",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1967",
    filingStatus: "single",
    bracketMax: "6600",
    rate: "0.005"
  },
  {
    taxType: "medicare",
    year: "1967",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1966",
    filingStatus: "single",
    bracketMax: "6600",
    rate: "0.0035"
  },
  {
    taxType: "medicare",
    year: "1966",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1965",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1964",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1963",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1962",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1961",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1960",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1959",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1958",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1957",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1956",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1955",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1954",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1953",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1952",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1951",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1950",
    filingStatus: "single",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2024",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2023",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2022",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2021",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2020",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2019",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2018",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2017",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2016",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2015",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2014",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0235"
  },
  {
    taxType: "medicare",
    year: "2013",
    filingStatus: "mfj",
    bracketMax: "250000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2012",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2011",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2010",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2009",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2008",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2007",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2006",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2005",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2004",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2003",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2002",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2001",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "2000",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1999",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1998",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1997",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1996",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1995",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1994",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1993",
    filingStatus: "mfj",
    bracketMax: "135000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1993",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1992",
    filingStatus: "mfj",
    bracketMax: "130200",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1992",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1991",
    filingStatus: "mfj",
    bracketMax: "125000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1991",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1990",
    filingStatus: "mfj",
    bracketMax: "51300",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1990",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1989",
    filingStatus: "mfj",
    bracketMax: "48000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1989",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1988",
    filingStatus: "mfj",
    bracketMax: "45000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1988",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1987",
    filingStatus: "mfj",
    bracketMax: "43800",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1987",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "42000",
    rate: "0.0145"
  },
  {
    taxType: "medicare",
    year: "1986",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "39600",
    rate: "0.0135"
  },
  {
    taxType: "medicare",
    year: "1985",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "37800",
    rate: "0.013"
  },
  {
    taxType: "medicare",
    year: "1984",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "35700",
    rate: "0.013"
  },
  {
    taxType: "medicare",
    year: "1983",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "32400",
    rate: "0.013"
  },
  {
    taxType: "medicare",
    year: "1982",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "29700",
    rate: "0.013"
  },
  {
    taxType: "medicare",
    year: "1981",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "25900",
    rate: "0.0105"
  },
  {
    taxType: "medicare",
    year: "1980",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "22900",
    rate: "0.0105"
  },
  {
    taxType: "medicare",
    year: "1979",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "17700",
    rate: "0.01"
  },
  {
    taxType: "medicare",
    year: "1978",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "16500",
    rate: "0.009"
  },
  {
    taxType: "medicare",
    year: "1977",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "15300",
    rate: "0.009"
  },
  {
    taxType: "medicare",
    year: "1976",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "14100",
    rate: "0.009"
  },
  {
    taxType: "medicare",
    year: "1975",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "13200",
    rate: "0.009"
  },
  {
    taxType: "medicare",
    year: "1974",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "10800",
    rate: "0.01"
  },
  {
    taxType: "medicare",
    year: "1973",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "9000",
    rate: "0.006"
  },
  {
    taxType: "medicare",
    year: "1972",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "7800",
    rate: "0.006"
  },
  {
    taxType: "medicare",
    year: "1971",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "7800",
    rate: "0.006"
  },
  {
    taxType: "medicare",
    year: "1970",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "7800",
    rate: "0.006"
  },
  {
    taxType: "medicare",
    year: "1969",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "7800",
    rate: "0.006"
  },
  {
    taxType: "medicare",
    year: "1968",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "6600",
    rate: "0.005"
  },
  {
    taxType: "medicare",
    year: "1967",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "6600",
    rate: "0.0035"
  },
  {
    taxType: "medicare",
    year: "1966",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1965",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1964",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1963",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1962",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1961",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1960",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1959",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1958",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1957",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1956",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1955",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1954",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1953",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1952",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1951",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  },
  {
    taxType: "medicare",
    year: "1950",
    filingStatus: "mfj",
    bracketMax: "",
    rate: "0"
  }
];
const StandardDeductionAndExemptions = [
  {
    year: 1950,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1951,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1952,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1953,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1954,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1955,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1956,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1957,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1958,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1959,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1960,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1961,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1962,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1963,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1964,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1965,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1966,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1967,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1968,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1969,
    single: 0.1,
    mfj: 0.1,
    type: "percent",
    max: 1e3,
    exemption: 600
  },
  {
    year: 1970,
    single: 1100,
    mfj: 1100,
    type: "absolute",
    max: null,
    exemption: 625
  },
  {
    year: 1971,
    single: 1050,
    mfj: 1050,
    type: "absolute",
    max: null,
    exemption: 675
  },
  {
    year: 1972,
    single: 1300,
    mfj: 1300,
    type: "absolute",
    max: null,
    exemption: 750
  },
  {
    year: 1973,
    single: 1300,
    mfj: 1300,
    type: "absolute",
    max: null,
    exemption: 750
  },
  {
    year: 1974,
    single: 1300,
    mfj: 1300,
    type: "absolute",
    max: null,
    exemption: 750
  },
  {
    year: 1975,
    single: 1600,
    mfj: 1900,
    type: "absolute",
    max: null,
    exemption: 750
  },
  {
    year: 1976,
    single: 1700,
    mfj: 2100,
    type: "absolute",
    max: null,
    exemption: 750
  },
  {
    year: 1977,
    single: 2200,
    mfj: 3200,
    type: "absolute",
    max: null,
    exemption: 750
  },
  {
    year: 1978,
    single: 2200,
    mfj: 3200,
    type: "absolute",
    max: null,
    exemption: 750
  },
  {
    year: 1979,
    single: 2300,
    mfj: 3400,
    type: "absolute",
    max: null,
    exemption: 1e3
  },
  {
    year: 1980,
    single: 2300,
    mfj: 3400,
    type: "absolute",
    max: null,
    exemption: 1e3
  },
  {
    year: 1981,
    single: 2300,
    mfj: 3400,
    type: "absolute",
    max: null,
    exemption: 1e3
  },
  {
    year: 1982,
    single: 2300,
    mfj: 3400,
    type: "absolute",
    max: null,
    exemption: 1e3
  },
  {
    year: 1983,
    single: 2300,
    mfj: 3400,
    type: "absolute",
    max: null,
    exemption: 1e3
  },
  {
    year: 1984,
    single: 2300,
    mfj: 3400,
    type: "absolute",
    max: null,
    exemption: 1e3
  },
  {
    year: 1985,
    single: 2400,
    mfj: 3550,
    type: "absolute",
    max: null,
    exemption: 1040
  },
  {
    year: 1986,
    single: 2480,
    mfj: 3670,
    type: "absolute",
    max: null,
    exemption: 1080
  },
  {
    year: 1987,
    single: 2540,
    mfj: 3760,
    type: "absolute",
    max: null,
    exemption: 1900
  },
  {
    year: 1988,
    single: 3e3,
    mfj: 5e3,
    type: "absolute",
    max: null,
    exemption: 1950
  },
  {
    year: 1989,
    single: 3100,
    mfj: 5200,
    type: "absolute",
    max: null,
    exemption: 2e3
  },
  {
    year: 1990,
    single: 3250,
    mfj: 5450,
    type: "absolute",
    max: null,
    exemption: 2050
  },
  {
    year: 1991,
    single: 3400,
    mfj: 5700,
    type: "absolute",
    max: null,
    exemption: 2150
  },
  {
    year: 1992,
    single: 3600,
    mfj: 6e3,
    type: "absolute",
    max: null,
    exemption: 2300
  },
  {
    year: 1993,
    single: 3700,
    mfj: 6200,
    type: "absolute",
    max: null,
    exemption: 2350
  },
  {
    year: 1994,
    single: 3800,
    mfj: 6350,
    type: "absolute",
    max: null,
    exemption: 2450
  },
  {
    year: 1995,
    single: 3900,
    mfj: 6550,
    type: "absolute",
    max: null,
    exemption: 2500
  },
  {
    year: 1996,
    single: 4e3,
    mfj: 6700,
    type: "absolute",
    max: null,
    exemption: 2550
  },
  {
    year: 1997,
    single: 4150,
    mfj: 6900,
    type: "absolute",
    max: null,
    exemption: 2650
  },
  {
    year: 1998,
    single: 4250,
    mfj: 7100,
    type: "absolute",
    max: null,
    exemption: 2700
  },
  {
    year: 1999,
    single: 4300,
    mfj: 7200,
    type: "absolute",
    max: null,
    exemption: 2750
  },
  {
    year: 2e3,
    single: 4400,
    mfj: 7350,
    type: "absolute",
    max: null,
    exemption: 2800
  },
  {
    year: 2001,
    single: 4550,
    mfj: 7600,
    type: "absolute",
    max: null,
    exemption: 2900
  },
  {
    year: 2002,
    single: 4700,
    mfj: 7850,
    type: "absolute",
    max: null,
    exemption: 3e3
  },
  {
    year: 2003,
    single: 4750,
    mfj: 9500,
    type: "absolute",
    max: null,
    exemption: 3050
  },
  {
    year: 2004,
    single: 4850,
    mfj: 9700,
    type: "absolute",
    max: null,
    exemption: 3100
  },
  {
    year: 2005,
    single: 5e3,
    mfj: 1e4,
    type: "absolute",
    max: null,
    exemption: 3200
  },
  {
    year: 2006,
    single: 5150,
    mfj: 10300,
    type: "absolute",
    max: null,
    exemption: 3300
  },
  {
    year: 2007,
    single: 5350,
    mfj: 10700,
    type: "absolute",
    max: null,
    exemption: 3400
  },
  {
    year: 2008,
    single: 5450,
    mfj: 10900,
    type: "absolute",
    max: null,
    exemption: 3500
  },
  {
    year: 2009,
    single: 5700,
    mfj: 11400,
    type: "absolute",
    max: null,
    exemption: 3650
  },
  {
    year: 2010,
    single: 5700,
    mfj: 11400,
    type: "absolute",
    max: null,
    exemption: 3650
  },
  {
    year: 2011,
    single: 5800,
    mfj: 11600,
    type: "absolute",
    max: null,
    exemption: 3700
  },
  {
    year: 2012,
    single: 5950,
    mfj: 11900,
    type: "absolute",
    max: null,
    exemption: 3800
  },
  {
    year: 2013,
    single: 6100,
    mfj: 12200,
    type: "absolute",
    max: null,
    exemption: 3900
  },
  {
    year: 2014,
    single: 6200,
    mfj: 12400,
    type: "absolute",
    max: null,
    exemption: 3950
  },
  {
    year: 2015,
    single: 6300,
    mfj: 12600,
    type: "absolute",
    max: null,
    exemption: 4e3
  },
  {
    year: 2016,
    single: 6300,
    mfj: 12600,
    type: "absolute",
    max: null,
    exemption: 4050
  },
  {
    year: 2017,
    single: 6350,
    mfj: 12700,
    type: "absolute",
    max: null,
    exemption: 4050
  },
  {
    year: 2018,
    single: 12e3,
    mfj: 24e3,
    type: "absolute",
    max: null,
    exemption: 0
  },
  {
    year: 2019,
    single: 12200,
    mfj: 24400,
    type: "absolute",
    max: null,
    exemption: 0
  },
  {
    year: 2020,
    single: 12400,
    mfj: 24800,
    type: "absolute",
    max: null,
    exemption: 0
  },
  {
    year: 2021,
    single: 12550,
    mfj: 25100,
    type: "absolute",
    max: null,
    exemption: 0
  },
  {
    year: 2022,
    single: 12950,
    mfj: 25900,
    type: "absolute",
    max: null,
    exemption: 0
  },
  {
    year: 2023,
    single: 13600,
    mfj: 27200,
    type: "absolute",
    max: null,
    exemption: 0
  },
  {
    year: 2024,
    single: 14e3,
    mfj: 28e3,
    type: "absolute",
    max: null,
    exemption: 0
  }
];
const inflationMultipliers = {
  "1950": "0.078",
  "1951": "0.079",
  "1952": "0.086",
  "1953": "0.087",
  "1954": "0.088",
  "1955": "0.088",
  "1956": "0.088",
  "1957": "0.089",
  "1958": "0.092",
  "1959": "0.095",
  "1960": "0.096",
  "1961": "0.097",
  "1962": "0.098",
  "1963": "0.099",
  "1964": "0.101",
  "1965": "0.102",
  "1966": "0.103",
  "1967": "0.106",
  "1968": "0.110",
  "1969": "0.114",
  "1970": "0.121",
  "1971": "0.128",
  "1972": "0.133",
  "1973": "0.137",
  "1974": "0.146",
  "1975": "0.162",
  "1976": "0.177",
  "1977": "0.187",
  "1978": "0.199",
  "1979": "0.214",
  "1980": "0.238",
  "1981": "0.271",
  "1982": "0.299",
  "1983": "0.317",
  "1984": "0.327",
  "1985": "0.341",
  "1986": "0.354",
  "1987": "0.360",
  "1988": "0.373",
  "1989": "0.389",
  "1990": "0.407",
  "1991": "0.429",
  "1992": "0.447",
  "1993": "0.461",
  "1994": "0.474",
  "1995": "0.487",
  "1996": "0.500",
  "1997": "0.515",
  "1998": "0.527",
  "1999": "0.536",
  "2000": "0.548",
  "2001": "0.566",
  "2002": "0.582",
  "2003": "0.591",
  "2004": "0.605",
  "2005": "0.621",
  "2006": "0.642",
  "2007": "0.663",
  "2008": "0.681",
  "2009": "0.707",
  "2010": "0.705",
  "2011": "0.716",
  "2012": "0.739",
  "2013": "0.754",
  "2014": "0.766",
  "2015": "0.778",
  "2016": "0.779",
  "2017": "0.789",
  "2018": "0.805",
  "2019": "0.825",
  "2020": "0.839",
  "2021": "0.850",
  "2022": "0.889",
  "2023": "0.961",
  "2024": "1.000"
};
const yearlyLabels = () => {
  const uniqueYears = [
    ...new Set(taxData.map((item2) => Number(item2.year)))
  ];
  const sortedYears = uniqueYears.sort((a, b2) => Number(a) - Number(b2));
  return sortedYears;
};
const inflationMultiplier = (targetYear) => {
  if (typeof targetYear === "number") {
    targetYear = String(targetYear);
  }
  return Number(inflationMultipliers[targetYear]);
};
const getTaxFreeIncome = (income, filingStatus, exemptions) => {
  let datasetSeries = new Array(yearlyLabels().length).fill(0);
  for (let index2 = 0; index2 < yearlyLabels().length; index2++) {
    const year = yearlyLabels()[index2];
    const inflationAdjustedIncome = inflationMultiplier(year) * income;
    const matchingYear = StandardDeductionAndExemptions.filter(
      (deduction) => deduction.year === Number(year)
    )[0];
    const stdDeduction = filingStatus === "single" ? matchingYear.single : matchingYear.mfj;
    const individualExemption = matchingYear.exemption;
    if (matchingYear.type === "percent") {
      datasetSeries[index2] = {
        standardDeduction: Math.min(
          stdDeduction * inflationAdjustedIncome,
          matchingYear.max || 0
        ) / inflationMultiplier(year),
        personalExemptions: individualExemption * exemptions / inflationMultiplier(year)
      };
    } else
      datasetSeries[index2] = {
        standardDeduction: stdDeduction / inflationMultiplier(year),
        personalExemptions: individualExemption * exemptions / inflationMultiplier(year)
      };
  }
  return datasetSeries;
};
const getTaxDataset = (taxType, filingStatus, income, marginalRate = false) => {
  let datasetSeries = { basic: [], detailed: [] };
  for (let index2 = 0; index2 < yearlyLabels().length; index2++) {
    const year = yearlyLabels()[index2];
    const matchingBrackets = taxData.filter(
      (taxBracket) => taxBracket.year === String(year) && taxBracket.filingStatus == filingStatus && taxBracket.taxType == taxType
    );
    matchingBrackets.sort((a, b2) => {
      if (a.bracketMax === "")
        return 1;
      if (b2.bracketMax === "")
        return -1;
      return parseFloat(a.bracketMax) - parseFloat(b2.bracketMax);
    });
    let yearTaxOwed = 0;
    const yearInflationMultiplier = inflationMultiplier(year);
    const inflationAdjustedIncome = income[index2] * yearInflationMultiplier;
    let currentBracketRate = 0;
    let detailedTaxInformation = [];
    for (let index22 = 0; index22 < matchingBrackets.length; index22++) {
      let priorBracketMax = 0;
      const currentBracketMax = Number(matchingBrackets[index22].bracketMax);
      currentBracketRate = Number(matchingBrackets[index22].rate);
      if (index22 > 0) {
        priorBracketMax = Number(matchingBrackets[index22 - 1].bracketMax);
      }
      let bracketTaxOwed = 0;
      if (index22 === matchingBrackets.length - 1) {
        bracketTaxOwed = (inflationAdjustedIncome - priorBracketMax) * currentBracketRate;
      } else if (inflationAdjustedIncome <= currentBracketMax) {
        bracketTaxOwed = (inflationAdjustedIncome - priorBracketMax) * currentBracketRate;
      } else {
        bracketTaxOwed = (currentBracketMax - priorBracketMax) * currentBracketRate;
      }
      yearTaxOwed += bracketTaxOwed;
      if (currentBracketRate > 0) {
        detailedTaxInformation.push({
          nominalTaxBracketMax: currentBracketMax > 0 ? currentBracketMax : "N/A",
          realTaxBracketMax: currentBracketMax / yearInflationMultiplier > 0 ? currentBracketMax / yearInflationMultiplier : "N/A",
          taxBracketRate: currentBracketRate,
          nominalTaxOwed: bracketTaxOwed,
          realTaxOwed: bracketTaxOwed / yearInflationMultiplier
        });
      }
      if (inflationAdjustedIncome <= currentBracketMax) {
        break;
      }
    }
    yearTaxOwed = yearTaxOwed / yearInflationMultiplier;
    if (marginalRate) {
      datasetSeries.basic.push(currentBracketRate);
    } else {
      datasetSeries.basic.push(yearTaxOwed);
      datasetSeries.detailed.push(detailedTaxInformation);
    }
  }
  return datasetSeries;
};
const TaxDataTableDetailed = ({
  config: config2,
  income,
  data,
  globalTaxData
}) => {
  const yearIndex = globalTaxData.years.indexOf(data.year);
  const currentYear = (/* @__PURE__ */ new Date()).getFullYear();
  const inflationFactor = inflationMultiplier(data.year);
  const detailedDataColumns = (currentYear2, nominalYear) => {
    return [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Column,
        {
          field: "taxBracketRate",
          header: "Tax Rate",
          body: percentageTemplate("taxBracketRate")
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Column,
        {
          field: "nominalTaxBracketMax",
          header: `Bracket Max (${nominalYear})`,
          body: currencyTemplate("nominalTaxBracketMax")
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Column,
        {
          field: "realTaxBracketMax",
          header: `Bracket Max (${currentYear2})`,
          body: currencyTemplate("realTaxBracketMax")
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Column,
        {
          field: "nominalTaxOwed",
          header: `"Bracket Tax Owed (${nominalYear})`,
          body: currencyTemplate("nominalTaxOwed")
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Column,
        {
          field: "realTaxOwed",
          header: `Bracket Tax Owed (${currentYear2})`,
          body: currencyTemplate("realTaxOwed")
        }
      )
    ];
  };
  const createDetailedTaxTable = (header, data2, columns) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(DataTable, { value: data2, header, stripedRows: true, children: [
        columns.map((column2) => column2),
        " "
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {})
    ] });
  };
  const configTaxTableMapping = () => {
    return {
      includeFederalIncome: "federalIncome",
      includeSS: "socialSecurity",
      includeMedicare: "medicare"
    };
  };
  const generateDetailedTaxTables = (globalTaxData2, yearIndex2, config22) => {
    const configDetailedHeadingMapping = () => {
      return {
        includeFederalIncome: "Federal Income",
        includeSS: "Social Security",
        includeMedicare: "Medicare"
      };
    };
    let taxTables = [];
    for (const [key, value] of Object.entries(configTaxTableMapping())) {
      if (config22[key]) {
        taxTables.push(
          createDetailedTaxTable(
            configDetailedHeadingMapping()[key],
            globalTaxData2[value]["detailed"][yearIndex2],
            detailedDataColumns(currentYear, data.year)
          )
        );
      }
    }
    return taxTables;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: "detailed-view",
        style: {
          lineHeight: "1",
          textAlign: "center",
          display: "flex",
          justifyContent: "space-between"
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            currentYear,
            " income: ",
            toUSD(income)
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            data.year,
            " income: ",
            toUSD(income * inflationFactor)
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            data.year,
            " inflation multiplier: ",
            inflationFactor
          ] })
        ]
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: generateDetailedTaxTables(globalTaxData, yearIndex, config2).map(
      (table2) => table2
    ) })
  ] });
};
const TaxDataTable = React.memo(({
  config: config2,
  income,
  globalTaxData
}) => {
  const [expandedRows, setExpandedRows] = React.useState(null);
  let rawDataTable = [];
  for (let i = 0; i < globalTaxData.years.length; i++) {
    rawDataTable.push({
      id: i + 1,
      year: globalTaxData.years[i],
      standardDeductions: globalTaxData.standardDeductions ? globalTaxData.standardDeductions[i].standardDeduction : null,
      personalExemptions: globalTaxData.standardDeductions ? globalTaxData.standardDeductions[i].personalExemptions : null,
      medicare: globalTaxData.medicare ? globalTaxData.medicare.basic[i] : null,
      socialSecurity: globalTaxData.socialSecurity ? globalTaxData.socialSecurity.basic[i] : null,
      federalIncome: globalTaxData.federalIncome ? globalTaxData.federalIncome.basic[i] : null,
      federalIncomeMarginal: globalTaxData.federalIncomeMarginal ? globalTaxData.federalIncomeMarginal[i] : null,
      takehomePay: globalTaxData.takehomePay ? globalTaxData.takehomePay[i] : null,
      taxableIncome: globalTaxData.taxableIncome ? globalTaxData.taxableIncome[i] : null
    });
  }
  let columns = [];
  columns.push({ field: "year", header: "Year" });
  if (globalTaxData.standardDeductions) {
    columns.push({
      header: "Standard Deductions",
      field: "standardDeductions",
      type: "currency",
      body: currencyTemplate
    });
    columns.push({
      header: "Personal Exemptions",
      field: "personalExemptions",
      type: "currency",
      body: currencyTemplate
    });
  }
  if (globalTaxData.medicare) {
    columns.push({
      header: "Medicare",
      field: "medicare",
      type: "currency",
      body: currencyTemplate
    });
  }
  if (globalTaxData.socialSecurity) {
    columns.push({
      header: "Social Security",
      field: "socialSecurity",
      type: "currency",
      body: currencyTemplate
    });
  }
  if (globalTaxData.federalIncome) {
    columns.push({
      header: "Federal Income",
      field: "federalIncome",
      type: "currency",
      body: currencyTemplate
    });
  }
  if (globalTaxData.federalIncomeMarginal) {
    columns.push({
      header: "Federal Income Marginal",
      field: "federalIncomeMarginal",
      body: percentageTemplate
    });
  }
  if (globalTaxData.takehomePay) {
    columns.push({
      header: "Takehome Pay",
      field: "takehomePay",
      type: "currency",
      body: currencyTemplate
    });
  }
  if (globalTaxData.taxableIncome) {
    columns.push({
      header: "Taxable Income",
      field: "taxableIncome",
      type: "currency",
      body: currencyTemplate
    });
  }
  const rowExpansionTemplate = (data) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      TaxDataTableDetailed,
      {
        config: config2,
        income,
        data,
        globalTaxData
      }
    );
  };
  return (
    // <div className="card">
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      DataTable,
      {
        value: rawDataTable,
        sortField: "year",
        sortOrder: -1,
        showGridlines: true,
        stripedRows: true,
        size: "small",
        expandedRows,
        onRowToggle: (e2) => setExpandedRows(e2.data),
        rowExpansionTemplate,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Column, { expander: true }),
          columns.map((col) => /* @__PURE__ */ jsxRuntimeExports.jsx(
            Column,
            {
              field: col.field,
              header: col.header,
              body: col.body ? col.body(col.field) : null,
              sortable: true
            },
            col.field
          ))
        ]
      }
    )
  );
});
const subtractTaxFromNetIncome = (netIncome, taxes) => {
  for (let i = 0; i < netIncome.length; i++) {
    netIncome[i] -= taxes[i];
  }
};
const getTaxData = (income, filingStatus, config2) => {
  let taxData2 = {
    years: yearlyLabels(),
    standardDeductions: null,
    medicare: null,
    socialSecurity: null,
    federalIncome: null,
    federalIncomeMarginal: null,
    takehomePay: null,
    taxableIncome: null
  };
  let takehomePay = new Array(yearlyLabels().length).fill(income);
  let taxableIncome = new Array(yearlyLabels().length).fill(income);
  const exemptionCount = filingStatus.value === "single" ? 1 : 2;
  if (config2.includeSS) {
    const ssTaxes = getTaxDataset(
      "socialSecurity",
      filingStatus.value,
      taxableIncome
    );
    subtractTaxFromNetIncome(takehomePay, ssTaxes.basic);
    taxData2.socialSecurity = ssTaxes;
  }
  if (config2.includeMedicare) {
    const medicareTaxes = getTaxDataset(
      "medicare",
      filingStatus.value,
      taxableIncome
    );
    subtractTaxFromNetIncome(takehomePay, medicareTaxes.basic);
    taxData2.medicare = medicareTaxes;
  }
  if (config2.includeStandardDeductions) {
    const standardDeductions = getTaxFreeIncome(income, filingStatus.value, exemptionCount);
    taxableIncome = taxableIncome.map(
      (value, index2) => Math.max(value - standardDeductions[index2].standardDeduction - exemptionCount * standardDeductions[index2].personalExemptions, 0)
    );
    taxData2.standardDeductions = standardDeductions;
    taxData2.taxableIncome = taxableIncome;
  }
  if (config2.includeFederalIncome) {
    const federalIncomeTaxes = getTaxDataset(
      "federalIncome",
      filingStatus.value,
      taxableIncome
    );
    subtractTaxFromNetIncome(takehomePay, federalIncomeTaxes.basic);
    taxData2.federalIncome = federalIncomeTaxes;
  }
  if (config2.showMarginalFederalRate) {
    const federalMarginalRate = getTaxDataset(
      "federalIncome",
      filingStatus.value,
      taxableIncome,
      true
    );
    taxData2.federalIncomeMarginal = federalMarginalRate.basic;
  }
  taxData2.takehomePay = takehomePay;
  return taxData2;
};
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s, i = 1, n2 = arguments.length; i < n2; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t2[p2] = s[p2];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e2) {
  var t2 = {};
  for (var p2 in s)
    if (Object.prototype.hasOwnProperty.call(s, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e2.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t2[p2[i]] = s[p2[i]];
    }
  return t2;
}
function __spreadArray(to2, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l2 = from2.length, ar; i < l2; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to2.concat(ar || Array.prototype.slice.call(from2));
}
typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
  var e2 = new Error(message);
  return e2.name = "SuppressedError", e2.error = error, e2.suppressed = suppressed, e2;
};
var escapeRegExp = function(stringToGoIntoTheRegex) {
  return stringToGoIntoTheRegex.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
};
var abbrMap = { k: 1e3, m: 1e6, b: 1e9 };
var parseAbbrValue = function(value, decimalSeparator) {
  if (decimalSeparator === void 0) {
    decimalSeparator = ".";
  }
  var reg = new RegExp("(\\d+(".concat(escapeRegExp(decimalSeparator), "\\d*)?)([kmb])$"), "i");
  var match2 = value.match(reg);
  if (match2) {
    var digits = match2[1], abbr = match2[3];
    var multiplier = abbrMap[abbr.toLowerCase()];
    return Number(digits.replace(decimalSeparator, ".")) * multiplier;
  }
  return void 0;
};
var removeSeparators = function(value, separator) {
  if (separator === void 0) {
    separator = ",";
  }
  var reg = new RegExp(escapeRegExp(separator), "g");
  return value.replace(reg, "");
};
var removeInvalidChars = function(value, validChars) {
  var chars = escapeRegExp(validChars.join(""));
  var reg = new RegExp("[^\\d".concat(chars, "]"), "gi");
  return value.replace(reg, "");
};
var cleanValue$1 = function(_a2) {
  var value = _a2.value, _b2 = _a2.groupSeparator, groupSeparator = _b2 === void 0 ? "," : _b2, _c2 = _a2.decimalSeparator, decimalSeparator = _c2 === void 0 ? "." : _c2, _d = _a2.allowDecimals, allowDecimals = _d === void 0 ? true : _d, _e = _a2.decimalsLimit, decimalsLimit = _e === void 0 ? 2 : _e, _f = _a2.allowNegativeValue, allowNegativeValue = _f === void 0 ? true : _f, _g = _a2.disableAbbreviations, disableAbbreviations = _g === void 0 ? false : _g, _h = _a2.prefix, prefix2 = _h === void 0 ? "" : _h, _j = _a2.transformRawValue, transformRawValue = _j === void 0 ? function(rawValue) {
    return rawValue;
  } : _j;
  var transformedValue = transformRawValue(value);
  if (transformedValue === "-") {
    return transformedValue;
  }
  var abbreviations = disableAbbreviations ? [] : ["k", "m", "b"];
  var reg = new RegExp("((^|\\D)-\\d)|(-".concat(escapeRegExp(prefix2), ")"));
  var isNegative = reg.test(transformedValue);
  var _k = RegExp("(\\d+)-?".concat(escapeRegExp(prefix2))).exec(value) || [], prefixWithValue = _k[0], preValue = _k[1];
  var withoutPrefix = prefix2 ? prefixWithValue ? transformedValue.replace(prefixWithValue, "").concat(preValue) : transformedValue.replace(prefix2, "") : transformedValue;
  var withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);
  var withoutInvalidChars = removeInvalidChars(withoutSeparators, __spreadArray([
    groupSeparator,
    decimalSeparator
  ], abbreviations, true));
  var valueOnly = withoutInvalidChars;
  if (!disableAbbreviations) {
    if (abbreviations.some(function(letter) {
      return letter === withoutInvalidChars.toLowerCase().replace(decimalSeparator, "");
    })) {
      return "";
    }
    var parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);
    if (parsed) {
      valueOnly = String(parsed);
    }
  }
  var includeNegative = isNegative && allowNegativeValue ? "-" : "";
  if (decimalSeparator && valueOnly.includes(decimalSeparator)) {
    var _l = withoutInvalidChars.split(decimalSeparator), int = _l[0], decimals = _l[1];
    var trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals;
    var includeDecimals = allowDecimals ? "".concat(decimalSeparator).concat(trimmedDecimals) : "";
    return "".concat(includeNegative).concat(int).concat(includeDecimals);
  }
  return "".concat(includeNegative).concat(valueOnly);
};
var fixedDecimalValue = function(value, decimalSeparator, fixedDecimalLength) {
  if (fixedDecimalLength !== void 0 && value.length > 1) {
    if (fixedDecimalLength === 0) {
      return value.replace(decimalSeparator, "");
    }
    if (value.includes(decimalSeparator)) {
      var _a2 = value.split(decimalSeparator), int = _a2[0], decimals = _a2[1];
      if (decimals.length === fixedDecimalLength) {
        return value;
      }
      if (decimals.length > fixedDecimalLength) {
        return "".concat(int).concat(decimalSeparator).concat(decimals.slice(0, fixedDecimalLength));
      }
    }
    var reg = value.length > fixedDecimalLength ? new RegExp("(\\d+)(\\d{".concat(fixedDecimalLength, "})")) : new RegExp("(\\d)(\\d+)");
    var match2 = value.match(reg);
    if (match2) {
      var int = match2[1], decimals = match2[2];
      return "".concat(int).concat(decimalSeparator).concat(decimals);
    }
  }
  return value;
};
var getSuffix = function(value, _a2) {
  var _b2 = _a2.groupSeparator, groupSeparator = _b2 === void 0 ? "," : _b2, _c2 = _a2.decimalSeparator, decimalSeparator = _c2 === void 0 ? "." : _c2;
  var suffixReg = new RegExp("\\d([^".concat(escapeRegExp(groupSeparator)).concat(escapeRegExp(decimalSeparator), "0-9]+)"));
  var suffixMatch = value.match(suffixReg);
  return suffixMatch ? suffixMatch[1] : void 0;
};
var formatValue = function(options2) {
  var _value = options2.value, decimalSeparator = options2.decimalSeparator, intlConfig = options2.intlConfig, decimalScale = options2.decimalScale, _a2 = options2.prefix, prefix2 = _a2 === void 0 ? "" : _a2, _b2 = options2.suffix, suffix = _b2 === void 0 ? "" : _b2;
  if (_value === "" || _value === void 0) {
    return "";
  }
  if (_value === "-") {
    return "-";
  }
  var isNegative = new RegExp("^\\d?-".concat(prefix2 ? "".concat(escapeRegExp(prefix2), "?") : "", "\\d")).test(_value);
  var value = decimalSeparator !== "." ? replaceDecimalSeparator(_value, decimalSeparator, isNegative) : _value;
  if (decimalSeparator && decimalSeparator !== "-" && value.startsWith(decimalSeparator)) {
    value = "0" + value;
  }
  var defaultNumberFormatOptions = {
    minimumFractionDigits: decimalScale || 0,
    maximumFractionDigits: 20
  };
  var numberFormatter = intlConfig ? new Intl.NumberFormat(intlConfig.locale, intlConfig.currency ? __assign(__assign({}, defaultNumberFormatOptions), { style: "currency", currency: intlConfig.currency }) : defaultNumberFormatOptions) : new Intl.NumberFormat(void 0, defaultNumberFormatOptions);
  var parts = numberFormatter.formatToParts(Number(value));
  var formatted = replaceParts(parts, options2);
  var intlSuffix = getSuffix(formatted, __assign({}, options2));
  var includeDecimalSeparator = _value.slice(-1) === decimalSeparator ? decimalSeparator : "";
  var _c2 = value.match(RegExp("\\d+\\.(\\d+)")) || [], decimals = _c2[1];
  if (decimalScale === void 0 && decimals && decimalSeparator) {
    if (formatted.includes(decimalSeparator)) {
      formatted = formatted.replace(RegExp("(\\d+)(".concat(escapeRegExp(decimalSeparator), ")(\\d+)"), "g"), "$1$2".concat(decimals));
    } else {
      if (intlSuffix && !suffix) {
        formatted = formatted.replace(intlSuffix, "".concat(decimalSeparator).concat(decimals).concat(intlSuffix));
      } else {
        formatted = "".concat(formatted).concat(decimalSeparator).concat(decimals);
      }
    }
  }
  if (suffix && includeDecimalSeparator) {
    return "".concat(formatted).concat(includeDecimalSeparator).concat(suffix);
  }
  if (intlSuffix && includeDecimalSeparator) {
    return formatted.replace(intlSuffix, "".concat(includeDecimalSeparator).concat(intlSuffix));
  }
  if (intlSuffix && suffix) {
    return formatted.replace(intlSuffix, "".concat(includeDecimalSeparator).concat(suffix));
  }
  return [formatted, includeDecimalSeparator, suffix].join("");
};
var replaceDecimalSeparator = function(value, decimalSeparator, isNegative) {
  var newValue = value;
  if (decimalSeparator && decimalSeparator !== ".") {
    newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), "g"), ".");
    if (isNegative && decimalSeparator === "-") {
      newValue = "-".concat(newValue.slice(1));
    }
  }
  return newValue;
};
var replaceParts = function(parts, _a2) {
  var prefix2 = _a2.prefix, groupSeparator = _a2.groupSeparator, decimalSeparator = _a2.decimalSeparator, decimalScale = _a2.decimalScale, _b2 = _a2.disableGroupSeparators, disableGroupSeparators = _b2 === void 0 ? false : _b2;
  return parts.reduce(function(prev2, _a3, i) {
    var type = _a3.type, value = _a3.value;
    if (i === 0 && prefix2) {
      if (type === "minusSign") {
        return [value, prefix2];
      }
      if (type === "currency") {
        return __spreadArray(__spreadArray([], prev2, true), [prefix2], false);
      }
      return [prefix2, value];
    }
    if (type === "currency") {
      return prefix2 ? prev2 : __spreadArray(__spreadArray([], prev2, true), [value], false);
    }
    if (type === "group") {
      return !disableGroupSeparators ? __spreadArray(__spreadArray([], prev2, true), [groupSeparator !== void 0 ? groupSeparator : value], false) : prev2;
    }
    if (type === "decimal") {
      if (decimalScale !== void 0 && decimalScale === 0) {
        return prev2;
      }
      return __spreadArray(__spreadArray([], prev2, true), [decimalSeparator !== void 0 ? decimalSeparator : value], false);
    }
    if (type === "fraction") {
      return __spreadArray(__spreadArray([], prev2, true), [decimalScale !== void 0 ? value.slice(0, decimalScale) : value], false);
    }
    return __spreadArray(__spreadArray([], prev2, true), [value], false);
  }, [""]).join("");
};
var defaultConfig = {
  currencySymbol: "",
  groupSeparator: "",
  decimalSeparator: "",
  prefix: "",
  suffix: ""
};
var getLocaleConfig = function(intlConfig) {
  var _a2 = intlConfig || {}, locale = _a2.locale, currency = _a2.currency;
  var numberFormatter = locale ? new Intl.NumberFormat(locale, currency ? { currency, style: "currency" } : void 0) : new Intl.NumberFormat();
  return numberFormatter.formatToParts(1000.1).reduce(function(prev2, curr, i) {
    if (curr.type === "currency") {
      if (i === 0) {
        return __assign(__assign({}, prev2), { currencySymbol: curr.value, prefix: curr.value });
      } else {
        return __assign(__assign({}, prev2), { currencySymbol: curr.value, suffix: curr.value });
      }
    }
    if (curr.type === "group") {
      return __assign(__assign({}, prev2), { groupSeparator: curr.value });
    }
    if (curr.type === "decimal") {
      return __assign(__assign({}, prev2), { decimalSeparator: curr.value });
    }
    return prev2;
  }, defaultConfig);
};
var isNumber = function(input2) {
  return RegExp(/\d/, "gi").test(input2);
};
var padTrimValue = function(value, decimalSeparator, decimalScale) {
  if (decimalSeparator === void 0) {
    decimalSeparator = ".";
  }
  if (decimalScale === void 0 || value === "" || value === void 0) {
    return value;
  }
  if (!value.match(/\d/g)) {
    return "";
  }
  var _a2 = value.split(decimalSeparator), int = _a2[0], decimals = _a2[1];
  if (decimalScale === 0) {
    return int;
  }
  var newValue = decimals || "";
  if (newValue.length < decimalScale) {
    while (newValue.length < decimalScale) {
      newValue += "0";
    }
  } else {
    newValue = newValue.slice(0, decimalScale);
  }
  return "".concat(int).concat(decimalSeparator).concat(newValue);
};
var repositionCursor = function(_a2) {
  var selectionStart = _a2.selectionStart, value = _a2.value, lastKeyStroke = _a2.lastKeyStroke, stateValue = _a2.stateValue, groupSeparator = _a2.groupSeparator;
  var cursorPosition = selectionStart;
  var modifiedValue = value;
  if (stateValue && cursorPosition) {
    var splitValue = value.split("");
    if (lastKeyStroke === "Backspace" && stateValue[cursorPosition] === groupSeparator) {
      splitValue.splice(cursorPosition - 1, 1);
      cursorPosition -= 1;
    }
    if (lastKeyStroke === "Delete" && stateValue[cursorPosition] === groupSeparator) {
      splitValue.splice(cursorPosition, 1);
      cursorPosition += 1;
    }
    modifiedValue = splitValue.join("");
    return { modifiedValue, cursorPosition };
  }
  return { modifiedValue, cursorPosition: selectionStart };
};
var CurrencyInput = reactExports.forwardRef(function(_a2, ref) {
  var _b2 = _a2.allowDecimals, allowDecimals = _b2 === void 0 ? true : _b2, _c2 = _a2.allowNegativeValue, allowNegativeValue = _c2 === void 0 ? true : _c2, id2 = _a2.id, name = _a2.name, className = _a2.className, customInput = _a2.customInput, decimalsLimit = _a2.decimalsLimit, defaultValue = _a2.defaultValue, _d = _a2.disabled, disabled = _d === void 0 ? false : _d, userMaxLength = _a2.maxLength, userValue = _a2.value, onValueChange = _a2.onValueChange, fixedDecimalLength = _a2.fixedDecimalLength, placeholder = _a2.placeholder, decimalScale = _a2.decimalScale, prefix2 = _a2.prefix, suffix = _a2.suffix, intlConfig = _a2.intlConfig, step = _a2.step, min2 = _a2.min, max2 = _a2.max, _e = _a2.disableGroupSeparators, disableGroupSeparators = _e === void 0 ? false : _e, _f = _a2.disableAbbreviations, disableAbbreviations = _f === void 0 ? false : _f, _decimalSeparator = _a2.decimalSeparator, _groupSeparator = _a2.groupSeparator, onChange2 = _a2.onChange, onFocus2 = _a2.onFocus, onBlur = _a2.onBlur, onKeyDown = _a2.onKeyDown, onKeyUp = _a2.onKeyUp, transformRawValue = _a2.transformRawValue, _g = _a2.formatValueOnBlur, formatValueOnBlur = _g === void 0 ? true : _g, props = __rest(_a2, ["allowDecimals", "allowNegativeValue", "id", "name", "className", "customInput", "decimalsLimit", "defaultValue", "disabled", "maxLength", "value", "onValueChange", "fixedDecimalLength", "placeholder", "decimalScale", "prefix", "suffix", "intlConfig", "step", "min", "max", "disableGroupSeparators", "disableAbbreviations", "decimalSeparator", "groupSeparator", "onChange", "onFocus", "onBlur", "onKeyDown", "onKeyUp", "transformRawValue", "formatValueOnBlur"]);
  if (_decimalSeparator && isNumber(_decimalSeparator)) {
    throw new Error("decimalSeparator cannot be a number");
  }
  if (_groupSeparator && isNumber(_groupSeparator)) {
    throw new Error("groupSeparator cannot be a number");
  }
  var localeConfig = reactExports.useMemo(function() {
    return getLocaleConfig(intlConfig);
  }, [intlConfig]);
  var decimalSeparator = _decimalSeparator || localeConfig.decimalSeparator || "";
  var groupSeparator = _groupSeparator || localeConfig.groupSeparator || "";
  if (decimalSeparator && groupSeparator && decimalSeparator === groupSeparator && disableGroupSeparators === false) {
    throw new Error("decimalSeparator cannot be the same as groupSeparator");
  }
  var formatValueOptions = {
    decimalSeparator,
    groupSeparator,
    disableGroupSeparators,
    intlConfig,
    prefix: prefix2 || localeConfig.prefix,
    suffix
  };
  var cleanValueOptions = {
    decimalSeparator,
    groupSeparator,
    allowDecimals,
    decimalsLimit: decimalsLimit || fixedDecimalLength || 2,
    allowNegativeValue,
    disableAbbreviations,
    prefix: prefix2 || localeConfig.prefix,
    transformRawValue
  };
  var _h = reactExports.useState(function() {
    return defaultValue != null ? formatValue(__assign(__assign({}, formatValueOptions), { decimalScale, value: String(defaultValue) })) : userValue != null ? formatValue(__assign(__assign({}, formatValueOptions), { decimalScale, value: String(userValue) })) : "";
  }), stateValue = _h[0], setStateValue = _h[1];
  var _j = reactExports.useState(false), dirty = _j[0], setDirty = _j[1];
  var _k = reactExports.useState(0), cursor2 = _k[0], setCursor = _k[1];
  var _l = reactExports.useState(0), changeCount = _l[0], setChangeCount = _l[1];
  var _m = reactExports.useState(null), lastKeyStroke = _m[0], setLastKeyStroke = _m[1];
  var inputRef = reactExports.useRef(null);
  reactExports.useImperativeHandle(ref, function() {
    return inputRef.current;
  });
  var processChange = function(value, selectionStart) {
    setDirty(true);
    var _a3 = repositionCursor({
      selectionStart,
      value,
      lastKeyStroke,
      stateValue,
      groupSeparator
    }), modifiedValue = _a3.modifiedValue, cursorPosition = _a3.cursorPosition;
    var stringValue = cleanValue$1(__assign({ value: modifiedValue }, cleanValueOptions));
    if (userMaxLength && stringValue.replace(/-/g, "").length > userMaxLength) {
      return;
    }
    if (stringValue === "" || stringValue === "-" || stringValue === decimalSeparator) {
      onValueChange && onValueChange(void 0, name, { float: null, formatted: "", value: "" });
      setStateValue(stringValue);
      setCursor(1);
      return;
    }
    var stringValueWithoutSeparator = decimalSeparator ? stringValue.replace(decimalSeparator, ".") : stringValue;
    var numberValue = parseFloat(stringValueWithoutSeparator);
    var formattedValue = formatValue(__assign({ value: stringValue }, formatValueOptions));
    if (cursorPosition != null) {
      var newCursor = cursorPosition + (formattedValue.length - value.length);
      newCursor = newCursor <= 0 ? prefix2 ? prefix2.length : 0 : newCursor;
      setCursor(newCursor);
      setChangeCount(changeCount + 1);
    }
    setStateValue(formattedValue);
    if (onValueChange) {
      var values = {
        float: numberValue,
        formatted: formattedValue,
        value: stringValue
      };
      onValueChange(stringValue, name, values);
    }
  };
  var handleOnChange = function(event) {
    var _a3 = event.target, value = _a3.value, selectionStart = _a3.selectionStart;
    processChange(value, selectionStart);
    onChange2 && onChange2(event);
  };
  var handleOnFocus = function(event) {
    onFocus2 && onFocus2(event);
    return stateValue ? stateValue.length : 0;
  };
  var handleOnBlur = function(event) {
    var value = event.target.value;
    var valueOnly = cleanValue$1(__assign({ value }, cleanValueOptions));
    if (valueOnly === "-" || valueOnly === decimalSeparator || !valueOnly) {
      setStateValue("");
      onBlur && onBlur(event);
      return;
    }
    var fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);
    var newValue = padTrimValue(fixedDecimals, decimalSeparator, decimalScale !== void 0 ? decimalScale : fixedDecimalLength);
    var numberValue = parseFloat(newValue.replace(decimalSeparator, "."));
    var formattedValue = formatValue(__assign(__assign({}, formatValueOptions), { value: newValue }));
    if (onValueChange && formatValueOnBlur) {
      onValueChange(newValue, name, {
        float: numberValue,
        formatted: formattedValue,
        value: newValue
      });
    }
    setStateValue(formattedValue);
    onBlur && onBlur(event);
  };
  var handleOnKeyDown = function(event) {
    var key = event.key;
    setLastKeyStroke(key);
    if (step && (key === "ArrowUp" || key === "ArrowDown")) {
      event.preventDefault();
      setCursor(stateValue.length);
      var currentValue = parseFloat(userValue != null ? String(userValue).replace(decimalSeparator, ".") : cleanValue$1(__assign({ value: stateValue }, cleanValueOptions))) || 0;
      var newValue = key === "ArrowUp" ? currentValue + step : currentValue - step;
      if (min2 !== void 0 && newValue < Number(min2)) {
        return;
      }
      if (max2 !== void 0 && newValue > Number(max2)) {
        return;
      }
      var fixedLength = String(step).includes(".") ? Number(String(step).split(".")[1].length) : void 0;
      processChange(String(fixedLength ? newValue.toFixed(fixedLength) : newValue).replace(".", decimalSeparator));
    }
    onKeyDown && onKeyDown(event);
  };
  var handleOnKeyUp = function(event) {
    var key = event.key, selectionStart = event.currentTarget.selectionStart;
    if (key !== "ArrowUp" && key !== "ArrowDown" && stateValue !== "-") {
      var suffix_1 = getSuffix(stateValue, { groupSeparator, decimalSeparator });
      if (suffix_1 && selectionStart && selectionStart > stateValue.length - suffix_1.length) {
        if (inputRef.current) {
          var newCursor = stateValue.length - suffix_1.length;
          inputRef.current.setSelectionRange(newCursor, newCursor);
        }
      }
    }
    onKeyUp && onKeyUp(event);
  };
  reactExports.useEffect(function() {
    if (userValue == null && defaultValue == null) {
      setStateValue("");
    }
  }, [defaultValue, userValue]);
  reactExports.useEffect(function() {
    if (dirty && stateValue !== "-" && inputRef.current && document.activeElement === inputRef.current) {
      inputRef.current.setSelectionRange(cursor2, cursor2);
    }
  }, [stateValue, cursor2, inputRef, dirty, changeCount]);
  var getRenderValue = function() {
    if (userValue != null && stateValue !== "-" && (!decimalSeparator || stateValue !== decimalSeparator)) {
      return formatValue(__assign(__assign({}, formatValueOptions), { decimalScale: dirty ? void 0 : decimalScale, value: String(userValue) }));
    }
    return stateValue;
  };
  var inputProps = __assign({ type: "text", inputMode: "decimal", id: id2, name, className, onChange: handleOnChange, onBlur: handleOnBlur, onFocus: handleOnFocus, onKeyDown: handleOnKeyDown, onKeyUp: handleOnKeyUp, placeholder, disabled, value: getRenderValue(), ref: inputRef }, props);
  if (customInput) {
    var CustomInput = customInput;
    return React.createElement(CustomInput, __assign({}, inputProps));
  }
  return React.createElement("input", __assign({}, inputProps));
});
CurrencyInput.displayName = "CurrencyInput";
function c$1(e2, u2, c2) {
  var i = this, a = reactExports.useRef(null), o = reactExports.useRef(0), f2 = reactExports.useRef(null), l2 = reactExports.useRef([]), v2 = reactExports.useRef(), m2 = reactExports.useRef(), d2 = reactExports.useRef(e2), g2 = reactExports.useRef(true);
  d2.current = e2;
  var p2 = "undefined" != typeof window, w2 = !u2 && 0 !== u2 && p2;
  if ("function" != typeof e2)
    throw new TypeError("Expected a function");
  u2 = +u2 || 0;
  var s = !!(c2 = c2 || {}).leading, x2 = !("trailing" in c2) || !!c2.trailing, h3 = "maxWait" in c2, y2 = "debounceOnServer" in c2 && !!c2.debounceOnServer, F2 = h3 ? Math.max(+c2.maxWait || 0, u2) : null;
  reactExports.useEffect(function() {
    return g2.current = true, function() {
      g2.current = false;
    };
  }, []);
  var A2 = reactExports.useMemo(function() {
    var r2 = function(r3) {
      var n3 = l2.current, t3 = v2.current;
      return l2.current = v2.current = null, o.current = r3, m2.current = d2.current.apply(t3, n3);
    }, n2 = function(r3, n3) {
      w2 && cancelAnimationFrame(f2.current), f2.current = w2 ? requestAnimationFrame(r3) : setTimeout(r3, n3);
    }, t2 = function(r3) {
      if (!g2.current)
        return false;
      var n3 = r3 - a.current;
      return !a.current || n3 >= u2 || n3 < 0 || h3 && r3 - o.current >= F2;
    }, e3 = function(n3) {
      return f2.current = null, x2 && l2.current ? r2(n3) : (l2.current = v2.current = null, m2.current);
    }, c3 = function r3() {
      var c4 = Date.now();
      if (t2(c4))
        return e3(c4);
      if (g2.current) {
        var i2 = u2 - (c4 - a.current), f3 = h3 ? Math.min(i2, F2 - (c4 - o.current)) : i2;
        n2(r3, f3);
      }
    }, A3 = function() {
      if (p2 || y2) {
        var e4 = Date.now(), d3 = t2(e4);
        if (l2.current = [].slice.call(arguments), v2.current = i, a.current = e4, d3) {
          if (!f2.current && g2.current)
            return o.current = a.current, n2(c3, u2), s ? r2(a.current) : m2.current;
          if (h3)
            return n2(c3, u2), r2(a.current);
        }
        return f2.current || n2(c3, u2), m2.current;
      }
    };
    return A3.cancel = function() {
      f2.current && (w2 ? cancelAnimationFrame(f2.current) : clearTimeout(f2.current)), o.current = 0, l2.current = a.current = v2.current = f2.current = null;
    }, A3.isPending = function() {
      return !!f2.current;
    }, A3.flush = function() {
      return f2.current ? e3(Date.now()) : m2.current;
    }, A3;
  }, [s, h3, u2, F2, x2, w2, p2, y2]);
  return A2;
}
const labelStyle = {
  paddingRight: "15px",
  midWidth: "200px",
  paddingTop: "10px",
  paddingBottom: "10px"
};
const inputDivStyle = {
  textAlign: "left",
  display: "flex",
  alignItems: "center",
  paddingTop: "10px",
  paddingBottom: "10px"
};
const inputStyle$1 = {
  width: "250px",
  padding: "8px",
  height: "30px",
  border: "1px solid #ccc",
  borderRadius: "4px",
  textAlign: "left"
};
const InputBox = ({ defaultValue, setIncome, label }) => {
  const debounced = c$1(
    (value) => {
      if (value !== void 0) {
        setIncome(Number(value));
      }
    },
    350
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { style: inputDivStyle, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { style: labelStyle, children: label }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      CurrencyInput,
      {
        style: inputStyle$1,
        allowDecimals: false,
        defaultValue,
        prefix: "$",
        onValueChange: debounced,
        step: 1e3
      }
    )
  ] });
};
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function toPrimitive(t2, r2) {
  if ("object" != _typeof(t2) || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i = e2.call(t2, r2 || "default");
    if ("object" != _typeof(i))
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t2);
}
function toPropertyKey(t2) {
  var i = toPrimitive(t2, "string");
  return "symbol" == _typeof(i) ? i : String(i);
}
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread2(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
      _defineProperty(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i, u2, a = [], f2 = true, o = false;
    try {
      if (i = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o)
          throw n2;
      }
    }
    return a;
  }
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose$1(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
var _excluded$6 = ["defaultInputValue", "defaultMenuIsOpen", "defaultValue", "inputValue", "menuIsOpen", "onChange", "onInputChange", "onMenuClose", "onMenuOpen", "value"];
function useStateManager(_ref3) {
  var _ref$defaultInputValu = _ref3.defaultInputValue, defaultInputValue = _ref$defaultInputValu === void 0 ? "" : _ref$defaultInputValu, _ref$defaultMenuIsOpe = _ref3.defaultMenuIsOpen, defaultMenuIsOpen = _ref$defaultMenuIsOpe === void 0 ? false : _ref$defaultMenuIsOpe, _ref$defaultValue = _ref3.defaultValue, defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue, propsInputValue = _ref3.inputValue, propsMenuIsOpen = _ref3.menuIsOpen, propsOnChange = _ref3.onChange, propsOnInputChange = _ref3.onInputChange, propsOnMenuClose = _ref3.onMenuClose, propsOnMenuOpen = _ref3.onMenuOpen, propsValue = _ref3.value, restSelectProps = _objectWithoutProperties(_ref3, _excluded$6);
  var _useState = reactExports.useState(propsInputValue !== void 0 ? propsInputValue : defaultInputValue), _useState2 = _slicedToArray(_useState, 2), stateInputValue = _useState2[0], setStateInputValue = _useState2[1];
  var _useState3 = reactExports.useState(propsMenuIsOpen !== void 0 ? propsMenuIsOpen : defaultMenuIsOpen), _useState4 = _slicedToArray(_useState3, 2), stateMenuIsOpen = _useState4[0], setStateMenuIsOpen = _useState4[1];
  var _useState5 = reactExports.useState(propsValue !== void 0 ? propsValue : defaultValue), _useState6 = _slicedToArray(_useState5, 2), stateValue = _useState6[0], setStateValue = _useState6[1];
  var onChange2 = reactExports.useCallback(function(value2, actionMeta) {
    if (typeof propsOnChange === "function") {
      propsOnChange(value2, actionMeta);
    }
    setStateValue(value2);
  }, [propsOnChange]);
  var onInputChange = reactExports.useCallback(function(value2, actionMeta) {
    var newValue;
    if (typeof propsOnInputChange === "function") {
      newValue = propsOnInputChange(value2, actionMeta);
    }
    setStateInputValue(newValue !== void 0 ? newValue : value2);
  }, [propsOnInputChange]);
  var onMenuOpen = reactExports.useCallback(function() {
    if (typeof propsOnMenuOpen === "function") {
      propsOnMenuOpen();
    }
    setStateMenuIsOpen(true);
  }, [propsOnMenuOpen]);
  var onMenuClose = reactExports.useCallback(function() {
    if (typeof propsOnMenuClose === "function") {
      propsOnMenuClose();
    }
    setStateMenuIsOpen(false);
  }, [propsOnMenuClose]);
  var inputValue = propsInputValue !== void 0 ? propsInputValue : stateInputValue;
  var menuIsOpen = propsMenuIsOpen !== void 0 ? propsMenuIsOpen : stateMenuIsOpen;
  var value = propsValue !== void 0 ? propsValue : stateValue;
  return _objectSpread2(_objectSpread2({}, restSelectProps), {}, {
    inputValue,
    menuIsOpen,
    onChange: onChange2,
    onInputChange,
    onMenuClose,
    onMenuOpen,
    value
  });
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _isNativeReflectConstruct() {
  try {
    var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t3) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t2;
  })();
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
}
function createStyleElement(options2) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options2.key);
  if (options2.nonce !== void 0) {
    tag.setAttribute("nonce", options2.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var StyleSheet = /* @__PURE__ */ function() {
  function StyleSheet2(options2) {
    var _this = this;
    this._insertTag = function(tag) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag, before);
      _this.tags.push(tag);
    };
    this.isSpeedy = options2.speedy === void 0 ? true : options2.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options2.nonce;
    this.key = options2.key;
    this.container = options2.container;
    this.prepend = options2.prepend;
    this.insertionPoint = options2.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet2.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert(rule) {
    if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag = this.tags[this.tags.length - 1];
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);
      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e2) {
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }
    this.ctr++;
  };
  _proto.flush = function flush() {
    this.tags.forEach(function(tag) {
      return tag.parentNode && tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
  };
  return StyleSheet2;
}();
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";
var abs = Math.abs;
var from = String.fromCharCode;
var assign = Object.assign;
function hash(value, length2) {
  return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index2) {
  return value.charCodeAt(index2) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback2) {
  return array.map(callback2).join("");
}
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root9, parent, type, props, children, length2) {
  return { value, root: root9, parent, type, props, children, line, column, length: length2, return: "" };
}
function copy(root9, props) {
  return assign(node("", null, null, "", null, null, 0), root9, { length: -root9.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index2, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index2, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index2) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index2, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index2) {
  while (!token(peek()))
    next();
  return slice(index2, position);
}
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root9, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index2 = 0;
  var offset = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root9, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index2++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset:
            if (ampersand == -1)
              characters2 = replace(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference = ruleset(characters2, root9, parent, index2, offset, rules, points, type, props = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset === 0)
                parse(characters2, root9, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index2 = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root9, parent, index2, offset, rules, points, type, props, children, length2) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size = sizeof(rule);
  for (var i = 0, j = 0, k2 = 0; i < index2; ++i)
    for (var x2 = 0, y2 = substr(value, post + 1, post = abs(j = points[i])), z2 = value; x2 < size; ++x2)
      if (z2 = trim(j > 0 ? rule[x2] + " " + y2 : replace(y2, /&\f/g, rule[x2])))
        props[k2++] = z2;
  return node(value, root9, parent, offset === 0 ? RULESET : type, props, children, length2);
}
function comment(value, root9, parent) {
  return node(value, root9, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root9, parent, length2) {
  return node(value, root9, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
}
function serialize(children, callback2) {
  var output = "";
  var length2 = sizeof(children);
  for (var i = 0; i < length2; i++)
    output += callback2(children[i], i, children, callback2) || "";
  return output;
}
function stringify(element, index2, children, callback2) {
  switch (element.type) {
    case LAYER:
      if (element.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback2) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback2)) ? element.return = element.value + "{" + children + "}" : "";
}
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index2, children, callback2) {
    var output = "";
    for (var i = 0; i < length2; i++)
      output += collection[i](element, index2, children, callback2) || "";
    return output;
  };
}
function rulesheet(callback2) {
  return function(element) {
    if (!element.root) {
      if (element = element.return)
        callback2(element);
    }
  };
}
function memoize(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn(arg);
    return cache[arg];
  };
}
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
  var previous = 0;
  var character2 = 0;
  while (true) {
    previous = character2;
    character2 = peek();
    if (previous === 38 && character2 === 12) {
      points[index2] = 1;
    }
    if (token(character2)) {
      break;
    }
    next();
  }
  return slice(begin, position);
};
var toRules = function toRules2(parsed, points) {
  var index2 = -1;
  var character2 = 44;
  do {
    switch (token(character2)) {
      case 0:
        if (character2 === 38 && peek() === 12) {
          points[index2] = 1;
        }
        parsed[index2] += identifierWithPointTracking(position - 1, points, index2);
        break;
      case 2:
        parsed[index2] += delimit(character2);
        break;
      case 4:
        if (character2 === 44) {
          parsed[++index2] = peek() === 58 ? "&\f" : "";
          points[index2] = parsed[index2].length;
          break;
        }
      default:
        parsed[index2] += from(character2);
    }
  } while (character2 = next());
  return parsed;
};
var getRules = function getRules2(value, points) {
  return dealloc(toRules(alloc(value), points));
};
var fixedElements = /* @__PURE__ */ new WeakMap();
var compat = function compat2(element) {
  if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }
  var value = element.value, parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;
  while (parent.type !== "rule") {
    parent = parent.parent;
    if (!parent)
      return;
  }
  if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
    return;
  }
  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;
  for (var i = 0, k2 = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k2++) {
      element.props[k2] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel2(element) {
  if (element.type === "decl") {
    var value = element.value;
    if (
      // charcode for l
      value.charCodeAt(0) === 108 && // charcode for b
      value.charCodeAt(2) === 98
    ) {
      element["return"] = "";
      element.value = "";
    }
  }
};
function prefix(value, length2) {
  switch (hash(value, length2)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6)
        switch (charat(value, length2 + 1)) {
          case 109:
            if (charat(value, length2 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
        }
      break;
    case 4949:
      if (charat(value, length2 + 1) !== 115)
        break;
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        case 107:
          return replace(value, ":", ":" + WEBKIT) + value;
        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    case 5936:
      switch (charat(value, length2 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}
var prefixer = function prefixer2(element, index2, children, callback2) {
  if (element.length > -1) {
    if (!element["return"])
      switch (element.type) {
        case DECLARATION:
          element["return"] = prefix(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize([copy(element, {
            value: replace(element.value, "@", "@" + WEBKIT)
          })], callback2);
        case RULESET:
          if (element.length)
            return combine(element.props, function(value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize([copy(element, {
                    props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                  })], callback2);
                case "::placeholder":
                  return serialize([copy(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                  }), copy(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                  }), copy(element, {
                    props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                  })], callback2);
              }
              return "";
            });
      }
  }
};
var defaultStylisPlugins = [prefixer];
var createCache = function createCache2(options2) {
  var key = options2.key;
  if (key === "css") {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(ssrStyles, function(node2) {
      var dataEmotionAttribute = node2.getAttribute("data-emotion");
      if (dataEmotionAttribute.indexOf(" ") === -1) {
        return;
      }
      document.head.appendChild(node2);
      node2.setAttribute("data-s", "");
    });
  }
  var stylisPlugins = options2.stylisPlugins || defaultStylisPlugins;
  var inserted = {};
  var container;
  var nodesToHydrate = [];
  {
    container = options2.container || document.head;
    Array.prototype.forEach.call(
      // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
      function(node2) {
        var attrib = node2.getAttribute("data-emotion").split(" ");
        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }
        nodesToHydrate.push(node2);
      }
    );
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  {
    var currentSheet;
    var finalizingPlugins = [stringify, rulesheet(function(rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis2(styles2) {
      return serialize(compile(styles2), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }
  var cache = {
    key,
    sheet: new StyleSheet({
      key,
      container,
      nonce: options2.nonce,
      speedy: options2.speedy,
      prepend: options2.prepend,
      insertionPoint: options2.insertionPoint
    }),
    nonce: options2.nonce,
    inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};
var reactIs$1 = { exports: {} };
var reactIs_production_min = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w$1 = b ? Symbol.for("react.fundamental") : 60117, x = b ? Symbol.for("react.responder") : 60118, y = b ? Symbol.for("react.scope") : 60119;
function z(a) {
  if ("object" === typeof a && null !== a) {
    var u2 = a.$$typeof;
    switch (u2) {
      case c:
        switch (a = a.type, a) {
          case l:
          case m:
          case e:
          case g:
          case f:
          case p:
            return a;
          default:
            switch (a = a && a.$$typeof, a) {
              case k:
              case n:
              case t:
              case r:
              case h:
                return a;
              default:
                return u2;
            }
        }
      case d:
        return u2;
    }
  }
}
function A(a) {
  return z(a) === m;
}
reactIs_production_min.AsyncMode = l;
reactIs_production_min.ConcurrentMode = m;
reactIs_production_min.ContextConsumer = k;
reactIs_production_min.ContextProvider = h;
reactIs_production_min.Element = c;
reactIs_production_min.ForwardRef = n;
reactIs_production_min.Fragment = e;
reactIs_production_min.Lazy = t;
reactIs_production_min.Memo = r;
reactIs_production_min.Portal = d;
reactIs_production_min.Profiler = g;
reactIs_production_min.StrictMode = f;
reactIs_production_min.Suspense = p;
reactIs_production_min.isAsyncMode = function(a) {
  return A(a) || z(a) === l;
};
reactIs_production_min.isConcurrentMode = A;
reactIs_production_min.isContextConsumer = function(a) {
  return z(a) === k;
};
reactIs_production_min.isContextProvider = function(a) {
  return z(a) === h;
};
reactIs_production_min.isElement = function(a) {
  return "object" === typeof a && null !== a && a.$$typeof === c;
};
reactIs_production_min.isForwardRef = function(a) {
  return z(a) === n;
};
reactIs_production_min.isFragment = function(a) {
  return z(a) === e;
};
reactIs_production_min.isLazy = function(a) {
  return z(a) === t;
};
reactIs_production_min.isMemo = function(a) {
  return z(a) === r;
};
reactIs_production_min.isPortal = function(a) {
  return z(a) === d;
};
reactIs_production_min.isProfiler = function(a) {
  return z(a) === g;
};
reactIs_production_min.isStrictMode = function(a) {
  return z(a) === f;
};
reactIs_production_min.isSuspense = function(a) {
  return z(a) === p;
};
reactIs_production_min.isValidElementType = function(a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w$1 || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
};
reactIs_production_min.typeOf = z;
{
  reactIs$1.exports = reactIs_production_min;
}
var reactIsExports = reactIs$1.exports;
var reactIs = reactIsExports;
var FORWARD_REF_STATICS = {
  "$$typeof": true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  "$$typeof": true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames2) {
  var rawClassName = "";
  classNames2.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;
  if (
    // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false) && cache.registered[className] === void 0
  ) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === void 0) {
    var current = serialized;
    do {
      cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
      current = current.next;
    } while (current !== void 0);
  }
};
function murmur2(str) {
  var h3 = 0;
  var k2, i = 0, len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k2 = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k2 = /* Math.imul(k, m): */
    (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
    k2 ^= /* k >>> r: */
    k2 >>> 24;
    h3 = /* Math.imul(k, m): */
    (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h3 ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h3 ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h3 ^= str.charCodeAt(i) & 255;
      h3 = /* Math.imul(h, m): */
      (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
  }
  h3 ^= h3 >>> 13;
  h3 = /* Math.imul(h, m): */
  (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
  return ((h3 ^ h3 >>> 15) >>> 0).toString(36);
}
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty2(property) {
  return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue2(value) {
  return value != null && typeof value !== "boolean";
};
var processStyleName = /* @__PURE__ */ memoize(function(styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue2(key, value) {
  switch (key) {
    case "animation":
    case "animationName": {
      if (typeof value === "string") {
        return value.replace(animationRegex, function(match2, p1, p2) {
          cursor = {
            name: p1,
            styles: p2,
            next: cursor
          };
          return p1;
        });
      }
    }
  }
  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
    return value + "px";
  }
  return value;
};
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  if (interpolation.__emotion_styles !== void 0) {
    return interpolation;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      if (interpolation.anim === 1) {
        cursor = {
          name: interpolation.name,
          styles: interpolation.styles,
          next: cursor
        };
        return interpolation.name;
      }
      if (interpolation.styles !== void 0) {
        var next2 = interpolation.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles2 = interpolation.styles + ";";
        return styles2;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      }
      break;
    }
  }
  if (registered == null) {
    return interpolation;
  }
  var cached = registered[interpolation];
  return cached !== void 0 ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string = "";
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];
      if (typeof value !== "object") {
        if (registered != null && registered[value] !== void 0) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === "NO_COMPONENT_SELECTOR" && false) {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (_key) {
            case "animation":
            case "animationName": {
              string += processStyleName(_key) + ":" + interpolated + ";";
              break;
            }
            default: {
              string += _key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var cursor;
var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
    return args[0];
  }
  var stringMode = true;
  var styles2 = "";
  cursor = void 0;
  var strings = args[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles2 += handleInterpolation(mergedProps, registered, strings);
  } else {
    styles2 += strings[0];
  }
  for (var i = 1; i < args.length; i++) {
    styles2 += handleInterpolation(mergedProps, registered, args[i]);
    if (stringMode) {
      styles2 += strings[i];
    }
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match2;
  while ((match2 = labelPattern.exec(styles2)) !== null) {
    identifierName += "-" + // $FlowFixMe we know it's not null
    match2[1];
  }
  var name = murmur2(styles2) + identifierName;
  return {
    name,
    styles: styles2,
    next: cursor
  };
};
var syncFallback = function syncFallback2(create) {
  return create();
};
var useInsertionEffect = React$1["useInsertionEffect"] ? React$1["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
var hasOwn = {}.hasOwnProperty;
var EmotionCacheContext = /* @__PURE__ */ reactExports.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
    key: "css"
  }) : null
);
EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache2(func) {
  return /* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
    var cache = reactExports.useContext(EmotionCacheContext);
    return func(props, cache, ref);
  });
};
var ThemeContext = /* @__PURE__ */ reactExports.createContext({});
var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var createEmotionProps = function createEmotionProps2(type, props) {
  var newProps = {};
  for (var key in props) {
    if (hasOwn.call(props, key)) {
      newProps[key] = props[key];
    }
  }
  newProps[typePropName] = type;
  return newProps;
};
var Insertion = function Insertion2(_ref3) {
  var cache = _ref3.cache, serialized = _ref3.serialized, isStringTag = _ref3.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag);
  });
  return null;
};
var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
  var cssProp = props.css;
  if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
    cssProp = cache.registered[cssProp];
  }
  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = "";
  if (typeof props.className === "string") {
    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }
  var serialized = serializeStyles(registeredStyles, void 0, reactExports.useContext(ThemeContext));
  className += cache.key + "-" + serialized.name;
  var newProps = {};
  for (var key in props) {
    if (hasOwn.call(props, key) && key !== "css" && key !== typePropName && true) {
      newProps[key] = props[key];
    }
  }
  newProps.ref = ref;
  newProps.className = className;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion, {
    cache,
    serialized,
    isStringTag: typeof WrappedComponent === "string"
  }), /* @__PURE__ */ reactExports.createElement(WrappedComponent, newProps));
});
var Emotion$1 = Emotion;
var jsx = function jsx2(type, props) {
  var args = arguments;
  if (props == null || !hasOwn.call(props, "css")) {
    return reactExports.createElement.apply(void 0, args);
  }
  var argsLength = args.length;
  var createElementArgArray = new Array(argsLength);
  createElementArgArray[0] = Emotion$1;
  createElementArgArray[1] = createEmotionProps(type, props);
  for (var i = 2; i < argsLength; i++) {
    createElementArgArray[i] = args[i];
  }
  return reactExports.createElement.apply(null, createElementArgArray);
};
function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return serializeStyles(args);
}
var keyframes = function keyframes2() {
  var insertable = css.apply(void 0, arguments);
  var name = "animation-" + insertable.name;
  return {
    name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
};
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}
const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = (v2) => ({
  x: v2,
  y: v2
});
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
function getNodeName(node2) {
  if (isNode(node2)) {
    return (node2.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node2) {
  var _node$ownerDocument;
  return (node2 == null || (_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node2) {
  var _ref3;
  return (_ref3 = (isNode(node2) ? node2.ownerDocument : node2.document) || window.document) == null ? void 0 : _ref3.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node2) {
  return ["html", "body", "#document"].includes(getNodeName(node2));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getParentNode(node2) {
  if (getNodeName(node2) === "html") {
    return node2;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node2.assignedSlot || // DOM Element detected.
    node2.parentNode || // ShadowRoot detected.
    isShadowRoot(node2) && node2.host || // Fallback.
    getDocumentElement(node2)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node2) {
  const parentNode = getParentNode(node2);
  if (isLastTraversableNode(parentNode)) {
    return node2.ownerDocument ? node2.ownerDocument.body : node2.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node2, list2, traverseIframes) {
  var _node$ownerDocument2;
  if (list2 === void 0) {
    list2 = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node2);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node2.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list2.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list2.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getCssDimensions(element) {
  const css4 = getComputedStyle$1(element);
  let width = parseFloat(css4.width) || 0;
  let height = parseFloat(css4.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x2 = ($ ? round(rect.width) : rect.width) / width;
  let y2 = ($ ? round(rect.height) : rect.height) / height;
  if (!x2 || !Number.isFinite(x2)) {
    x2 = 1;
  }
  if (!y2 || !Number.isFinite(y2)) {
    y2 = 1;
  }
  return {
    x: x2,
    y: y2
  };
}
const noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x2 = (clientRect.left + visualOffsets.x) / scale.x;
  let y2 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css4 = getComputedStyle$1(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css4.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css4.paddingTop)) * iframeScale.y;
      x2 *= iframeScale.x;
      y2 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x2 += left;
      y2 += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x2,
    y: y2
  });
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root9 = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip2, threshold) {
    if (skip2 === void 0) {
      skip2 = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip2) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root9.clientWidth - (left + width));
    const insetBottom = floor(root9.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options2 = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options2,
        // Handle <iframe>s
        root: root9.ownerDocument
      });
    } catch (e2) {
      io = new IntersectionObserver(handleObserve, options2);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options2;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref3) => {
      let [firstEntry] = _ref3;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var index = reactExports.useLayoutEffect;
var _excluded$4 = ["className", "clearValue", "cx", "getStyles", "getClassNames", "getValue", "hasValue", "isMulti", "isRtl", "options", "selectOption", "selectProps", "setValue", "theme"];
var noop = function noop2() {
};
function applyPrefixToName(prefix2, name) {
  if (!name) {
    return prefix2;
  } else if (name[0] === "-") {
    return prefix2 + name;
  } else {
    return prefix2 + "__" + name;
  }
}
function classNames(prefix2, state2) {
  for (var _len = arguments.length, classNameList = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    classNameList[_key - 2] = arguments[_key];
  }
  var arr = [].concat(classNameList);
  if (state2 && prefix2) {
    for (var key in state2) {
      if (state2.hasOwnProperty(key) && state2[key]) {
        arr.push("".concat(applyPrefixToName(prefix2, key)));
      }
    }
  }
  return arr.filter(function(i) {
    return i;
  }).map(function(i) {
    return String(i).trim();
  }).join(" ");
}
var cleanValue = function cleanValue2(value) {
  if (isArray(value))
    return value.filter(Boolean);
  if (_typeof(value) === "object" && value !== null)
    return [value];
  return [];
};
var cleanCommonProps = function cleanCommonProps2(props) {
  props.className;
  props.clearValue;
  props.cx;
  props.getStyles;
  props.getClassNames;
  props.getValue;
  props.hasValue;
  props.isMulti;
  props.isRtl;
  props.options;
  props.selectOption;
  props.selectProps;
  props.setValue;
  props.theme;
  var innerProps = _objectWithoutProperties(props, _excluded$4);
  return _objectSpread2({}, innerProps);
};
var getStyleProps = function getStyleProps2(props, name, classNamesState) {
  var cx = props.cx, getStyles = props.getStyles, getClassNames = props.getClassNames, className = props.className;
  return {
    css: getStyles(name, props),
    className: cx(classNamesState !== null && classNamesState !== void 0 ? classNamesState : {}, getClassNames(name, props), className)
  };
};
function isDocumentElement(el2) {
  return [document.documentElement, document.body, window].indexOf(el2) > -1;
}
function normalizedHeight(el2) {
  if (isDocumentElement(el2)) {
    return window.innerHeight;
  }
  return el2.clientHeight;
}
function getScrollTop(el2) {
  if (isDocumentElement(el2)) {
    return window.pageYOffset;
  }
  return el2.scrollTop;
}
function scrollTo(el2, top) {
  if (isDocumentElement(el2)) {
    window.scrollTo(0, top);
    return;
  }
  el2.scrollTop = top;
}
function getScrollParent(element) {
  var style = getComputedStyle(element);
  var excludeStaticParent = style.position === "absolute";
  var overflowRx = /(auto|scroll)/;
  if (style.position === "fixed")
    return document.documentElement;
  for (var parent = element; parent = parent.parentElement; ) {
    style = getComputedStyle(parent);
    if (excludeStaticParent && style.position === "static") {
      continue;
    }
    if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {
      return parent;
    }
  }
  return document.documentElement;
}
function easeOutCubic(t2, b2, c2, d2) {
  return c2 * ((t2 = t2 / d2 - 1) * t2 * t2 + 1) + b2;
}
function animatedScrollTo(element, to2) {
  var duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 200;
  var callback2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : noop;
  var start = getScrollTop(element);
  var change = to2 - start;
  var increment = 10;
  var currentTime = 0;
  function animateScroll() {
    currentTime += increment;
    var val = easeOutCubic(currentTime, start, change, duration);
    scrollTo(element, val);
    if (currentTime < duration) {
      window.requestAnimationFrame(animateScroll);
    } else {
      callback2(element);
    }
  }
  animateScroll();
}
function scrollIntoView(menuEl, focusedEl) {
  var menuRect = menuEl.getBoundingClientRect();
  var focusedRect = focusedEl.getBoundingClientRect();
  var overScroll = focusedEl.offsetHeight / 3;
  if (focusedRect.bottom + overScroll > menuRect.bottom) {
    scrollTo(menuEl, Math.min(focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll, menuEl.scrollHeight));
  } else if (focusedRect.top - overScroll < menuRect.top) {
    scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));
  }
}
function getBoundingClientObj(element) {
  var rect = element.getBoundingClientRect();
  return {
    bottom: rect.bottom,
    height: rect.height,
    left: rect.left,
    right: rect.right,
    top: rect.top,
    width: rect.width
  };
}
function isTouchCapable() {
  try {
    document.createEvent("TouchEvent");
    return true;
  } catch (e2) {
    return false;
  }
}
function isMobileDevice() {
  try {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  } catch (e2) {
    return false;
  }
}
var passiveOptionAccessed = false;
var options = {
  get passive() {
    return passiveOptionAccessed = true;
  }
};
var w = typeof window !== "undefined" ? window : {};
if (w.addEventListener && w.removeEventListener) {
  w.addEventListener("p", noop, options);
  w.removeEventListener("p", noop, false);
}
var supportsPassiveEvents = passiveOptionAccessed;
function notNullish(item2) {
  return item2 != null;
}
function isArray(arg) {
  return Array.isArray(arg);
}
function valueTernary(isMulti, multiValue, singleValue) {
  return isMulti ? multiValue : singleValue;
}
function singleValueAsValue(singleValue) {
  return singleValue;
}
function multiValueAsValue(multiValue) {
  return multiValue;
}
var removeProps = function removeProps2(propsObj) {
  for (var _len2 = arguments.length, properties = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    properties[_key2 - 1] = arguments[_key2];
  }
  var propsMap = Object.entries(propsObj).filter(function(_ref3) {
    var _ref22 = _slicedToArray(_ref3, 1), key = _ref22[0];
    return !properties.includes(key);
  });
  return propsMap.reduce(function(newProps, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2), key = _ref4[0], val = _ref4[1];
    newProps[key] = val;
    return newProps;
  }, {});
};
var _excluded$3 = ["children", "innerProps"], _excluded2$1 = ["children", "innerProps"];
function getMenuPlacement(_ref3) {
  var preferredMaxHeight = _ref3.maxHeight, menuEl = _ref3.menuEl, minHeight = _ref3.minHeight, preferredPlacement = _ref3.placement, shouldScroll = _ref3.shouldScroll, isFixedPosition = _ref3.isFixedPosition, controlHeight2 = _ref3.controlHeight;
  var scrollParent = getScrollParent(menuEl);
  var defaultState = {
    placement: "bottom",
    maxHeight: preferredMaxHeight
  };
  if (!menuEl || !menuEl.offsetParent)
    return defaultState;
  var _scrollParent$getBoun = scrollParent.getBoundingClientRect(), scrollHeight = _scrollParent$getBoun.height;
  var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(), menuBottom = _menuEl$getBoundingCl.bottom, menuHeight = _menuEl$getBoundingCl.height, menuTop = _menuEl$getBoundingCl.top;
  var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(), containerTop = _menuEl$offsetParent$.top;
  var viewHeight = isFixedPosition ? window.innerHeight : normalizedHeight(scrollParent);
  var scrollTop = getScrollTop(scrollParent);
  var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
  var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
  var viewSpaceAbove = containerTop - marginTop;
  var viewSpaceBelow = viewHeight - menuTop;
  var scrollSpaceAbove = viewSpaceAbove + scrollTop;
  var scrollSpaceBelow = scrollHeight - scrollTop - menuTop;
  var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
  var scrollUp = scrollTop + menuTop - marginTop;
  var scrollDuration = 160;
  switch (preferredPlacement) {
    case "auto":
    case "bottom":
      if (viewSpaceBelow >= menuHeight) {
        return {
          placement: "bottom",
          maxHeight: preferredMaxHeight
        };
      }
      if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
        }
        return {
          placement: "bottom",
          maxHeight: preferredMaxHeight
        };
      }
      if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
        }
        var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
        return {
          placement: "bottom",
          maxHeight: constrainedHeight
        };
      }
      if (preferredPlacement === "auto" || isFixedPosition) {
        var _constrainedHeight = preferredMaxHeight;
        var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;
        if (spaceAbove >= minHeight) {
          _constrainedHeight = Math.min(spaceAbove - marginBottom - controlHeight2, preferredMaxHeight);
        }
        return {
          placement: "top",
          maxHeight: _constrainedHeight
        };
      }
      if (preferredPlacement === "bottom") {
        if (shouldScroll) {
          scrollTo(scrollParent, scrollDown);
        }
        return {
          placement: "bottom",
          maxHeight: preferredMaxHeight
        };
      }
      break;
    case "top":
      if (viewSpaceAbove >= menuHeight) {
        return {
          placement: "top",
          maxHeight: preferredMaxHeight
        };
      }
      if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: "top",
          maxHeight: preferredMaxHeight
        };
      }
      if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
        var _constrainedHeight2 = preferredMaxHeight;
        if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
          _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
        }
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: "top",
          maxHeight: _constrainedHeight2
        };
      }
      return {
        placement: "bottom",
        maxHeight: preferredMaxHeight
      };
    default:
      throw new Error('Invalid placement provided "'.concat(preferredPlacement, '".'));
  }
  return defaultState;
}
function alignToControl(placement) {
  var placementToCSSProp = {
    bottom: "top",
    top: "bottom"
  };
  return placement ? placementToCSSProp[placement] : "bottom";
}
var coercePlacement = function coercePlacement2(p2) {
  return p2 === "auto" ? "bottom" : p2;
};
var menuCSS = function menuCSS2(_ref22, unstyled) {
  var _objectSpread2$1;
  var placement = _ref22.placement, _ref2$theme = _ref22.theme, borderRadius2 = _ref2$theme.borderRadius, spacing2 = _ref2$theme.spacing, colors2 = _ref2$theme.colors;
  return _objectSpread2((_objectSpread2$1 = {
    label: "menu"
  }, _defineProperty(_objectSpread2$1, alignToControl(placement), "100%"), _defineProperty(_objectSpread2$1, "position", "absolute"), _defineProperty(_objectSpread2$1, "width", "100%"), _defineProperty(_objectSpread2$1, "zIndex", 1), _objectSpread2$1), unstyled ? {} : {
    backgroundColor: colors2.neutral0,
    borderRadius: borderRadius2,
    boxShadow: "0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)",
    marginBottom: spacing2.menuGutter,
    marginTop: spacing2.menuGutter
  });
};
var PortalPlacementContext = /* @__PURE__ */ reactExports.createContext(null);
var MenuPlacer = function MenuPlacer2(props) {
  var children = props.children, minMenuHeight = props.minMenuHeight, maxMenuHeight = props.maxMenuHeight, menuPlacement = props.menuPlacement, menuPosition = props.menuPosition, menuShouldScrollIntoView = props.menuShouldScrollIntoView, theme = props.theme;
  var _ref3 = reactExports.useContext(PortalPlacementContext) || {}, setPortalPlacement = _ref3.setPortalPlacement;
  var ref = reactExports.useRef(null);
  var _useState = reactExports.useState(maxMenuHeight), _useState2 = _slicedToArray(_useState, 2), maxHeight = _useState2[0], setMaxHeight = _useState2[1];
  var _useState3 = reactExports.useState(null), _useState4 = _slicedToArray(_useState3, 2), placement = _useState4[0], setPlacement = _useState4[1];
  var controlHeight2 = theme.spacing.controlHeight;
  index(function() {
    var menuEl = ref.current;
    if (!menuEl)
      return;
    var isFixedPosition = menuPosition === "fixed";
    var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
    var state2 = getMenuPlacement({
      maxHeight: maxMenuHeight,
      menuEl,
      minHeight: minMenuHeight,
      placement: menuPlacement,
      shouldScroll,
      isFixedPosition,
      controlHeight: controlHeight2
    });
    setMaxHeight(state2.maxHeight);
    setPlacement(state2.placement);
    setPortalPlacement === null || setPortalPlacement === void 0 ? void 0 : setPortalPlacement(state2.placement);
  }, [maxMenuHeight, menuPlacement, menuPosition, menuShouldScrollIntoView, minMenuHeight, setPortalPlacement, controlHeight2]);
  return children({
    ref,
    placerProps: _objectSpread2(_objectSpread2({}, props), {}, {
      placement: placement || coercePlacement(menuPlacement),
      maxHeight
    })
  });
};
var Menu = function Menu2(props) {
  var children = props.children, innerRef = props.innerRef, innerProps = props.innerProps;
  return jsx("div", _extends$f({}, getStyleProps(props, "menu", {
    menu: true
  }), {
    ref: innerRef
  }, innerProps), children);
};
var Menu$1 = Menu;
var menuListCSS = function menuListCSS2(_ref4, unstyled) {
  var maxHeight = _ref4.maxHeight, baseUnit2 = _ref4.theme.spacing.baseUnit;
  return _objectSpread2({
    maxHeight,
    overflowY: "auto",
    position: "relative",
    // required for offset[Height, Top] > keyboard scroll
    WebkitOverflowScrolling: "touch"
  }, unstyled ? {} : {
    paddingBottom: baseUnit2,
    paddingTop: baseUnit2
  });
};
var MenuList = function MenuList2(props) {
  var children = props.children, innerProps = props.innerProps, innerRef = props.innerRef, isMulti = props.isMulti;
  return jsx("div", _extends$f({}, getStyleProps(props, "menuList", {
    "menu-list": true,
    "menu-list--is-multi": isMulti
  }), {
    ref: innerRef
  }, innerProps), children);
};
var noticeCSS = function noticeCSS2(_ref5, unstyled) {
  var _ref5$theme = _ref5.theme, baseUnit2 = _ref5$theme.spacing.baseUnit, colors2 = _ref5$theme.colors;
  return _objectSpread2({
    textAlign: "center"
  }, unstyled ? {} : {
    color: colors2.neutral40,
    padding: "".concat(baseUnit2 * 2, "px ").concat(baseUnit2 * 3, "px")
  });
};
var noOptionsMessageCSS = noticeCSS;
var loadingMessageCSS = noticeCSS;
var NoOptionsMessage = function NoOptionsMessage2(_ref6) {
  var _ref6$children = _ref6.children, children = _ref6$children === void 0 ? "No options" : _ref6$children, innerProps = _ref6.innerProps, restProps = _objectWithoutProperties(_ref6, _excluded$3);
  return jsx("div", _extends$f({}, getStyleProps(_objectSpread2(_objectSpread2({}, restProps), {}, {
    children,
    innerProps
  }), "noOptionsMessage", {
    "menu-notice": true,
    "menu-notice--no-options": true
  }), innerProps), children);
};
var LoadingMessage = function LoadingMessage2(_ref7) {
  var _ref7$children = _ref7.children, children = _ref7$children === void 0 ? "Loading..." : _ref7$children, innerProps = _ref7.innerProps, restProps = _objectWithoutProperties(_ref7, _excluded2$1);
  return jsx("div", _extends$f({}, getStyleProps(_objectSpread2(_objectSpread2({}, restProps), {}, {
    children,
    innerProps
  }), "loadingMessage", {
    "menu-notice": true,
    "menu-notice--loading": true
  }), innerProps), children);
};
var menuPortalCSS = function menuPortalCSS2(_ref8) {
  var rect = _ref8.rect, offset = _ref8.offset, position2 = _ref8.position;
  return {
    left: rect.left,
    position: position2,
    top: offset,
    width: rect.width,
    zIndex: 1
  };
};
var MenuPortal = function MenuPortal2(props) {
  var appendTo = props.appendTo, children = props.children, controlElement = props.controlElement, innerProps = props.innerProps, menuPlacement = props.menuPlacement, menuPosition = props.menuPosition;
  var menuPortalRef = reactExports.useRef(null);
  var cleanupRef = reactExports.useRef(null);
  var _useState5 = reactExports.useState(coercePlacement(menuPlacement)), _useState6 = _slicedToArray(_useState5, 2), placement = _useState6[0], setPortalPlacement = _useState6[1];
  var portalPlacementContext = reactExports.useMemo(function() {
    return {
      setPortalPlacement
    };
  }, []);
  var _useState7 = reactExports.useState(null), _useState8 = _slicedToArray(_useState7, 2), computedPosition = _useState8[0], setComputedPosition = _useState8[1];
  var updateComputedPosition = reactExports.useCallback(function() {
    if (!controlElement)
      return;
    var rect = getBoundingClientObj(controlElement);
    var scrollDistance = menuPosition === "fixed" ? 0 : window.pageYOffset;
    var offset = rect[placement] + scrollDistance;
    if (offset !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset) || rect.left !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left) || rect.width !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width)) {
      setComputedPosition({
        offset,
        rect
      });
    }
  }, [controlElement, menuPosition, placement, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width]);
  index(function() {
    updateComputedPosition();
  }, [updateComputedPosition]);
  var runAutoUpdate = reactExports.useCallback(function() {
    if (typeof cleanupRef.current === "function") {
      cleanupRef.current();
      cleanupRef.current = null;
    }
    if (controlElement && menuPortalRef.current) {
      cleanupRef.current = autoUpdate(controlElement, menuPortalRef.current, updateComputedPosition, {
        elementResize: "ResizeObserver" in window
      });
    }
  }, [controlElement, updateComputedPosition]);
  index(function() {
    runAutoUpdate();
  }, [runAutoUpdate]);
  var setMenuPortalElement = reactExports.useCallback(function(menuPortalElement) {
    menuPortalRef.current = menuPortalElement;
    runAutoUpdate();
  }, [runAutoUpdate]);
  if (!appendTo && menuPosition !== "fixed" || !computedPosition)
    return null;
  var menuWrapper = jsx("div", _extends$f({
    ref: setMenuPortalElement
  }, getStyleProps(_objectSpread2(_objectSpread2({}, props), {}, {
    offset: computedPosition.offset,
    position: menuPosition,
    rect: computedPosition.rect
  }), "menuPortal", {
    "menu-portal": true
  }), innerProps), children);
  return jsx(PortalPlacementContext.Provider, {
    value: portalPlacementContext
  }, appendTo ? /* @__PURE__ */ reactDomExports.createPortal(menuWrapper, appendTo) : menuWrapper);
};
var containerCSS = function containerCSS2(_ref3) {
  var isDisabled = _ref3.isDisabled, isRtl = _ref3.isRtl;
  return {
    label: "container",
    direction: isRtl ? "rtl" : void 0,
    pointerEvents: isDisabled ? "none" : void 0,
    // cancel mouse events when disabled
    position: "relative"
  };
};
var SelectContainer = function SelectContainer2(props) {
  var children = props.children, innerProps = props.innerProps, isDisabled = props.isDisabled, isRtl = props.isRtl;
  return jsx("div", _extends$f({}, getStyleProps(props, "container", {
    "--is-disabled": isDisabled,
    "--is-rtl": isRtl
  }), innerProps), children);
};
var valueContainerCSS = function valueContainerCSS2(_ref22, unstyled) {
  var spacing2 = _ref22.theme.spacing, isMulti = _ref22.isMulti, hasValue = _ref22.hasValue, controlShouldRenderValue = _ref22.selectProps.controlShouldRenderValue;
  return _objectSpread2({
    alignItems: "center",
    display: isMulti && hasValue && controlShouldRenderValue ? "flex" : "grid",
    flex: 1,
    flexWrap: "wrap",
    WebkitOverflowScrolling: "touch",
    position: "relative",
    overflow: "hidden"
  }, unstyled ? {} : {
    padding: "".concat(spacing2.baseUnit / 2, "px ").concat(spacing2.baseUnit * 2, "px")
  });
};
var ValueContainer = function ValueContainer2(props) {
  var children = props.children, innerProps = props.innerProps, isMulti = props.isMulti, hasValue = props.hasValue;
  return jsx("div", _extends$f({}, getStyleProps(props, "valueContainer", {
    "value-container": true,
    "value-container--is-multi": isMulti,
    "value-container--has-value": hasValue
  }), innerProps), children);
};
var indicatorsContainerCSS = function indicatorsContainerCSS2() {
  return {
    alignItems: "center",
    alignSelf: "stretch",
    display: "flex",
    flexShrink: 0
  };
};
var IndicatorsContainer = function IndicatorsContainer2(props) {
  var children = props.children, innerProps = props.innerProps;
  return jsx("div", _extends$f({}, getStyleProps(props, "indicatorsContainer", {
    indicators: true
  }), innerProps), children);
};
var _templateObject;
var _excluded$2 = ["size"], _excluded2 = ["innerProps", "isRtl", "size"];
var _ref2$2 = {
  name: "8mmkcg",
  styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0"
};
var Svg = function Svg2(_ref3) {
  var size = _ref3.size, props = _objectWithoutProperties(_ref3, _excluded$2);
  return jsx("svg", _extends$f({
    height: size,
    width: size,
    viewBox: "0 0 20 20",
    "aria-hidden": "true",
    focusable: "false",
    css: _ref2$2
  }, props));
};
var CrossIcon = function CrossIcon2(props) {
  return jsx(Svg, _extends$f({
    size: 20
  }, props), jsx("path", {
    d: "M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
  }));
};
var DownChevron = function DownChevron2(props) {
  return jsx(Svg, _extends$f({
    size: 20
  }, props), jsx("path", {
    d: "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
  }));
};
var baseCSS = function baseCSS2(_ref3, unstyled) {
  var isFocused = _ref3.isFocused, _ref3$theme = _ref3.theme, baseUnit2 = _ref3$theme.spacing.baseUnit, colors2 = _ref3$theme.colors;
  return _objectSpread2({
    label: "indicatorContainer",
    display: "flex",
    transition: "color 150ms"
  }, unstyled ? {} : {
    color: isFocused ? colors2.neutral60 : colors2.neutral20,
    padding: baseUnit2 * 2,
    ":hover": {
      color: isFocused ? colors2.neutral80 : colors2.neutral40
    }
  });
};
var dropdownIndicatorCSS = baseCSS;
var DropdownIndicator = function DropdownIndicator2(props) {
  var children = props.children, innerProps = props.innerProps;
  return jsx("div", _extends$f({}, getStyleProps(props, "dropdownIndicator", {
    indicator: true,
    "dropdown-indicator": true
  }), innerProps), children || jsx(DownChevron, null));
};
var clearIndicatorCSS = baseCSS;
var ClearIndicator = function ClearIndicator2(props) {
  var children = props.children, innerProps = props.innerProps;
  return jsx("div", _extends$f({}, getStyleProps(props, "clearIndicator", {
    indicator: true,
    "clear-indicator": true
  }), innerProps), children || jsx(CrossIcon, null));
};
var indicatorSeparatorCSS = function indicatorSeparatorCSS2(_ref4, unstyled) {
  var isDisabled = _ref4.isDisabled, _ref4$theme = _ref4.theme, baseUnit2 = _ref4$theme.spacing.baseUnit, colors2 = _ref4$theme.colors;
  return _objectSpread2({
    label: "indicatorSeparator",
    alignSelf: "stretch",
    width: 1
  }, unstyled ? {} : {
    backgroundColor: isDisabled ? colors2.neutral10 : colors2.neutral20,
    marginBottom: baseUnit2 * 2,
    marginTop: baseUnit2 * 2
  });
};
var IndicatorSeparator = function IndicatorSeparator2(props) {
  var innerProps = props.innerProps;
  return jsx("span", _extends$f({}, innerProps, getStyleProps(props, "indicatorSeparator", {
    "indicator-separator": true
  })));
};
var loadingDotAnimations = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n"])));
var loadingIndicatorCSS = function loadingIndicatorCSS2(_ref5, unstyled) {
  var isFocused = _ref5.isFocused, size = _ref5.size, _ref5$theme = _ref5.theme, colors2 = _ref5$theme.colors, baseUnit2 = _ref5$theme.spacing.baseUnit;
  return _objectSpread2({
    label: "loadingIndicator",
    display: "flex",
    transition: "color 150ms",
    alignSelf: "center",
    fontSize: size,
    lineHeight: 1,
    marginRight: size,
    textAlign: "center",
    verticalAlign: "middle"
  }, unstyled ? {} : {
    color: isFocused ? colors2.neutral60 : colors2.neutral20,
    padding: baseUnit2 * 2
  });
};
var LoadingDot = function LoadingDot2(_ref6) {
  var delay = _ref6.delay, offset = _ref6.offset;
  return jsx("span", {
    css: /* @__PURE__ */ css({
      animation: "".concat(loadingDotAnimations, " 1s ease-in-out ").concat(delay, "ms infinite;"),
      backgroundColor: "currentColor",
      borderRadius: "1em",
      display: "inline-block",
      marginLeft: offset ? "1em" : void 0,
      height: "1em",
      verticalAlign: "top",
      width: "1em"
    }, "", "")
  });
};
var LoadingIndicator = function LoadingIndicator2(_ref7) {
  var innerProps = _ref7.innerProps, isRtl = _ref7.isRtl, _ref7$size = _ref7.size, size = _ref7$size === void 0 ? 4 : _ref7$size, restProps = _objectWithoutProperties(_ref7, _excluded2);
  return jsx("div", _extends$f({}, getStyleProps(_objectSpread2(_objectSpread2({}, restProps), {}, {
    innerProps,
    isRtl,
    size
  }), "loadingIndicator", {
    indicator: true,
    "loading-indicator": true
  }), innerProps), jsx(LoadingDot, {
    delay: 0,
    offset: isRtl
  }), jsx(LoadingDot, {
    delay: 160,
    offset: true
  }), jsx(LoadingDot, {
    delay: 320,
    offset: !isRtl
  }));
};
var css$1 = function css2(_ref3, unstyled) {
  var isDisabled = _ref3.isDisabled, isFocused = _ref3.isFocused, _ref$theme = _ref3.theme, colors2 = _ref$theme.colors, borderRadius2 = _ref$theme.borderRadius, spacing2 = _ref$theme.spacing;
  return _objectSpread2({
    label: "control",
    alignItems: "center",
    cursor: "default",
    display: "flex",
    flexWrap: "wrap",
    justifyContent: "space-between",
    minHeight: spacing2.controlHeight,
    outline: "0 !important",
    position: "relative",
    transition: "all 100ms"
  }, unstyled ? {} : {
    backgroundColor: isDisabled ? colors2.neutral5 : colors2.neutral0,
    borderColor: isDisabled ? colors2.neutral10 : isFocused ? colors2.primary : colors2.neutral20,
    borderRadius: borderRadius2,
    borderStyle: "solid",
    borderWidth: 1,
    boxShadow: isFocused ? "0 0 0 1px ".concat(colors2.primary) : void 0,
    "&:hover": {
      borderColor: isFocused ? colors2.primary : colors2.neutral30
    }
  });
};
var Control = function Control2(props) {
  var children = props.children, isDisabled = props.isDisabled, isFocused = props.isFocused, innerRef = props.innerRef, innerProps = props.innerProps, menuIsOpen = props.menuIsOpen;
  return jsx("div", _extends$f({
    ref: innerRef
  }, getStyleProps(props, "control", {
    control: true,
    "control--is-disabled": isDisabled,
    "control--is-focused": isFocused,
    "control--menu-is-open": menuIsOpen
  }), innerProps, {
    "aria-disabled": isDisabled || void 0
  }), children);
};
var Control$1 = Control;
var _excluded$1 = ["data"];
var groupCSS = function groupCSS2(_ref3, unstyled) {
  var spacing2 = _ref3.theme.spacing;
  return unstyled ? {} : {
    paddingBottom: spacing2.baseUnit * 2,
    paddingTop: spacing2.baseUnit * 2
  };
};
var Group = function Group2(props) {
  var children = props.children, cx = props.cx, getStyles = props.getStyles, getClassNames = props.getClassNames, Heading = props.Heading, headingProps = props.headingProps, innerProps = props.innerProps, label = props.label, theme = props.theme, selectProps = props.selectProps;
  return jsx("div", _extends$f({}, getStyleProps(props, "group", {
    group: true
  }), innerProps), jsx(Heading, _extends$f({}, headingProps, {
    selectProps,
    theme,
    getStyles,
    getClassNames,
    cx
  }), label), jsx("div", null, children));
};
var groupHeadingCSS = function groupHeadingCSS2(_ref22, unstyled) {
  var _ref2$theme = _ref22.theme, colors2 = _ref2$theme.colors, spacing2 = _ref2$theme.spacing;
  return _objectSpread2({
    label: "group",
    cursor: "default",
    display: "block"
  }, unstyled ? {} : {
    color: colors2.neutral40,
    fontSize: "75%",
    fontWeight: 500,
    marginBottom: "0.25em",
    paddingLeft: spacing2.baseUnit * 3,
    paddingRight: spacing2.baseUnit * 3,
    textTransform: "uppercase"
  });
};
var GroupHeading = function GroupHeading2(props) {
  var _cleanCommonProps = cleanCommonProps(props);
  _cleanCommonProps.data;
  var innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded$1);
  return jsx("div", _extends$f({}, getStyleProps(props, "groupHeading", {
    "group-heading": true
  }), innerProps));
};
var Group$1 = Group;
var _excluded$5 = ["innerRef", "isDisabled", "isHidden", "inputClassName"];
var inputCSS = function inputCSS2(_ref3, unstyled) {
  var isDisabled = _ref3.isDisabled, value = _ref3.value, _ref$theme = _ref3.theme, spacing2 = _ref$theme.spacing, colors2 = _ref$theme.colors;
  return _objectSpread2(_objectSpread2({
    visibility: isDisabled ? "hidden" : "visible",
    // force css to recompute when value change due to @emotion bug.
    // We can remove it whenever the bug is fixed.
    transform: value ? "translateZ(0)" : ""
  }, containerStyle), unstyled ? {} : {
    margin: spacing2.baseUnit / 2,
    paddingBottom: spacing2.baseUnit / 2,
    paddingTop: spacing2.baseUnit / 2,
    color: colors2.neutral80
  });
};
var spacingStyle = {
  gridArea: "1 / 2",
  font: "inherit",
  minWidth: "2px",
  border: 0,
  margin: 0,
  outline: 0,
  padding: 0
};
var containerStyle = {
  flex: "1 1 auto",
  display: "inline-grid",
  gridArea: "1 / 1 / 2 / 3",
  gridTemplateColumns: "0 min-content",
  "&:after": _objectSpread2({
    content: 'attr(data-value) " "',
    visibility: "hidden",
    whiteSpace: "pre"
  }, spacingStyle)
};
var inputStyle = function inputStyle2(isHidden) {
  return _objectSpread2({
    label: "input",
    color: "inherit",
    background: 0,
    opacity: isHidden ? 0 : 1,
    width: "100%"
  }, spacingStyle);
};
var Input = function Input2(props) {
  var cx = props.cx, value = props.value;
  var _cleanCommonProps = cleanCommonProps(props), innerRef = _cleanCommonProps.innerRef, isDisabled = _cleanCommonProps.isDisabled, isHidden = _cleanCommonProps.isHidden, inputClassName = _cleanCommonProps.inputClassName, innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded$5);
  return jsx("div", _extends$f({}, getStyleProps(props, "input", {
    "input-container": true
  }), {
    "data-value": value || ""
  }), jsx("input", _extends$f({
    className: cx({
      input: true
    }, inputClassName),
    ref: innerRef,
    style: inputStyle(isHidden),
    disabled: isDisabled
  }, innerProps)));
};
var Input$1 = Input;
var multiValueCSS = function multiValueCSS2(_ref3, unstyled) {
  var _ref$theme = _ref3.theme, spacing2 = _ref$theme.spacing, borderRadius2 = _ref$theme.borderRadius, colors2 = _ref$theme.colors;
  return _objectSpread2({
    label: "multiValue",
    display: "flex",
    minWidth: 0
  }, unstyled ? {} : {
    backgroundColor: colors2.neutral10,
    borderRadius: borderRadius2 / 2,
    margin: spacing2.baseUnit / 2
  });
};
var multiValueLabelCSS = function multiValueLabelCSS2(_ref22, unstyled) {
  var _ref2$theme = _ref22.theme, borderRadius2 = _ref2$theme.borderRadius, colors2 = _ref2$theme.colors, cropWithEllipsis = _ref22.cropWithEllipsis;
  return _objectSpread2({
    overflow: "hidden",
    textOverflow: cropWithEllipsis || cropWithEllipsis === void 0 ? "ellipsis" : void 0,
    whiteSpace: "nowrap"
  }, unstyled ? {} : {
    borderRadius: borderRadius2 / 2,
    color: colors2.neutral80,
    fontSize: "85%",
    padding: 3,
    paddingLeft: 6
  });
};
var multiValueRemoveCSS = function multiValueRemoveCSS2(_ref3, unstyled) {
  var _ref3$theme = _ref3.theme, spacing2 = _ref3$theme.spacing, borderRadius2 = _ref3$theme.borderRadius, colors2 = _ref3$theme.colors, isFocused = _ref3.isFocused;
  return _objectSpread2({
    alignItems: "center",
    display: "flex"
  }, unstyled ? {} : {
    borderRadius: borderRadius2 / 2,
    backgroundColor: isFocused ? colors2.dangerLight : void 0,
    paddingLeft: spacing2.baseUnit,
    paddingRight: spacing2.baseUnit,
    ":hover": {
      backgroundColor: colors2.dangerLight,
      color: colors2.danger
    }
  });
};
var MultiValueGeneric = function MultiValueGeneric2(_ref4) {
  var children = _ref4.children, innerProps = _ref4.innerProps;
  return jsx("div", innerProps, children);
};
var MultiValueContainer = MultiValueGeneric;
var MultiValueLabel = MultiValueGeneric;
function MultiValueRemove(_ref5) {
  var children = _ref5.children, innerProps = _ref5.innerProps;
  return jsx("div", _extends$f({
    role: "button"
  }, innerProps), children || jsx(CrossIcon, {
    size: 14
  }));
}
var MultiValue = function MultiValue2(props) {
  var children = props.children, components2 = props.components, data = props.data, innerProps = props.innerProps, isDisabled = props.isDisabled, removeProps3 = props.removeProps, selectProps = props.selectProps;
  var Container = components2.Container, Label = components2.Label, Remove = components2.Remove;
  return jsx(Container, {
    data,
    innerProps: _objectSpread2(_objectSpread2({}, getStyleProps(props, "multiValue", {
      "multi-value": true,
      "multi-value--is-disabled": isDisabled
    })), innerProps),
    selectProps
  }, jsx(Label, {
    data,
    innerProps: _objectSpread2({}, getStyleProps(props, "multiValueLabel", {
      "multi-value__label": true
    })),
    selectProps
  }, children), jsx(Remove, {
    data,
    innerProps: _objectSpread2(_objectSpread2({}, getStyleProps(props, "multiValueRemove", {
      "multi-value__remove": true
    })), {}, {
      "aria-label": "Remove ".concat(children || "option")
    }, removeProps3),
    selectProps
  }));
};
var MultiValue$1 = MultiValue;
var optionCSS = function optionCSS2(_ref3, unstyled) {
  var isDisabled = _ref3.isDisabled, isFocused = _ref3.isFocused, isSelected = _ref3.isSelected, _ref$theme = _ref3.theme, spacing2 = _ref$theme.spacing, colors2 = _ref$theme.colors;
  return _objectSpread2({
    label: "option",
    cursor: "default",
    display: "block",
    fontSize: "inherit",
    width: "100%",
    userSelect: "none",
    WebkitTapHighlightColor: "rgba(0, 0, 0, 0)"
  }, unstyled ? {} : {
    backgroundColor: isSelected ? colors2.primary : isFocused ? colors2.primary25 : "transparent",
    color: isDisabled ? colors2.neutral20 : isSelected ? colors2.neutral0 : "inherit",
    padding: "".concat(spacing2.baseUnit * 2, "px ").concat(spacing2.baseUnit * 3, "px"),
    // provide some affordance on touch devices
    ":active": {
      backgroundColor: !isDisabled ? isSelected ? colors2.primary : colors2.primary50 : void 0
    }
  });
};
var Option = function Option2(props) {
  var children = props.children, isDisabled = props.isDisabled, isFocused = props.isFocused, isSelected = props.isSelected, innerRef = props.innerRef, innerProps = props.innerProps;
  return jsx("div", _extends$f({}, getStyleProps(props, "option", {
    option: true,
    "option--is-disabled": isDisabled,
    "option--is-focused": isFocused,
    "option--is-selected": isSelected
  }), {
    ref: innerRef,
    "aria-disabled": isDisabled
  }, innerProps), children);
};
var Option$1 = Option;
var placeholderCSS = function placeholderCSS2(_ref3, unstyled) {
  var _ref$theme = _ref3.theme, spacing2 = _ref$theme.spacing, colors2 = _ref$theme.colors;
  return _objectSpread2({
    label: "placeholder",
    gridArea: "1 / 1 / 2 / 3"
  }, unstyled ? {} : {
    color: colors2.neutral50,
    marginLeft: spacing2.baseUnit / 2,
    marginRight: spacing2.baseUnit / 2
  });
};
var Placeholder = function Placeholder2(props) {
  var children = props.children, innerProps = props.innerProps;
  return jsx("div", _extends$f({}, getStyleProps(props, "placeholder", {
    placeholder: true
  }), innerProps), children);
};
var Placeholder$1 = Placeholder;
var css22 = function css3(_ref3, unstyled) {
  var isDisabled = _ref3.isDisabled, _ref$theme = _ref3.theme, spacing2 = _ref$theme.spacing, colors2 = _ref$theme.colors;
  return _objectSpread2({
    label: "singleValue",
    gridArea: "1 / 1 / 2 / 3",
    maxWidth: "100%",
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, unstyled ? {} : {
    color: isDisabled ? colors2.neutral40 : colors2.neutral80,
    marginLeft: spacing2.baseUnit / 2,
    marginRight: spacing2.baseUnit / 2
  });
};
var SingleValue = function SingleValue2(props) {
  var children = props.children, isDisabled = props.isDisabled, innerProps = props.innerProps;
  return jsx("div", _extends$f({}, getStyleProps(props, "singleValue", {
    "single-value": true,
    "single-value--is-disabled": isDisabled
  }), innerProps), children);
};
var SingleValue$1 = SingleValue;
var components = {
  ClearIndicator,
  Control: Control$1,
  DropdownIndicator,
  DownChevron,
  CrossIcon,
  Group: Group$1,
  GroupHeading,
  IndicatorsContainer,
  IndicatorSeparator,
  Input: Input$1,
  LoadingIndicator,
  Menu: Menu$1,
  MenuList,
  MenuPortal,
  LoadingMessage,
  NoOptionsMessage,
  MultiValue: MultiValue$1,
  MultiValueContainer,
  MultiValueLabel,
  MultiValueRemove,
  Option: Option$1,
  Placeholder: Placeholder$1,
  SelectContainer,
  SingleValue: SingleValue$1,
  ValueContainer
};
var defaultComponents = function defaultComponents2(props) {
  return _objectSpread2(_objectSpread2({}, components), props.components);
};
var safeIsNaN = Number.isNaN || function ponyfill(value) {
  return typeof value === "number" && value !== value;
};
function isEqual(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (!isEqual(newInputs[i], lastInputs[i])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual2) {
  if (isEqual2 === void 0) {
    isEqual2 = areInputsEqual;
  }
  var cache = null;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (cache && cache.lastThis === this && isEqual2(newArgs, cache.lastArgs)) {
      return cache.lastResult;
    }
    var lastResult = resultFn.apply(this, newArgs);
    cache = {
      lastResult,
      lastArgs: newArgs,
      lastThis: this
    };
    return lastResult;
  }
  memoized.clear = function clear() {
    cache = null;
  };
  return memoized;
}
var _ref = {
  name: "7pg0cj-a11yText",
  styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap"
};
var A11yText = function A11yText2(props) {
  return jsx("span", _extends$f({
    css: _ref
  }, props));
};
var A11yText$1 = A11yText;
var defaultAriaLiveMessages = {
  guidance: function guidance(props) {
    var isSearchable = props.isSearchable, isMulti = props.isMulti, tabSelectsValue = props.tabSelectsValue, context = props.context, isInitialFocus = props.isInitialFocus;
    switch (context) {
      case "menu":
        return "Use Up and Down to choose options, press Enter to select the currently focused option, press Escape to exit the menu".concat(tabSelectsValue ? ", press Tab to select the option and exit the menu" : "", ".");
      case "input":
        return isInitialFocus ? "".concat(props["aria-label"] || "Select", " is focused ").concat(isSearchable ? ",type to refine list" : "", ", press Down to open the menu, ").concat(isMulti ? " press left to focus selected values" : "") : "";
      case "value":
        return "Use left and right to toggle between focused values, press Backspace to remove the currently focused value";
      default:
        return "";
    }
  },
  onChange: function onChange(props) {
    var action2 = props.action, _props$label = props.label, label = _props$label === void 0 ? "" : _props$label, labels = props.labels, isDisabled = props.isDisabled;
    switch (action2) {
      case "deselect-option":
      case "pop-value":
      case "remove-value":
        return "option ".concat(label, ", deselected.");
      case "clear":
        return "All selected options have been cleared.";
      case "initial-input-focus":
        return "option".concat(labels.length > 1 ? "s" : "", " ").concat(labels.join(","), ", selected.");
      case "select-option":
        return isDisabled ? "option ".concat(label, " is disabled. Select another option.") : "option ".concat(label, ", selected.");
      default:
        return "";
    }
  },
  onFocus: function onFocus(props) {
    var context = props.context, focused = props.focused, options2 = props.options, _props$label2 = props.label, label = _props$label2 === void 0 ? "" : _props$label2, selectValue = props.selectValue, isDisabled = props.isDisabled, isSelected = props.isSelected, isAppleDevice2 = props.isAppleDevice;
    var getArrayIndex = function getArrayIndex2(arr, item2) {
      return arr && arr.length ? "".concat(arr.indexOf(item2) + 1, " of ").concat(arr.length) : "";
    };
    if (context === "value" && selectValue) {
      return "value ".concat(label, " focused, ").concat(getArrayIndex(selectValue, focused), ".");
    }
    if (context === "menu" && isAppleDevice2) {
      var disabled = isDisabled ? " disabled" : "";
      var status = "".concat(isSelected ? " selected" : "").concat(disabled);
      return "".concat(label).concat(status, ", ").concat(getArrayIndex(options2, focused), ".");
    }
    return "";
  },
  onFilter: function onFilter(props) {
    var inputValue = props.inputValue, resultsMessage = props.resultsMessage;
    return "".concat(resultsMessage).concat(inputValue ? " for search term " + inputValue : "", ".");
  }
};
var LiveRegion = function LiveRegion2(props) {
  var ariaSelection = props.ariaSelection, focusedOption = props.focusedOption, focusedValue = props.focusedValue, focusableOptions = props.focusableOptions, isFocused = props.isFocused, selectValue = props.selectValue, selectProps = props.selectProps, id2 = props.id, isAppleDevice2 = props.isAppleDevice;
  var ariaLiveMessages = selectProps.ariaLiveMessages, getOptionLabel4 = selectProps.getOptionLabel, inputValue = selectProps.inputValue, isMulti = selectProps.isMulti, isOptionDisabled3 = selectProps.isOptionDisabled, isSearchable = selectProps.isSearchable, menuIsOpen = selectProps.menuIsOpen, options2 = selectProps.options, screenReaderStatus2 = selectProps.screenReaderStatus, tabSelectsValue = selectProps.tabSelectsValue, isLoading = selectProps.isLoading;
  var ariaLabel2 = selectProps["aria-label"];
  var ariaLive = selectProps["aria-live"];
  var messages = reactExports.useMemo(function() {
    return _objectSpread2(_objectSpread2({}, defaultAriaLiveMessages), ariaLiveMessages || {});
  }, [ariaLiveMessages]);
  var ariaSelected = reactExports.useMemo(function() {
    var message = "";
    if (ariaSelection && messages.onChange) {
      var option = ariaSelection.option, selectedOptions = ariaSelection.options, removedValue = ariaSelection.removedValue, removedValues = ariaSelection.removedValues, value = ariaSelection.value;
      var asOption = function asOption2(val) {
        return !Array.isArray(val) ? val : null;
      };
      var selected = removedValue || option || asOption(value);
      var label = selected ? getOptionLabel4(selected) : "";
      var multiSelected = selectedOptions || removedValues || void 0;
      var labels = multiSelected ? multiSelected.map(getOptionLabel4) : [];
      var onChangeProps = _objectSpread2({
        // multiSelected items are usually items that have already been selected
        // or set by the user as a default value so we assume they are not disabled
        isDisabled: selected && isOptionDisabled3(selected, selectValue),
        label,
        labels
      }, ariaSelection);
      message = messages.onChange(onChangeProps);
    }
    return message;
  }, [ariaSelection, messages, isOptionDisabled3, selectValue, getOptionLabel4]);
  var ariaFocused = reactExports.useMemo(function() {
    var focusMsg = "";
    var focused = focusedOption || focusedValue;
    var isSelected = !!(focusedOption && selectValue && selectValue.includes(focusedOption));
    if (focused && messages.onFocus) {
      var onFocusProps = {
        focused,
        label: getOptionLabel4(focused),
        isDisabled: isOptionDisabled3(focused, selectValue),
        isSelected,
        options: focusableOptions,
        context: focused === focusedOption ? "menu" : "value",
        selectValue,
        isAppleDevice: isAppleDevice2
      };
      focusMsg = messages.onFocus(onFocusProps);
    }
    return focusMsg;
  }, [focusedOption, focusedValue, getOptionLabel4, isOptionDisabled3, messages, focusableOptions, selectValue, isAppleDevice2]);
  var ariaResults = reactExports.useMemo(function() {
    var resultsMsg = "";
    if (menuIsOpen && options2.length && !isLoading && messages.onFilter) {
      var resultsMessage = screenReaderStatus2({
        count: focusableOptions.length
      });
      resultsMsg = messages.onFilter({
        inputValue,
        resultsMessage
      });
    }
    return resultsMsg;
  }, [focusableOptions, inputValue, menuIsOpen, messages, options2, screenReaderStatus2, isLoading]);
  var isInitialFocus = (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus";
  var ariaGuidance = reactExports.useMemo(function() {
    var guidanceMsg = "";
    if (messages.guidance) {
      var context = focusedValue ? "value" : menuIsOpen ? "menu" : "input";
      guidanceMsg = messages.guidance({
        "aria-label": ariaLabel2,
        context,
        isDisabled: focusedOption && isOptionDisabled3(focusedOption, selectValue),
        isMulti,
        isSearchable,
        tabSelectsValue,
        isInitialFocus
      });
    }
    return guidanceMsg;
  }, [ariaLabel2, focusedOption, focusedValue, isMulti, isOptionDisabled3, isSearchable, menuIsOpen, messages, selectValue, tabSelectsValue, isInitialFocus]);
  var ScreenReaderText = jsx(reactExports.Fragment, null, jsx("span", {
    id: "aria-selection"
  }, ariaSelected), jsx("span", {
    id: "aria-focused"
  }, ariaFocused), jsx("span", {
    id: "aria-results"
  }, ariaResults), jsx("span", {
    id: "aria-guidance"
  }, ariaGuidance));
  return jsx(reactExports.Fragment, null, jsx(A11yText$1, {
    id: id2
  }, isInitialFocus && ScreenReaderText), jsx(A11yText$1, {
    "aria-live": ariaLive,
    "aria-atomic": "false",
    "aria-relevant": "additions text",
    role: "log"
  }, isFocused && !isInitialFocus && ScreenReaderText));
};
var LiveRegion$1 = LiveRegion;
var diacritics = [{
  base: "A",
  letters: "AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ"
}, {
  base: "AA",
  letters: "Ꜳ"
}, {
  base: "AE",
  letters: "ÆǼǢ"
}, {
  base: "AO",
  letters: "Ꜵ"
}, {
  base: "AU",
  letters: "Ꜷ"
}, {
  base: "AV",
  letters: "ꜸꜺ"
}, {
  base: "AY",
  letters: "Ꜽ"
}, {
  base: "B",
  letters: "BⒷＢḂḄḆɃƂƁ"
}, {
  base: "C",
  letters: "CⒸＣĆĈĊČÇḈƇȻꜾ"
}, {
  base: "D",
  letters: "DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ"
}, {
  base: "DZ",
  letters: "ǱǄ"
}, {
  base: "Dz",
  letters: "ǲǅ"
}, {
  base: "E",
  letters: "EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ"
}, {
  base: "F",
  letters: "FⒻＦḞƑꝻ"
}, {
  base: "G",
  letters: "GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ"
}, {
  base: "H",
  letters: "HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ"
}, {
  base: "I",
  letters: "IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ"
}, {
  base: "J",
  letters: "JⒿＪĴɈ"
}, {
  base: "K",
  letters: "KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ"
}, {
  base: "L",
  letters: "LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ"
}, {
  base: "LJ",
  letters: "Ǉ"
}, {
  base: "Lj",
  letters: "ǈ"
}, {
  base: "M",
  letters: "MⓂＭḾṀṂⱮƜ"
}, {
  base: "N",
  letters: "NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ"
}, {
  base: "NJ",
  letters: "Ǌ"
}, {
  base: "Nj",
  letters: "ǋ"
}, {
  base: "O",
  letters: "OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ"
}, {
  base: "OI",
  letters: "Ƣ"
}, {
  base: "OO",
  letters: "Ꝏ"
}, {
  base: "OU",
  letters: "Ȣ"
}, {
  base: "P",
  letters: "PⓅＰṔṖƤⱣꝐꝒꝔ"
}, {
  base: "Q",
  letters: "QⓆＱꝖꝘɊ"
}, {
  base: "R",
  letters: "RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ"
}, {
  base: "S",
  letters: "SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ"
}, {
  base: "T",
  letters: "TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ"
}, {
  base: "TZ",
  letters: "Ꜩ"
}, {
  base: "U",
  letters: "UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ"
}, {
  base: "V",
  letters: "VⓋＶṼṾƲꝞɅ"
}, {
  base: "VY",
  letters: "Ꝡ"
}, {
  base: "W",
  letters: "WⓌＷẀẂŴẆẄẈⱲ"
}, {
  base: "X",
  letters: "XⓍＸẊẌ"
}, {
  base: "Y",
  letters: "YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ"
}, {
  base: "Z",
  letters: "ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ"
}, {
  base: "a",
  letters: "aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ"
}, {
  base: "aa",
  letters: "ꜳ"
}, {
  base: "ae",
  letters: "æǽǣ"
}, {
  base: "ao",
  letters: "ꜵ"
}, {
  base: "au",
  letters: "ꜷ"
}, {
  base: "av",
  letters: "ꜹꜻ"
}, {
  base: "ay",
  letters: "ꜽ"
}, {
  base: "b",
  letters: "bⓑｂḃḅḇƀƃɓ"
}, {
  base: "c",
  letters: "cⓒｃćĉċčçḉƈȼꜿↄ"
}, {
  base: "d",
  letters: "dⓓｄḋďḍḑḓḏđƌɖɗꝺ"
}, {
  base: "dz",
  letters: "ǳǆ"
}, {
  base: "e",
  letters: "eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ"
}, {
  base: "f",
  letters: "fⓕｆḟƒꝼ"
}, {
  base: "g",
  letters: "gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ"
}, {
  base: "h",
  letters: "hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ"
}, {
  base: "hv",
  letters: "ƕ"
}, {
  base: "i",
  letters: "iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı"
}, {
  base: "j",
  letters: "jⓙｊĵǰɉ"
}, {
  base: "k",
  letters: "kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ"
}, {
  base: "l",
  letters: "lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ"
}, {
  base: "lj",
  letters: "ǉ"
}, {
  base: "m",
  letters: "mⓜｍḿṁṃɱɯ"
}, {
  base: "n",
  letters: "nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ"
}, {
  base: "nj",
  letters: "ǌ"
}, {
  base: "o",
  letters: "oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ"
}, {
  base: "oi",
  letters: "ƣ"
}, {
  base: "ou",
  letters: "ȣ"
}, {
  base: "oo",
  letters: "ꝏ"
}, {
  base: "p",
  letters: "pⓟｐṕṗƥᵽꝑꝓꝕ"
}, {
  base: "q",
  letters: "qⓠｑɋꝗꝙ"
}, {
  base: "r",
  letters: "rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ"
}, {
  base: "s",
  letters: "sⓢｓßśṥŝṡšṧṣṩșşȿꞩꞅẛ"
}, {
  base: "t",
  letters: "tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ"
}, {
  base: "tz",
  letters: "ꜩ"
}, {
  base: "u",
  letters: "uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ"
}, {
  base: "v",
  letters: "vⓥｖṽṿʋꝟʌ"
}, {
  base: "vy",
  letters: "ꝡ"
}, {
  base: "w",
  letters: "wⓦｗẁẃŵẇẅẘẉⱳ"
}, {
  base: "x",
  letters: "xⓧｘẋẍ"
}, {
  base: "y",
  letters: "yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ"
}, {
  base: "z",
  letters: "zⓩｚźẑżžẓẕƶȥɀⱬꝣ"
}];
var anyDiacritic = new RegExp("[" + diacritics.map(function(d2) {
  return d2.letters;
}).join("") + "]", "g");
var diacriticToBase = {};
for (var i = 0; i < diacritics.length; i++) {
  var diacritic = diacritics[i];
  for (var j = 0; j < diacritic.letters.length; j++) {
    diacriticToBase[diacritic.letters[j]] = diacritic.base;
  }
}
var stripDiacritics = function stripDiacritics2(str) {
  return str.replace(anyDiacritic, function(match2) {
    return diacriticToBase[match2];
  });
};
var memoizedStripDiacriticsForInput = memoizeOne(stripDiacritics);
var trimString = function trimString2(str) {
  return str.replace(/^\s+|\s+$/g, "");
};
var defaultStringify = function defaultStringify2(option) {
  return "".concat(option.label, " ").concat(option.value);
};
var createFilter = function createFilter2(config2) {
  return function(option, rawInput) {
    if (option.data.__isNew__)
      return true;
    var _ignoreCase$ignoreAcc = _objectSpread2({
      ignoreCase: true,
      ignoreAccents: true,
      stringify: defaultStringify,
      trim: true,
      matchFrom: "any"
    }, config2), ignoreCase = _ignoreCase$ignoreAcc.ignoreCase, ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents, stringify2 = _ignoreCase$ignoreAcc.stringify, trim2 = _ignoreCase$ignoreAcc.trim, matchFrom = _ignoreCase$ignoreAcc.matchFrom;
    var input2 = trim2 ? trimString(rawInput) : rawInput;
    var candidate = trim2 ? trimString(stringify2(option)) : stringify2(option);
    if (ignoreCase) {
      input2 = input2.toLowerCase();
      candidate = candidate.toLowerCase();
    }
    if (ignoreAccents) {
      input2 = memoizedStripDiacriticsForInput(input2);
      candidate = stripDiacritics(candidate);
    }
    return matchFrom === "start" ? candidate.substr(0, input2.length) === input2 : candidate.indexOf(input2) > -1;
  };
};
var _excluded = ["innerRef"];
function DummyInput(_ref3) {
  var innerRef = _ref3.innerRef, props = _objectWithoutProperties(_ref3, _excluded);
  var filteredProps = removeProps(props, "onExited", "in", "enter", "exit", "appear");
  return jsx("input", _extends$f({
    ref: innerRef
  }, filteredProps, {
    css: /* @__PURE__ */ css({
      label: "dummyInput",
      // get rid of any default styles
      background: 0,
      border: 0,
      // important! this hides the flashing cursor
      caretColor: "transparent",
      fontSize: "inherit",
      gridArea: "1 / 1 / 2 / 3",
      outline: 0,
      padding: 0,
      // important! without `width` browsers won't allow focus
      width: 1,
      // remove cursor on desktop
      color: "transparent",
      // remove cursor on mobile whilst maintaining "scroll into view" behaviour
      left: -100,
      opacity: 0,
      position: "relative",
      transform: "scale(.01)"
    }, "", "")
  }));
}
var cancelScroll = function cancelScroll2(event) {
  if (event.cancelable)
    event.preventDefault();
  event.stopPropagation();
};
function useScrollCapture(_ref3) {
  var isEnabled = _ref3.isEnabled, onBottomArrive = _ref3.onBottomArrive, onBottomLeave = _ref3.onBottomLeave, onTopArrive = _ref3.onTopArrive, onTopLeave = _ref3.onTopLeave;
  var isBottom = reactExports.useRef(false);
  var isTop = reactExports.useRef(false);
  var touchStart = reactExports.useRef(0);
  var scrollTarget = reactExports.useRef(null);
  var handleEventDelta = reactExports.useCallback(function(event, delta) {
    if (scrollTarget.current === null)
      return;
    var _scrollTarget$current = scrollTarget.current, scrollTop = _scrollTarget$current.scrollTop, scrollHeight = _scrollTarget$current.scrollHeight, clientHeight = _scrollTarget$current.clientHeight;
    var target = scrollTarget.current;
    var isDeltaPositive = delta > 0;
    var availableScroll = scrollHeight - clientHeight - scrollTop;
    var shouldCancelScroll = false;
    if (availableScroll > delta && isBottom.current) {
      if (onBottomLeave)
        onBottomLeave(event);
      isBottom.current = false;
    }
    if (isDeltaPositive && isTop.current) {
      if (onTopLeave)
        onTopLeave(event);
      isTop.current = false;
    }
    if (isDeltaPositive && delta > availableScroll) {
      if (onBottomArrive && !isBottom.current) {
        onBottomArrive(event);
      }
      target.scrollTop = scrollHeight;
      shouldCancelScroll = true;
      isBottom.current = true;
    } else if (!isDeltaPositive && -delta > scrollTop) {
      if (onTopArrive && !isTop.current) {
        onTopArrive(event);
      }
      target.scrollTop = 0;
      shouldCancelScroll = true;
      isTop.current = true;
    }
    if (shouldCancelScroll) {
      cancelScroll(event);
    }
  }, [onBottomArrive, onBottomLeave, onTopArrive, onTopLeave]);
  var onWheel = reactExports.useCallback(function(event) {
    handleEventDelta(event, event.deltaY);
  }, [handleEventDelta]);
  var onTouchStart = reactExports.useCallback(function(event) {
    touchStart.current = event.changedTouches[0].clientY;
  }, []);
  var onTouchMove = reactExports.useCallback(function(event) {
    var deltaY = touchStart.current - event.changedTouches[0].clientY;
    handleEventDelta(event, deltaY);
  }, [handleEventDelta]);
  var startListening = reactExports.useCallback(function(el2) {
    if (!el2)
      return;
    var notPassive = supportsPassiveEvents ? {
      passive: false
    } : false;
    el2.addEventListener("wheel", onWheel, notPassive);
    el2.addEventListener("touchstart", onTouchStart, notPassive);
    el2.addEventListener("touchmove", onTouchMove, notPassive);
  }, [onTouchMove, onTouchStart, onWheel]);
  var stopListening = reactExports.useCallback(function(el2) {
    if (!el2)
      return;
    el2.removeEventListener("wheel", onWheel, false);
    el2.removeEventListener("touchstart", onTouchStart, false);
    el2.removeEventListener("touchmove", onTouchMove, false);
  }, [onTouchMove, onTouchStart, onWheel]);
  reactExports.useEffect(function() {
    if (!isEnabled)
      return;
    var element = scrollTarget.current;
    startListening(element);
    return function() {
      stopListening(element);
    };
  }, [isEnabled, startListening, stopListening]);
  return function(element) {
    scrollTarget.current = element;
  };
}
var STYLE_KEYS = ["boxSizing", "height", "overflow", "paddingRight", "position"];
var LOCK_STYLES = {
  boxSizing: "border-box",
  // account for possible declaration `width: 100%;` on body
  overflow: "hidden",
  position: "relative",
  height: "100%"
};
function preventTouchMove(e2) {
  e2.preventDefault();
}
function allowTouchMove(e2) {
  e2.stopPropagation();
}
function preventInertiaScroll() {
  var top = this.scrollTop;
  var totalScroll = this.scrollHeight;
  var currentScroll = top + this.offsetHeight;
  if (top === 0) {
    this.scrollTop = 1;
  } else if (currentScroll === totalScroll) {
    this.scrollTop = top - 1;
  }
}
function isTouchDevice() {
  return "ontouchstart" in window || navigator.maxTouchPoints;
}
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var activeScrollLocks = 0;
var listenerOptions = {
  capture: false,
  passive: false
};
function useScrollLock(_ref3) {
  var isEnabled = _ref3.isEnabled, _ref$accountForScroll = _ref3.accountForScrollbars, accountForScrollbars = _ref$accountForScroll === void 0 ? true : _ref$accountForScroll;
  var originalStyles = reactExports.useRef({});
  var scrollTarget = reactExports.useRef(null);
  var addScrollLock = reactExports.useCallback(function(touchScrollTarget) {
    if (!canUseDOM)
      return;
    var target = document.body;
    var targetStyle = target && target.style;
    if (accountForScrollbars) {
      STYLE_KEYS.forEach(function(key) {
        var val = targetStyle && targetStyle[key];
        originalStyles.current[key] = val;
      });
    }
    if (accountForScrollbars && activeScrollLocks < 1) {
      var currentPadding = parseInt(originalStyles.current.paddingRight, 10) || 0;
      var clientWidth = document.body ? document.body.clientWidth : 0;
      var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0;
      Object.keys(LOCK_STYLES).forEach(function(key) {
        var val = LOCK_STYLES[key];
        if (targetStyle) {
          targetStyle[key] = val;
        }
      });
      if (targetStyle) {
        targetStyle.paddingRight = "".concat(adjustedPadding, "px");
      }
    }
    if (target && isTouchDevice()) {
      target.addEventListener("touchmove", preventTouchMove, listenerOptions);
      if (touchScrollTarget) {
        touchScrollTarget.addEventListener("touchstart", preventInertiaScroll, listenerOptions);
        touchScrollTarget.addEventListener("touchmove", allowTouchMove, listenerOptions);
      }
    }
    activeScrollLocks += 1;
  }, [accountForScrollbars]);
  var removeScrollLock = reactExports.useCallback(function(touchScrollTarget) {
    if (!canUseDOM)
      return;
    var target = document.body;
    var targetStyle = target && target.style;
    activeScrollLocks = Math.max(activeScrollLocks - 1, 0);
    if (accountForScrollbars && activeScrollLocks < 1) {
      STYLE_KEYS.forEach(function(key) {
        var val = originalStyles.current[key];
        if (targetStyle) {
          targetStyle[key] = val;
        }
      });
    }
    if (target && isTouchDevice()) {
      target.removeEventListener("touchmove", preventTouchMove, listenerOptions);
      if (touchScrollTarget) {
        touchScrollTarget.removeEventListener("touchstart", preventInertiaScroll, listenerOptions);
        touchScrollTarget.removeEventListener("touchmove", allowTouchMove, listenerOptions);
      }
    }
  }, [accountForScrollbars]);
  reactExports.useEffect(function() {
    if (!isEnabled)
      return;
    var element = scrollTarget.current;
    addScrollLock(element);
    return function() {
      removeScrollLock(element);
    };
  }, [isEnabled, addScrollLock, removeScrollLock]);
  return function(element) {
    scrollTarget.current = element;
  };
}
var blurSelectInput = function blurSelectInput2(event) {
  var element = event.target;
  return element.ownerDocument.activeElement && element.ownerDocument.activeElement.blur();
};
var _ref2$1 = {
  name: "1kfdb0e",
  styles: "position:fixed;left:0;bottom:0;right:0;top:0"
};
function ScrollManager(_ref3) {
  var children = _ref3.children, lockEnabled = _ref3.lockEnabled, _ref$captureEnabled = _ref3.captureEnabled, captureEnabled = _ref$captureEnabled === void 0 ? true : _ref$captureEnabled, onBottomArrive = _ref3.onBottomArrive, onBottomLeave = _ref3.onBottomLeave, onTopArrive = _ref3.onTopArrive, onTopLeave = _ref3.onTopLeave;
  var setScrollCaptureTarget = useScrollCapture({
    isEnabled: captureEnabled,
    onBottomArrive,
    onBottomLeave,
    onTopArrive,
    onTopLeave
  });
  var setScrollLockTarget = useScrollLock({
    isEnabled: lockEnabled
  });
  var targetRef = function targetRef2(element) {
    setScrollCaptureTarget(element);
    setScrollLockTarget(element);
  };
  return jsx(reactExports.Fragment, null, lockEnabled && jsx("div", {
    onClick: blurSelectInput,
    css: _ref2$1
  }), children(targetRef));
}
var _ref2 = {
  name: "1a0ro4n-requiredInput",
  styles: "label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%"
};
var RequiredInput = function RequiredInput2(_ref3) {
  var name = _ref3.name, onFocus2 = _ref3.onFocus;
  return jsx("input", {
    required: true,
    name,
    tabIndex: -1,
    "aria-hidden": "true",
    onFocus: onFocus2,
    css: _ref2,
    value: "",
    onChange: function onChange2() {
    }
  });
};
var RequiredInput$1 = RequiredInput;
function testPlatform(re2) {
  var _window$navigator$use;
  return typeof window !== "undefined" && window.navigator != null ? re2.test(((_window$navigator$use = window.navigator["userAgentData"]) === null || _window$navigator$use === void 0 ? void 0 : _window$navigator$use.platform) || window.navigator.platform) : false;
}
function isIPhone() {
  return testPlatform(/^iPhone/i);
}
function isMac() {
  return testPlatform(/^Mac/i);
}
function isIPad() {
  return testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  isMac() && navigator.maxTouchPoints > 1;
}
function isIOS() {
  return isIPhone() || isIPad();
}
function isAppleDevice() {
  return isMac() || isIOS();
}
var formatGroupLabel = function formatGroupLabel2(group) {
  return group.label;
};
var getOptionLabel$1 = function getOptionLabel(option) {
  return option.label;
};
var getOptionValue$1 = function getOptionValue3(option) {
  return option.value;
};
var isOptionDisabled = function isOptionDisabled2(option) {
  return !!option.isDisabled;
};
var defaultStyles = {
  clearIndicator: clearIndicatorCSS,
  container: containerCSS,
  control: css$1,
  dropdownIndicator: dropdownIndicatorCSS,
  group: groupCSS,
  groupHeading: groupHeadingCSS,
  indicatorsContainer: indicatorsContainerCSS,
  indicatorSeparator: indicatorSeparatorCSS,
  input: inputCSS,
  loadingIndicator: loadingIndicatorCSS,
  loadingMessage: loadingMessageCSS,
  menu: menuCSS,
  menuList: menuListCSS,
  menuPortal: menuPortalCSS,
  multiValue: multiValueCSS,
  multiValueLabel: multiValueLabelCSS,
  multiValueRemove: multiValueRemoveCSS,
  noOptionsMessage: noOptionsMessageCSS,
  option: optionCSS,
  placeholder: placeholderCSS,
  singleValue: css22,
  valueContainer: valueContainerCSS
};
var colors = {
  primary: "#2684FF",
  primary75: "#4C9AFF",
  primary50: "#B2D4FF",
  primary25: "#DEEBFF",
  danger: "#DE350B",
  dangerLight: "#FFBDAD",
  neutral0: "hsl(0, 0%, 100%)",
  neutral5: "hsl(0, 0%, 95%)",
  neutral10: "hsl(0, 0%, 90%)",
  neutral20: "hsl(0, 0%, 80%)",
  neutral30: "hsl(0, 0%, 70%)",
  neutral40: "hsl(0, 0%, 60%)",
  neutral50: "hsl(0, 0%, 50%)",
  neutral60: "hsl(0, 0%, 40%)",
  neutral70: "hsl(0, 0%, 30%)",
  neutral80: "hsl(0, 0%, 20%)",
  neutral90: "hsl(0, 0%, 10%)"
};
var borderRadius = 4;
var baseUnit = 4;
var controlHeight = 38;
var menuGutter = baseUnit * 2;
var spacing = {
  baseUnit,
  controlHeight,
  menuGutter
};
var defaultTheme = {
  borderRadius,
  colors,
  spacing
};
var defaultProps = {
  "aria-live": "polite",
  backspaceRemovesValue: true,
  blurInputOnSelect: isTouchCapable(),
  captureMenuScroll: !isTouchCapable(),
  classNames: {},
  closeMenuOnSelect: true,
  closeMenuOnScroll: false,
  components: {},
  controlShouldRenderValue: true,
  escapeClearsValue: false,
  filterOption: createFilter(),
  formatGroupLabel,
  getOptionLabel: getOptionLabel$1,
  getOptionValue: getOptionValue$1,
  isDisabled: false,
  isLoading: false,
  isMulti: false,
  isRtl: false,
  isSearchable: true,
  isOptionDisabled,
  loadingMessage: function loadingMessage() {
    return "Loading...";
  },
  maxMenuHeight: 300,
  minMenuHeight: 140,
  menuIsOpen: false,
  menuPlacement: "bottom",
  menuPosition: "absolute",
  menuShouldBlockScroll: false,
  menuShouldScrollIntoView: !isMobileDevice(),
  noOptionsMessage: function noOptionsMessage() {
    return "No options";
  },
  openMenuOnFocus: false,
  openMenuOnClick: true,
  options: [],
  pageSize: 5,
  placeholder: "Select...",
  screenReaderStatus: function screenReaderStatus(_ref3) {
    var count = _ref3.count;
    return "".concat(count, " result").concat(count !== 1 ? "s" : "", " available");
  },
  styles: {},
  tabIndex: 0,
  tabSelectsValue: true,
  unstyled: false
};
function toCategorizedOption(props, option, selectValue, index2) {
  var isDisabled = _isOptionDisabled(props, option, selectValue);
  var isSelected = _isOptionSelected(props, option, selectValue);
  var label = getOptionLabel2(props, option);
  var value = getOptionValue22(props, option);
  return {
    type: "option",
    data: option,
    isDisabled,
    isSelected,
    label,
    value,
    index: index2
  };
}
function buildCategorizedOptions(props, selectValue) {
  return props.options.map(function(groupOrOption, groupOrOptionIndex) {
    if ("options" in groupOrOption) {
      var categorizedOptions = groupOrOption.options.map(function(option, optionIndex) {
        return toCategorizedOption(props, option, selectValue, optionIndex);
      }).filter(function(categorizedOption2) {
        return isFocusable(props, categorizedOption2);
      });
      return categorizedOptions.length > 0 ? {
        type: "group",
        data: groupOrOption,
        options: categorizedOptions,
        index: groupOrOptionIndex
      } : void 0;
    }
    var categorizedOption = toCategorizedOption(props, groupOrOption, selectValue, groupOrOptionIndex);
    return isFocusable(props, categorizedOption) ? categorizedOption : void 0;
  }).filter(notNullish);
}
function buildFocusableOptionsFromCategorizedOptions(categorizedOptions) {
  return categorizedOptions.reduce(function(optionsAccumulator, categorizedOption) {
    if (categorizedOption.type === "group") {
      optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray(categorizedOption.options.map(function(option) {
        return option.data;
      })));
    } else {
      optionsAccumulator.push(categorizedOption.data);
    }
    return optionsAccumulator;
  }, []);
}
function buildFocusableOptionsWithIds(categorizedOptions, optionId) {
  return categorizedOptions.reduce(function(optionsAccumulator, categorizedOption) {
    if (categorizedOption.type === "group") {
      optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray(categorizedOption.options.map(function(option) {
        return {
          data: option.data,
          id: "".concat(optionId, "-").concat(categorizedOption.index, "-").concat(option.index)
        };
      })));
    } else {
      optionsAccumulator.push({
        data: categorizedOption.data,
        id: "".concat(optionId, "-").concat(categorizedOption.index)
      });
    }
    return optionsAccumulator;
  }, []);
}
function buildFocusableOptions(props, selectValue) {
  return buildFocusableOptionsFromCategorizedOptions(buildCategorizedOptions(props, selectValue));
}
function isFocusable(props, categorizedOption) {
  var _props$inputValue = props.inputValue, inputValue = _props$inputValue === void 0 ? "" : _props$inputValue;
  var data = categorizedOption.data, isSelected = categorizedOption.isSelected, label = categorizedOption.label, value = categorizedOption.value;
  return (!shouldHideSelectedOptions(props) || !isSelected) && _filterOption(props, {
    label,
    value,
    data
  }, inputValue);
}
function getNextFocusedValue(state2, nextSelectValue) {
  var focusedValue = state2.focusedValue, lastSelectValue = state2.selectValue;
  var lastFocusedIndex = lastSelectValue.indexOf(focusedValue);
  if (lastFocusedIndex > -1) {
    var nextFocusedIndex = nextSelectValue.indexOf(focusedValue);
    if (nextFocusedIndex > -1) {
      return focusedValue;
    } else if (lastFocusedIndex < nextSelectValue.length) {
      return nextSelectValue[lastFocusedIndex];
    }
  }
  return null;
}
function getNextFocusedOption(state2, options2) {
  var lastFocusedOption = state2.focusedOption;
  return lastFocusedOption && options2.indexOf(lastFocusedOption) > -1 ? lastFocusedOption : options2[0];
}
var getFocusedOptionId = function getFocusedOptionId2(focusableOptionsWithIds, focusedOption) {
  var _focusableOptionsWith;
  var focusedOptionId = (_focusableOptionsWith = focusableOptionsWithIds.find(function(option) {
    return option.data === focusedOption;
  })) === null || _focusableOptionsWith === void 0 ? void 0 : _focusableOptionsWith.id;
  return focusedOptionId || null;
};
var getOptionLabel2 = function getOptionLabel3(props, data) {
  return props.getOptionLabel(data);
};
var getOptionValue22 = function getOptionValue32(props, data) {
  return props.getOptionValue(data);
};
function _isOptionDisabled(props, option, selectValue) {
  return typeof props.isOptionDisabled === "function" ? props.isOptionDisabled(option, selectValue) : false;
}
function _isOptionSelected(props, option, selectValue) {
  if (selectValue.indexOf(option) > -1)
    return true;
  if (typeof props.isOptionSelected === "function") {
    return props.isOptionSelected(option, selectValue);
  }
  var candidate = getOptionValue22(props, option);
  return selectValue.some(function(i) {
    return getOptionValue22(props, i) === candidate;
  });
}
function _filterOption(props, option, inputValue) {
  return props.filterOption ? props.filterOption(option, inputValue) : true;
}
var shouldHideSelectedOptions = function shouldHideSelectedOptions2(props) {
  var hideSelectedOptions = props.hideSelectedOptions, isMulti = props.isMulti;
  if (hideSelectedOptions === void 0)
    return isMulti;
  return hideSelectedOptions;
};
var instanceId = 1;
var Select = /* @__PURE__ */ function(_Component) {
  _inherits(Select2, _Component);
  var _super = _createSuper(Select2);
  function Select2(_props) {
    var _this;
    _classCallCheck(this, Select2);
    _this = _super.call(this, _props);
    _this.state = {
      ariaSelection: null,
      focusedOption: null,
      focusedOptionId: null,
      focusableOptionsWithIds: [],
      focusedValue: null,
      inputIsHidden: false,
      isFocused: false,
      selectValue: [],
      clearFocusValueOnUpdate: false,
      prevWasFocused: false,
      inputIsHiddenAfterUpdate: void 0,
      prevProps: void 0,
      instancePrefix: ""
    };
    _this.blockOptionHover = false;
    _this.isComposing = false;
    _this.commonProps = void 0;
    _this.initialTouchX = 0;
    _this.initialTouchY = 0;
    _this.openAfterFocus = false;
    _this.scrollToFocusedOptionOnUpdate = false;
    _this.userIsDragging = void 0;
    _this.isAppleDevice = isAppleDevice();
    _this.controlRef = null;
    _this.getControlRef = function(ref) {
      _this.controlRef = ref;
    };
    _this.focusedOptionRef = null;
    _this.getFocusedOptionRef = function(ref) {
      _this.focusedOptionRef = ref;
    };
    _this.menuListRef = null;
    _this.getMenuListRef = function(ref) {
      _this.menuListRef = ref;
    };
    _this.inputRef = null;
    _this.getInputRef = function(ref) {
      _this.inputRef = ref;
    };
    _this.focus = _this.focusInput;
    _this.blur = _this.blurInput;
    _this.onChange = function(newValue, actionMeta) {
      var _this$props = _this.props, onChange2 = _this$props.onChange, name = _this$props.name;
      actionMeta.name = name;
      _this.ariaOnChange(newValue, actionMeta);
      onChange2(newValue, actionMeta);
    };
    _this.setValue = function(newValue, action2, option) {
      var _this$props2 = _this.props, closeMenuOnSelect = _this$props2.closeMenuOnSelect, isMulti = _this$props2.isMulti, inputValue = _this$props2.inputValue;
      _this.onInputChange("", {
        action: "set-value",
        prevInputValue: inputValue
      });
      if (closeMenuOnSelect) {
        _this.setState({
          inputIsHiddenAfterUpdate: !isMulti
        });
        _this.onMenuClose();
      }
      _this.setState({
        clearFocusValueOnUpdate: true
      });
      _this.onChange(newValue, {
        action: action2,
        option
      });
    };
    _this.selectOption = function(newValue) {
      var _this$props3 = _this.props, blurInputOnSelect = _this$props3.blurInputOnSelect, isMulti = _this$props3.isMulti, name = _this$props3.name;
      var selectValue = _this.state.selectValue;
      var deselected = isMulti && _this.isOptionSelected(newValue, selectValue);
      var isDisabled = _this.isOptionDisabled(newValue, selectValue);
      if (deselected) {
        var candidate = _this.getOptionValue(newValue);
        _this.setValue(multiValueAsValue(selectValue.filter(function(i) {
          return _this.getOptionValue(i) !== candidate;
        })), "deselect-option", newValue);
      } else if (!isDisabled) {
        if (isMulti) {
          _this.setValue(multiValueAsValue([].concat(_toConsumableArray(selectValue), [newValue])), "select-option", newValue);
        } else {
          _this.setValue(singleValueAsValue(newValue), "select-option");
        }
      } else {
        _this.ariaOnChange(singleValueAsValue(newValue), {
          action: "select-option",
          option: newValue,
          name
        });
        return;
      }
      if (blurInputOnSelect) {
        _this.blurInput();
      }
    };
    _this.removeValue = function(removedValue) {
      var isMulti = _this.props.isMulti;
      var selectValue = _this.state.selectValue;
      var candidate = _this.getOptionValue(removedValue);
      var newValueArray = selectValue.filter(function(i) {
        return _this.getOptionValue(i) !== candidate;
      });
      var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
      _this.onChange(newValue, {
        action: "remove-value",
        removedValue
      });
      _this.focusInput();
    };
    _this.clearValue = function() {
      var selectValue = _this.state.selectValue;
      _this.onChange(valueTernary(_this.props.isMulti, [], null), {
        action: "clear",
        removedValues: selectValue
      });
    };
    _this.popValue = function() {
      var isMulti = _this.props.isMulti;
      var selectValue = _this.state.selectValue;
      var lastSelectedValue = selectValue[selectValue.length - 1];
      var newValueArray = selectValue.slice(0, selectValue.length - 1);
      var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
      _this.onChange(newValue, {
        action: "pop-value",
        removedValue: lastSelectedValue
      });
    };
    _this.getFocusedOptionId = function(focusedOption) {
      return getFocusedOptionId(_this.state.focusableOptionsWithIds, focusedOption);
    };
    _this.getFocusableOptionsWithIds = function() {
      return buildFocusableOptionsWithIds(buildCategorizedOptions(_this.props, _this.state.selectValue), _this.getElementId("option"));
    };
    _this.getValue = function() {
      return _this.state.selectValue;
    };
    _this.cx = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return classNames.apply(void 0, [_this.props.classNamePrefix].concat(args));
    };
    _this.getOptionLabel = function(data) {
      return getOptionLabel2(_this.props, data);
    };
    _this.getOptionValue = function(data) {
      return getOptionValue22(_this.props, data);
    };
    _this.getStyles = function(key, props) {
      var unstyled = _this.props.unstyled;
      var base = defaultStyles[key](props, unstyled);
      base.boxSizing = "border-box";
      var custom = _this.props.styles[key];
      return custom ? custom(base, props) : base;
    };
    _this.getClassNames = function(key, props) {
      var _this$props$className, _this$props$className2;
      return (_this$props$className = (_this$props$className2 = _this.props.classNames)[key]) === null || _this$props$className === void 0 ? void 0 : _this$props$className.call(_this$props$className2, props);
    };
    _this.getElementId = function(element) {
      return "".concat(_this.state.instancePrefix, "-").concat(element);
    };
    _this.getComponents = function() {
      return defaultComponents(_this.props);
    };
    _this.buildCategorizedOptions = function() {
      return buildCategorizedOptions(_this.props, _this.state.selectValue);
    };
    _this.getCategorizedOptions = function() {
      return _this.props.menuIsOpen ? _this.buildCategorizedOptions() : [];
    };
    _this.buildFocusableOptions = function() {
      return buildFocusableOptionsFromCategorizedOptions(_this.buildCategorizedOptions());
    };
    _this.getFocusableOptions = function() {
      return _this.props.menuIsOpen ? _this.buildFocusableOptions() : [];
    };
    _this.ariaOnChange = function(value, actionMeta) {
      _this.setState({
        ariaSelection: _objectSpread2({
          value
        }, actionMeta)
      });
    };
    _this.onMenuMouseDown = function(event) {
      if (event.button !== 0) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      _this.focusInput();
    };
    _this.onMenuMouseMove = function(event) {
      _this.blockOptionHover = false;
    };
    _this.onControlMouseDown = function(event) {
      if (event.defaultPrevented) {
        return;
      }
      var openMenuOnClick = _this.props.openMenuOnClick;
      if (!_this.state.isFocused) {
        if (openMenuOnClick) {
          _this.openAfterFocus = true;
        }
        _this.focusInput();
      } else if (!_this.props.menuIsOpen) {
        if (openMenuOnClick) {
          _this.openMenu("first");
        }
      } else {
        if (event.target.tagName !== "INPUT" && event.target.tagName !== "TEXTAREA") {
          _this.onMenuClose();
        }
      }
      if (event.target.tagName !== "INPUT" && event.target.tagName !== "TEXTAREA") {
        event.preventDefault();
      }
    };
    _this.onDropdownIndicatorMouseDown = function(event) {
      if (event && event.type === "mousedown" && event.button !== 0) {
        return;
      }
      if (_this.props.isDisabled)
        return;
      var _this$props4 = _this.props, isMulti = _this$props4.isMulti, menuIsOpen = _this$props4.menuIsOpen;
      _this.focusInput();
      if (menuIsOpen) {
        _this.setState({
          inputIsHiddenAfterUpdate: !isMulti
        });
        _this.onMenuClose();
      } else {
        _this.openMenu("first");
      }
      event.preventDefault();
    };
    _this.onClearIndicatorMouseDown = function(event) {
      if (event && event.type === "mousedown" && event.button !== 0) {
        return;
      }
      _this.clearValue();
      event.preventDefault();
      _this.openAfterFocus = false;
      if (event.type === "touchend") {
        _this.focusInput();
      } else {
        setTimeout(function() {
          return _this.focusInput();
        });
      }
    };
    _this.onScroll = function(event) {
      if (typeof _this.props.closeMenuOnScroll === "boolean") {
        if (event.target instanceof HTMLElement && isDocumentElement(event.target)) {
          _this.props.onMenuClose();
        }
      } else if (typeof _this.props.closeMenuOnScroll === "function") {
        if (_this.props.closeMenuOnScroll(event)) {
          _this.props.onMenuClose();
        }
      }
    };
    _this.onCompositionStart = function() {
      _this.isComposing = true;
    };
    _this.onCompositionEnd = function() {
      _this.isComposing = false;
    };
    _this.onTouchStart = function(_ref22) {
      var touches = _ref22.touches;
      var touch = touches && touches.item(0);
      if (!touch) {
        return;
      }
      _this.initialTouchX = touch.clientX;
      _this.initialTouchY = touch.clientY;
      _this.userIsDragging = false;
    };
    _this.onTouchMove = function(_ref3) {
      var touches = _ref3.touches;
      var touch = touches && touches.item(0);
      if (!touch) {
        return;
      }
      var deltaX = Math.abs(touch.clientX - _this.initialTouchX);
      var deltaY = Math.abs(touch.clientY - _this.initialTouchY);
      var moveThreshold = 5;
      _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;
    };
    _this.onTouchEnd = function(event) {
      if (_this.userIsDragging)
        return;
      if (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target)) {
        _this.blurInput();
      }
      _this.initialTouchX = 0;
      _this.initialTouchY = 0;
    };
    _this.onControlTouchEnd = function(event) {
      if (_this.userIsDragging)
        return;
      _this.onControlMouseDown(event);
    };
    _this.onClearIndicatorTouchEnd = function(event) {
      if (_this.userIsDragging)
        return;
      _this.onClearIndicatorMouseDown(event);
    };
    _this.onDropdownIndicatorTouchEnd = function(event) {
      if (_this.userIsDragging)
        return;
      _this.onDropdownIndicatorMouseDown(event);
    };
    _this.handleInputChange = function(event) {
      var prevInputValue = _this.props.inputValue;
      var inputValue = event.currentTarget.value;
      _this.setState({
        inputIsHiddenAfterUpdate: false
      });
      _this.onInputChange(inputValue, {
        action: "input-change",
        prevInputValue
      });
      if (!_this.props.menuIsOpen) {
        _this.onMenuOpen();
      }
    };
    _this.onInputFocus = function(event) {
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
      _this.setState({
        inputIsHiddenAfterUpdate: false,
        isFocused: true
      });
      if (_this.openAfterFocus || _this.props.openMenuOnFocus) {
        _this.openMenu("first");
      }
      _this.openAfterFocus = false;
    };
    _this.onInputBlur = function(event) {
      var prevInputValue = _this.props.inputValue;
      if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
        _this.inputRef.focus();
        return;
      }
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
      _this.onInputChange("", {
        action: "input-blur",
        prevInputValue
      });
      _this.onMenuClose();
      _this.setState({
        focusedValue: null,
        isFocused: false
      });
    };
    _this.onOptionHover = function(focusedOption) {
      if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {
        return;
      }
      var options2 = _this.getFocusableOptions();
      var focusedOptionIndex = options2.indexOf(focusedOption);
      _this.setState({
        focusedOption,
        focusedOptionId: focusedOptionIndex > -1 ? _this.getFocusedOptionId(focusedOption) : null
      });
    };
    _this.shouldHideSelectedOptions = function() {
      return shouldHideSelectedOptions(_this.props);
    };
    _this.onValueInputFocus = function(e2) {
      e2.preventDefault();
      e2.stopPropagation();
      _this.focus();
    };
    _this.onKeyDown = function(event) {
      var _this$props5 = _this.props, isMulti = _this$props5.isMulti, backspaceRemovesValue = _this$props5.backspaceRemovesValue, escapeClearsValue = _this$props5.escapeClearsValue, inputValue = _this$props5.inputValue, isClearable = _this$props5.isClearable, isDisabled = _this$props5.isDisabled, menuIsOpen = _this$props5.menuIsOpen, onKeyDown = _this$props5.onKeyDown, tabSelectsValue = _this$props5.tabSelectsValue, openMenuOnFocus = _this$props5.openMenuOnFocus;
      var _this$state = _this.state, focusedOption = _this$state.focusedOption, focusedValue = _this$state.focusedValue, selectValue = _this$state.selectValue;
      if (isDisabled)
        return;
      if (typeof onKeyDown === "function") {
        onKeyDown(event);
        if (event.defaultPrevented) {
          return;
        }
      }
      _this.blockOptionHover = true;
      switch (event.key) {
        case "ArrowLeft":
          if (!isMulti || inputValue)
            return;
          _this.focusValue("previous");
          break;
        case "ArrowRight":
          if (!isMulti || inputValue)
            return;
          _this.focusValue("next");
          break;
        case "Delete":
        case "Backspace":
          if (inputValue)
            return;
          if (focusedValue) {
            _this.removeValue(focusedValue);
          } else {
            if (!backspaceRemovesValue)
              return;
            if (isMulti) {
              _this.popValue();
            } else if (isClearable) {
              _this.clearValue();
            }
          }
          break;
        case "Tab":
          if (_this.isComposing)
            return;
          if (event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption || // don't capture the event if the menu opens on focus and the focused
          // option is already selected; it breaks the flow of navigation
          openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue)) {
            return;
          }
          _this.selectOption(focusedOption);
          break;
        case "Enter":
          if (event.keyCode === 229) {
            break;
          }
          if (menuIsOpen) {
            if (!focusedOption)
              return;
            if (_this.isComposing)
              return;
            _this.selectOption(focusedOption);
            break;
          }
          return;
        case "Escape":
          if (menuIsOpen) {
            _this.setState({
              inputIsHiddenAfterUpdate: false
            });
            _this.onInputChange("", {
              action: "menu-close",
              prevInputValue: inputValue
            });
            _this.onMenuClose();
          } else if (isClearable && escapeClearsValue) {
            _this.clearValue();
          }
          break;
        case " ":
          if (inputValue) {
            return;
          }
          if (!menuIsOpen) {
            _this.openMenu("first");
            break;
          }
          if (!focusedOption)
            return;
          _this.selectOption(focusedOption);
          break;
        case "ArrowUp":
          if (menuIsOpen) {
            _this.focusOption("up");
          } else {
            _this.openMenu("last");
          }
          break;
        case "ArrowDown":
          if (menuIsOpen) {
            _this.focusOption("down");
          } else {
            _this.openMenu("first");
          }
          break;
        case "PageUp":
          if (!menuIsOpen)
            return;
          _this.focusOption("pageup");
          break;
        case "PageDown":
          if (!menuIsOpen)
            return;
          _this.focusOption("pagedown");
          break;
        case "Home":
          if (!menuIsOpen)
            return;
          _this.focusOption("first");
          break;
        case "End":
          if (!menuIsOpen)
            return;
          _this.focusOption("last");
          break;
        default:
          return;
      }
      event.preventDefault();
    };
    _this.state.instancePrefix = "react-select-" + (_this.props.instanceId || ++instanceId);
    _this.state.selectValue = cleanValue(_props.value);
    if (_props.menuIsOpen && _this.state.selectValue.length) {
      var focusableOptionsWithIds = _this.getFocusableOptionsWithIds();
      var focusableOptions = _this.buildFocusableOptions();
      var optionIndex = focusableOptions.indexOf(_this.state.selectValue[0]);
      _this.state.focusableOptionsWithIds = focusableOptionsWithIds;
      _this.state.focusedOption = focusableOptions[optionIndex];
      _this.state.focusedOptionId = getFocusedOptionId(focusableOptionsWithIds, focusableOptions[optionIndex]);
    }
    return _this;
  }
  _createClass(Select2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.startListeningComposition();
      this.startListeningToTouch();
      if (this.props.closeMenuOnScroll && document && document.addEventListener) {
        document.addEventListener("scroll", this.onScroll, true);
      }
      if (this.props.autoFocus) {
        this.focusInput();
      }
      if (this.props.menuIsOpen && this.state.focusedOption && this.menuListRef && this.focusedOptionRef) {
        scrollIntoView(this.menuListRef, this.focusedOptionRef);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props6 = this.props, isDisabled = _this$props6.isDisabled, menuIsOpen = _this$props6.menuIsOpen;
      var isFocused = this.state.isFocused;
      if (
        // ensure focus is restored correctly when the control becomes enabled
        isFocused && !isDisabled && prevProps.isDisabled || // ensure focus is on the Input when the menu opens
        isFocused && menuIsOpen && !prevProps.menuIsOpen
      ) {
        this.focusInput();
      }
      if (isFocused && isDisabled && !prevProps.isDisabled) {
        this.setState({
          isFocused: false
        }, this.onMenuClose);
      } else if (!isFocused && !isDisabled && prevProps.isDisabled && this.inputRef === document.activeElement) {
        this.setState({
          isFocused: true
        });
      }
      if (this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate) {
        scrollIntoView(this.menuListRef, this.focusedOptionRef);
        this.scrollToFocusedOptionOnUpdate = false;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.stopListeningComposition();
      this.stopListeningToTouch();
      document.removeEventListener("scroll", this.onScroll, true);
    }
    // ==============================
    // Consumer Handlers
    // ==============================
  }, {
    key: "onMenuOpen",
    value: function onMenuOpen() {
      this.props.onMenuOpen();
    }
  }, {
    key: "onMenuClose",
    value: function onMenuClose() {
      this.onInputChange("", {
        action: "menu-close",
        prevInputValue: this.props.inputValue
      });
      this.props.onMenuClose();
    }
  }, {
    key: "onInputChange",
    value: function onInputChange(newValue, actionMeta) {
      this.props.onInputChange(newValue, actionMeta);
    }
    // ==============================
    // Methods
    // ==============================
  }, {
    key: "focusInput",
    value: function focusInput() {
      if (!this.inputRef)
        return;
      this.inputRef.focus();
    }
  }, {
    key: "blurInput",
    value: function blurInput() {
      if (!this.inputRef)
        return;
      this.inputRef.blur();
    }
    // aliased for consumers
  }, {
    key: "openMenu",
    value: function openMenu(focusOption) {
      var _this2 = this;
      var _this$state2 = this.state, selectValue = _this$state2.selectValue, isFocused = _this$state2.isFocused;
      var focusableOptions = this.buildFocusableOptions();
      var openAtIndex = focusOption === "first" ? 0 : focusableOptions.length - 1;
      if (!this.props.isMulti) {
        var selectedIndex = focusableOptions.indexOf(selectValue[0]);
        if (selectedIndex > -1) {
          openAtIndex = selectedIndex;
        }
      }
      this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);
      this.setState({
        inputIsHiddenAfterUpdate: false,
        focusedValue: null,
        focusedOption: focusableOptions[openAtIndex],
        focusedOptionId: this.getFocusedOptionId(focusableOptions[openAtIndex])
      }, function() {
        return _this2.onMenuOpen();
      });
    }
  }, {
    key: "focusValue",
    value: function focusValue(direction) {
      var _this$state3 = this.state, selectValue = _this$state3.selectValue, focusedValue = _this$state3.focusedValue;
      if (!this.props.isMulti)
        return;
      this.setState({
        focusedOption: null
      });
      var focusedIndex = selectValue.indexOf(focusedValue);
      if (!focusedValue) {
        focusedIndex = -1;
      }
      var lastIndex = selectValue.length - 1;
      var nextFocus = -1;
      if (!selectValue.length)
        return;
      switch (direction) {
        case "previous":
          if (focusedIndex === 0) {
            nextFocus = 0;
          } else if (focusedIndex === -1) {
            nextFocus = lastIndex;
          } else {
            nextFocus = focusedIndex - 1;
          }
          break;
        case "next":
          if (focusedIndex > -1 && focusedIndex < lastIndex) {
            nextFocus = focusedIndex + 1;
          }
          break;
      }
      this.setState({
        inputIsHidden: nextFocus !== -1,
        focusedValue: selectValue[nextFocus]
      });
    }
  }, {
    key: "focusOption",
    value: function focusOption() {
      var direction = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "first";
      var pageSize = this.props.pageSize;
      var focusedOption = this.state.focusedOption;
      var options2 = this.getFocusableOptions();
      if (!options2.length)
        return;
      var nextFocus = 0;
      var focusedIndex = options2.indexOf(focusedOption);
      if (!focusedOption) {
        focusedIndex = -1;
      }
      if (direction === "up") {
        nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options2.length - 1;
      } else if (direction === "down") {
        nextFocus = (focusedIndex + 1) % options2.length;
      } else if (direction === "pageup") {
        nextFocus = focusedIndex - pageSize;
        if (nextFocus < 0)
          nextFocus = 0;
      } else if (direction === "pagedown") {
        nextFocus = focusedIndex + pageSize;
        if (nextFocus > options2.length - 1)
          nextFocus = options2.length - 1;
      } else if (direction === "last") {
        nextFocus = options2.length - 1;
      }
      this.scrollToFocusedOptionOnUpdate = true;
      this.setState({
        focusedOption: options2[nextFocus],
        focusedValue: null,
        focusedOptionId: this.getFocusedOptionId(options2[nextFocus])
      });
    }
  }, {
    key: "getTheme",
    value: (
      // ==============================
      // Getters
      // ==============================
      function getTheme() {
        if (!this.props.theme) {
          return defaultTheme;
        }
        if (typeof this.props.theme === "function") {
          return this.props.theme(defaultTheme);
        }
        return _objectSpread2(_objectSpread2({}, defaultTheme), this.props.theme);
      }
    )
  }, {
    key: "getCommonProps",
    value: function getCommonProps() {
      var clearValue = this.clearValue, cx = this.cx, getStyles = this.getStyles, getClassNames = this.getClassNames, getValue = this.getValue, selectOption = this.selectOption, setValue = this.setValue, props = this.props;
      var isMulti = props.isMulti, isRtl = props.isRtl, options2 = props.options;
      var hasValue = this.hasValue();
      return {
        clearValue,
        cx,
        getStyles,
        getClassNames,
        getValue,
        hasValue,
        isMulti,
        isRtl,
        options: options2,
        selectOption,
        selectProps: props,
        setValue,
        theme: this.getTheme()
      };
    }
  }, {
    key: "hasValue",
    value: function hasValue() {
      var selectValue = this.state.selectValue;
      return selectValue.length > 0;
    }
  }, {
    key: "hasOptions",
    value: function hasOptions() {
      return !!this.getFocusableOptions().length;
    }
  }, {
    key: "isClearable",
    value: function isClearable() {
      var _this$props7 = this.props, isClearable2 = _this$props7.isClearable, isMulti = _this$props7.isMulti;
      if (isClearable2 === void 0)
        return isMulti;
      return isClearable2;
    }
  }, {
    key: "isOptionDisabled",
    value: function isOptionDisabled3(option, selectValue) {
      return _isOptionDisabled(this.props, option, selectValue);
    }
  }, {
    key: "isOptionSelected",
    value: function isOptionSelected(option, selectValue) {
      return _isOptionSelected(this.props, option, selectValue);
    }
  }, {
    key: "filterOption",
    value: function filterOption(option, inputValue) {
      return _filterOption(this.props, option, inputValue);
    }
  }, {
    key: "formatOptionLabel",
    value: function formatOptionLabel(data, context) {
      if (typeof this.props.formatOptionLabel === "function") {
        var _inputValue = this.props.inputValue;
        var _selectValue = this.state.selectValue;
        return this.props.formatOptionLabel(data, {
          context,
          inputValue: _inputValue,
          selectValue: _selectValue
        });
      } else {
        return this.getOptionLabel(data);
      }
    }
  }, {
    key: "formatGroupLabel",
    value: function formatGroupLabel3(data) {
      return this.props.formatGroupLabel(data);
    }
    // ==============================
    // Mouse Handlers
    // ==============================
  }, {
    key: "startListeningComposition",
    value: (
      // ==============================
      // Composition Handlers
      // ==============================
      function startListeningComposition() {
        if (document && document.addEventListener) {
          document.addEventListener("compositionstart", this.onCompositionStart, false);
          document.addEventListener("compositionend", this.onCompositionEnd, false);
        }
      }
    )
  }, {
    key: "stopListeningComposition",
    value: function stopListeningComposition() {
      if (document && document.removeEventListener) {
        document.removeEventListener("compositionstart", this.onCompositionStart);
        document.removeEventListener("compositionend", this.onCompositionEnd);
      }
    }
  }, {
    key: "startListeningToTouch",
    value: (
      // ==============================
      // Touch Handlers
      // ==============================
      function startListeningToTouch() {
        if (document && document.addEventListener) {
          document.addEventListener("touchstart", this.onTouchStart, false);
          document.addEventListener("touchmove", this.onTouchMove, false);
          document.addEventListener("touchend", this.onTouchEnd, false);
        }
      }
    )
  }, {
    key: "stopListeningToTouch",
    value: function stopListeningToTouch() {
      if (document && document.removeEventListener) {
        document.removeEventListener("touchstart", this.onTouchStart);
        document.removeEventListener("touchmove", this.onTouchMove);
        document.removeEventListener("touchend", this.onTouchEnd);
      }
    }
  }, {
    key: "renderInput",
    value: (
      // ==============================
      // Renderers
      // ==============================
      function renderInput() {
        var _this$props8 = this.props, isDisabled = _this$props8.isDisabled, isSearchable = _this$props8.isSearchable, inputId = _this$props8.inputId, inputValue = _this$props8.inputValue, tabIndex = _this$props8.tabIndex, form = _this$props8.form, menuIsOpen = _this$props8.menuIsOpen, required = _this$props8.required;
        var _this$getComponents = this.getComponents(), Input3 = _this$getComponents.Input;
        var _this$state4 = this.state, inputIsHidden = _this$state4.inputIsHidden, ariaSelection = _this$state4.ariaSelection;
        var commonProps = this.commonProps;
        var id2 = inputId || this.getElementId("input");
        var ariaAttributes = _objectSpread2(_objectSpread2(_objectSpread2({
          "aria-autocomplete": "list",
          "aria-expanded": menuIsOpen,
          "aria-haspopup": true,
          "aria-errormessage": this.props["aria-errormessage"],
          "aria-invalid": this.props["aria-invalid"],
          "aria-label": this.props["aria-label"],
          "aria-labelledby": this.props["aria-labelledby"],
          "aria-required": required,
          role: "combobox",
          "aria-activedescendant": this.isAppleDevice ? void 0 : this.state.focusedOptionId || ""
        }, menuIsOpen && {
          "aria-controls": this.getElementId("listbox")
        }), !isSearchable && {
          "aria-readonly": true
        }), this.hasValue() ? (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus" && {
          "aria-describedby": this.getElementId("live-region")
        } : {
          "aria-describedby": this.getElementId("placeholder")
        });
        if (!isSearchable) {
          return /* @__PURE__ */ reactExports.createElement(DummyInput, _extends$f({
            id: id2,
            innerRef: this.getInputRef,
            onBlur: this.onInputBlur,
            onChange: noop,
            onFocus: this.onInputFocus,
            disabled: isDisabled,
            tabIndex,
            inputMode: "none",
            form,
            value: ""
          }, ariaAttributes));
        }
        return /* @__PURE__ */ reactExports.createElement(Input3, _extends$f({}, commonProps, {
          autoCapitalize: "none",
          autoComplete: "off",
          autoCorrect: "off",
          id: id2,
          innerRef: this.getInputRef,
          isDisabled,
          isHidden: inputIsHidden,
          onBlur: this.onInputBlur,
          onChange: this.handleInputChange,
          onFocus: this.onInputFocus,
          spellCheck: "false",
          tabIndex,
          form,
          type: "text",
          value: inputValue
        }, ariaAttributes));
      }
    )
  }, {
    key: "renderPlaceholderOrValue",
    value: function renderPlaceholderOrValue() {
      var _this3 = this;
      var _this$getComponents2 = this.getComponents(), MultiValue3 = _this$getComponents2.MultiValue, MultiValueContainer2 = _this$getComponents2.MultiValueContainer, MultiValueLabel2 = _this$getComponents2.MultiValueLabel, MultiValueRemove2 = _this$getComponents2.MultiValueRemove, SingleValue3 = _this$getComponents2.SingleValue, Placeholder3 = _this$getComponents2.Placeholder;
      var commonProps = this.commonProps;
      var _this$props9 = this.props, controlShouldRenderValue = _this$props9.controlShouldRenderValue, isDisabled = _this$props9.isDisabled, isMulti = _this$props9.isMulti, inputValue = _this$props9.inputValue, placeholder = _this$props9.placeholder;
      var _this$state5 = this.state, selectValue = _this$state5.selectValue, focusedValue = _this$state5.focusedValue, isFocused = _this$state5.isFocused;
      if (!this.hasValue() || !controlShouldRenderValue) {
        return inputValue ? null : /* @__PURE__ */ reactExports.createElement(Placeholder3, _extends$f({}, commonProps, {
          key: "placeholder",
          isDisabled,
          isFocused,
          innerProps: {
            id: this.getElementId("placeholder")
          }
        }), placeholder);
      }
      if (isMulti) {
        return selectValue.map(function(opt, index2) {
          var isOptionFocused = opt === focusedValue;
          var key = "".concat(_this3.getOptionLabel(opt), "-").concat(_this3.getOptionValue(opt));
          return /* @__PURE__ */ reactExports.createElement(MultiValue3, _extends$f({}, commonProps, {
            components: {
              Container: MultiValueContainer2,
              Label: MultiValueLabel2,
              Remove: MultiValueRemove2
            },
            isFocused: isOptionFocused,
            isDisabled,
            key,
            index: index2,
            removeProps: {
              onClick: function onClick() {
                return _this3.removeValue(opt);
              },
              onTouchEnd: function onTouchEnd() {
                return _this3.removeValue(opt);
              },
              onMouseDown: function onMouseDown(e2) {
                e2.preventDefault();
              }
            },
            data: opt
          }), _this3.formatOptionLabel(opt, "value"));
        });
      }
      if (inputValue) {
        return null;
      }
      var singleValue = selectValue[0];
      return /* @__PURE__ */ reactExports.createElement(SingleValue3, _extends$f({}, commonProps, {
        data: singleValue,
        isDisabled
      }), this.formatOptionLabel(singleValue, "value"));
    }
  }, {
    key: "renderClearIndicator",
    value: function renderClearIndicator() {
      var _this$getComponents3 = this.getComponents(), ClearIndicator3 = _this$getComponents3.ClearIndicator;
      var commonProps = this.commonProps;
      var _this$props10 = this.props, isDisabled = _this$props10.isDisabled, isLoading = _this$props10.isLoading;
      var isFocused = this.state.isFocused;
      if (!this.isClearable() || !ClearIndicator3 || isDisabled || !this.hasValue() || isLoading) {
        return null;
      }
      var innerProps = {
        onMouseDown: this.onClearIndicatorMouseDown,
        onTouchEnd: this.onClearIndicatorTouchEnd,
        "aria-hidden": "true"
      };
      return /* @__PURE__ */ reactExports.createElement(ClearIndicator3, _extends$f({}, commonProps, {
        innerProps,
        isFocused
      }));
    }
  }, {
    key: "renderLoadingIndicator",
    value: function renderLoadingIndicator() {
      var _this$getComponents4 = this.getComponents(), LoadingIndicator3 = _this$getComponents4.LoadingIndicator;
      var commonProps = this.commonProps;
      var _this$props11 = this.props, isDisabled = _this$props11.isDisabled, isLoading = _this$props11.isLoading;
      var isFocused = this.state.isFocused;
      if (!LoadingIndicator3 || !isLoading)
        return null;
      var innerProps = {
        "aria-hidden": "true"
      };
      return /* @__PURE__ */ reactExports.createElement(LoadingIndicator3, _extends$f({}, commonProps, {
        innerProps,
        isDisabled,
        isFocused
      }));
    }
  }, {
    key: "renderIndicatorSeparator",
    value: function renderIndicatorSeparator() {
      var _this$getComponents5 = this.getComponents(), DropdownIndicator3 = _this$getComponents5.DropdownIndicator, IndicatorSeparator3 = _this$getComponents5.IndicatorSeparator;
      if (!DropdownIndicator3 || !IndicatorSeparator3)
        return null;
      var commonProps = this.commonProps;
      var isDisabled = this.props.isDisabled;
      var isFocused = this.state.isFocused;
      return /* @__PURE__ */ reactExports.createElement(IndicatorSeparator3, _extends$f({}, commonProps, {
        isDisabled,
        isFocused
      }));
    }
  }, {
    key: "renderDropdownIndicator",
    value: function renderDropdownIndicator() {
      var _this$getComponents6 = this.getComponents(), DropdownIndicator3 = _this$getComponents6.DropdownIndicator;
      if (!DropdownIndicator3)
        return null;
      var commonProps = this.commonProps;
      var isDisabled = this.props.isDisabled;
      var isFocused = this.state.isFocused;
      var innerProps = {
        onMouseDown: this.onDropdownIndicatorMouseDown,
        onTouchEnd: this.onDropdownIndicatorTouchEnd,
        "aria-hidden": "true"
      };
      return /* @__PURE__ */ reactExports.createElement(DropdownIndicator3, _extends$f({}, commonProps, {
        innerProps,
        isDisabled,
        isFocused
      }));
    }
  }, {
    key: "renderMenu",
    value: function renderMenu() {
      var _this4 = this;
      var _this$getComponents7 = this.getComponents(), Group3 = _this$getComponents7.Group, GroupHeading3 = _this$getComponents7.GroupHeading, Menu3 = _this$getComponents7.Menu, MenuList3 = _this$getComponents7.MenuList, MenuPortal3 = _this$getComponents7.MenuPortal, LoadingMessage3 = _this$getComponents7.LoadingMessage, NoOptionsMessage3 = _this$getComponents7.NoOptionsMessage, Option3 = _this$getComponents7.Option;
      var commonProps = this.commonProps;
      var focusedOption = this.state.focusedOption;
      var _this$props12 = this.props, captureMenuScroll = _this$props12.captureMenuScroll, inputValue = _this$props12.inputValue, isLoading = _this$props12.isLoading, loadingMessage2 = _this$props12.loadingMessage, minMenuHeight = _this$props12.minMenuHeight, maxMenuHeight = _this$props12.maxMenuHeight, menuIsOpen = _this$props12.menuIsOpen, menuPlacement = _this$props12.menuPlacement, menuPosition = _this$props12.menuPosition, menuPortalTarget = _this$props12.menuPortalTarget, menuShouldBlockScroll = _this$props12.menuShouldBlockScroll, menuShouldScrollIntoView = _this$props12.menuShouldScrollIntoView, noOptionsMessage2 = _this$props12.noOptionsMessage, onMenuScrollToTop = _this$props12.onMenuScrollToTop, onMenuScrollToBottom = _this$props12.onMenuScrollToBottom;
      if (!menuIsOpen)
        return null;
      var render = function render2(props, id2) {
        var type = props.type, data = props.data, isDisabled = props.isDisabled, isSelected = props.isSelected, label = props.label, value = props.value;
        var isFocused = focusedOption === data;
        var onHover = isDisabled ? void 0 : function() {
          return _this4.onOptionHover(data);
        };
        var onSelect = isDisabled ? void 0 : function() {
          return _this4.selectOption(data);
        };
        var optionId = "".concat(_this4.getElementId("option"), "-").concat(id2);
        var innerProps = {
          id: optionId,
          onClick: onSelect,
          onMouseMove: onHover,
          onMouseOver: onHover,
          tabIndex: -1,
          role: "option",
          "aria-selected": _this4.isAppleDevice ? void 0 : isSelected
          // is not supported on Apple devices
        };
        return /* @__PURE__ */ reactExports.createElement(Option3, _extends$f({}, commonProps, {
          innerProps,
          data,
          isDisabled,
          isSelected,
          key: optionId,
          label,
          type,
          value,
          isFocused,
          innerRef: isFocused ? _this4.getFocusedOptionRef : void 0
        }), _this4.formatOptionLabel(props.data, "menu"));
      };
      var menuUI;
      if (this.hasOptions()) {
        menuUI = this.getCategorizedOptions().map(function(item2) {
          if (item2.type === "group") {
            var _data = item2.data, options2 = item2.options, groupIndex = item2.index;
            var groupId = "".concat(_this4.getElementId("group"), "-").concat(groupIndex);
            var headingId = "".concat(groupId, "-heading");
            return /* @__PURE__ */ reactExports.createElement(Group3, _extends$f({}, commonProps, {
              key: groupId,
              data: _data,
              options: options2,
              Heading: GroupHeading3,
              headingProps: {
                id: headingId,
                data: item2.data
              },
              label: _this4.formatGroupLabel(item2.data)
            }), item2.options.map(function(option) {
              return render(option, "".concat(groupIndex, "-").concat(option.index));
            }));
          } else if (item2.type === "option") {
            return render(item2, "".concat(item2.index));
          }
        });
      } else if (isLoading) {
        var message = loadingMessage2({
          inputValue
        });
        if (message === null)
          return null;
        menuUI = /* @__PURE__ */ reactExports.createElement(LoadingMessage3, commonProps, message);
      } else {
        var _message = noOptionsMessage2({
          inputValue
        });
        if (_message === null)
          return null;
        menuUI = /* @__PURE__ */ reactExports.createElement(NoOptionsMessage3, commonProps, _message);
      }
      var menuPlacementProps = {
        minMenuHeight,
        maxMenuHeight,
        menuPlacement,
        menuPosition,
        menuShouldScrollIntoView
      };
      var menuElement = /* @__PURE__ */ reactExports.createElement(MenuPlacer, _extends$f({}, commonProps, menuPlacementProps), function(_ref4) {
        var ref = _ref4.ref, _ref4$placerProps = _ref4.placerProps, placement = _ref4$placerProps.placement, maxHeight = _ref4$placerProps.maxHeight;
        return /* @__PURE__ */ reactExports.createElement(Menu3, _extends$f({}, commonProps, menuPlacementProps, {
          innerRef: ref,
          innerProps: {
            onMouseDown: _this4.onMenuMouseDown,
            onMouseMove: _this4.onMenuMouseMove
          },
          isLoading,
          placement
        }), /* @__PURE__ */ reactExports.createElement(ScrollManager, {
          captureEnabled: captureMenuScroll,
          onTopArrive: onMenuScrollToTop,
          onBottomArrive: onMenuScrollToBottom,
          lockEnabled: menuShouldBlockScroll
        }, function(scrollTargetRef) {
          return /* @__PURE__ */ reactExports.createElement(MenuList3, _extends$f({}, commonProps, {
            innerRef: function innerRef(instance) {
              _this4.getMenuListRef(instance);
              scrollTargetRef(instance);
            },
            innerProps: {
              role: "listbox",
              "aria-multiselectable": commonProps.isMulti,
              id: _this4.getElementId("listbox")
            },
            isLoading,
            maxHeight,
            focusedOption
          }), menuUI);
        }));
      });
      return menuPortalTarget || menuPosition === "fixed" ? /* @__PURE__ */ reactExports.createElement(MenuPortal3, _extends$f({}, commonProps, {
        appendTo: menuPortalTarget,
        controlElement: this.controlRef,
        menuPlacement,
        menuPosition
      }), menuElement) : menuElement;
    }
  }, {
    key: "renderFormField",
    value: function renderFormField() {
      var _this5 = this;
      var _this$props13 = this.props, delimiter2 = _this$props13.delimiter, isDisabled = _this$props13.isDisabled, isMulti = _this$props13.isMulti, name = _this$props13.name, required = _this$props13.required;
      var selectValue = this.state.selectValue;
      if (required && !this.hasValue() && !isDisabled) {
        return /* @__PURE__ */ reactExports.createElement(RequiredInput$1, {
          name,
          onFocus: this.onValueInputFocus
        });
      }
      if (!name || isDisabled)
        return;
      if (isMulti) {
        if (delimiter2) {
          var value = selectValue.map(function(opt) {
            return _this5.getOptionValue(opt);
          }).join(delimiter2);
          return /* @__PURE__ */ reactExports.createElement("input", {
            name,
            type: "hidden",
            value
          });
        } else {
          var input2 = selectValue.length > 0 ? selectValue.map(function(opt, i) {
            return /* @__PURE__ */ reactExports.createElement("input", {
              key: "i-".concat(i),
              name,
              type: "hidden",
              value: _this5.getOptionValue(opt)
            });
          }) : /* @__PURE__ */ reactExports.createElement("input", {
            name,
            type: "hidden",
            value: ""
          });
          return /* @__PURE__ */ reactExports.createElement("div", null, input2);
        }
      } else {
        var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : "";
        return /* @__PURE__ */ reactExports.createElement("input", {
          name,
          type: "hidden",
          value: _value
        });
      }
    }
  }, {
    key: "renderLiveRegion",
    value: function renderLiveRegion() {
      var commonProps = this.commonProps;
      var _this$state6 = this.state, ariaSelection = _this$state6.ariaSelection, focusedOption = _this$state6.focusedOption, focusedValue = _this$state6.focusedValue, isFocused = _this$state6.isFocused, selectValue = _this$state6.selectValue;
      var focusableOptions = this.getFocusableOptions();
      return /* @__PURE__ */ reactExports.createElement(LiveRegion$1, _extends$f({}, commonProps, {
        id: this.getElementId("live-region"),
        ariaSelection,
        focusedOption,
        focusedValue,
        isFocused,
        selectValue,
        focusableOptions,
        isAppleDevice: this.isAppleDevice
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$getComponents8 = this.getComponents(), Control3 = _this$getComponents8.Control, IndicatorsContainer3 = _this$getComponents8.IndicatorsContainer, SelectContainer3 = _this$getComponents8.SelectContainer, ValueContainer3 = _this$getComponents8.ValueContainer;
      var _this$props14 = this.props, className = _this$props14.className, id2 = _this$props14.id, isDisabled = _this$props14.isDisabled, menuIsOpen = _this$props14.menuIsOpen;
      var isFocused = this.state.isFocused;
      var commonProps = this.commonProps = this.getCommonProps();
      return /* @__PURE__ */ reactExports.createElement(SelectContainer3, _extends$f({}, commonProps, {
        className,
        innerProps: {
          id: id2,
          onKeyDown: this.onKeyDown
        },
        isDisabled,
        isFocused
      }), this.renderLiveRegion(), /* @__PURE__ */ reactExports.createElement(Control3, _extends$f({}, commonProps, {
        innerRef: this.getControlRef,
        innerProps: {
          onMouseDown: this.onControlMouseDown,
          onTouchEnd: this.onControlTouchEnd
        },
        isDisabled,
        isFocused,
        menuIsOpen
      }), /* @__PURE__ */ reactExports.createElement(ValueContainer3, _extends$f({}, commonProps, {
        isDisabled
      }), this.renderPlaceholderOrValue(), this.renderInput()), /* @__PURE__ */ reactExports.createElement(IndicatorsContainer3, _extends$f({}, commonProps, {
        isDisabled
      }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state2) {
      var prevProps = state2.prevProps, clearFocusValueOnUpdate = state2.clearFocusValueOnUpdate, inputIsHiddenAfterUpdate = state2.inputIsHiddenAfterUpdate, ariaSelection = state2.ariaSelection, isFocused = state2.isFocused, prevWasFocused = state2.prevWasFocused, instancePrefix = state2.instancePrefix;
      var options2 = props.options, value = props.value, menuIsOpen = props.menuIsOpen, inputValue = props.inputValue, isMulti = props.isMulti;
      var selectValue = cleanValue(value);
      var newMenuOptionsState = {};
      if (prevProps && (value !== prevProps.value || options2 !== prevProps.options || menuIsOpen !== prevProps.menuIsOpen || inputValue !== prevProps.inputValue)) {
        var focusableOptions = menuIsOpen ? buildFocusableOptions(props, selectValue) : [];
        var focusableOptionsWithIds = menuIsOpen ? buildFocusableOptionsWithIds(buildCategorizedOptions(props, selectValue), "".concat(instancePrefix, "-option")) : [];
        var focusedValue = clearFocusValueOnUpdate ? getNextFocusedValue(state2, selectValue) : null;
        var focusedOption = getNextFocusedOption(state2, focusableOptions);
        var focusedOptionId = getFocusedOptionId(focusableOptionsWithIds, focusedOption);
        newMenuOptionsState = {
          selectValue,
          focusedOption,
          focusedOptionId,
          focusableOptionsWithIds,
          focusedValue,
          clearFocusValueOnUpdate: false
        };
      }
      var newInputIsHiddenState = inputIsHiddenAfterUpdate != null && props !== prevProps ? {
        inputIsHidden: inputIsHiddenAfterUpdate,
        inputIsHiddenAfterUpdate: void 0
      } : {};
      var newAriaSelection = ariaSelection;
      var hasKeptFocus = isFocused && prevWasFocused;
      if (isFocused && !hasKeptFocus) {
        newAriaSelection = {
          value: valueTernary(isMulti, selectValue, selectValue[0] || null),
          options: selectValue,
          action: "initial-input-focus"
        };
        hasKeptFocus = !prevWasFocused;
      }
      if ((ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus") {
        newAriaSelection = null;
      }
      return _objectSpread2(_objectSpread2(_objectSpread2({}, newMenuOptionsState), newInputIsHiddenState), {}, {
        prevProps: props,
        ariaSelection: newAriaSelection,
        prevWasFocused: hasKeptFocus
      });
    }
  }]);
  return Select2;
}(reactExports.Component);
Select.defaultProps = defaultProps;
var StateManagedSelect = /* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
  var baseSelectProps = useStateManager(props);
  return /* @__PURE__ */ reactExports.createElement(Select, _extends$f({
    ref
  }, baseSelectProps));
});
var StateManagedSelect$1 = StateManagedSelect;
const FilingStatuses = [
  { value: "single", label: "Single" },
  { value: "mfj", label: "Married Filing Jointly" }
];
const FilingDropdown = ({ onChange: onChange2 }) => {
  const [selectedOption, setSelectedOption] = React.useState(FilingStatuses[0]);
  const customStyles = {
    control: () => ({
      backgroundColor: "#f5f5f5",
      borderColor: "#e0e0e0",
      boxShadow: "none",
      justifyContent: "center",
      display: "flex",
      alignItems: "center",
      ...inputStyle$1
    }),
    menu: (provided) => ({
      ...provided,
      color: "#333",
      cursor: "pointer"
    }),
    singleValue: (provided) => ({
      ...provided,
      color: "#333",
      textAlign: "center",
      display: "flex",
      alignItems: "center"
    }),
    option: (provided) => ({
      ...provided,
      color: "#333",
      cursor: "pointer",
      textAlign: "center",
      display: "flex",
      alignItems: "center"
    })
  };
  const handleOptionChange = (event) => {
    onChange2(event);
    setSelectedOption(event.target);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { style: inputDivStyle, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { style: labelStyle, children: "Filing Status" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      StateManagedSelect$1,
      {
        value: selectedOption,
        onChange: handleOptionChange,
        options: FilingStatuses,
        styles: customStyles
      }
    )
  ] });
};
const CheckboxControl = ({ label, checked, onChange: onChange2 }) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { textAlign: "left" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
  /* @__PURE__ */ jsxRuntimeExports.jsx("input", { type: "checkbox", checked, onChange: onChange2 }),
  label
] }) });
const Calculator = () => {
  const [income, setIncome] = reactExports.useState(75e3);
  const [filingStatus, setFilingStatus] = reactExports.useState(FilingStatuses[0]);
  const [includeSS, setIncludeSS] = reactExports.useState(true);
  const [includeFederalIncome, setIncludeFederalIncome] = reactExports.useState(true);
  const [showMarginalFederalRate, setShowMarginalFederalRate] = reactExports.useState(true);
  const [showTakehomePay, setShowTakehomePay] = reactExports.useState(true);
  const [includeMedicare, setIncludeMedicare] = reactExports.useState(true);
  const [includeStandardDeductions, setIncludeStandardDeductions] = reactExports.useState(true);
  const config2 = reactExports.useMemo(
    () => ({
      includeSS,
      includeFederalIncome,
      showMarginalFederalRate,
      showTakehomePay,
      includeMedicare,
      includeStandardDeductions
    }),
    [
      includeSS,
      includeFederalIncome,
      showMarginalFederalRate,
      showTakehomePay,
      includeMedicare,
      includeStandardDeductions
    ]
  );
  reactExports.useEffect(() => {
    setTaxData(getTaxData(income, filingStatus, config2));
  }, [
    filingStatus,
    income,
    config2
  ]);
  const [taxData2, setTaxData] = reactExports.useState(() => getTaxData(income, filingStatus, config2));
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { children: "Welcome to Historical Tax Rate Simulator" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { style: { textAlign: "left" }, children: "Have you ever wondered what your current income would be taxed, at historical periods? By entering an income and selecting a filing status, you can see how much you would have been taxed based on historical tax brackets if those brackets were inflation adjusted." }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(InputBox, { defaultValue: income, label: "2024 Income", setIncome }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(FilingDropdown, { value: filingStatus, onChange: setFilingStatus }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      CheckboxControl,
      {
        label: "Include Social Security?",
        checked: includeSS,
        onChange: () => {
          setIncludeSS(!includeSS);
        }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      CheckboxControl,
      {
        label: "Include Medicare?",
        checked: includeMedicare,
        onChange: () => {
          setIncludeMedicare(!includeMedicare);
        }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      CheckboxControl,
      {
        label: "Include Federal Income?",
        checked: includeFederalIncome,
        onChange: () => {
          setIncludeFederalIncome(!includeFederalIncome);
        }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      CheckboxControl,
      {
        label: "Show Marginal Federal Rate?",
        checked: showMarginalFederalRate,
        onChange: () => {
          setShowMarginalFederalRate(!showMarginalFederalRate);
        }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      CheckboxControl,
      {
        label: "Show Takehome Pay?",
        checked: showTakehomePay,
        onChange: () => {
          setShowTakehomePay(!showTakehomePay);
        }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      CheckboxControl,
      {
        label: "Include Standard Deductions/Exemptions?",
        checked: includeStandardDeductions,
        onChange: () => {
          setIncludeStandardDeductions(!includeStandardDeductions);
        }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      TaxChart,
      {
        taxData: taxData2,
        income,
        filingStatus,
        config: config2
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(TaxDataTable, { config: config2, income, globalTaxData: taxData2 })
  ] });
};
const App = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Navbar, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Routes, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Calculator, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/faq", element: /* @__PURE__ */ jsxRuntimeExports.jsx(FAQ, {}) })
    ] })
  ] });
};
client.createRoot(document.getElementById("root")).render(
  /* @__PURE__ */ jsxRuntimeExports.jsx(React.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(HashRouter, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) }) })
);
